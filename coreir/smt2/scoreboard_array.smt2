(set-logic QF_ABV)
(declare-fun f.mem.wen_AT0 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT0 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT0 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT0 () (_ BitVec 3))
(declare-fun self.data_out_AT0 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT0 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT0 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT0 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT0 () (_ BitVec 3))
(declare-fun f.mem.clk_AT0 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT0 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT0 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT0 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT0 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT0 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT0 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT0 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT0 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT0 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT0 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT0 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT0 () (_ BitVec 1))
(declare-fun not_en.in_AT0 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT0 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT0 () (_ BitVec 1))
(declare-fun en.in_AT0 () (_ BitVec 1))
(declare-fun en.clk_AT0 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT0 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT0 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT0 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT0 () (_ BitVec 4))
(declare-fun f.mem.array_AT0 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun self.pop_AT0 () (_ BitVec 1))
(declare-fun self.empty_AT0 () (_ BitVec 1))
(declare-fun self.push_AT0 () (_ BitVec 1))
(declare-fun self.full_AT0 () (_ BitVec 1))
(declare-fun self.rst_AT0 () (_ BitVec 1))
(declare-fun _-_state_id_-__AT0 () (_ BitVec 2))
(declare-fun f.wrPtr.out_AT0 () (_ BitVec 4))
(declare-fun f.fullEq_1.in1_AT0 () (_ BitVec 1))
(declare-fun f.rdPtr.out_AT0 () (_ BitVec 4))
(declare-fun f.fullEq_1.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT0 () (_ BitVec 1))
(declare-fun en.out_AT0 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT0 () (_ BitVec 1))
(declare-fun self.start_AT0 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT0 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT0 () (_ BitVec 1))
(declare-fun self.prop_signal_AT0 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT0 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT0 () (_ BitVec 1))
(declare-fun magic_packet.init_AT0 () (_ BitVec 8))
(declare-fun self.data_out_vld_AT0 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT0 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT0 () (_ BitVec 1))
(declare-fun mp_en.out_AT0 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT0 () (_ BitVec 1))
(declare-fun en.init_AT0 () (_ BitVec 1))
(declare-fun self.data_in_AT0 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT0 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT0 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT0 () (_ BitVec 1))
(declare-fun zero.out_AT0 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT0 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.one.out_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT0 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT0 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT0 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT0 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT0 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT0 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT0 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT0 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt.out_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT0 () (_ BitVec 4))
(declare-fun self.clk_AT0 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT0 () (_ BitVec 1))
(declare-fun not_en.out_AT0 () (_ BitVec 1))
(declare-fun mp_en.in1_AT0 () (_ BitVec 1))
(declare-fun start_and_push.out_AT0 () (_ BitVec 1))
(declare-fun mp_en.in0_AT0 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT0 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT0 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT0 () (_ BitVec 8))
(declare-fun magic_packet.out_AT0 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT0 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT0 () (_ BitVec 8))
(declare-fun magic_packet.in_AT0 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT0 () (_ BitVec 1))
(declare-fun f.zero.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT0 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT0 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT0 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT0 () (_ BitVec 4))
(declare-fun f.one.out_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT0 () (_ BitVec 4))

(assert (=> (= self.empty_AT0 #b1) (= self.pop_AT0 #b0)))
(assert (=> (= self.full_AT0 #b1) (= self.push_AT0 #b0)))
(assert (=> (= _-_state_id_-__AT0 #b10) (and true (= self.rst_AT0 #b0))))
(assert (=> (= _-_state_id_-__AT0 #b01) (and (and (and true (= self.rst_AT0 #b1)) (= self.push_AT0 #b0)) (= self.pop_AT0 #b0))))
(assert (=> (= _-_state_id_-__AT0 #b00) (and (and (and true (= self.rst_AT0 #b1)) (= self.push_AT0 #b0)) (= self.pop_AT0 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT0 ((_ extract 3 3) f.wrPtr.out_AT0)))
(assert (= f.fullEq_1.in0_AT0 ((_ extract 3 3) f.rdPtr.out_AT0)))
(assert (= en.out_AT0 mpt.not_captured.in_AT0))
(assert (= self.start_AT0 start_and_push.in0_AT0))
(assert (= self.push_AT0 start_and_push.in1_AT0))
(assert (= self.push_AT0 mpt.ssa_cnt_and1.in1_AT0))
(assert (= self.prop_signal_AT0 prop_signal_or.out_AT0))
(assert (= self.pop_AT0 mpt.next_cnt_and1.in1_AT0))
(assert (= self.full_AT0 f.fullCalc.out_AT0))
(assert (= self.data_out_vld_AT0 data_out_vld_and2.out_AT0))
(assert (= not_data_out_vld.out_AT0 prop_signal_or.in0_AT0))
(assert (= next_magic_packet.sel_AT0 mp_en.out_AT0))
(assert (= next_magic_packet.in1_AT0 self.data_in_AT0))
(assert (= next_cnt_eq0.out_AT0 data_out_vld_and2.in1_AT0))
(assert (= next_cnt_eq0.in1_AT0 zero.out_AT0))
(assert (= mpt.ssa_cnt_gt_0.out_AT0 mpt.next_cnt_and1.in0_AT0))
(assert (= mpt.ssa_cnt_gt_0.in1_AT0 mpt.zero.out_AT0))
(assert (= mpt.ssa_cnt_and1.out_AT0 mpt.ssa_cnt_and2.in0_AT0))
(assert (= mpt.ssa_cnt.sel_AT0 mpt.ssa_cnt_and2.out_AT0))
(assert (= mpt.ssa_cnt.out_AT0 mpt.ssa_cnt_m1.in0_AT0))
(assert (= mpt.ssa_cnt.out_AT0 mpt.ssa_cnt_gt_0.in0_AT0))
(assert (= mpt.one.out_AT0 mpt.ssa_cnt_m1.in1_AT0))
(assert (= mpt.not_captured.out_AT0 mpt.ssa_cnt_and2.in1_AT0))
(assert (= mpt.next_cnt.sel_AT0 self.rst_AT0))
(assert (= mpt.next_cnt.out_AT0 next_cnt_eq0.in0_AT0))
(assert (= mpt.next_cnt.in1_AT0 mpt.zero.out_AT0))
(assert (= mpt.decr_mux.sel_AT0 mpt.next_cnt_and1.out_AT0))
(assert (= mpt.decr_mux.out_AT0 mpt.next_cnt.in0_AT0))
(assert (= mpt.decr_mux.in1_AT0 mpt.ssa_cnt_m1.out_AT0))
(assert (= mpt.decr_mux.in0_AT0 mpt.ssa_cnt.out_AT0))
(assert (= mpt.cnt_p1.out_AT0 mpt.ssa_cnt.in1_AT0))
(assert (= mpt.cnt_p1.in1_AT0 mpt.one.out_AT0))
(assert (= mpt.cnt_lt_depth.out_AT0 mpt.ssa_cnt_and1.in0_AT0))
(assert (= mpt.cnt_lt_depth.in1_AT0 mpt.depth.out_AT0))
(assert (= mpt.cnt.out_AT0 mpt.ssa_cnt.in0_AT0))
(assert (= mpt.cnt.out_AT0 mpt.cnt_p1.in0_AT0))
(assert (= mpt.cnt.out_AT0 mpt.cnt_lt_depth.in0_AT0))
(assert (= mpt.cnt.in_AT0 mpt.next_cnt.out_AT0))
(assert (= mpt.cnt.clk_AT0 self.clk_AT0))
(assert (= mp_en.in1_AT0 not_en.out_AT0))
(assert (= mp_en.in0_AT0 start_and_push.out_AT0))
(assert (= magic_packet_eq.out_AT0 prop_signal_or.in1_AT0))
(assert (= magic_packet.out_AT0 next_magic_packet.in0_AT0))
(assert (= magic_packet.out_AT0 magic_packet_eq.in0_AT0))
(assert (= magic_packet.in_AT0 next_magic_packet.out_AT0))
(assert (= magic_packet.clk_AT0 self.clk_AT0))
(assert (= f.wrPtrRst.sel_AT0 self.rst_AT0))
(assert (= f.wrPtrRst.in1_AT0 f.zero.out_AT0))
(assert (= f.wrPtrEn.sel_AT0 self.push_AT0))
(assert (= f.wrPtrEn.out_AT0 f.wrPtrRst.in0_AT0))
(assert (= f.wrPtrEn.in1_AT0 f.wrPtrp1.out_AT0))
(assert (= f.wrPtr.out_AT0 f.wrPtrp1.in1_AT0))
(assert (= f.wrPtr.out_AT0 f.wrPtrSlice.in_AT0))
(assert (= f.wrPtr.out_AT0 f.wrPtrEn.in0_AT0))
(assert (= f.wrPtr.in_AT0 f.wrPtrRst.out_AT0))
(assert (= f.wrPtr.clk_AT0 self.clk_AT0))
(assert (= f.rdPtrRst.sel_AT0 self.rst_AT0))
(assert (= f.rdPtrRst.in1_AT0 f.zero.out_AT0))
(assert (= f.rdPtrEn.sel_AT0 self.pop_AT0))
(assert (= f.rdPtrEn.out_AT0 f.rdPtrRst.in0_AT0))
(assert (= f.rdPtrEn.in1_AT0 f.rdPtrp1.out_AT0))
(assert (= f.rdPtr.out_AT0 f.rdPtrp1.in1_AT0))
(assert (= f.rdPtr.out_AT0 f.rdPtrSlice.in_AT0))
(assert (= f.rdPtr.out_AT0 f.rdPtrEn.in0_AT0))
(assert (= f.rdPtr.in_AT0 f.rdPtrRst.out_AT0))
(assert (= f.rdPtr.clk_AT0 self.clk_AT0))
(assert (= f.one.out_AT0 f.wrPtrp1.in0_AT0))
(assert (= f.one.out_AT0 f.rdPtrp1.in0_AT0))
(assert (= f.mem.wen_AT0 self.push_AT0))
(assert (= f.mem.wdata_AT0 self.data_in_AT0))
(assert (= f.mem.waddr_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.mem.rdata_AT0 self.data_out_AT0))
(assert (= f.mem.rdata_AT0 magic_packet_eq.in1_AT0))
(assert (= f.mem.raddr_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.mem.clk_AT0 self.clk_AT0))
(assert (= f.fullEq_2.out_AT0 f.fullCalc.in1_AT0))
(assert (= f.fullEq_2.in1_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.fullEq_2.in0_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.fullEq_1.out_AT0 f.notfullEq_1.in_AT0))
(assert (= f.fullCalc.in0_AT0 f.notfullEq_1.out_AT0))
(assert (= f.emptyEq.out_AT0 self.empty_AT0))
(assert (= f.emptyEq.in1_AT0 f.wrPtr.out_AT0))
(assert (= f.emptyEq.in0_AT0 f.rdPtr.out_AT0))
(assert (= en_or_sp.in1_AT0 start_and_push.out_AT0))
(assert (= en.out_AT0 not_en.in_AT0))
(assert (= en.out_AT0 en_or_sp.in0_AT0))
(assert (= en.in_AT0 en_or_sp.out_AT0))
(assert (= en.clk_AT0 self.clk_AT0))
(assert (= data_out_vld_and2.out_AT0 not_data_out_vld.in_AT0))
(assert (= data_out_vld_and1.out_AT0 data_out_vld_and2.in0_AT0))
(assert (= data_out_vld_and1.in0_AT0 en.out_AT0))
(assert (= cnt_gt_0.out_AT0 data_out_vld_and1.in1_AT0))
(assert (= cnt_gt_0.in1_AT0 zero.out_AT0))
(assert (= cnt_gt_0.in0_AT0 mpt.cnt.out_AT0))
(assert (= self.clk_AT0 #b0))
(assert (= zero.out_AT0 #b0000))
(assert (= (bvand start_and_push.in0_AT0 start_and_push.in1_AT0) start_and_push.out_AT0))
(assert (= (bvor prop_signal_or.in0_AT0 prop_signal_or.in1_AT0) prop_signal_or.out_AT0))
(assert (= (bvnot not_en.in_AT0) not_en.out_AT0))
(assert (= (bvnot not_data_out_vld.in_AT0) not_data_out_vld.out_AT0))
(assert (=> (= next_magic_packet.sel_AT0 #b1) (= next_magic_packet.in1_AT0 next_magic_packet.out_AT0)))
(assert (=> (= next_magic_packet.sel_AT0 #b0) (= next_magic_packet.in0_AT0 next_magic_packet.out_AT0)))
(assert (=> (not (= next_cnt_eq0.in0_AT0 next_cnt_eq0.in1_AT0)) (= next_cnt_eq0.out_AT0 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT0 next_cnt_eq0.in1_AT0) (= next_cnt_eq0.out_AT0 #b1)))
(assert (= mpt.zero.out_AT0 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT0 mpt.ssa_cnt_m1.in1_AT0) mpt.ssa_cnt_m1.out_AT0))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT0 mpt.ssa_cnt_gt_0.in0_AT0) (= mpt.ssa_cnt_gt_0.out_AT0 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT0 mpt.ssa_cnt_and2.in1_AT0) mpt.ssa_cnt_and2.out_AT0))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT0 mpt.ssa_cnt_and1.in1_AT0) mpt.ssa_cnt_and1.out_AT0))
(assert (=> (= mpt.ssa_cnt.sel_AT0 #b1) (= mpt.ssa_cnt.in1_AT0 mpt.ssa_cnt.out_AT0)))
(assert (=> (= mpt.ssa_cnt.sel_AT0 #b0) (= mpt.ssa_cnt.in0_AT0 mpt.ssa_cnt.out_AT0)))
(assert (= mpt.one.out_AT0 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT0) mpt.not_captured.out_AT0))
(assert (= (bvand mpt.next_cnt_and1.in0_AT0 mpt.next_cnt_and1.in1_AT0) mpt.next_cnt_and1.out_AT0))
(assert (=> (= mpt.next_cnt.sel_AT0 #b1) (= mpt.next_cnt.in1_AT0 mpt.next_cnt.out_AT0)))
(assert (=> (= mpt.next_cnt.sel_AT0 #b0) (= mpt.next_cnt.in0_AT0 mpt.next_cnt.out_AT0)))
(assert (= mpt.depth.out_AT0 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT0 #b1) (= mpt.decr_mux.in1_AT0 mpt.decr_mux.out_AT0)))
(assert (=> (= mpt.decr_mux.sel_AT0 #b0) (= mpt.decr_mux.in0_AT0 mpt.decr_mux.out_AT0)))
(assert (= (bvadd mpt.cnt_p1.in0_AT0 mpt.cnt_p1.in1_AT0) mpt.cnt_p1.out_AT0))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT0 mpt.cnt_lt_depth.in1_AT0) (= mpt.cnt_lt_depth.out_AT0 #b1)))
(assert (= (bvand mp_en.in0_AT0 mp_en.in1_AT0) mp_en.out_AT0))
(assert (=> (not (= magic_packet_eq.in0_AT0 magic_packet_eq.in1_AT0)) (= magic_packet_eq.out_AT0 #b0)))
(assert (=> (= magic_packet_eq.in0_AT0 magic_packet_eq.in1_AT0) (= magic_packet_eq.out_AT0 #b1)))
(assert (= f.zero.out_AT0 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT0 f.wrPtrp1.in1_AT0) f.wrPtrp1.out_AT0))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT0) f.wrPtrSlice.out_AT0))
(assert (=> (= f.wrPtrRst.sel_AT0 #b1) (= f.wrPtrRst.in1_AT0 f.wrPtrRst.out_AT0)))
(assert (=> (= f.wrPtrRst.sel_AT0 #b0) (= f.wrPtrRst.in0_AT0 f.wrPtrRst.out_AT0)))
(assert (=> (= f.wrPtrEn.sel_AT0 #b1) (= f.wrPtrEn.in1_AT0 f.wrPtrEn.out_AT0)))
(assert (=> (= f.wrPtrEn.sel_AT0 #b0) (= f.wrPtrEn.in0_AT0 f.wrPtrEn.out_AT0)))
(assert (= (bvadd f.rdPtrp1.in0_AT0 f.rdPtrp1.in1_AT0) f.rdPtrp1.out_AT0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT0) f.rdPtrSlice.out_AT0))
(assert (=> (= f.rdPtrRst.sel_AT0 #b1) (= f.rdPtrRst.in1_AT0 f.rdPtrRst.out_AT0)))
(assert (=> (= f.rdPtrRst.sel_AT0 #b0) (= f.rdPtrRst.in0_AT0 f.rdPtrRst.out_AT0)))
(assert (=> (= f.rdPtrEn.sel_AT0 #b1) (= f.rdPtrEn.in1_AT0 f.rdPtrEn.out_AT0)))
(assert (=> (= f.rdPtrEn.sel_AT0 #b0) (= f.rdPtrEn.in0_AT0 f.rdPtrEn.out_AT0)))
(assert (= f.one.out_AT0 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT0) f.notfullEq_1.out_AT0))
(assert (= f.mem.rdata_AT0 (select f.mem.array_AT0 f.mem.raddr_AT0)))
(assert (=> (not (= f.fullEq_2.in0_AT0 f.fullEq_2.in1_AT0)) (= f.fullEq_2.out_AT0 #b0)))
(assert (=> (= f.fullEq_2.in0_AT0 f.fullEq_2.in1_AT0) (= f.fullEq_2.out_AT0 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT0 f.fullEq_1.in1_AT0)) (= f.fullEq_1.out_AT0 #b0)))
(assert (=> (= f.fullEq_1.in0_AT0 f.fullEq_1.in1_AT0) (= f.fullEq_1.out_AT0 #b1)))
(assert (= (bvand f.fullCalc.in0_AT0 f.fullCalc.in1_AT0) f.fullCalc.out_AT0))
(assert (=> (not (= f.emptyEq.in0_AT0 f.emptyEq.in1_AT0)) (= f.emptyEq.out_AT0 #b0)))
(assert (=> (= f.emptyEq.in0_AT0 f.emptyEq.in1_AT0) (= f.emptyEq.out_AT0 #b1)))
(assert (= (bvor en_or_sp.in0_AT0 en_or_sp.in1_AT0) en_or_sp.out_AT0))
(assert (= (bvand data_out_vld_and2.in0_AT0 data_out_vld_and2.in1_AT0) data_out_vld_and2.out_AT0))
(assert (= (bvand data_out_vld_and1.in0_AT0 data_out_vld_and1.in1_AT0) data_out_vld_and1.out_AT0))
(assert (= (bvult cnt_gt_0.in1_AT0 cnt_gt_0.in0_AT0) (= cnt_gt_0.out_AT0 #b1)))
(assert (= _-_state_id_-__AT0 #b00))
(assert (= self.pop_AT0 #b0))
(assert (= self.push_AT0 #b0))
(assert (= self.rst_AT0 #b1))
(assert (= mpt.cnt.out_AT0 #b0000))
(assert (= magic_packet.out_AT0 magic_packet.init_AT0))
(assert (= f.wrPtr.out_AT0 #b0000))
(assert (= f.rdPtr.out_AT0 #b0000))
(assert (= en.out_AT0 en.init_AT0))
(push 1)

(assert (not (= self.prop_signal_AT0 #b1)))
(check-sat)

(pop 1)
(declare-fun f.fullEq_1.in1_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT1 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT1 () (_ BitVec 1))
(declare-fun self.start_AT1 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT1 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT1 () (_ BitVec 1))
(declare-fun self.prop_signal_AT1 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT1 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT1 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT1 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT1 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT1 () (_ BitVec 1))
(declare-fun mp_en.out_AT1 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT1 () (_ BitVec 1))
(declare-fun self.data_in_AT1 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT1 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT1 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT1 () (_ BitVec 1))
(declare-fun zero.out_AT1 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT1 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.one.out_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT1 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT1 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT1 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT1 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT1 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT1 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT1 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT1 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT1 () (_ BitVec 4))
(declare-fun self.clk_AT1 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT1 () (_ BitVec 1))
(declare-fun not_en.out_AT1 () (_ BitVec 1))
(declare-fun mp_en.in1_AT1 () (_ BitVec 1))
(declare-fun start_and_push.out_AT1 () (_ BitVec 1))
(declare-fun mp_en.in0_AT1 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT1 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT1 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT1 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT1 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT1 () (_ BitVec 8))
(declare-fun magic_packet.in_AT1 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT1 () (_ BitVec 1))
(declare-fun f.zero.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT1 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT1 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT1 () (_ BitVec 4))
(declare-fun f.one.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT1 () (_ BitVec 4))
(declare-fun f.mem.wen_AT1 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT1 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT1 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT1 () (_ BitVec 3))
(declare-fun self.data_out_AT1 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT1 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT1 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT1 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT1 () (_ BitVec 3))
(declare-fun f.mem.clk_AT1 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT1 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT1 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT1 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT1 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT1 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT1 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT1 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT1 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT1 () (_ BitVec 1))
(declare-fun not_en.in_AT1 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT1 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT1 () (_ BitVec 1))
(declare-fun en.in_AT1 () (_ BitVec 1))
(declare-fun en.clk_AT1 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT1 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT1 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT1 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT1 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT1 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT1 () (_ BitVec 4))
(declare-fun magic_packet.out_AT1 () (_ BitVec 8))
(declare-fun magic_packet.init_AT1 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT1 () (_ BitVec 4))
(declare-fun f.mem.array_AT1 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT1 () (_ BitVec 1))
(declare-fun en.out_AT1 () (_ BitVec 1))
(declare-fun self.pop_AT1 () (_ BitVec 1))
(declare-fun self.empty_AT1 () (_ BitVec 1))
(declare-fun self.push_AT1 () (_ BitVec 1))
(declare-fun self.full_AT1 () (_ BitVec 1))
(declare-fun self.rst_AT1 () (_ BitVec 1))

(assert (=> (= self.empty_AT1 #b1) (= self.pop_AT1 #b0)))
(assert (=> (= self.full_AT1 #b1) (= self.push_AT1 #b0)))
(assert (=> (= _-_state_id_-__AT1 #b10) (and true (= self.rst_AT1 #b0))))
(assert (=> (= _-_state_id_-__AT1 #b01) (and (and (and true (= self.rst_AT1 #b1)) (= self.push_AT1 #b0)) (= self.pop_AT1 #b0))))
(assert (=> (= _-_state_id_-__AT1 #b00) (and (and (and true (= self.rst_AT1 #b1)) (= self.push_AT1 #b0)) (= self.pop_AT1 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT1 ((_ extract 3 3) f.wrPtr.out_AT1)))
(assert (= f.fullEq_1.in0_AT1 ((_ extract 3 3) f.rdPtr.out_AT1)))
(assert (= en.out_AT1 mpt.not_captured.in_AT1))
(assert (= self.start_AT1 start_and_push.in0_AT1))
(assert (= self.push_AT1 start_and_push.in1_AT1))
(assert (= self.push_AT1 mpt.ssa_cnt_and1.in1_AT1))
(assert (= self.prop_signal_AT1 prop_signal_or.out_AT1))
(assert (= self.pop_AT1 mpt.next_cnt_and1.in1_AT1))
(assert (= self.full_AT1 f.fullCalc.out_AT1))
(assert (= self.data_out_vld_AT1 data_out_vld_and2.out_AT1))
(assert (= not_data_out_vld.out_AT1 prop_signal_or.in0_AT1))
(assert (= next_magic_packet.sel_AT1 mp_en.out_AT1))
(assert (= next_magic_packet.in1_AT1 self.data_in_AT1))
(assert (= next_cnt_eq0.out_AT1 data_out_vld_and2.in1_AT1))
(assert (= next_cnt_eq0.in1_AT1 zero.out_AT1))
(assert (= mpt.ssa_cnt_gt_0.out_AT1 mpt.next_cnt_and1.in0_AT1))
(assert (= mpt.ssa_cnt_gt_0.in1_AT1 mpt.zero.out_AT1))
(assert (= mpt.ssa_cnt_and1.out_AT1 mpt.ssa_cnt_and2.in0_AT1))
(assert (= mpt.ssa_cnt.sel_AT1 mpt.ssa_cnt_and2.out_AT1))
(assert (= mpt.ssa_cnt.out_AT1 mpt.ssa_cnt_m1.in0_AT1))
(assert (= mpt.ssa_cnt.out_AT1 mpt.ssa_cnt_gt_0.in0_AT1))
(assert (= mpt.one.out_AT1 mpt.ssa_cnt_m1.in1_AT1))
(assert (= mpt.not_captured.out_AT1 mpt.ssa_cnt_and2.in1_AT1))
(assert (= mpt.next_cnt.sel_AT1 self.rst_AT1))
(assert (= mpt.next_cnt.out_AT1 next_cnt_eq0.in0_AT1))
(assert (= mpt.next_cnt.in1_AT1 mpt.zero.out_AT1))
(assert (= mpt.decr_mux.sel_AT1 mpt.next_cnt_and1.out_AT1))
(assert (= mpt.decr_mux.out_AT1 mpt.next_cnt.in0_AT1))
(assert (= mpt.decr_mux.in1_AT1 mpt.ssa_cnt_m1.out_AT1))
(assert (= mpt.decr_mux.in0_AT1 mpt.ssa_cnt.out_AT1))
(assert (= mpt.cnt_p1.out_AT1 mpt.ssa_cnt.in1_AT1))
(assert (= mpt.cnt_p1.in1_AT1 mpt.one.out_AT1))
(assert (= mpt.cnt_lt_depth.out_AT1 mpt.ssa_cnt_and1.in0_AT1))
(assert (= mpt.cnt_lt_depth.in1_AT1 mpt.depth.out_AT1))
(assert (= mpt.cnt.out_AT1 mpt.ssa_cnt.in0_AT1))
(assert (= mpt.cnt.out_AT1 mpt.cnt_p1.in0_AT1))
(assert (= mpt.cnt.out_AT1 mpt.cnt_lt_depth.in0_AT1))
(assert (= mpt.cnt.in_AT1 mpt.next_cnt.out_AT1))
(assert (= mpt.cnt.clk_AT1 self.clk_AT1))
(assert (= mp_en.in1_AT1 not_en.out_AT1))
(assert (= mp_en.in0_AT1 start_and_push.out_AT1))
(assert (= magic_packet_eq.out_AT1 prop_signal_or.in1_AT1))
(assert (= magic_packet.out_AT1 next_magic_packet.in0_AT1))
(assert (= magic_packet.out_AT1 magic_packet_eq.in0_AT1))
(assert (= magic_packet.in_AT1 next_magic_packet.out_AT1))
(assert (= magic_packet.clk_AT1 self.clk_AT1))
(assert (= f.wrPtrRst.sel_AT1 self.rst_AT1))
(assert (= f.wrPtrRst.in1_AT1 f.zero.out_AT1))
(assert (= f.wrPtrEn.sel_AT1 self.push_AT1))
(assert (= f.wrPtrEn.out_AT1 f.wrPtrRst.in0_AT1))
(assert (= f.wrPtrEn.in1_AT1 f.wrPtrp1.out_AT1))
(assert (= f.wrPtr.out_AT1 f.wrPtrp1.in1_AT1))
(assert (= f.wrPtr.out_AT1 f.wrPtrSlice.in_AT1))
(assert (= f.wrPtr.out_AT1 f.wrPtrEn.in0_AT1))
(assert (= f.wrPtr.in_AT1 f.wrPtrRst.out_AT1))
(assert (= f.wrPtr.clk_AT1 self.clk_AT1))
(assert (= f.rdPtrRst.sel_AT1 self.rst_AT1))
(assert (= f.rdPtrRst.in1_AT1 f.zero.out_AT1))
(assert (= f.rdPtrEn.sel_AT1 self.pop_AT1))
(assert (= f.rdPtrEn.out_AT1 f.rdPtrRst.in0_AT1))
(assert (= f.rdPtrEn.in1_AT1 f.rdPtrp1.out_AT1))
(assert (= f.rdPtr.out_AT1 f.rdPtrp1.in1_AT1))
(assert (= f.rdPtr.out_AT1 f.rdPtrSlice.in_AT1))
(assert (= f.rdPtr.out_AT1 f.rdPtrEn.in0_AT1))
(assert (= f.rdPtr.in_AT1 f.rdPtrRst.out_AT1))
(assert (= f.rdPtr.clk_AT1 self.clk_AT1))
(assert (= f.one.out_AT1 f.wrPtrp1.in0_AT1))
(assert (= f.one.out_AT1 f.rdPtrp1.in0_AT1))
(assert (= f.mem.wen_AT1 self.push_AT1))
(assert (= f.mem.wdata_AT1 self.data_in_AT1))
(assert (= f.mem.waddr_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.mem.rdata_AT1 self.data_out_AT1))
(assert (= f.mem.rdata_AT1 magic_packet_eq.in1_AT1))
(assert (= f.mem.raddr_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.mem.clk_AT1 self.clk_AT1))
(assert (= f.fullEq_2.out_AT1 f.fullCalc.in1_AT1))
(assert (= f.fullEq_2.in1_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.fullEq_2.in0_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.fullEq_1.out_AT1 f.notfullEq_1.in_AT1))
(assert (= f.fullCalc.in0_AT1 f.notfullEq_1.out_AT1))
(assert (= f.emptyEq.out_AT1 self.empty_AT1))
(assert (= f.emptyEq.in1_AT1 f.wrPtr.out_AT1))
(assert (= f.emptyEq.in0_AT1 f.rdPtr.out_AT1))
(assert (= en_or_sp.in1_AT1 start_and_push.out_AT1))
(assert (= en.out_AT1 not_en.in_AT1))
(assert (= en.out_AT1 en_or_sp.in0_AT1))
(assert (= en.in_AT1 en_or_sp.out_AT1))
(assert (= en.clk_AT1 self.clk_AT1))
(assert (= data_out_vld_and2.out_AT1 not_data_out_vld.in_AT1))
(assert (= data_out_vld_and1.out_AT1 data_out_vld_and2.in0_AT1))
(assert (= data_out_vld_and1.in0_AT1 en.out_AT1))
(assert (= cnt_gt_0.out_AT1 data_out_vld_and1.in1_AT1))
(assert (= cnt_gt_0.in1_AT1 zero.out_AT1))
(assert (= cnt_gt_0.in0_AT1 mpt.cnt.out_AT1))
(assert (= self.clk_AT1 #b0))
(assert (= zero.out_AT1 #b0000))
(assert (= (bvand start_and_push.in0_AT1 start_and_push.in1_AT1) start_and_push.out_AT1))
(assert (= (bvor prop_signal_or.in0_AT1 prop_signal_or.in1_AT1) prop_signal_or.out_AT1))
(assert (= (bvnot not_en.in_AT1) not_en.out_AT1))
(assert (= (bvnot not_data_out_vld.in_AT1) not_data_out_vld.out_AT1))
(assert (=> (= next_magic_packet.sel_AT1 #b1) (= next_magic_packet.in1_AT1 next_magic_packet.out_AT1)))
(assert (=> (= next_magic_packet.sel_AT1 #b0) (= next_magic_packet.in0_AT1 next_magic_packet.out_AT1)))
(assert (=> (not (= next_cnt_eq0.in0_AT1 next_cnt_eq0.in1_AT1)) (= next_cnt_eq0.out_AT1 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT1 next_cnt_eq0.in1_AT1) (= next_cnt_eq0.out_AT1 #b1)))
(assert (= mpt.zero.out_AT1 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT1 mpt.ssa_cnt_m1.in1_AT1) mpt.ssa_cnt_m1.out_AT1))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT1 mpt.ssa_cnt_gt_0.in0_AT1) (= mpt.ssa_cnt_gt_0.out_AT1 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT1 mpt.ssa_cnt_and2.in1_AT1) mpt.ssa_cnt_and2.out_AT1))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT1 mpt.ssa_cnt_and1.in1_AT1) mpt.ssa_cnt_and1.out_AT1))
(assert (=> (= mpt.ssa_cnt.sel_AT1 #b1) (= mpt.ssa_cnt.in1_AT1 mpt.ssa_cnt.out_AT1)))
(assert (=> (= mpt.ssa_cnt.sel_AT1 #b0) (= mpt.ssa_cnt.in0_AT1 mpt.ssa_cnt.out_AT1)))
(assert (= mpt.one.out_AT1 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT1) mpt.not_captured.out_AT1))
(assert (= (bvand mpt.next_cnt_and1.in0_AT1 mpt.next_cnt_and1.in1_AT1) mpt.next_cnt_and1.out_AT1))
(assert (=> (= mpt.next_cnt.sel_AT1 #b1) (= mpt.next_cnt.in1_AT1 mpt.next_cnt.out_AT1)))
(assert (=> (= mpt.next_cnt.sel_AT1 #b0) (= mpt.next_cnt.in0_AT1 mpt.next_cnt.out_AT1)))
(assert (= mpt.depth.out_AT1 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT1 #b1) (= mpt.decr_mux.in1_AT1 mpt.decr_mux.out_AT1)))
(assert (=> (= mpt.decr_mux.sel_AT1 #b0) (= mpt.decr_mux.in0_AT1 mpt.decr_mux.out_AT1)))
(assert (= (bvadd mpt.cnt_p1.in0_AT1 mpt.cnt_p1.in1_AT1) mpt.cnt_p1.out_AT1))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT1 mpt.cnt_lt_depth.in1_AT1) (= mpt.cnt_lt_depth.out_AT1 #b1)))
(assert (= (bvand mp_en.in0_AT1 mp_en.in1_AT1) mp_en.out_AT1))
(assert (=> (not (= magic_packet_eq.in0_AT1 magic_packet_eq.in1_AT1)) (= magic_packet_eq.out_AT1 #b0)))
(assert (=> (= magic_packet_eq.in0_AT1 magic_packet_eq.in1_AT1) (= magic_packet_eq.out_AT1 #b1)))
(assert (= f.zero.out_AT1 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT1 f.wrPtrp1.in1_AT1) f.wrPtrp1.out_AT1))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT1) f.wrPtrSlice.out_AT1))
(assert (=> (= f.wrPtrRst.sel_AT1 #b1) (= f.wrPtrRst.in1_AT1 f.wrPtrRst.out_AT1)))
(assert (=> (= f.wrPtrRst.sel_AT1 #b0) (= f.wrPtrRst.in0_AT1 f.wrPtrRst.out_AT1)))
(assert (=> (= f.wrPtrEn.sel_AT1 #b1) (= f.wrPtrEn.in1_AT1 f.wrPtrEn.out_AT1)))
(assert (=> (= f.wrPtrEn.sel_AT1 #b0) (= f.wrPtrEn.in0_AT1 f.wrPtrEn.out_AT1)))
(assert (= (bvadd f.rdPtrp1.in0_AT1 f.rdPtrp1.in1_AT1) f.rdPtrp1.out_AT1))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT1) f.rdPtrSlice.out_AT1))
(assert (=> (= f.rdPtrRst.sel_AT1 #b1) (= f.rdPtrRst.in1_AT1 f.rdPtrRst.out_AT1)))
(assert (=> (= f.rdPtrRst.sel_AT1 #b0) (= f.rdPtrRst.in0_AT1 f.rdPtrRst.out_AT1)))
(assert (=> (= f.rdPtrEn.sel_AT1 #b1) (= f.rdPtrEn.in1_AT1 f.rdPtrEn.out_AT1)))
(assert (=> (= f.rdPtrEn.sel_AT1 #b0) (= f.rdPtrEn.in0_AT1 f.rdPtrEn.out_AT1)))
(assert (= f.one.out_AT1 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT1) f.notfullEq_1.out_AT1))
(assert (= f.mem.rdata_AT1 (select f.mem.array_AT1 f.mem.raddr_AT1)))
(assert (=> (not (= f.fullEq_2.in0_AT1 f.fullEq_2.in1_AT1)) (= f.fullEq_2.out_AT1 #b0)))
(assert (=> (= f.fullEq_2.in0_AT1 f.fullEq_2.in1_AT1) (= f.fullEq_2.out_AT1 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT1 f.fullEq_1.in1_AT1)) (= f.fullEq_1.out_AT1 #b0)))
(assert (=> (= f.fullEq_1.in0_AT1 f.fullEq_1.in1_AT1) (= f.fullEq_1.out_AT1 #b1)))
(assert (= (bvand f.fullCalc.in0_AT1 f.fullCalc.in1_AT1) f.fullCalc.out_AT1))
(assert (=> (not (= f.emptyEq.in0_AT1 f.emptyEq.in1_AT1)) (= f.emptyEq.out_AT1 #b0)))
(assert (=> (= f.emptyEq.in0_AT1 f.emptyEq.in1_AT1) (= f.emptyEq.out_AT1 #b1)))
(assert (= (bvor en_or_sp.in0_AT1 en_or_sp.in1_AT1) en_or_sp.out_AT1))
(assert (= (bvand data_out_vld_and2.in0_AT1 data_out_vld_and2.in1_AT1) data_out_vld_and2.out_AT1))
(assert (= (bvand data_out_vld_and1.in0_AT1 data_out_vld_and1.in1_AT1) data_out_vld_and1.out_AT1))
(assert (= (bvult cnt_gt_0.in1_AT1 cnt_gt_0.in0_AT1) (= cnt_gt_0.out_AT1 #b1)))
(assert (=> (= _-_state_id_-__AT0 #b10) (= _-_state_id_-__AT1 #b10)))
(assert (=> (= _-_state_id_-__AT0 #b01) (= _-_state_id_-__AT1 #b10)))
(assert (=> (= _-_state_id_-__AT0 #b00) (= _-_state_id_-__AT1 #b01)))
(assert (= mpt.cnt.in_AT0 mpt.cnt.out_AT1))
(assert (= magic_packet.in_AT0 magic_packet.out_AT1))
(assert (= magic_packet.init_AT0 magic_packet.init_AT1))
(assert (= f.wrPtr.in_AT0 f.wrPtr.out_AT1))
(assert (= f.rdPtr.in_AT0 f.rdPtr.out_AT1))
(assert (= f.mem.array_AT1 (ite (= f.mem.wen_AT0 #b1) (store f.mem.array_AT0 f.mem.waddr_AT0 f.mem.wdata_AT0) f.mem.array_AT0)))
(assert (= en.init_AT0 en.init_AT1))
(assert (= en.in_AT0 en.out_AT1))
(push 1)

(assert (not (= self.prop_signal_AT1 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT2 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT2 () (_ BitVec 4))
(declare-fun magic_packet.out_AT2 () (_ BitVec 8))
(declare-fun magic_packet.init_AT2 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT2 () (_ BitVec 4))
(declare-fun f.mem.array_AT2 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT2 () (_ BitVec 1))
(declare-fun en.out_AT2 () (_ BitVec 1))
(declare-fun self.pop_AT2 () (_ BitVec 1))
(declare-fun self.empty_AT2 () (_ BitVec 1))
(declare-fun self.push_AT2 () (_ BitVec 1))
(declare-fun self.full_AT2 () (_ BitVec 1))
(declare-fun self.rst_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT2 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT2 () (_ BitVec 1))
(declare-fun self.start_AT2 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT2 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT2 () (_ BitVec 1))
(declare-fun self.prop_signal_AT2 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT2 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT2 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT2 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT2 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT2 () (_ BitVec 1))
(declare-fun mp_en.out_AT2 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT2 () (_ BitVec 1))
(declare-fun self.data_in_AT2 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT2 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT2 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT2 () (_ BitVec 1))
(declare-fun zero.out_AT2 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT2 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.one.out_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT2 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT2 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT2 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT2 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT2 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT2 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT2 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT2 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT2 () (_ BitVec 4))
(declare-fun self.clk_AT2 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT2 () (_ BitVec 1))
(declare-fun not_en.out_AT2 () (_ BitVec 1))
(declare-fun mp_en.in1_AT2 () (_ BitVec 1))
(declare-fun start_and_push.out_AT2 () (_ BitVec 1))
(declare-fun mp_en.in0_AT2 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT2 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT2 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT2 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT2 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT2 () (_ BitVec 8))
(declare-fun magic_packet.in_AT2 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT2 () (_ BitVec 1))
(declare-fun f.zero.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT2 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT2 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT2 () (_ BitVec 4))
(declare-fun f.one.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT2 () (_ BitVec 4))
(declare-fun f.mem.wen_AT2 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT2 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT2 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT2 () (_ BitVec 3))
(declare-fun self.data_out_AT2 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT2 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT2 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT2 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT2 () (_ BitVec 3))
(declare-fun f.mem.clk_AT2 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT2 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT2 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT2 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT2 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT2 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT2 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT2 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT2 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT2 () (_ BitVec 1))
(declare-fun not_en.in_AT2 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT2 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT2 () (_ BitVec 1))
(declare-fun en.in_AT2 () (_ BitVec 1))
(declare-fun en.clk_AT2 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT2 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT2 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT2 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT2 () (_ BitVec 4))

(assert (=> (= self.empty_AT2 #b1) (= self.pop_AT2 #b0)))
(assert (=> (= self.full_AT2 #b1) (= self.push_AT2 #b0)))
(assert (=> (= _-_state_id_-__AT2 #b10) (and true (= self.rst_AT2 #b0))))
(assert (=> (= _-_state_id_-__AT2 #b01) (and (and (and true (= self.rst_AT2 #b1)) (= self.push_AT2 #b0)) (= self.pop_AT2 #b0))))
(assert (=> (= _-_state_id_-__AT2 #b00) (and (and (and true (= self.rst_AT2 #b1)) (= self.push_AT2 #b0)) (= self.pop_AT2 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT2 ((_ extract 3 3) f.wrPtr.out_AT2)))
(assert (= f.fullEq_1.in0_AT2 ((_ extract 3 3) f.rdPtr.out_AT2)))
(assert (= en.out_AT2 mpt.not_captured.in_AT2))
(assert (= self.start_AT2 start_and_push.in0_AT2))
(assert (= self.push_AT2 start_and_push.in1_AT2))
(assert (= self.push_AT2 mpt.ssa_cnt_and1.in1_AT2))
(assert (= self.prop_signal_AT2 prop_signal_or.out_AT2))
(assert (= self.pop_AT2 mpt.next_cnt_and1.in1_AT2))
(assert (= self.full_AT2 f.fullCalc.out_AT2))
(assert (= self.data_out_vld_AT2 data_out_vld_and2.out_AT2))
(assert (= not_data_out_vld.out_AT2 prop_signal_or.in0_AT2))
(assert (= next_magic_packet.sel_AT2 mp_en.out_AT2))
(assert (= next_magic_packet.in1_AT2 self.data_in_AT2))
(assert (= next_cnt_eq0.out_AT2 data_out_vld_and2.in1_AT2))
(assert (= next_cnt_eq0.in1_AT2 zero.out_AT2))
(assert (= mpt.ssa_cnt_gt_0.out_AT2 mpt.next_cnt_and1.in0_AT2))
(assert (= mpt.ssa_cnt_gt_0.in1_AT2 mpt.zero.out_AT2))
(assert (= mpt.ssa_cnt_and1.out_AT2 mpt.ssa_cnt_and2.in0_AT2))
(assert (= mpt.ssa_cnt.sel_AT2 mpt.ssa_cnt_and2.out_AT2))
(assert (= mpt.ssa_cnt.out_AT2 mpt.ssa_cnt_m1.in0_AT2))
(assert (= mpt.ssa_cnt.out_AT2 mpt.ssa_cnt_gt_0.in0_AT2))
(assert (= mpt.one.out_AT2 mpt.ssa_cnt_m1.in1_AT2))
(assert (= mpt.not_captured.out_AT2 mpt.ssa_cnt_and2.in1_AT2))
(assert (= mpt.next_cnt.sel_AT2 self.rst_AT2))
(assert (= mpt.next_cnt.out_AT2 next_cnt_eq0.in0_AT2))
(assert (= mpt.next_cnt.in1_AT2 mpt.zero.out_AT2))
(assert (= mpt.decr_mux.sel_AT2 mpt.next_cnt_and1.out_AT2))
(assert (= mpt.decr_mux.out_AT2 mpt.next_cnt.in0_AT2))
(assert (= mpt.decr_mux.in1_AT2 mpt.ssa_cnt_m1.out_AT2))
(assert (= mpt.decr_mux.in0_AT2 mpt.ssa_cnt.out_AT2))
(assert (= mpt.cnt_p1.out_AT2 mpt.ssa_cnt.in1_AT2))
(assert (= mpt.cnt_p1.in1_AT2 mpt.one.out_AT2))
(assert (= mpt.cnt_lt_depth.out_AT2 mpt.ssa_cnt_and1.in0_AT2))
(assert (= mpt.cnt_lt_depth.in1_AT2 mpt.depth.out_AT2))
(assert (= mpt.cnt.out_AT2 mpt.ssa_cnt.in0_AT2))
(assert (= mpt.cnt.out_AT2 mpt.cnt_p1.in0_AT2))
(assert (= mpt.cnt.out_AT2 mpt.cnt_lt_depth.in0_AT2))
(assert (= mpt.cnt.in_AT2 mpt.next_cnt.out_AT2))
(assert (= mpt.cnt.clk_AT2 self.clk_AT2))
(assert (= mp_en.in1_AT2 not_en.out_AT2))
(assert (= mp_en.in0_AT2 start_and_push.out_AT2))
(assert (= magic_packet_eq.out_AT2 prop_signal_or.in1_AT2))
(assert (= magic_packet.out_AT2 next_magic_packet.in0_AT2))
(assert (= magic_packet.out_AT2 magic_packet_eq.in0_AT2))
(assert (= magic_packet.in_AT2 next_magic_packet.out_AT2))
(assert (= magic_packet.clk_AT2 self.clk_AT2))
(assert (= f.wrPtrRst.sel_AT2 self.rst_AT2))
(assert (= f.wrPtrRst.in1_AT2 f.zero.out_AT2))
(assert (= f.wrPtrEn.sel_AT2 self.push_AT2))
(assert (= f.wrPtrEn.out_AT2 f.wrPtrRst.in0_AT2))
(assert (= f.wrPtrEn.in1_AT2 f.wrPtrp1.out_AT2))
(assert (= f.wrPtr.out_AT2 f.wrPtrp1.in1_AT2))
(assert (= f.wrPtr.out_AT2 f.wrPtrSlice.in_AT2))
(assert (= f.wrPtr.out_AT2 f.wrPtrEn.in0_AT2))
(assert (= f.wrPtr.in_AT2 f.wrPtrRst.out_AT2))
(assert (= f.wrPtr.clk_AT2 self.clk_AT2))
(assert (= f.rdPtrRst.sel_AT2 self.rst_AT2))
(assert (= f.rdPtrRst.in1_AT2 f.zero.out_AT2))
(assert (= f.rdPtrEn.sel_AT2 self.pop_AT2))
(assert (= f.rdPtrEn.out_AT2 f.rdPtrRst.in0_AT2))
(assert (= f.rdPtrEn.in1_AT2 f.rdPtrp1.out_AT2))
(assert (= f.rdPtr.out_AT2 f.rdPtrp1.in1_AT2))
(assert (= f.rdPtr.out_AT2 f.rdPtrSlice.in_AT2))
(assert (= f.rdPtr.out_AT2 f.rdPtrEn.in0_AT2))
(assert (= f.rdPtr.in_AT2 f.rdPtrRst.out_AT2))
(assert (= f.rdPtr.clk_AT2 self.clk_AT2))
(assert (= f.one.out_AT2 f.wrPtrp1.in0_AT2))
(assert (= f.one.out_AT2 f.rdPtrp1.in0_AT2))
(assert (= f.mem.wen_AT2 self.push_AT2))
(assert (= f.mem.wdata_AT2 self.data_in_AT2))
(assert (= f.mem.waddr_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.mem.rdata_AT2 self.data_out_AT2))
(assert (= f.mem.rdata_AT2 magic_packet_eq.in1_AT2))
(assert (= f.mem.raddr_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.mem.clk_AT2 self.clk_AT2))
(assert (= f.fullEq_2.out_AT2 f.fullCalc.in1_AT2))
(assert (= f.fullEq_2.in1_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.fullEq_2.in0_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.fullEq_1.out_AT2 f.notfullEq_1.in_AT2))
(assert (= f.fullCalc.in0_AT2 f.notfullEq_1.out_AT2))
(assert (= f.emptyEq.out_AT2 self.empty_AT2))
(assert (= f.emptyEq.in1_AT2 f.wrPtr.out_AT2))
(assert (= f.emptyEq.in0_AT2 f.rdPtr.out_AT2))
(assert (= en_or_sp.in1_AT2 start_and_push.out_AT2))
(assert (= en.out_AT2 not_en.in_AT2))
(assert (= en.out_AT2 en_or_sp.in0_AT2))
(assert (= en.in_AT2 en_or_sp.out_AT2))
(assert (= en.clk_AT2 self.clk_AT2))
(assert (= data_out_vld_and2.out_AT2 not_data_out_vld.in_AT2))
(assert (= data_out_vld_and1.out_AT2 data_out_vld_and2.in0_AT2))
(assert (= data_out_vld_and1.in0_AT2 en.out_AT2))
(assert (= cnt_gt_0.out_AT2 data_out_vld_and1.in1_AT2))
(assert (= cnt_gt_0.in1_AT2 zero.out_AT2))
(assert (= cnt_gt_0.in0_AT2 mpt.cnt.out_AT2))
(assert (= self.clk_AT2 #b0))
(assert (= zero.out_AT2 #b0000))
(assert (= (bvand start_and_push.in0_AT2 start_and_push.in1_AT2) start_and_push.out_AT2))
(assert (= (bvor prop_signal_or.in0_AT2 prop_signal_or.in1_AT2) prop_signal_or.out_AT2))
(assert (= (bvnot not_en.in_AT2) not_en.out_AT2))
(assert (= (bvnot not_data_out_vld.in_AT2) not_data_out_vld.out_AT2))
(assert (=> (= next_magic_packet.sel_AT2 #b1) (= next_magic_packet.in1_AT2 next_magic_packet.out_AT2)))
(assert (=> (= next_magic_packet.sel_AT2 #b0) (= next_magic_packet.in0_AT2 next_magic_packet.out_AT2)))
(assert (=> (not (= next_cnt_eq0.in0_AT2 next_cnt_eq0.in1_AT2)) (= next_cnt_eq0.out_AT2 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT2 next_cnt_eq0.in1_AT2) (= next_cnt_eq0.out_AT2 #b1)))
(assert (= mpt.zero.out_AT2 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT2 mpt.ssa_cnt_m1.in1_AT2) mpt.ssa_cnt_m1.out_AT2))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT2 mpt.ssa_cnt_gt_0.in0_AT2) (= mpt.ssa_cnt_gt_0.out_AT2 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT2 mpt.ssa_cnt_and2.in1_AT2) mpt.ssa_cnt_and2.out_AT2))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT2 mpt.ssa_cnt_and1.in1_AT2) mpt.ssa_cnt_and1.out_AT2))
(assert (=> (= mpt.ssa_cnt.sel_AT2 #b1) (= mpt.ssa_cnt.in1_AT2 mpt.ssa_cnt.out_AT2)))
(assert (=> (= mpt.ssa_cnt.sel_AT2 #b0) (= mpt.ssa_cnt.in0_AT2 mpt.ssa_cnt.out_AT2)))
(assert (= mpt.one.out_AT2 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT2) mpt.not_captured.out_AT2))
(assert (= (bvand mpt.next_cnt_and1.in0_AT2 mpt.next_cnt_and1.in1_AT2) mpt.next_cnt_and1.out_AT2))
(assert (=> (= mpt.next_cnt.sel_AT2 #b1) (= mpt.next_cnt.in1_AT2 mpt.next_cnt.out_AT2)))
(assert (=> (= mpt.next_cnt.sel_AT2 #b0) (= mpt.next_cnt.in0_AT2 mpt.next_cnt.out_AT2)))
(assert (= mpt.depth.out_AT2 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT2 #b1) (= mpt.decr_mux.in1_AT2 mpt.decr_mux.out_AT2)))
(assert (=> (= mpt.decr_mux.sel_AT2 #b0) (= mpt.decr_mux.in0_AT2 mpt.decr_mux.out_AT2)))
(assert (= (bvadd mpt.cnt_p1.in0_AT2 mpt.cnt_p1.in1_AT2) mpt.cnt_p1.out_AT2))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT2 mpt.cnt_lt_depth.in1_AT2) (= mpt.cnt_lt_depth.out_AT2 #b1)))
(assert (= (bvand mp_en.in0_AT2 mp_en.in1_AT2) mp_en.out_AT2))
(assert (=> (not (= magic_packet_eq.in0_AT2 magic_packet_eq.in1_AT2)) (= magic_packet_eq.out_AT2 #b0)))
(assert (=> (= magic_packet_eq.in0_AT2 magic_packet_eq.in1_AT2) (= magic_packet_eq.out_AT2 #b1)))
(assert (= f.zero.out_AT2 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT2 f.wrPtrp1.in1_AT2) f.wrPtrp1.out_AT2))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT2) f.wrPtrSlice.out_AT2))
(assert (=> (= f.wrPtrRst.sel_AT2 #b1) (= f.wrPtrRst.in1_AT2 f.wrPtrRst.out_AT2)))
(assert (=> (= f.wrPtrRst.sel_AT2 #b0) (= f.wrPtrRst.in0_AT2 f.wrPtrRst.out_AT2)))
(assert (=> (= f.wrPtrEn.sel_AT2 #b1) (= f.wrPtrEn.in1_AT2 f.wrPtrEn.out_AT2)))
(assert (=> (= f.wrPtrEn.sel_AT2 #b0) (= f.wrPtrEn.in0_AT2 f.wrPtrEn.out_AT2)))
(assert (= (bvadd f.rdPtrp1.in0_AT2 f.rdPtrp1.in1_AT2) f.rdPtrp1.out_AT2))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT2) f.rdPtrSlice.out_AT2))
(assert (=> (= f.rdPtrRst.sel_AT2 #b1) (= f.rdPtrRst.in1_AT2 f.rdPtrRst.out_AT2)))
(assert (=> (= f.rdPtrRst.sel_AT2 #b0) (= f.rdPtrRst.in0_AT2 f.rdPtrRst.out_AT2)))
(assert (=> (= f.rdPtrEn.sel_AT2 #b1) (= f.rdPtrEn.in1_AT2 f.rdPtrEn.out_AT2)))
(assert (=> (= f.rdPtrEn.sel_AT2 #b0) (= f.rdPtrEn.in0_AT2 f.rdPtrEn.out_AT2)))
(assert (= f.one.out_AT2 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT2) f.notfullEq_1.out_AT2))
(assert (= f.mem.rdata_AT2 (select f.mem.array_AT2 f.mem.raddr_AT2)))
(assert (=> (not (= f.fullEq_2.in0_AT2 f.fullEq_2.in1_AT2)) (= f.fullEq_2.out_AT2 #b0)))
(assert (=> (= f.fullEq_2.in0_AT2 f.fullEq_2.in1_AT2) (= f.fullEq_2.out_AT2 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT2 f.fullEq_1.in1_AT2)) (= f.fullEq_1.out_AT2 #b0)))
(assert (=> (= f.fullEq_1.in0_AT2 f.fullEq_1.in1_AT2) (= f.fullEq_1.out_AT2 #b1)))
(assert (= (bvand f.fullCalc.in0_AT2 f.fullCalc.in1_AT2) f.fullCalc.out_AT2))
(assert (=> (not (= f.emptyEq.in0_AT2 f.emptyEq.in1_AT2)) (= f.emptyEq.out_AT2 #b0)))
(assert (=> (= f.emptyEq.in0_AT2 f.emptyEq.in1_AT2) (= f.emptyEq.out_AT2 #b1)))
(assert (= (bvor en_or_sp.in0_AT2 en_or_sp.in1_AT2) en_or_sp.out_AT2))
(assert (= (bvand data_out_vld_and2.in0_AT2 data_out_vld_and2.in1_AT2) data_out_vld_and2.out_AT2))
(assert (= (bvand data_out_vld_and1.in0_AT2 data_out_vld_and1.in1_AT2) data_out_vld_and1.out_AT2))
(assert (= (bvult cnt_gt_0.in1_AT2 cnt_gt_0.in0_AT2) (= cnt_gt_0.out_AT2 #b1)))
(assert (=> (= _-_state_id_-__AT1 #b10) (= _-_state_id_-__AT2 #b10)))
(assert (=> (= _-_state_id_-__AT1 #b01) (= _-_state_id_-__AT2 #b10)))
(assert (=> (= _-_state_id_-__AT1 #b00) (= _-_state_id_-__AT2 #b01)))
(assert (= mpt.cnt.in_AT1 mpt.cnt.out_AT2))
(assert (= magic_packet.in_AT1 magic_packet.out_AT2))
(assert (= magic_packet.init_AT1 magic_packet.init_AT2))
(assert (= f.wrPtr.in_AT1 f.wrPtr.out_AT2))
(assert (= f.rdPtr.in_AT1 f.rdPtr.out_AT2))
(assert (= f.mem.array_AT2 (ite (= f.mem.wen_AT1 #b1) (store f.mem.array_AT1 f.mem.waddr_AT1 f.mem.wdata_AT1) f.mem.array_AT1)))
(assert (= en.init_AT1 en.init_AT2))
(assert (= en.in_AT1 en.out_AT2))
(push 1)

(assert (not (= self.prop_signal_AT2 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT3 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT3 () (_ BitVec 4))
(declare-fun magic_packet.out_AT3 () (_ BitVec 8))
(declare-fun magic_packet.init_AT3 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT3 () (_ BitVec 4))
(declare-fun f.mem.array_AT3 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT3 () (_ BitVec 1))
(declare-fun en.out_AT3 () (_ BitVec 1))
(declare-fun self.pop_AT3 () (_ BitVec 1))
(declare-fun self.empty_AT3 () (_ BitVec 1))
(declare-fun self.push_AT3 () (_ BitVec 1))
(declare-fun self.full_AT3 () (_ BitVec 1))
(declare-fun self.rst_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT3 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT3 () (_ BitVec 1))
(declare-fun self.start_AT3 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT3 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT3 () (_ BitVec 1))
(declare-fun self.prop_signal_AT3 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT3 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT3 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT3 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT3 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT3 () (_ BitVec 1))
(declare-fun mp_en.out_AT3 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT3 () (_ BitVec 1))
(declare-fun self.data_in_AT3 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT3 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT3 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT3 () (_ BitVec 1))
(declare-fun zero.out_AT3 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT3 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.one.out_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT3 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT3 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT3 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT3 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT3 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT3 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT3 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT3 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT3 () (_ BitVec 4))
(declare-fun self.clk_AT3 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT3 () (_ BitVec 1))
(declare-fun not_en.out_AT3 () (_ BitVec 1))
(declare-fun mp_en.in1_AT3 () (_ BitVec 1))
(declare-fun start_and_push.out_AT3 () (_ BitVec 1))
(declare-fun mp_en.in0_AT3 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT3 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT3 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT3 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT3 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT3 () (_ BitVec 8))
(declare-fun magic_packet.in_AT3 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT3 () (_ BitVec 1))
(declare-fun f.zero.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT3 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT3 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT3 () (_ BitVec 4))
(declare-fun f.one.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT3 () (_ BitVec 4))
(declare-fun f.mem.wen_AT3 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT3 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT3 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT3 () (_ BitVec 3))
(declare-fun self.data_out_AT3 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT3 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT3 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT3 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT3 () (_ BitVec 3))
(declare-fun f.mem.clk_AT3 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT3 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT3 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT3 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT3 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT3 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT3 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT3 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT3 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT3 () (_ BitVec 1))
(declare-fun not_en.in_AT3 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT3 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT3 () (_ BitVec 1))
(declare-fun en.in_AT3 () (_ BitVec 1))
(declare-fun en.clk_AT3 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT3 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT3 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT3 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT3 () (_ BitVec 4))

(assert (=> (= self.empty_AT3 #b1) (= self.pop_AT3 #b0)))
(assert (=> (= self.full_AT3 #b1) (= self.push_AT3 #b0)))
(assert (=> (= _-_state_id_-__AT3 #b10) (and true (= self.rst_AT3 #b0))))
(assert (=> (= _-_state_id_-__AT3 #b01) (and (and (and true (= self.rst_AT3 #b1)) (= self.push_AT3 #b0)) (= self.pop_AT3 #b0))))
(assert (=> (= _-_state_id_-__AT3 #b00) (and (and (and true (= self.rst_AT3 #b1)) (= self.push_AT3 #b0)) (= self.pop_AT3 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT3 ((_ extract 3 3) f.wrPtr.out_AT3)))
(assert (= f.fullEq_1.in0_AT3 ((_ extract 3 3) f.rdPtr.out_AT3)))
(assert (= en.out_AT3 mpt.not_captured.in_AT3))
(assert (= self.start_AT3 start_and_push.in0_AT3))
(assert (= self.push_AT3 start_and_push.in1_AT3))
(assert (= self.push_AT3 mpt.ssa_cnt_and1.in1_AT3))
(assert (= self.prop_signal_AT3 prop_signal_or.out_AT3))
(assert (= self.pop_AT3 mpt.next_cnt_and1.in1_AT3))
(assert (= self.full_AT3 f.fullCalc.out_AT3))
(assert (= self.data_out_vld_AT3 data_out_vld_and2.out_AT3))
(assert (= not_data_out_vld.out_AT3 prop_signal_or.in0_AT3))
(assert (= next_magic_packet.sel_AT3 mp_en.out_AT3))
(assert (= next_magic_packet.in1_AT3 self.data_in_AT3))
(assert (= next_cnt_eq0.out_AT3 data_out_vld_and2.in1_AT3))
(assert (= next_cnt_eq0.in1_AT3 zero.out_AT3))
(assert (= mpt.ssa_cnt_gt_0.out_AT3 mpt.next_cnt_and1.in0_AT3))
(assert (= mpt.ssa_cnt_gt_0.in1_AT3 mpt.zero.out_AT3))
(assert (= mpt.ssa_cnt_and1.out_AT3 mpt.ssa_cnt_and2.in0_AT3))
(assert (= mpt.ssa_cnt.sel_AT3 mpt.ssa_cnt_and2.out_AT3))
(assert (= mpt.ssa_cnt.out_AT3 mpt.ssa_cnt_m1.in0_AT3))
(assert (= mpt.ssa_cnt.out_AT3 mpt.ssa_cnt_gt_0.in0_AT3))
(assert (= mpt.one.out_AT3 mpt.ssa_cnt_m1.in1_AT3))
(assert (= mpt.not_captured.out_AT3 mpt.ssa_cnt_and2.in1_AT3))
(assert (= mpt.next_cnt.sel_AT3 self.rst_AT3))
(assert (= mpt.next_cnt.out_AT3 next_cnt_eq0.in0_AT3))
(assert (= mpt.next_cnt.in1_AT3 mpt.zero.out_AT3))
(assert (= mpt.decr_mux.sel_AT3 mpt.next_cnt_and1.out_AT3))
(assert (= mpt.decr_mux.out_AT3 mpt.next_cnt.in0_AT3))
(assert (= mpt.decr_mux.in1_AT3 mpt.ssa_cnt_m1.out_AT3))
(assert (= mpt.decr_mux.in0_AT3 mpt.ssa_cnt.out_AT3))
(assert (= mpt.cnt_p1.out_AT3 mpt.ssa_cnt.in1_AT3))
(assert (= mpt.cnt_p1.in1_AT3 mpt.one.out_AT3))
(assert (= mpt.cnt_lt_depth.out_AT3 mpt.ssa_cnt_and1.in0_AT3))
(assert (= mpt.cnt_lt_depth.in1_AT3 mpt.depth.out_AT3))
(assert (= mpt.cnt.out_AT3 mpt.ssa_cnt.in0_AT3))
(assert (= mpt.cnt.out_AT3 mpt.cnt_p1.in0_AT3))
(assert (= mpt.cnt.out_AT3 mpt.cnt_lt_depth.in0_AT3))
(assert (= mpt.cnt.in_AT3 mpt.next_cnt.out_AT3))
(assert (= mpt.cnt.clk_AT3 self.clk_AT3))
(assert (= mp_en.in1_AT3 not_en.out_AT3))
(assert (= mp_en.in0_AT3 start_and_push.out_AT3))
(assert (= magic_packet_eq.out_AT3 prop_signal_or.in1_AT3))
(assert (= magic_packet.out_AT3 next_magic_packet.in0_AT3))
(assert (= magic_packet.out_AT3 magic_packet_eq.in0_AT3))
(assert (= magic_packet.in_AT3 next_magic_packet.out_AT3))
(assert (= magic_packet.clk_AT3 self.clk_AT3))
(assert (= f.wrPtrRst.sel_AT3 self.rst_AT3))
(assert (= f.wrPtrRst.in1_AT3 f.zero.out_AT3))
(assert (= f.wrPtrEn.sel_AT3 self.push_AT3))
(assert (= f.wrPtrEn.out_AT3 f.wrPtrRst.in0_AT3))
(assert (= f.wrPtrEn.in1_AT3 f.wrPtrp1.out_AT3))
(assert (= f.wrPtr.out_AT3 f.wrPtrp1.in1_AT3))
(assert (= f.wrPtr.out_AT3 f.wrPtrSlice.in_AT3))
(assert (= f.wrPtr.out_AT3 f.wrPtrEn.in0_AT3))
(assert (= f.wrPtr.in_AT3 f.wrPtrRst.out_AT3))
(assert (= f.wrPtr.clk_AT3 self.clk_AT3))
(assert (= f.rdPtrRst.sel_AT3 self.rst_AT3))
(assert (= f.rdPtrRst.in1_AT3 f.zero.out_AT3))
(assert (= f.rdPtrEn.sel_AT3 self.pop_AT3))
(assert (= f.rdPtrEn.out_AT3 f.rdPtrRst.in0_AT3))
(assert (= f.rdPtrEn.in1_AT3 f.rdPtrp1.out_AT3))
(assert (= f.rdPtr.out_AT3 f.rdPtrp1.in1_AT3))
(assert (= f.rdPtr.out_AT3 f.rdPtrSlice.in_AT3))
(assert (= f.rdPtr.out_AT3 f.rdPtrEn.in0_AT3))
(assert (= f.rdPtr.in_AT3 f.rdPtrRst.out_AT3))
(assert (= f.rdPtr.clk_AT3 self.clk_AT3))
(assert (= f.one.out_AT3 f.wrPtrp1.in0_AT3))
(assert (= f.one.out_AT3 f.rdPtrp1.in0_AT3))
(assert (= f.mem.wen_AT3 self.push_AT3))
(assert (= f.mem.wdata_AT3 self.data_in_AT3))
(assert (= f.mem.waddr_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.mem.rdata_AT3 self.data_out_AT3))
(assert (= f.mem.rdata_AT3 magic_packet_eq.in1_AT3))
(assert (= f.mem.raddr_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.mem.clk_AT3 self.clk_AT3))
(assert (= f.fullEq_2.out_AT3 f.fullCalc.in1_AT3))
(assert (= f.fullEq_2.in1_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.fullEq_2.in0_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.fullEq_1.out_AT3 f.notfullEq_1.in_AT3))
(assert (= f.fullCalc.in0_AT3 f.notfullEq_1.out_AT3))
(assert (= f.emptyEq.out_AT3 self.empty_AT3))
(assert (= f.emptyEq.in1_AT3 f.wrPtr.out_AT3))
(assert (= f.emptyEq.in0_AT3 f.rdPtr.out_AT3))
(assert (= en_or_sp.in1_AT3 start_and_push.out_AT3))
(assert (= en.out_AT3 not_en.in_AT3))
(assert (= en.out_AT3 en_or_sp.in0_AT3))
(assert (= en.in_AT3 en_or_sp.out_AT3))
(assert (= en.clk_AT3 self.clk_AT3))
(assert (= data_out_vld_and2.out_AT3 not_data_out_vld.in_AT3))
(assert (= data_out_vld_and1.out_AT3 data_out_vld_and2.in0_AT3))
(assert (= data_out_vld_and1.in0_AT3 en.out_AT3))
(assert (= cnt_gt_0.out_AT3 data_out_vld_and1.in1_AT3))
(assert (= cnt_gt_0.in1_AT3 zero.out_AT3))
(assert (= cnt_gt_0.in0_AT3 mpt.cnt.out_AT3))
(assert (= self.clk_AT3 #b0))
(assert (= zero.out_AT3 #b0000))
(assert (= (bvand start_and_push.in0_AT3 start_and_push.in1_AT3) start_and_push.out_AT3))
(assert (= (bvor prop_signal_or.in0_AT3 prop_signal_or.in1_AT3) prop_signal_or.out_AT3))
(assert (= (bvnot not_en.in_AT3) not_en.out_AT3))
(assert (= (bvnot not_data_out_vld.in_AT3) not_data_out_vld.out_AT3))
(assert (=> (= next_magic_packet.sel_AT3 #b1) (= next_magic_packet.in1_AT3 next_magic_packet.out_AT3)))
(assert (=> (= next_magic_packet.sel_AT3 #b0) (= next_magic_packet.in0_AT3 next_magic_packet.out_AT3)))
(assert (=> (not (= next_cnt_eq0.in0_AT3 next_cnt_eq0.in1_AT3)) (= next_cnt_eq0.out_AT3 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT3 next_cnt_eq0.in1_AT3) (= next_cnt_eq0.out_AT3 #b1)))
(assert (= mpt.zero.out_AT3 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT3 mpt.ssa_cnt_m1.in1_AT3) mpt.ssa_cnt_m1.out_AT3))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT3 mpt.ssa_cnt_gt_0.in0_AT3) (= mpt.ssa_cnt_gt_0.out_AT3 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT3 mpt.ssa_cnt_and2.in1_AT3) mpt.ssa_cnt_and2.out_AT3))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT3 mpt.ssa_cnt_and1.in1_AT3) mpt.ssa_cnt_and1.out_AT3))
(assert (=> (= mpt.ssa_cnt.sel_AT3 #b1) (= mpt.ssa_cnt.in1_AT3 mpt.ssa_cnt.out_AT3)))
(assert (=> (= mpt.ssa_cnt.sel_AT3 #b0) (= mpt.ssa_cnt.in0_AT3 mpt.ssa_cnt.out_AT3)))
(assert (= mpt.one.out_AT3 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT3) mpt.not_captured.out_AT3))
(assert (= (bvand mpt.next_cnt_and1.in0_AT3 mpt.next_cnt_and1.in1_AT3) mpt.next_cnt_and1.out_AT3))
(assert (=> (= mpt.next_cnt.sel_AT3 #b1) (= mpt.next_cnt.in1_AT3 mpt.next_cnt.out_AT3)))
(assert (=> (= mpt.next_cnt.sel_AT3 #b0) (= mpt.next_cnt.in0_AT3 mpt.next_cnt.out_AT3)))
(assert (= mpt.depth.out_AT3 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT3 #b1) (= mpt.decr_mux.in1_AT3 mpt.decr_mux.out_AT3)))
(assert (=> (= mpt.decr_mux.sel_AT3 #b0) (= mpt.decr_mux.in0_AT3 mpt.decr_mux.out_AT3)))
(assert (= (bvadd mpt.cnt_p1.in0_AT3 mpt.cnt_p1.in1_AT3) mpt.cnt_p1.out_AT3))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT3 mpt.cnt_lt_depth.in1_AT3) (= mpt.cnt_lt_depth.out_AT3 #b1)))
(assert (= (bvand mp_en.in0_AT3 mp_en.in1_AT3) mp_en.out_AT3))
(assert (=> (not (= magic_packet_eq.in0_AT3 magic_packet_eq.in1_AT3)) (= magic_packet_eq.out_AT3 #b0)))
(assert (=> (= magic_packet_eq.in0_AT3 magic_packet_eq.in1_AT3) (= magic_packet_eq.out_AT3 #b1)))
(assert (= f.zero.out_AT3 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT3 f.wrPtrp1.in1_AT3) f.wrPtrp1.out_AT3))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT3) f.wrPtrSlice.out_AT3))
(assert (=> (= f.wrPtrRst.sel_AT3 #b1) (= f.wrPtrRst.in1_AT3 f.wrPtrRst.out_AT3)))
(assert (=> (= f.wrPtrRst.sel_AT3 #b0) (= f.wrPtrRst.in0_AT3 f.wrPtrRst.out_AT3)))
(assert (=> (= f.wrPtrEn.sel_AT3 #b1) (= f.wrPtrEn.in1_AT3 f.wrPtrEn.out_AT3)))
(assert (=> (= f.wrPtrEn.sel_AT3 #b0) (= f.wrPtrEn.in0_AT3 f.wrPtrEn.out_AT3)))
(assert (= (bvadd f.rdPtrp1.in0_AT3 f.rdPtrp1.in1_AT3) f.rdPtrp1.out_AT3))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT3) f.rdPtrSlice.out_AT3))
(assert (=> (= f.rdPtrRst.sel_AT3 #b1) (= f.rdPtrRst.in1_AT3 f.rdPtrRst.out_AT3)))
(assert (=> (= f.rdPtrRst.sel_AT3 #b0) (= f.rdPtrRst.in0_AT3 f.rdPtrRst.out_AT3)))
(assert (=> (= f.rdPtrEn.sel_AT3 #b1) (= f.rdPtrEn.in1_AT3 f.rdPtrEn.out_AT3)))
(assert (=> (= f.rdPtrEn.sel_AT3 #b0) (= f.rdPtrEn.in0_AT3 f.rdPtrEn.out_AT3)))
(assert (= f.one.out_AT3 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT3) f.notfullEq_1.out_AT3))
(assert (= f.mem.rdata_AT3 (select f.mem.array_AT3 f.mem.raddr_AT3)))
(assert (=> (not (= f.fullEq_2.in0_AT3 f.fullEq_2.in1_AT3)) (= f.fullEq_2.out_AT3 #b0)))
(assert (=> (= f.fullEq_2.in0_AT3 f.fullEq_2.in1_AT3) (= f.fullEq_2.out_AT3 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT3 f.fullEq_1.in1_AT3)) (= f.fullEq_1.out_AT3 #b0)))
(assert (=> (= f.fullEq_1.in0_AT3 f.fullEq_1.in1_AT3) (= f.fullEq_1.out_AT3 #b1)))
(assert (= (bvand f.fullCalc.in0_AT3 f.fullCalc.in1_AT3) f.fullCalc.out_AT3))
(assert (=> (not (= f.emptyEq.in0_AT3 f.emptyEq.in1_AT3)) (= f.emptyEq.out_AT3 #b0)))
(assert (=> (= f.emptyEq.in0_AT3 f.emptyEq.in1_AT3) (= f.emptyEq.out_AT3 #b1)))
(assert (= (bvor en_or_sp.in0_AT3 en_or_sp.in1_AT3) en_or_sp.out_AT3))
(assert (= (bvand data_out_vld_and2.in0_AT3 data_out_vld_and2.in1_AT3) data_out_vld_and2.out_AT3))
(assert (= (bvand data_out_vld_and1.in0_AT3 data_out_vld_and1.in1_AT3) data_out_vld_and1.out_AT3))
(assert (= (bvult cnt_gt_0.in1_AT3 cnt_gt_0.in0_AT3) (= cnt_gt_0.out_AT3 #b1)))
(assert (=> (= _-_state_id_-__AT2 #b10) (= _-_state_id_-__AT3 #b10)))
(assert (=> (= _-_state_id_-__AT2 #b01) (= _-_state_id_-__AT3 #b10)))
(assert (=> (= _-_state_id_-__AT2 #b00) (= _-_state_id_-__AT3 #b01)))
(assert (= mpt.cnt.in_AT2 mpt.cnt.out_AT3))
(assert (= magic_packet.in_AT2 magic_packet.out_AT3))
(assert (= magic_packet.init_AT2 magic_packet.init_AT3))
(assert (= f.wrPtr.in_AT2 f.wrPtr.out_AT3))
(assert (= f.rdPtr.in_AT2 f.rdPtr.out_AT3))
(assert (= f.mem.array_AT3 (ite (= f.mem.wen_AT2 #b1) (store f.mem.array_AT2 f.mem.waddr_AT2 f.mem.wdata_AT2) f.mem.array_AT2)))
(assert (= en.init_AT2 en.init_AT3))
(assert (= en.in_AT2 en.out_AT3))
(push 1)

(assert (not (= self.prop_signal_AT3 #b1)))
(check-sat)

(pop 1)
(declare-fun f.wrPtrp1.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT4 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT4 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT4 () (_ BitVec 4))
(declare-fun f.one.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT4 () (_ BitVec 4))
(declare-fun f.mem.wen_AT4 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT4 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT4 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT4 () (_ BitVec 3))
(declare-fun self.data_out_AT4 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT4 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT4 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT4 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT4 () (_ BitVec 3))
(declare-fun f.mem.clk_AT4 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT4 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT4 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT4 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT4 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT4 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT4 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT4 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT4 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT4 () (_ BitVec 1))
(declare-fun not_en.in_AT4 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT4 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT4 () (_ BitVec 1))
(declare-fun en.in_AT4 () (_ BitVec 1))
(declare-fun en.clk_AT4 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT4 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT4 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT4 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT4 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT4 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT4 () (_ BitVec 4))
(declare-fun magic_packet.out_AT4 () (_ BitVec 8))
(declare-fun magic_packet.init_AT4 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT4 () (_ BitVec 4))
(declare-fun f.mem.array_AT4 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT4 () (_ BitVec 1))
(declare-fun en.out_AT4 () (_ BitVec 1))
(declare-fun self.pop_AT4 () (_ BitVec 1))
(declare-fun self.empty_AT4 () (_ BitVec 1))
(declare-fun self.push_AT4 () (_ BitVec 1))
(declare-fun self.full_AT4 () (_ BitVec 1))
(declare-fun self.rst_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT4 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT4 () (_ BitVec 1))
(declare-fun self.start_AT4 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT4 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT4 () (_ BitVec 1))
(declare-fun self.prop_signal_AT4 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT4 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT4 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT4 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT4 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT4 () (_ BitVec 1))
(declare-fun mp_en.out_AT4 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT4 () (_ BitVec 1))
(declare-fun self.data_in_AT4 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT4 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT4 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT4 () (_ BitVec 1))
(declare-fun zero.out_AT4 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT4 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.one.out_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT4 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT4 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT4 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT4 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT4 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT4 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT4 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT4 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT4 () (_ BitVec 4))
(declare-fun self.clk_AT4 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT4 () (_ BitVec 1))
(declare-fun not_en.out_AT4 () (_ BitVec 1))
(declare-fun mp_en.in1_AT4 () (_ BitVec 1))
(declare-fun start_and_push.out_AT4 () (_ BitVec 1))
(declare-fun mp_en.in0_AT4 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT4 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT4 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT4 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT4 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT4 () (_ BitVec 8))
(declare-fun magic_packet.in_AT4 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT4 () (_ BitVec 1))
(declare-fun f.zero.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT4 () (_ BitVec 4))

(assert (=> (= self.empty_AT4 #b1) (= self.pop_AT4 #b0)))
(assert (=> (= self.full_AT4 #b1) (= self.push_AT4 #b0)))
(assert (=> (= _-_state_id_-__AT4 #b10) (and true (= self.rst_AT4 #b0))))
(assert (=> (= _-_state_id_-__AT4 #b01) (and (and (and true (= self.rst_AT4 #b1)) (= self.push_AT4 #b0)) (= self.pop_AT4 #b0))))
(assert (=> (= _-_state_id_-__AT4 #b00) (and (and (and true (= self.rst_AT4 #b1)) (= self.push_AT4 #b0)) (= self.pop_AT4 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT4 ((_ extract 3 3) f.wrPtr.out_AT4)))
(assert (= f.fullEq_1.in0_AT4 ((_ extract 3 3) f.rdPtr.out_AT4)))
(assert (= en.out_AT4 mpt.not_captured.in_AT4))
(assert (= self.start_AT4 start_and_push.in0_AT4))
(assert (= self.push_AT4 start_and_push.in1_AT4))
(assert (= self.push_AT4 mpt.ssa_cnt_and1.in1_AT4))
(assert (= self.prop_signal_AT4 prop_signal_or.out_AT4))
(assert (= self.pop_AT4 mpt.next_cnt_and1.in1_AT4))
(assert (= self.full_AT4 f.fullCalc.out_AT4))
(assert (= self.data_out_vld_AT4 data_out_vld_and2.out_AT4))
(assert (= not_data_out_vld.out_AT4 prop_signal_or.in0_AT4))
(assert (= next_magic_packet.sel_AT4 mp_en.out_AT4))
(assert (= next_magic_packet.in1_AT4 self.data_in_AT4))
(assert (= next_cnt_eq0.out_AT4 data_out_vld_and2.in1_AT4))
(assert (= next_cnt_eq0.in1_AT4 zero.out_AT4))
(assert (= mpt.ssa_cnt_gt_0.out_AT4 mpt.next_cnt_and1.in0_AT4))
(assert (= mpt.ssa_cnt_gt_0.in1_AT4 mpt.zero.out_AT4))
(assert (= mpt.ssa_cnt_and1.out_AT4 mpt.ssa_cnt_and2.in0_AT4))
(assert (= mpt.ssa_cnt.sel_AT4 mpt.ssa_cnt_and2.out_AT4))
(assert (= mpt.ssa_cnt.out_AT4 mpt.ssa_cnt_m1.in0_AT4))
(assert (= mpt.ssa_cnt.out_AT4 mpt.ssa_cnt_gt_0.in0_AT4))
(assert (= mpt.one.out_AT4 mpt.ssa_cnt_m1.in1_AT4))
(assert (= mpt.not_captured.out_AT4 mpt.ssa_cnt_and2.in1_AT4))
(assert (= mpt.next_cnt.sel_AT4 self.rst_AT4))
(assert (= mpt.next_cnt.out_AT4 next_cnt_eq0.in0_AT4))
(assert (= mpt.next_cnt.in1_AT4 mpt.zero.out_AT4))
(assert (= mpt.decr_mux.sel_AT4 mpt.next_cnt_and1.out_AT4))
(assert (= mpt.decr_mux.out_AT4 mpt.next_cnt.in0_AT4))
(assert (= mpt.decr_mux.in1_AT4 mpt.ssa_cnt_m1.out_AT4))
(assert (= mpt.decr_mux.in0_AT4 mpt.ssa_cnt.out_AT4))
(assert (= mpt.cnt_p1.out_AT4 mpt.ssa_cnt.in1_AT4))
(assert (= mpt.cnt_p1.in1_AT4 mpt.one.out_AT4))
(assert (= mpt.cnt_lt_depth.out_AT4 mpt.ssa_cnt_and1.in0_AT4))
(assert (= mpt.cnt_lt_depth.in1_AT4 mpt.depth.out_AT4))
(assert (= mpt.cnt.out_AT4 mpt.ssa_cnt.in0_AT4))
(assert (= mpt.cnt.out_AT4 mpt.cnt_p1.in0_AT4))
(assert (= mpt.cnt.out_AT4 mpt.cnt_lt_depth.in0_AT4))
(assert (= mpt.cnt.in_AT4 mpt.next_cnt.out_AT4))
(assert (= mpt.cnt.clk_AT4 self.clk_AT4))
(assert (= mp_en.in1_AT4 not_en.out_AT4))
(assert (= mp_en.in0_AT4 start_and_push.out_AT4))
(assert (= magic_packet_eq.out_AT4 prop_signal_or.in1_AT4))
(assert (= magic_packet.out_AT4 next_magic_packet.in0_AT4))
(assert (= magic_packet.out_AT4 magic_packet_eq.in0_AT4))
(assert (= magic_packet.in_AT4 next_magic_packet.out_AT4))
(assert (= magic_packet.clk_AT4 self.clk_AT4))
(assert (= f.wrPtrRst.sel_AT4 self.rst_AT4))
(assert (= f.wrPtrRst.in1_AT4 f.zero.out_AT4))
(assert (= f.wrPtrEn.sel_AT4 self.push_AT4))
(assert (= f.wrPtrEn.out_AT4 f.wrPtrRst.in0_AT4))
(assert (= f.wrPtrEn.in1_AT4 f.wrPtrp1.out_AT4))
(assert (= f.wrPtr.out_AT4 f.wrPtrp1.in1_AT4))
(assert (= f.wrPtr.out_AT4 f.wrPtrSlice.in_AT4))
(assert (= f.wrPtr.out_AT4 f.wrPtrEn.in0_AT4))
(assert (= f.wrPtr.in_AT4 f.wrPtrRst.out_AT4))
(assert (= f.wrPtr.clk_AT4 self.clk_AT4))
(assert (= f.rdPtrRst.sel_AT4 self.rst_AT4))
(assert (= f.rdPtrRst.in1_AT4 f.zero.out_AT4))
(assert (= f.rdPtrEn.sel_AT4 self.pop_AT4))
(assert (= f.rdPtrEn.out_AT4 f.rdPtrRst.in0_AT4))
(assert (= f.rdPtrEn.in1_AT4 f.rdPtrp1.out_AT4))
(assert (= f.rdPtr.out_AT4 f.rdPtrp1.in1_AT4))
(assert (= f.rdPtr.out_AT4 f.rdPtrSlice.in_AT4))
(assert (= f.rdPtr.out_AT4 f.rdPtrEn.in0_AT4))
(assert (= f.rdPtr.in_AT4 f.rdPtrRst.out_AT4))
(assert (= f.rdPtr.clk_AT4 self.clk_AT4))
(assert (= f.one.out_AT4 f.wrPtrp1.in0_AT4))
(assert (= f.one.out_AT4 f.rdPtrp1.in0_AT4))
(assert (= f.mem.wen_AT4 self.push_AT4))
(assert (= f.mem.wdata_AT4 self.data_in_AT4))
(assert (= f.mem.waddr_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.mem.rdata_AT4 self.data_out_AT4))
(assert (= f.mem.rdata_AT4 magic_packet_eq.in1_AT4))
(assert (= f.mem.raddr_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.mem.clk_AT4 self.clk_AT4))
(assert (= f.fullEq_2.out_AT4 f.fullCalc.in1_AT4))
(assert (= f.fullEq_2.in1_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.fullEq_2.in0_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.fullEq_1.out_AT4 f.notfullEq_1.in_AT4))
(assert (= f.fullCalc.in0_AT4 f.notfullEq_1.out_AT4))
(assert (= f.emptyEq.out_AT4 self.empty_AT4))
(assert (= f.emptyEq.in1_AT4 f.wrPtr.out_AT4))
(assert (= f.emptyEq.in0_AT4 f.rdPtr.out_AT4))
(assert (= en_or_sp.in1_AT4 start_and_push.out_AT4))
(assert (= en.out_AT4 not_en.in_AT4))
(assert (= en.out_AT4 en_or_sp.in0_AT4))
(assert (= en.in_AT4 en_or_sp.out_AT4))
(assert (= en.clk_AT4 self.clk_AT4))
(assert (= data_out_vld_and2.out_AT4 not_data_out_vld.in_AT4))
(assert (= data_out_vld_and1.out_AT4 data_out_vld_and2.in0_AT4))
(assert (= data_out_vld_and1.in0_AT4 en.out_AT4))
(assert (= cnt_gt_0.out_AT4 data_out_vld_and1.in1_AT4))
(assert (= cnt_gt_0.in1_AT4 zero.out_AT4))
(assert (= cnt_gt_0.in0_AT4 mpt.cnt.out_AT4))
(assert (= self.clk_AT4 #b0))
(assert (= zero.out_AT4 #b0000))
(assert (= (bvand start_and_push.in0_AT4 start_and_push.in1_AT4) start_and_push.out_AT4))
(assert (= (bvor prop_signal_or.in0_AT4 prop_signal_or.in1_AT4) prop_signal_or.out_AT4))
(assert (= (bvnot not_en.in_AT4) not_en.out_AT4))
(assert (= (bvnot not_data_out_vld.in_AT4) not_data_out_vld.out_AT4))
(assert (=> (= next_magic_packet.sel_AT4 #b1) (= next_magic_packet.in1_AT4 next_magic_packet.out_AT4)))
(assert (=> (= next_magic_packet.sel_AT4 #b0) (= next_magic_packet.in0_AT4 next_magic_packet.out_AT4)))
(assert (=> (not (= next_cnt_eq0.in0_AT4 next_cnt_eq0.in1_AT4)) (= next_cnt_eq0.out_AT4 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT4 next_cnt_eq0.in1_AT4) (= next_cnt_eq0.out_AT4 #b1)))
(assert (= mpt.zero.out_AT4 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT4 mpt.ssa_cnt_m1.in1_AT4) mpt.ssa_cnt_m1.out_AT4))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT4 mpt.ssa_cnt_gt_0.in0_AT4) (= mpt.ssa_cnt_gt_0.out_AT4 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT4 mpt.ssa_cnt_and2.in1_AT4) mpt.ssa_cnt_and2.out_AT4))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT4 mpt.ssa_cnt_and1.in1_AT4) mpt.ssa_cnt_and1.out_AT4))
(assert (=> (= mpt.ssa_cnt.sel_AT4 #b1) (= mpt.ssa_cnt.in1_AT4 mpt.ssa_cnt.out_AT4)))
(assert (=> (= mpt.ssa_cnt.sel_AT4 #b0) (= mpt.ssa_cnt.in0_AT4 mpt.ssa_cnt.out_AT4)))
(assert (= mpt.one.out_AT4 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT4) mpt.not_captured.out_AT4))
(assert (= (bvand mpt.next_cnt_and1.in0_AT4 mpt.next_cnt_and1.in1_AT4) mpt.next_cnt_and1.out_AT4))
(assert (=> (= mpt.next_cnt.sel_AT4 #b1) (= mpt.next_cnt.in1_AT4 mpt.next_cnt.out_AT4)))
(assert (=> (= mpt.next_cnt.sel_AT4 #b0) (= mpt.next_cnt.in0_AT4 mpt.next_cnt.out_AT4)))
(assert (= mpt.depth.out_AT4 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT4 #b1) (= mpt.decr_mux.in1_AT4 mpt.decr_mux.out_AT4)))
(assert (=> (= mpt.decr_mux.sel_AT4 #b0) (= mpt.decr_mux.in0_AT4 mpt.decr_mux.out_AT4)))
(assert (= (bvadd mpt.cnt_p1.in0_AT4 mpt.cnt_p1.in1_AT4) mpt.cnt_p1.out_AT4))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT4 mpt.cnt_lt_depth.in1_AT4) (= mpt.cnt_lt_depth.out_AT4 #b1)))
(assert (= (bvand mp_en.in0_AT4 mp_en.in1_AT4) mp_en.out_AT4))
(assert (=> (not (= magic_packet_eq.in0_AT4 magic_packet_eq.in1_AT4)) (= magic_packet_eq.out_AT4 #b0)))
(assert (=> (= magic_packet_eq.in0_AT4 magic_packet_eq.in1_AT4) (= magic_packet_eq.out_AT4 #b1)))
(assert (= f.zero.out_AT4 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT4 f.wrPtrp1.in1_AT4) f.wrPtrp1.out_AT4))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT4) f.wrPtrSlice.out_AT4))
(assert (=> (= f.wrPtrRst.sel_AT4 #b1) (= f.wrPtrRst.in1_AT4 f.wrPtrRst.out_AT4)))
(assert (=> (= f.wrPtrRst.sel_AT4 #b0) (= f.wrPtrRst.in0_AT4 f.wrPtrRst.out_AT4)))
(assert (=> (= f.wrPtrEn.sel_AT4 #b1) (= f.wrPtrEn.in1_AT4 f.wrPtrEn.out_AT4)))
(assert (=> (= f.wrPtrEn.sel_AT4 #b0) (= f.wrPtrEn.in0_AT4 f.wrPtrEn.out_AT4)))
(assert (= (bvadd f.rdPtrp1.in0_AT4 f.rdPtrp1.in1_AT4) f.rdPtrp1.out_AT4))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT4) f.rdPtrSlice.out_AT4))
(assert (=> (= f.rdPtrRst.sel_AT4 #b1) (= f.rdPtrRst.in1_AT4 f.rdPtrRst.out_AT4)))
(assert (=> (= f.rdPtrRst.sel_AT4 #b0) (= f.rdPtrRst.in0_AT4 f.rdPtrRst.out_AT4)))
(assert (=> (= f.rdPtrEn.sel_AT4 #b1) (= f.rdPtrEn.in1_AT4 f.rdPtrEn.out_AT4)))
(assert (=> (= f.rdPtrEn.sel_AT4 #b0) (= f.rdPtrEn.in0_AT4 f.rdPtrEn.out_AT4)))
(assert (= f.one.out_AT4 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT4) f.notfullEq_1.out_AT4))
(assert (= f.mem.rdata_AT4 (select f.mem.array_AT4 f.mem.raddr_AT4)))
(assert (=> (not (= f.fullEq_2.in0_AT4 f.fullEq_2.in1_AT4)) (= f.fullEq_2.out_AT4 #b0)))
(assert (=> (= f.fullEq_2.in0_AT4 f.fullEq_2.in1_AT4) (= f.fullEq_2.out_AT4 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT4 f.fullEq_1.in1_AT4)) (= f.fullEq_1.out_AT4 #b0)))
(assert (=> (= f.fullEq_1.in0_AT4 f.fullEq_1.in1_AT4) (= f.fullEq_1.out_AT4 #b1)))
(assert (= (bvand f.fullCalc.in0_AT4 f.fullCalc.in1_AT4) f.fullCalc.out_AT4))
(assert (=> (not (= f.emptyEq.in0_AT4 f.emptyEq.in1_AT4)) (= f.emptyEq.out_AT4 #b0)))
(assert (=> (= f.emptyEq.in0_AT4 f.emptyEq.in1_AT4) (= f.emptyEq.out_AT4 #b1)))
(assert (= (bvor en_or_sp.in0_AT4 en_or_sp.in1_AT4) en_or_sp.out_AT4))
(assert (= (bvand data_out_vld_and2.in0_AT4 data_out_vld_and2.in1_AT4) data_out_vld_and2.out_AT4))
(assert (= (bvand data_out_vld_and1.in0_AT4 data_out_vld_and1.in1_AT4) data_out_vld_and1.out_AT4))
(assert (= (bvult cnt_gt_0.in1_AT4 cnt_gt_0.in0_AT4) (= cnt_gt_0.out_AT4 #b1)))
(assert (=> (= _-_state_id_-__AT3 #b10) (= _-_state_id_-__AT4 #b10)))
(assert (=> (= _-_state_id_-__AT3 #b01) (= _-_state_id_-__AT4 #b10)))
(assert (=> (= _-_state_id_-__AT3 #b00) (= _-_state_id_-__AT4 #b01)))
(assert (= mpt.cnt.in_AT3 mpt.cnt.out_AT4))
(assert (= magic_packet.in_AT3 magic_packet.out_AT4))
(assert (= magic_packet.init_AT3 magic_packet.init_AT4))
(assert (= f.wrPtr.in_AT3 f.wrPtr.out_AT4))
(assert (= f.rdPtr.in_AT3 f.rdPtr.out_AT4))
(assert (= f.mem.array_AT4 (ite (= f.mem.wen_AT3 #b1) (store f.mem.array_AT3 f.mem.waddr_AT3 f.mem.wdata_AT3) f.mem.array_AT3)))
(assert (= en.init_AT3 en.init_AT4))
(assert (= en.in_AT3 en.out_AT4))
(push 1)

(assert (not (= self.prop_signal_AT4 #b1)))
(check-sat)

(pop 1)
(declare-fun start_and_push.in0_AT5 () (_ BitVec 1))
(declare-fun self.start_AT5 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT5 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT5 () (_ BitVec 1))
(declare-fun self.prop_signal_AT5 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT5 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT5 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT5 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT5 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT5 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT5 () (_ BitVec 1))
(declare-fun mp_en.out_AT5 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT5 () (_ BitVec 1))
(declare-fun self.data_in_AT5 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT5 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT5 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT5 () (_ BitVec 1))
(declare-fun zero.out_AT5 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT5 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.one.out_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT5 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT5 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT5 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT5 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT5 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT5 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT5 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT5 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT5 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT5 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT5 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT5 () (_ BitVec 4))
(declare-fun self.clk_AT5 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT5 () (_ BitVec 1))
(declare-fun not_en.out_AT5 () (_ BitVec 1))
(declare-fun mp_en.in1_AT5 () (_ BitVec 1))
(declare-fun start_and_push.out_AT5 () (_ BitVec 1))
(declare-fun mp_en.in0_AT5 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT5 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT5 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT5 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT5 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT5 () (_ BitVec 8))
(declare-fun magic_packet.in_AT5 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT5 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT5 () (_ BitVec 1))
(declare-fun f.zero.out_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT5 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT5 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT5 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT5 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT5 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT5 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT5 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT5 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT5 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT5 () (_ BitVec 4))
(declare-fun f.one.out_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT5 () (_ BitVec 4))
(declare-fun f.mem.wen_AT5 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT5 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT5 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT5 () (_ BitVec 3))
(declare-fun self.data_out_AT5 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT5 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT5 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT5 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT5 () (_ BitVec 3))
(declare-fun f.mem.clk_AT5 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT5 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT5 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT5 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT5 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT5 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT5 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT5 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT5 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT5 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT5 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT5 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT5 () (_ BitVec 1))
(declare-fun not_en.in_AT5 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT5 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT5 () (_ BitVec 1))
(declare-fun en.in_AT5 () (_ BitVec 1))
(declare-fun en.clk_AT5 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT5 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT5 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT5 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT5 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT5 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT5 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT5 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT5 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT5 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT5 () (_ BitVec 4))
(declare-fun magic_packet.out_AT5 () (_ BitVec 8))
(declare-fun magic_packet.init_AT5 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT5 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT5 () (_ BitVec 4))
(declare-fun f.mem.array_AT5 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT5 () (_ BitVec 1))
(declare-fun en.out_AT5 () (_ BitVec 1))
(declare-fun self.pop_AT5 () (_ BitVec 1))
(declare-fun self.empty_AT5 () (_ BitVec 1))
(declare-fun self.push_AT5 () (_ BitVec 1))
(declare-fun self.full_AT5 () (_ BitVec 1))
(declare-fun self.rst_AT5 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT5 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT5 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT5 () (_ BitVec 1))

(assert (=> (= self.empty_AT5 #b1) (= self.pop_AT5 #b0)))
(assert (=> (= self.full_AT5 #b1) (= self.push_AT5 #b0)))
(assert (=> (= _-_state_id_-__AT5 #b10) (and true (= self.rst_AT5 #b0))))
(assert (=> (= _-_state_id_-__AT5 #b01) (and (and (and true (= self.rst_AT5 #b1)) (= self.push_AT5 #b0)) (= self.pop_AT5 #b0))))
(assert (=> (= _-_state_id_-__AT5 #b00) (and (and (and true (= self.rst_AT5 #b1)) (= self.push_AT5 #b0)) (= self.pop_AT5 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT5 ((_ extract 3 3) f.wrPtr.out_AT5)))
(assert (= f.fullEq_1.in0_AT5 ((_ extract 3 3) f.rdPtr.out_AT5)))
(assert (= en.out_AT5 mpt.not_captured.in_AT5))
(assert (= self.start_AT5 start_and_push.in0_AT5))
(assert (= self.push_AT5 start_and_push.in1_AT5))
(assert (= self.push_AT5 mpt.ssa_cnt_and1.in1_AT5))
(assert (= self.prop_signal_AT5 prop_signal_or.out_AT5))
(assert (= self.pop_AT5 mpt.next_cnt_and1.in1_AT5))
(assert (= self.full_AT5 f.fullCalc.out_AT5))
(assert (= self.data_out_vld_AT5 data_out_vld_and2.out_AT5))
(assert (= not_data_out_vld.out_AT5 prop_signal_or.in0_AT5))
(assert (= next_magic_packet.sel_AT5 mp_en.out_AT5))
(assert (= next_magic_packet.in1_AT5 self.data_in_AT5))
(assert (= next_cnt_eq0.out_AT5 data_out_vld_and2.in1_AT5))
(assert (= next_cnt_eq0.in1_AT5 zero.out_AT5))
(assert (= mpt.ssa_cnt_gt_0.out_AT5 mpt.next_cnt_and1.in0_AT5))
(assert (= mpt.ssa_cnt_gt_0.in1_AT5 mpt.zero.out_AT5))
(assert (= mpt.ssa_cnt_and1.out_AT5 mpt.ssa_cnt_and2.in0_AT5))
(assert (= mpt.ssa_cnt.sel_AT5 mpt.ssa_cnt_and2.out_AT5))
(assert (= mpt.ssa_cnt.out_AT5 mpt.ssa_cnt_m1.in0_AT5))
(assert (= mpt.ssa_cnt.out_AT5 mpt.ssa_cnt_gt_0.in0_AT5))
(assert (= mpt.one.out_AT5 mpt.ssa_cnt_m1.in1_AT5))
(assert (= mpt.not_captured.out_AT5 mpt.ssa_cnt_and2.in1_AT5))
(assert (= mpt.next_cnt.sel_AT5 self.rst_AT5))
(assert (= mpt.next_cnt.out_AT5 next_cnt_eq0.in0_AT5))
(assert (= mpt.next_cnt.in1_AT5 mpt.zero.out_AT5))
(assert (= mpt.decr_mux.sel_AT5 mpt.next_cnt_and1.out_AT5))
(assert (= mpt.decr_mux.out_AT5 mpt.next_cnt.in0_AT5))
(assert (= mpt.decr_mux.in1_AT5 mpt.ssa_cnt_m1.out_AT5))
(assert (= mpt.decr_mux.in0_AT5 mpt.ssa_cnt.out_AT5))
(assert (= mpt.cnt_p1.out_AT5 mpt.ssa_cnt.in1_AT5))
(assert (= mpt.cnt_p1.in1_AT5 mpt.one.out_AT5))
(assert (= mpt.cnt_lt_depth.out_AT5 mpt.ssa_cnt_and1.in0_AT5))
(assert (= mpt.cnt_lt_depth.in1_AT5 mpt.depth.out_AT5))
(assert (= mpt.cnt.out_AT5 mpt.ssa_cnt.in0_AT5))
(assert (= mpt.cnt.out_AT5 mpt.cnt_p1.in0_AT5))
(assert (= mpt.cnt.out_AT5 mpt.cnt_lt_depth.in0_AT5))
(assert (= mpt.cnt.in_AT5 mpt.next_cnt.out_AT5))
(assert (= mpt.cnt.clk_AT5 self.clk_AT5))
(assert (= mp_en.in1_AT5 not_en.out_AT5))
(assert (= mp_en.in0_AT5 start_and_push.out_AT5))
(assert (= magic_packet_eq.out_AT5 prop_signal_or.in1_AT5))
(assert (= magic_packet.out_AT5 next_magic_packet.in0_AT5))
(assert (= magic_packet.out_AT5 magic_packet_eq.in0_AT5))
(assert (= magic_packet.in_AT5 next_magic_packet.out_AT5))
(assert (= magic_packet.clk_AT5 self.clk_AT5))
(assert (= f.wrPtrRst.sel_AT5 self.rst_AT5))
(assert (= f.wrPtrRst.in1_AT5 f.zero.out_AT5))
(assert (= f.wrPtrEn.sel_AT5 self.push_AT5))
(assert (= f.wrPtrEn.out_AT5 f.wrPtrRst.in0_AT5))
(assert (= f.wrPtrEn.in1_AT5 f.wrPtrp1.out_AT5))
(assert (= f.wrPtr.out_AT5 f.wrPtrp1.in1_AT5))
(assert (= f.wrPtr.out_AT5 f.wrPtrSlice.in_AT5))
(assert (= f.wrPtr.out_AT5 f.wrPtrEn.in0_AT5))
(assert (= f.wrPtr.in_AT5 f.wrPtrRst.out_AT5))
(assert (= f.wrPtr.clk_AT5 self.clk_AT5))
(assert (= f.rdPtrRst.sel_AT5 self.rst_AT5))
(assert (= f.rdPtrRst.in1_AT5 f.zero.out_AT5))
(assert (= f.rdPtrEn.sel_AT5 self.pop_AT5))
(assert (= f.rdPtrEn.out_AT5 f.rdPtrRst.in0_AT5))
(assert (= f.rdPtrEn.in1_AT5 f.rdPtrp1.out_AT5))
(assert (= f.rdPtr.out_AT5 f.rdPtrp1.in1_AT5))
(assert (= f.rdPtr.out_AT5 f.rdPtrSlice.in_AT5))
(assert (= f.rdPtr.out_AT5 f.rdPtrEn.in0_AT5))
(assert (= f.rdPtr.in_AT5 f.rdPtrRst.out_AT5))
(assert (= f.rdPtr.clk_AT5 self.clk_AT5))
(assert (= f.one.out_AT5 f.wrPtrp1.in0_AT5))
(assert (= f.one.out_AT5 f.rdPtrp1.in0_AT5))
(assert (= f.mem.wen_AT5 self.push_AT5))
(assert (= f.mem.wdata_AT5 self.data_in_AT5))
(assert (= f.mem.waddr_AT5 f.wrPtrSlice.out_AT5))
(assert (= f.mem.rdata_AT5 self.data_out_AT5))
(assert (= f.mem.rdata_AT5 magic_packet_eq.in1_AT5))
(assert (= f.mem.raddr_AT5 f.rdPtrSlice.out_AT5))
(assert (= f.mem.clk_AT5 self.clk_AT5))
(assert (= f.fullEq_2.out_AT5 f.fullCalc.in1_AT5))
(assert (= f.fullEq_2.in1_AT5 f.wrPtrSlice.out_AT5))
(assert (= f.fullEq_2.in0_AT5 f.rdPtrSlice.out_AT5))
(assert (= f.fullEq_1.out_AT5 f.notfullEq_1.in_AT5))
(assert (= f.fullCalc.in0_AT5 f.notfullEq_1.out_AT5))
(assert (= f.emptyEq.out_AT5 self.empty_AT5))
(assert (= f.emptyEq.in1_AT5 f.wrPtr.out_AT5))
(assert (= f.emptyEq.in0_AT5 f.rdPtr.out_AT5))
(assert (= en_or_sp.in1_AT5 start_and_push.out_AT5))
(assert (= en.out_AT5 not_en.in_AT5))
(assert (= en.out_AT5 en_or_sp.in0_AT5))
(assert (= en.in_AT5 en_or_sp.out_AT5))
(assert (= en.clk_AT5 self.clk_AT5))
(assert (= data_out_vld_and2.out_AT5 not_data_out_vld.in_AT5))
(assert (= data_out_vld_and1.out_AT5 data_out_vld_and2.in0_AT5))
(assert (= data_out_vld_and1.in0_AT5 en.out_AT5))
(assert (= cnt_gt_0.out_AT5 data_out_vld_and1.in1_AT5))
(assert (= cnt_gt_0.in1_AT5 zero.out_AT5))
(assert (= cnt_gt_0.in0_AT5 mpt.cnt.out_AT5))
(assert (= self.clk_AT5 #b0))
(assert (= zero.out_AT5 #b0000))
(assert (= (bvand start_and_push.in0_AT5 start_and_push.in1_AT5) start_and_push.out_AT5))
(assert (= (bvor prop_signal_or.in0_AT5 prop_signal_or.in1_AT5) prop_signal_or.out_AT5))
(assert (= (bvnot not_en.in_AT5) not_en.out_AT5))
(assert (= (bvnot not_data_out_vld.in_AT5) not_data_out_vld.out_AT5))
(assert (=> (= next_magic_packet.sel_AT5 #b1) (= next_magic_packet.in1_AT5 next_magic_packet.out_AT5)))
(assert (=> (= next_magic_packet.sel_AT5 #b0) (= next_magic_packet.in0_AT5 next_magic_packet.out_AT5)))
(assert (=> (not (= next_cnt_eq0.in0_AT5 next_cnt_eq0.in1_AT5)) (= next_cnt_eq0.out_AT5 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT5 next_cnt_eq0.in1_AT5) (= next_cnt_eq0.out_AT5 #b1)))
(assert (= mpt.zero.out_AT5 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT5 mpt.ssa_cnt_m1.in1_AT5) mpt.ssa_cnt_m1.out_AT5))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT5 mpt.ssa_cnt_gt_0.in0_AT5) (= mpt.ssa_cnt_gt_0.out_AT5 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT5 mpt.ssa_cnt_and2.in1_AT5) mpt.ssa_cnt_and2.out_AT5))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT5 mpt.ssa_cnt_and1.in1_AT5) mpt.ssa_cnt_and1.out_AT5))
(assert (=> (= mpt.ssa_cnt.sel_AT5 #b1) (= mpt.ssa_cnt.in1_AT5 mpt.ssa_cnt.out_AT5)))
(assert (=> (= mpt.ssa_cnt.sel_AT5 #b0) (= mpt.ssa_cnt.in0_AT5 mpt.ssa_cnt.out_AT5)))
(assert (= mpt.one.out_AT5 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT5) mpt.not_captured.out_AT5))
(assert (= (bvand mpt.next_cnt_and1.in0_AT5 mpt.next_cnt_and1.in1_AT5) mpt.next_cnt_and1.out_AT5))
(assert (=> (= mpt.next_cnt.sel_AT5 #b1) (= mpt.next_cnt.in1_AT5 mpt.next_cnt.out_AT5)))
(assert (=> (= mpt.next_cnt.sel_AT5 #b0) (= mpt.next_cnt.in0_AT5 mpt.next_cnt.out_AT5)))
(assert (= mpt.depth.out_AT5 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT5 #b1) (= mpt.decr_mux.in1_AT5 mpt.decr_mux.out_AT5)))
(assert (=> (= mpt.decr_mux.sel_AT5 #b0) (= mpt.decr_mux.in0_AT5 mpt.decr_mux.out_AT5)))
(assert (= (bvadd mpt.cnt_p1.in0_AT5 mpt.cnt_p1.in1_AT5) mpt.cnt_p1.out_AT5))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT5 mpt.cnt_lt_depth.in1_AT5) (= mpt.cnt_lt_depth.out_AT5 #b1)))
(assert (= (bvand mp_en.in0_AT5 mp_en.in1_AT5) mp_en.out_AT5))
(assert (=> (not (= magic_packet_eq.in0_AT5 magic_packet_eq.in1_AT5)) (= magic_packet_eq.out_AT5 #b0)))
(assert (=> (= magic_packet_eq.in0_AT5 magic_packet_eq.in1_AT5) (= magic_packet_eq.out_AT5 #b1)))
(assert (= f.zero.out_AT5 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT5 f.wrPtrp1.in1_AT5) f.wrPtrp1.out_AT5))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT5) f.wrPtrSlice.out_AT5))
(assert (=> (= f.wrPtrRst.sel_AT5 #b1) (= f.wrPtrRst.in1_AT5 f.wrPtrRst.out_AT5)))
(assert (=> (= f.wrPtrRst.sel_AT5 #b0) (= f.wrPtrRst.in0_AT5 f.wrPtrRst.out_AT5)))
(assert (=> (= f.wrPtrEn.sel_AT5 #b1) (= f.wrPtrEn.in1_AT5 f.wrPtrEn.out_AT5)))
(assert (=> (= f.wrPtrEn.sel_AT5 #b0) (= f.wrPtrEn.in0_AT5 f.wrPtrEn.out_AT5)))
(assert (= (bvadd f.rdPtrp1.in0_AT5 f.rdPtrp1.in1_AT5) f.rdPtrp1.out_AT5))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT5) f.rdPtrSlice.out_AT5))
(assert (=> (= f.rdPtrRst.sel_AT5 #b1) (= f.rdPtrRst.in1_AT5 f.rdPtrRst.out_AT5)))
(assert (=> (= f.rdPtrRst.sel_AT5 #b0) (= f.rdPtrRst.in0_AT5 f.rdPtrRst.out_AT5)))
(assert (=> (= f.rdPtrEn.sel_AT5 #b1) (= f.rdPtrEn.in1_AT5 f.rdPtrEn.out_AT5)))
(assert (=> (= f.rdPtrEn.sel_AT5 #b0) (= f.rdPtrEn.in0_AT5 f.rdPtrEn.out_AT5)))
(assert (= f.one.out_AT5 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT5) f.notfullEq_1.out_AT5))
(assert (= f.mem.rdata_AT5 (select f.mem.array_AT5 f.mem.raddr_AT5)))
(assert (=> (not (= f.fullEq_2.in0_AT5 f.fullEq_2.in1_AT5)) (= f.fullEq_2.out_AT5 #b0)))
(assert (=> (= f.fullEq_2.in0_AT5 f.fullEq_2.in1_AT5) (= f.fullEq_2.out_AT5 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT5 f.fullEq_1.in1_AT5)) (= f.fullEq_1.out_AT5 #b0)))
(assert (=> (= f.fullEq_1.in0_AT5 f.fullEq_1.in1_AT5) (= f.fullEq_1.out_AT5 #b1)))
(assert (= (bvand f.fullCalc.in0_AT5 f.fullCalc.in1_AT5) f.fullCalc.out_AT5))
(assert (=> (not (= f.emptyEq.in0_AT5 f.emptyEq.in1_AT5)) (= f.emptyEq.out_AT5 #b0)))
(assert (=> (= f.emptyEq.in0_AT5 f.emptyEq.in1_AT5) (= f.emptyEq.out_AT5 #b1)))
(assert (= (bvor en_or_sp.in0_AT5 en_or_sp.in1_AT5) en_or_sp.out_AT5))
(assert (= (bvand data_out_vld_and2.in0_AT5 data_out_vld_and2.in1_AT5) data_out_vld_and2.out_AT5))
(assert (= (bvand data_out_vld_and1.in0_AT5 data_out_vld_and1.in1_AT5) data_out_vld_and1.out_AT5))
(assert (= (bvult cnt_gt_0.in1_AT5 cnt_gt_0.in0_AT5) (= cnt_gt_0.out_AT5 #b1)))
(assert (=> (= _-_state_id_-__AT4 #b10) (= _-_state_id_-__AT5 #b10)))
(assert (=> (= _-_state_id_-__AT4 #b01) (= _-_state_id_-__AT5 #b10)))
(assert (=> (= _-_state_id_-__AT4 #b00) (= _-_state_id_-__AT5 #b01)))
(assert (= mpt.cnt.in_AT4 mpt.cnt.out_AT5))
(assert (= magic_packet.in_AT4 magic_packet.out_AT5))
(assert (= magic_packet.init_AT4 magic_packet.init_AT5))
(assert (= f.wrPtr.in_AT4 f.wrPtr.out_AT5))
(assert (= f.rdPtr.in_AT4 f.rdPtr.out_AT5))
(assert (= f.mem.array_AT5 (ite (= f.mem.wen_AT4 #b1) (store f.mem.array_AT4 f.mem.waddr_AT4 f.mem.wdata_AT4) f.mem.array_AT4)))
(assert (= en.init_AT4 en.init_AT5))
(assert (= en.in_AT4 en.out_AT5))
(push 1)

(assert (not (= self.prop_signal_AT5 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT6 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT6 () (_ BitVec 4))
(declare-fun magic_packet.out_AT6 () (_ BitVec 8))
(declare-fun magic_packet.init_AT6 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT6 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT6 () (_ BitVec 4))
(declare-fun f.mem.array_AT6 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT6 () (_ BitVec 1))
(declare-fun en.out_AT6 () (_ BitVec 1))
(declare-fun self.pop_AT6 () (_ BitVec 1))
(declare-fun self.empty_AT6 () (_ BitVec 1))
(declare-fun self.push_AT6 () (_ BitVec 1))
(declare-fun self.full_AT6 () (_ BitVec 1))
(declare-fun self.rst_AT6 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT6 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT6 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT6 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT6 () (_ BitVec 1))
(declare-fun self.start_AT6 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT6 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT6 () (_ BitVec 1))
(declare-fun self.prop_signal_AT6 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT6 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT6 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT6 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT6 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT6 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT6 () (_ BitVec 1))
(declare-fun mp_en.out_AT6 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT6 () (_ BitVec 1))
(declare-fun self.data_in_AT6 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT6 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT6 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT6 () (_ BitVec 1))
(declare-fun zero.out_AT6 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT6 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.one.out_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT6 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT6 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT6 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT6 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT6 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT6 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT6 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT6 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT6 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT6 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT6 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT6 () (_ BitVec 4))
(declare-fun self.clk_AT6 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT6 () (_ BitVec 1))
(declare-fun not_en.out_AT6 () (_ BitVec 1))
(declare-fun mp_en.in1_AT6 () (_ BitVec 1))
(declare-fun start_and_push.out_AT6 () (_ BitVec 1))
(declare-fun mp_en.in0_AT6 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT6 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT6 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT6 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT6 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT6 () (_ BitVec 8))
(declare-fun magic_packet.in_AT6 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT6 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT6 () (_ BitVec 1))
(declare-fun f.zero.out_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT6 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT6 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT6 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT6 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT6 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT6 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT6 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT6 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT6 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT6 () (_ BitVec 4))
(declare-fun f.one.out_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT6 () (_ BitVec 4))
(declare-fun f.mem.wen_AT6 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT6 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT6 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT6 () (_ BitVec 3))
(declare-fun self.data_out_AT6 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT6 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT6 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT6 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT6 () (_ BitVec 3))
(declare-fun f.mem.clk_AT6 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT6 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT6 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT6 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT6 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT6 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT6 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT6 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT6 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT6 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT6 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT6 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT6 () (_ BitVec 1))
(declare-fun not_en.in_AT6 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT6 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT6 () (_ BitVec 1))
(declare-fun en.in_AT6 () (_ BitVec 1))
(declare-fun en.clk_AT6 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT6 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT6 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT6 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT6 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT6 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT6 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT6 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT6 () (_ BitVec 4))

(assert (=> (= self.empty_AT6 #b1) (= self.pop_AT6 #b0)))
(assert (=> (= self.full_AT6 #b1) (= self.push_AT6 #b0)))
(assert (=> (= _-_state_id_-__AT6 #b10) (and true (= self.rst_AT6 #b0))))
(assert (=> (= _-_state_id_-__AT6 #b01) (and (and (and true (= self.rst_AT6 #b1)) (= self.push_AT6 #b0)) (= self.pop_AT6 #b0))))
(assert (=> (= _-_state_id_-__AT6 #b00) (and (and (and true (= self.rst_AT6 #b1)) (= self.push_AT6 #b0)) (= self.pop_AT6 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT6 ((_ extract 3 3) f.wrPtr.out_AT6)))
(assert (= f.fullEq_1.in0_AT6 ((_ extract 3 3) f.rdPtr.out_AT6)))
(assert (= en.out_AT6 mpt.not_captured.in_AT6))
(assert (= self.start_AT6 start_and_push.in0_AT6))
(assert (= self.push_AT6 start_and_push.in1_AT6))
(assert (= self.push_AT6 mpt.ssa_cnt_and1.in1_AT6))
(assert (= self.prop_signal_AT6 prop_signal_or.out_AT6))
(assert (= self.pop_AT6 mpt.next_cnt_and1.in1_AT6))
(assert (= self.full_AT6 f.fullCalc.out_AT6))
(assert (= self.data_out_vld_AT6 data_out_vld_and2.out_AT6))
(assert (= not_data_out_vld.out_AT6 prop_signal_or.in0_AT6))
(assert (= next_magic_packet.sel_AT6 mp_en.out_AT6))
(assert (= next_magic_packet.in1_AT6 self.data_in_AT6))
(assert (= next_cnt_eq0.out_AT6 data_out_vld_and2.in1_AT6))
(assert (= next_cnt_eq0.in1_AT6 zero.out_AT6))
(assert (= mpt.ssa_cnt_gt_0.out_AT6 mpt.next_cnt_and1.in0_AT6))
(assert (= mpt.ssa_cnt_gt_0.in1_AT6 mpt.zero.out_AT6))
(assert (= mpt.ssa_cnt_and1.out_AT6 mpt.ssa_cnt_and2.in0_AT6))
(assert (= mpt.ssa_cnt.sel_AT6 mpt.ssa_cnt_and2.out_AT6))
(assert (= mpt.ssa_cnt.out_AT6 mpt.ssa_cnt_m1.in0_AT6))
(assert (= mpt.ssa_cnt.out_AT6 mpt.ssa_cnt_gt_0.in0_AT6))
(assert (= mpt.one.out_AT6 mpt.ssa_cnt_m1.in1_AT6))
(assert (= mpt.not_captured.out_AT6 mpt.ssa_cnt_and2.in1_AT6))
(assert (= mpt.next_cnt.sel_AT6 self.rst_AT6))
(assert (= mpt.next_cnt.out_AT6 next_cnt_eq0.in0_AT6))
(assert (= mpt.next_cnt.in1_AT6 mpt.zero.out_AT6))
(assert (= mpt.decr_mux.sel_AT6 mpt.next_cnt_and1.out_AT6))
(assert (= mpt.decr_mux.out_AT6 mpt.next_cnt.in0_AT6))
(assert (= mpt.decr_mux.in1_AT6 mpt.ssa_cnt_m1.out_AT6))
(assert (= mpt.decr_mux.in0_AT6 mpt.ssa_cnt.out_AT6))
(assert (= mpt.cnt_p1.out_AT6 mpt.ssa_cnt.in1_AT6))
(assert (= mpt.cnt_p1.in1_AT6 mpt.one.out_AT6))
(assert (= mpt.cnt_lt_depth.out_AT6 mpt.ssa_cnt_and1.in0_AT6))
(assert (= mpt.cnt_lt_depth.in1_AT6 mpt.depth.out_AT6))
(assert (= mpt.cnt.out_AT6 mpt.ssa_cnt.in0_AT6))
(assert (= mpt.cnt.out_AT6 mpt.cnt_p1.in0_AT6))
(assert (= mpt.cnt.out_AT6 mpt.cnt_lt_depth.in0_AT6))
(assert (= mpt.cnt.in_AT6 mpt.next_cnt.out_AT6))
(assert (= mpt.cnt.clk_AT6 self.clk_AT6))
(assert (= mp_en.in1_AT6 not_en.out_AT6))
(assert (= mp_en.in0_AT6 start_and_push.out_AT6))
(assert (= magic_packet_eq.out_AT6 prop_signal_or.in1_AT6))
(assert (= magic_packet.out_AT6 next_magic_packet.in0_AT6))
(assert (= magic_packet.out_AT6 magic_packet_eq.in0_AT6))
(assert (= magic_packet.in_AT6 next_magic_packet.out_AT6))
(assert (= magic_packet.clk_AT6 self.clk_AT6))
(assert (= f.wrPtrRst.sel_AT6 self.rst_AT6))
(assert (= f.wrPtrRst.in1_AT6 f.zero.out_AT6))
(assert (= f.wrPtrEn.sel_AT6 self.push_AT6))
(assert (= f.wrPtrEn.out_AT6 f.wrPtrRst.in0_AT6))
(assert (= f.wrPtrEn.in1_AT6 f.wrPtrp1.out_AT6))
(assert (= f.wrPtr.out_AT6 f.wrPtrp1.in1_AT6))
(assert (= f.wrPtr.out_AT6 f.wrPtrSlice.in_AT6))
(assert (= f.wrPtr.out_AT6 f.wrPtrEn.in0_AT6))
(assert (= f.wrPtr.in_AT6 f.wrPtrRst.out_AT6))
(assert (= f.wrPtr.clk_AT6 self.clk_AT6))
(assert (= f.rdPtrRst.sel_AT6 self.rst_AT6))
(assert (= f.rdPtrRst.in1_AT6 f.zero.out_AT6))
(assert (= f.rdPtrEn.sel_AT6 self.pop_AT6))
(assert (= f.rdPtrEn.out_AT6 f.rdPtrRst.in0_AT6))
(assert (= f.rdPtrEn.in1_AT6 f.rdPtrp1.out_AT6))
(assert (= f.rdPtr.out_AT6 f.rdPtrp1.in1_AT6))
(assert (= f.rdPtr.out_AT6 f.rdPtrSlice.in_AT6))
(assert (= f.rdPtr.out_AT6 f.rdPtrEn.in0_AT6))
(assert (= f.rdPtr.in_AT6 f.rdPtrRst.out_AT6))
(assert (= f.rdPtr.clk_AT6 self.clk_AT6))
(assert (= f.one.out_AT6 f.wrPtrp1.in0_AT6))
(assert (= f.one.out_AT6 f.rdPtrp1.in0_AT6))
(assert (= f.mem.wen_AT6 self.push_AT6))
(assert (= f.mem.wdata_AT6 self.data_in_AT6))
(assert (= f.mem.waddr_AT6 f.wrPtrSlice.out_AT6))
(assert (= f.mem.rdata_AT6 self.data_out_AT6))
(assert (= f.mem.rdata_AT6 magic_packet_eq.in1_AT6))
(assert (= f.mem.raddr_AT6 f.rdPtrSlice.out_AT6))
(assert (= f.mem.clk_AT6 self.clk_AT6))
(assert (= f.fullEq_2.out_AT6 f.fullCalc.in1_AT6))
(assert (= f.fullEq_2.in1_AT6 f.wrPtrSlice.out_AT6))
(assert (= f.fullEq_2.in0_AT6 f.rdPtrSlice.out_AT6))
(assert (= f.fullEq_1.out_AT6 f.notfullEq_1.in_AT6))
(assert (= f.fullCalc.in0_AT6 f.notfullEq_1.out_AT6))
(assert (= f.emptyEq.out_AT6 self.empty_AT6))
(assert (= f.emptyEq.in1_AT6 f.wrPtr.out_AT6))
(assert (= f.emptyEq.in0_AT6 f.rdPtr.out_AT6))
(assert (= en_or_sp.in1_AT6 start_and_push.out_AT6))
(assert (= en.out_AT6 not_en.in_AT6))
(assert (= en.out_AT6 en_or_sp.in0_AT6))
(assert (= en.in_AT6 en_or_sp.out_AT6))
(assert (= en.clk_AT6 self.clk_AT6))
(assert (= data_out_vld_and2.out_AT6 not_data_out_vld.in_AT6))
(assert (= data_out_vld_and1.out_AT6 data_out_vld_and2.in0_AT6))
(assert (= data_out_vld_and1.in0_AT6 en.out_AT6))
(assert (= cnt_gt_0.out_AT6 data_out_vld_and1.in1_AT6))
(assert (= cnt_gt_0.in1_AT6 zero.out_AT6))
(assert (= cnt_gt_0.in0_AT6 mpt.cnt.out_AT6))
(assert (= self.clk_AT6 #b0))
(assert (= zero.out_AT6 #b0000))
(assert (= (bvand start_and_push.in0_AT6 start_and_push.in1_AT6) start_and_push.out_AT6))
(assert (= (bvor prop_signal_or.in0_AT6 prop_signal_or.in1_AT6) prop_signal_or.out_AT6))
(assert (= (bvnot not_en.in_AT6) not_en.out_AT6))
(assert (= (bvnot not_data_out_vld.in_AT6) not_data_out_vld.out_AT6))
(assert (=> (= next_magic_packet.sel_AT6 #b1) (= next_magic_packet.in1_AT6 next_magic_packet.out_AT6)))
(assert (=> (= next_magic_packet.sel_AT6 #b0) (= next_magic_packet.in0_AT6 next_magic_packet.out_AT6)))
(assert (=> (not (= next_cnt_eq0.in0_AT6 next_cnt_eq0.in1_AT6)) (= next_cnt_eq0.out_AT6 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT6 next_cnt_eq0.in1_AT6) (= next_cnt_eq0.out_AT6 #b1)))
(assert (= mpt.zero.out_AT6 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT6 mpt.ssa_cnt_m1.in1_AT6) mpt.ssa_cnt_m1.out_AT6))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT6 mpt.ssa_cnt_gt_0.in0_AT6) (= mpt.ssa_cnt_gt_0.out_AT6 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT6 mpt.ssa_cnt_and2.in1_AT6) mpt.ssa_cnt_and2.out_AT6))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT6 mpt.ssa_cnt_and1.in1_AT6) mpt.ssa_cnt_and1.out_AT6))
(assert (=> (= mpt.ssa_cnt.sel_AT6 #b1) (= mpt.ssa_cnt.in1_AT6 mpt.ssa_cnt.out_AT6)))
(assert (=> (= mpt.ssa_cnt.sel_AT6 #b0) (= mpt.ssa_cnt.in0_AT6 mpt.ssa_cnt.out_AT6)))
(assert (= mpt.one.out_AT6 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT6) mpt.not_captured.out_AT6))
(assert (= (bvand mpt.next_cnt_and1.in0_AT6 mpt.next_cnt_and1.in1_AT6) mpt.next_cnt_and1.out_AT6))
(assert (=> (= mpt.next_cnt.sel_AT6 #b1) (= mpt.next_cnt.in1_AT6 mpt.next_cnt.out_AT6)))
(assert (=> (= mpt.next_cnt.sel_AT6 #b0) (= mpt.next_cnt.in0_AT6 mpt.next_cnt.out_AT6)))
(assert (= mpt.depth.out_AT6 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT6 #b1) (= mpt.decr_mux.in1_AT6 mpt.decr_mux.out_AT6)))
(assert (=> (= mpt.decr_mux.sel_AT6 #b0) (= mpt.decr_mux.in0_AT6 mpt.decr_mux.out_AT6)))
(assert (= (bvadd mpt.cnt_p1.in0_AT6 mpt.cnt_p1.in1_AT6) mpt.cnt_p1.out_AT6))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT6 mpt.cnt_lt_depth.in1_AT6) (= mpt.cnt_lt_depth.out_AT6 #b1)))
(assert (= (bvand mp_en.in0_AT6 mp_en.in1_AT6) mp_en.out_AT6))
(assert (=> (not (= magic_packet_eq.in0_AT6 magic_packet_eq.in1_AT6)) (= magic_packet_eq.out_AT6 #b0)))
(assert (=> (= magic_packet_eq.in0_AT6 magic_packet_eq.in1_AT6) (= magic_packet_eq.out_AT6 #b1)))
(assert (= f.zero.out_AT6 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT6 f.wrPtrp1.in1_AT6) f.wrPtrp1.out_AT6))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT6) f.wrPtrSlice.out_AT6))
(assert (=> (= f.wrPtrRst.sel_AT6 #b1) (= f.wrPtrRst.in1_AT6 f.wrPtrRst.out_AT6)))
(assert (=> (= f.wrPtrRst.sel_AT6 #b0) (= f.wrPtrRst.in0_AT6 f.wrPtrRst.out_AT6)))
(assert (=> (= f.wrPtrEn.sel_AT6 #b1) (= f.wrPtrEn.in1_AT6 f.wrPtrEn.out_AT6)))
(assert (=> (= f.wrPtrEn.sel_AT6 #b0) (= f.wrPtrEn.in0_AT6 f.wrPtrEn.out_AT6)))
(assert (= (bvadd f.rdPtrp1.in0_AT6 f.rdPtrp1.in1_AT6) f.rdPtrp1.out_AT6))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT6) f.rdPtrSlice.out_AT6))
(assert (=> (= f.rdPtrRst.sel_AT6 #b1) (= f.rdPtrRst.in1_AT6 f.rdPtrRst.out_AT6)))
(assert (=> (= f.rdPtrRst.sel_AT6 #b0) (= f.rdPtrRst.in0_AT6 f.rdPtrRst.out_AT6)))
(assert (=> (= f.rdPtrEn.sel_AT6 #b1) (= f.rdPtrEn.in1_AT6 f.rdPtrEn.out_AT6)))
(assert (=> (= f.rdPtrEn.sel_AT6 #b0) (= f.rdPtrEn.in0_AT6 f.rdPtrEn.out_AT6)))
(assert (= f.one.out_AT6 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT6) f.notfullEq_1.out_AT6))
(assert (= f.mem.rdata_AT6 (select f.mem.array_AT6 f.mem.raddr_AT6)))
(assert (=> (not (= f.fullEq_2.in0_AT6 f.fullEq_2.in1_AT6)) (= f.fullEq_2.out_AT6 #b0)))
(assert (=> (= f.fullEq_2.in0_AT6 f.fullEq_2.in1_AT6) (= f.fullEq_2.out_AT6 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT6 f.fullEq_1.in1_AT6)) (= f.fullEq_1.out_AT6 #b0)))
(assert (=> (= f.fullEq_1.in0_AT6 f.fullEq_1.in1_AT6) (= f.fullEq_1.out_AT6 #b1)))
(assert (= (bvand f.fullCalc.in0_AT6 f.fullCalc.in1_AT6) f.fullCalc.out_AT6))
(assert (=> (not (= f.emptyEq.in0_AT6 f.emptyEq.in1_AT6)) (= f.emptyEq.out_AT6 #b0)))
(assert (=> (= f.emptyEq.in0_AT6 f.emptyEq.in1_AT6) (= f.emptyEq.out_AT6 #b1)))
(assert (= (bvor en_or_sp.in0_AT6 en_or_sp.in1_AT6) en_or_sp.out_AT6))
(assert (= (bvand data_out_vld_and2.in0_AT6 data_out_vld_and2.in1_AT6) data_out_vld_and2.out_AT6))
(assert (= (bvand data_out_vld_and1.in0_AT6 data_out_vld_and1.in1_AT6) data_out_vld_and1.out_AT6))
(assert (= (bvult cnt_gt_0.in1_AT6 cnt_gt_0.in0_AT6) (= cnt_gt_0.out_AT6 #b1)))
(assert (=> (= _-_state_id_-__AT5 #b10) (= _-_state_id_-__AT6 #b10)))
(assert (=> (= _-_state_id_-__AT5 #b01) (= _-_state_id_-__AT6 #b10)))
(assert (=> (= _-_state_id_-__AT5 #b00) (= _-_state_id_-__AT6 #b01)))
(assert (= mpt.cnt.in_AT5 mpt.cnt.out_AT6))
(assert (= magic_packet.in_AT5 magic_packet.out_AT6))
(assert (= magic_packet.init_AT5 magic_packet.init_AT6))
(assert (= f.wrPtr.in_AT5 f.wrPtr.out_AT6))
(assert (= f.rdPtr.in_AT5 f.rdPtr.out_AT6))
(assert (= f.mem.array_AT6 (ite (= f.mem.wen_AT5 #b1) (store f.mem.array_AT5 f.mem.waddr_AT5 f.mem.wdata_AT5) f.mem.array_AT5)))
(assert (= en.init_AT5 en.init_AT6))
(assert (= en.in_AT5 en.out_AT6))
(push 1)

(assert (not (= self.prop_signal_AT6 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT7 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT7 () (_ BitVec 4))
(declare-fun magic_packet.out_AT7 () (_ BitVec 8))
(declare-fun magic_packet.init_AT7 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT7 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT7 () (_ BitVec 4))
(declare-fun f.mem.array_AT7 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT7 () (_ BitVec 1))
(declare-fun en.out_AT7 () (_ BitVec 1))
(declare-fun self.pop_AT7 () (_ BitVec 1))
(declare-fun self.empty_AT7 () (_ BitVec 1))
(declare-fun self.push_AT7 () (_ BitVec 1))
(declare-fun self.full_AT7 () (_ BitVec 1))
(declare-fun self.rst_AT7 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT7 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT7 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT7 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT7 () (_ BitVec 1))
(declare-fun self.start_AT7 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT7 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT7 () (_ BitVec 1))
(declare-fun self.prop_signal_AT7 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT7 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT7 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT7 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT7 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT7 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT7 () (_ BitVec 1))
(declare-fun mp_en.out_AT7 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT7 () (_ BitVec 1))
(declare-fun self.data_in_AT7 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT7 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT7 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT7 () (_ BitVec 1))
(declare-fun zero.out_AT7 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT7 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.one.out_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT7 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT7 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT7 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT7 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT7 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT7 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT7 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT7 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT7 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT7 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT7 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT7 () (_ BitVec 4))
(declare-fun self.clk_AT7 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT7 () (_ BitVec 1))
(declare-fun not_en.out_AT7 () (_ BitVec 1))
(declare-fun mp_en.in1_AT7 () (_ BitVec 1))
(declare-fun start_and_push.out_AT7 () (_ BitVec 1))
(declare-fun mp_en.in0_AT7 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT7 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT7 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT7 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT7 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT7 () (_ BitVec 8))
(declare-fun magic_packet.in_AT7 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT7 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT7 () (_ BitVec 1))
(declare-fun f.zero.out_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT7 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT7 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT7 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT7 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT7 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT7 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT7 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT7 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT7 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT7 () (_ BitVec 4))
(declare-fun f.one.out_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT7 () (_ BitVec 4))
(declare-fun f.mem.wen_AT7 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT7 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT7 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT7 () (_ BitVec 3))
(declare-fun self.data_out_AT7 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT7 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT7 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT7 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT7 () (_ BitVec 3))
(declare-fun f.mem.clk_AT7 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT7 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT7 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT7 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT7 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT7 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT7 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT7 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT7 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT7 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT7 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT7 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT7 () (_ BitVec 1))
(declare-fun not_en.in_AT7 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT7 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT7 () (_ BitVec 1))
(declare-fun en.in_AT7 () (_ BitVec 1))
(declare-fun en.clk_AT7 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT7 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT7 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT7 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT7 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT7 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT7 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT7 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT7 () (_ BitVec 4))

(assert (=> (= self.empty_AT7 #b1) (= self.pop_AT7 #b0)))
(assert (=> (= self.full_AT7 #b1) (= self.push_AT7 #b0)))
(assert (=> (= _-_state_id_-__AT7 #b10) (and true (= self.rst_AT7 #b0))))
(assert (=> (= _-_state_id_-__AT7 #b01) (and (and (and true (= self.rst_AT7 #b1)) (= self.push_AT7 #b0)) (= self.pop_AT7 #b0))))
(assert (=> (= _-_state_id_-__AT7 #b00) (and (and (and true (= self.rst_AT7 #b1)) (= self.push_AT7 #b0)) (= self.pop_AT7 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT7 ((_ extract 3 3) f.wrPtr.out_AT7)))
(assert (= f.fullEq_1.in0_AT7 ((_ extract 3 3) f.rdPtr.out_AT7)))
(assert (= en.out_AT7 mpt.not_captured.in_AT7))
(assert (= self.start_AT7 start_and_push.in0_AT7))
(assert (= self.push_AT7 start_and_push.in1_AT7))
(assert (= self.push_AT7 mpt.ssa_cnt_and1.in1_AT7))
(assert (= self.prop_signal_AT7 prop_signal_or.out_AT7))
(assert (= self.pop_AT7 mpt.next_cnt_and1.in1_AT7))
(assert (= self.full_AT7 f.fullCalc.out_AT7))
(assert (= self.data_out_vld_AT7 data_out_vld_and2.out_AT7))
(assert (= not_data_out_vld.out_AT7 prop_signal_or.in0_AT7))
(assert (= next_magic_packet.sel_AT7 mp_en.out_AT7))
(assert (= next_magic_packet.in1_AT7 self.data_in_AT7))
(assert (= next_cnt_eq0.out_AT7 data_out_vld_and2.in1_AT7))
(assert (= next_cnt_eq0.in1_AT7 zero.out_AT7))
(assert (= mpt.ssa_cnt_gt_0.out_AT7 mpt.next_cnt_and1.in0_AT7))
(assert (= mpt.ssa_cnt_gt_0.in1_AT7 mpt.zero.out_AT7))
(assert (= mpt.ssa_cnt_and1.out_AT7 mpt.ssa_cnt_and2.in0_AT7))
(assert (= mpt.ssa_cnt.sel_AT7 mpt.ssa_cnt_and2.out_AT7))
(assert (= mpt.ssa_cnt.out_AT7 mpt.ssa_cnt_m1.in0_AT7))
(assert (= mpt.ssa_cnt.out_AT7 mpt.ssa_cnt_gt_0.in0_AT7))
(assert (= mpt.one.out_AT7 mpt.ssa_cnt_m1.in1_AT7))
(assert (= mpt.not_captured.out_AT7 mpt.ssa_cnt_and2.in1_AT7))
(assert (= mpt.next_cnt.sel_AT7 self.rst_AT7))
(assert (= mpt.next_cnt.out_AT7 next_cnt_eq0.in0_AT7))
(assert (= mpt.next_cnt.in1_AT7 mpt.zero.out_AT7))
(assert (= mpt.decr_mux.sel_AT7 mpt.next_cnt_and1.out_AT7))
(assert (= mpt.decr_mux.out_AT7 mpt.next_cnt.in0_AT7))
(assert (= mpt.decr_mux.in1_AT7 mpt.ssa_cnt_m1.out_AT7))
(assert (= mpt.decr_mux.in0_AT7 mpt.ssa_cnt.out_AT7))
(assert (= mpt.cnt_p1.out_AT7 mpt.ssa_cnt.in1_AT7))
(assert (= mpt.cnt_p1.in1_AT7 mpt.one.out_AT7))
(assert (= mpt.cnt_lt_depth.out_AT7 mpt.ssa_cnt_and1.in0_AT7))
(assert (= mpt.cnt_lt_depth.in1_AT7 mpt.depth.out_AT7))
(assert (= mpt.cnt.out_AT7 mpt.ssa_cnt.in0_AT7))
(assert (= mpt.cnt.out_AT7 mpt.cnt_p1.in0_AT7))
(assert (= mpt.cnt.out_AT7 mpt.cnt_lt_depth.in0_AT7))
(assert (= mpt.cnt.in_AT7 mpt.next_cnt.out_AT7))
(assert (= mpt.cnt.clk_AT7 self.clk_AT7))
(assert (= mp_en.in1_AT7 not_en.out_AT7))
(assert (= mp_en.in0_AT7 start_and_push.out_AT7))
(assert (= magic_packet_eq.out_AT7 prop_signal_or.in1_AT7))
(assert (= magic_packet.out_AT7 next_magic_packet.in0_AT7))
(assert (= magic_packet.out_AT7 magic_packet_eq.in0_AT7))
(assert (= magic_packet.in_AT7 next_magic_packet.out_AT7))
(assert (= magic_packet.clk_AT7 self.clk_AT7))
(assert (= f.wrPtrRst.sel_AT7 self.rst_AT7))
(assert (= f.wrPtrRst.in1_AT7 f.zero.out_AT7))
(assert (= f.wrPtrEn.sel_AT7 self.push_AT7))
(assert (= f.wrPtrEn.out_AT7 f.wrPtrRst.in0_AT7))
(assert (= f.wrPtrEn.in1_AT7 f.wrPtrp1.out_AT7))
(assert (= f.wrPtr.out_AT7 f.wrPtrp1.in1_AT7))
(assert (= f.wrPtr.out_AT7 f.wrPtrSlice.in_AT7))
(assert (= f.wrPtr.out_AT7 f.wrPtrEn.in0_AT7))
(assert (= f.wrPtr.in_AT7 f.wrPtrRst.out_AT7))
(assert (= f.wrPtr.clk_AT7 self.clk_AT7))
(assert (= f.rdPtrRst.sel_AT7 self.rst_AT7))
(assert (= f.rdPtrRst.in1_AT7 f.zero.out_AT7))
(assert (= f.rdPtrEn.sel_AT7 self.pop_AT7))
(assert (= f.rdPtrEn.out_AT7 f.rdPtrRst.in0_AT7))
(assert (= f.rdPtrEn.in1_AT7 f.rdPtrp1.out_AT7))
(assert (= f.rdPtr.out_AT7 f.rdPtrp1.in1_AT7))
(assert (= f.rdPtr.out_AT7 f.rdPtrSlice.in_AT7))
(assert (= f.rdPtr.out_AT7 f.rdPtrEn.in0_AT7))
(assert (= f.rdPtr.in_AT7 f.rdPtrRst.out_AT7))
(assert (= f.rdPtr.clk_AT7 self.clk_AT7))
(assert (= f.one.out_AT7 f.wrPtrp1.in0_AT7))
(assert (= f.one.out_AT7 f.rdPtrp1.in0_AT7))
(assert (= f.mem.wen_AT7 self.push_AT7))
(assert (= f.mem.wdata_AT7 self.data_in_AT7))
(assert (= f.mem.waddr_AT7 f.wrPtrSlice.out_AT7))
(assert (= f.mem.rdata_AT7 self.data_out_AT7))
(assert (= f.mem.rdata_AT7 magic_packet_eq.in1_AT7))
(assert (= f.mem.raddr_AT7 f.rdPtrSlice.out_AT7))
(assert (= f.mem.clk_AT7 self.clk_AT7))
(assert (= f.fullEq_2.out_AT7 f.fullCalc.in1_AT7))
(assert (= f.fullEq_2.in1_AT7 f.wrPtrSlice.out_AT7))
(assert (= f.fullEq_2.in0_AT7 f.rdPtrSlice.out_AT7))
(assert (= f.fullEq_1.out_AT7 f.notfullEq_1.in_AT7))
(assert (= f.fullCalc.in0_AT7 f.notfullEq_1.out_AT7))
(assert (= f.emptyEq.out_AT7 self.empty_AT7))
(assert (= f.emptyEq.in1_AT7 f.wrPtr.out_AT7))
(assert (= f.emptyEq.in0_AT7 f.rdPtr.out_AT7))
(assert (= en_or_sp.in1_AT7 start_and_push.out_AT7))
(assert (= en.out_AT7 not_en.in_AT7))
(assert (= en.out_AT7 en_or_sp.in0_AT7))
(assert (= en.in_AT7 en_or_sp.out_AT7))
(assert (= en.clk_AT7 self.clk_AT7))
(assert (= data_out_vld_and2.out_AT7 not_data_out_vld.in_AT7))
(assert (= data_out_vld_and1.out_AT7 data_out_vld_and2.in0_AT7))
(assert (= data_out_vld_and1.in0_AT7 en.out_AT7))
(assert (= cnt_gt_0.out_AT7 data_out_vld_and1.in1_AT7))
(assert (= cnt_gt_0.in1_AT7 zero.out_AT7))
(assert (= cnt_gt_0.in0_AT7 mpt.cnt.out_AT7))
(assert (= self.clk_AT7 #b0))
(assert (= zero.out_AT7 #b0000))
(assert (= (bvand start_and_push.in0_AT7 start_and_push.in1_AT7) start_and_push.out_AT7))
(assert (= (bvor prop_signal_or.in0_AT7 prop_signal_or.in1_AT7) prop_signal_or.out_AT7))
(assert (= (bvnot not_en.in_AT7) not_en.out_AT7))
(assert (= (bvnot not_data_out_vld.in_AT7) not_data_out_vld.out_AT7))
(assert (=> (= next_magic_packet.sel_AT7 #b1) (= next_magic_packet.in1_AT7 next_magic_packet.out_AT7)))
(assert (=> (= next_magic_packet.sel_AT7 #b0) (= next_magic_packet.in0_AT7 next_magic_packet.out_AT7)))
(assert (=> (not (= next_cnt_eq0.in0_AT7 next_cnt_eq0.in1_AT7)) (= next_cnt_eq0.out_AT7 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT7 next_cnt_eq0.in1_AT7) (= next_cnt_eq0.out_AT7 #b1)))
(assert (= mpt.zero.out_AT7 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT7 mpt.ssa_cnt_m1.in1_AT7) mpt.ssa_cnt_m1.out_AT7))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT7 mpt.ssa_cnt_gt_0.in0_AT7) (= mpt.ssa_cnt_gt_0.out_AT7 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT7 mpt.ssa_cnt_and2.in1_AT7) mpt.ssa_cnt_and2.out_AT7))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT7 mpt.ssa_cnt_and1.in1_AT7) mpt.ssa_cnt_and1.out_AT7))
(assert (=> (= mpt.ssa_cnt.sel_AT7 #b1) (= mpt.ssa_cnt.in1_AT7 mpt.ssa_cnt.out_AT7)))
(assert (=> (= mpt.ssa_cnt.sel_AT7 #b0) (= mpt.ssa_cnt.in0_AT7 mpt.ssa_cnt.out_AT7)))
(assert (= mpt.one.out_AT7 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT7) mpt.not_captured.out_AT7))
(assert (= (bvand mpt.next_cnt_and1.in0_AT7 mpt.next_cnt_and1.in1_AT7) mpt.next_cnt_and1.out_AT7))
(assert (=> (= mpt.next_cnt.sel_AT7 #b1) (= mpt.next_cnt.in1_AT7 mpt.next_cnt.out_AT7)))
(assert (=> (= mpt.next_cnt.sel_AT7 #b0) (= mpt.next_cnt.in0_AT7 mpt.next_cnt.out_AT7)))
(assert (= mpt.depth.out_AT7 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT7 #b1) (= mpt.decr_mux.in1_AT7 mpt.decr_mux.out_AT7)))
(assert (=> (= mpt.decr_mux.sel_AT7 #b0) (= mpt.decr_mux.in0_AT7 mpt.decr_mux.out_AT7)))
(assert (= (bvadd mpt.cnt_p1.in0_AT7 mpt.cnt_p1.in1_AT7) mpt.cnt_p1.out_AT7))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT7 mpt.cnt_lt_depth.in1_AT7) (= mpt.cnt_lt_depth.out_AT7 #b1)))
(assert (= (bvand mp_en.in0_AT7 mp_en.in1_AT7) mp_en.out_AT7))
(assert (=> (not (= magic_packet_eq.in0_AT7 magic_packet_eq.in1_AT7)) (= magic_packet_eq.out_AT7 #b0)))
(assert (=> (= magic_packet_eq.in0_AT7 magic_packet_eq.in1_AT7) (= magic_packet_eq.out_AT7 #b1)))
(assert (= f.zero.out_AT7 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT7 f.wrPtrp1.in1_AT7) f.wrPtrp1.out_AT7))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT7) f.wrPtrSlice.out_AT7))
(assert (=> (= f.wrPtrRst.sel_AT7 #b1) (= f.wrPtrRst.in1_AT7 f.wrPtrRst.out_AT7)))
(assert (=> (= f.wrPtrRst.sel_AT7 #b0) (= f.wrPtrRst.in0_AT7 f.wrPtrRst.out_AT7)))
(assert (=> (= f.wrPtrEn.sel_AT7 #b1) (= f.wrPtrEn.in1_AT7 f.wrPtrEn.out_AT7)))
(assert (=> (= f.wrPtrEn.sel_AT7 #b0) (= f.wrPtrEn.in0_AT7 f.wrPtrEn.out_AT7)))
(assert (= (bvadd f.rdPtrp1.in0_AT7 f.rdPtrp1.in1_AT7) f.rdPtrp1.out_AT7))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT7) f.rdPtrSlice.out_AT7))
(assert (=> (= f.rdPtrRst.sel_AT7 #b1) (= f.rdPtrRst.in1_AT7 f.rdPtrRst.out_AT7)))
(assert (=> (= f.rdPtrRst.sel_AT7 #b0) (= f.rdPtrRst.in0_AT7 f.rdPtrRst.out_AT7)))
(assert (=> (= f.rdPtrEn.sel_AT7 #b1) (= f.rdPtrEn.in1_AT7 f.rdPtrEn.out_AT7)))
(assert (=> (= f.rdPtrEn.sel_AT7 #b0) (= f.rdPtrEn.in0_AT7 f.rdPtrEn.out_AT7)))
(assert (= f.one.out_AT7 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT7) f.notfullEq_1.out_AT7))
(assert (= f.mem.rdata_AT7 (select f.mem.array_AT7 f.mem.raddr_AT7)))
(assert (=> (not (= f.fullEq_2.in0_AT7 f.fullEq_2.in1_AT7)) (= f.fullEq_2.out_AT7 #b0)))
(assert (=> (= f.fullEq_2.in0_AT7 f.fullEq_2.in1_AT7) (= f.fullEq_2.out_AT7 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT7 f.fullEq_1.in1_AT7)) (= f.fullEq_1.out_AT7 #b0)))
(assert (=> (= f.fullEq_1.in0_AT7 f.fullEq_1.in1_AT7) (= f.fullEq_1.out_AT7 #b1)))
(assert (= (bvand f.fullCalc.in0_AT7 f.fullCalc.in1_AT7) f.fullCalc.out_AT7))
(assert (=> (not (= f.emptyEq.in0_AT7 f.emptyEq.in1_AT7)) (= f.emptyEq.out_AT7 #b0)))
(assert (=> (= f.emptyEq.in0_AT7 f.emptyEq.in1_AT7) (= f.emptyEq.out_AT7 #b1)))
(assert (= (bvor en_or_sp.in0_AT7 en_or_sp.in1_AT7) en_or_sp.out_AT7))
(assert (= (bvand data_out_vld_and2.in0_AT7 data_out_vld_and2.in1_AT7) data_out_vld_and2.out_AT7))
(assert (= (bvand data_out_vld_and1.in0_AT7 data_out_vld_and1.in1_AT7) data_out_vld_and1.out_AT7))
(assert (= (bvult cnt_gt_0.in1_AT7 cnt_gt_0.in0_AT7) (= cnt_gt_0.out_AT7 #b1)))
(assert (=> (= _-_state_id_-__AT6 #b10) (= _-_state_id_-__AT7 #b10)))
(assert (=> (= _-_state_id_-__AT6 #b01) (= _-_state_id_-__AT7 #b10)))
(assert (=> (= _-_state_id_-__AT6 #b00) (= _-_state_id_-__AT7 #b01)))
(assert (= mpt.cnt.in_AT6 mpt.cnt.out_AT7))
(assert (= magic_packet.in_AT6 magic_packet.out_AT7))
(assert (= magic_packet.init_AT6 magic_packet.init_AT7))
(assert (= f.wrPtr.in_AT6 f.wrPtr.out_AT7))
(assert (= f.rdPtr.in_AT6 f.rdPtr.out_AT7))
(assert (= f.mem.array_AT7 (ite (= f.mem.wen_AT6 #b1) (store f.mem.array_AT6 f.mem.waddr_AT6 f.mem.wdata_AT6) f.mem.array_AT6)))
(assert (= en.init_AT6 en.init_AT7))
(assert (= en.in_AT6 en.out_AT7))
(push 1)

(assert (not (= self.prop_signal_AT7 #b1)))
(check-sat)

(pop 1)
(declare-fun f.rdPtrRst.in0_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT8 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT8 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT8 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT8 () (_ BitVec 4))
(declare-fun f.one.out_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT8 () (_ BitVec 4))
(declare-fun f.mem.wen_AT8 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT8 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT8 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT8 () (_ BitVec 3))
(declare-fun self.data_out_AT8 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT8 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT8 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT8 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT8 () (_ BitVec 3))
(declare-fun f.mem.clk_AT8 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT8 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT8 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT8 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT8 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT8 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT8 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT8 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT8 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT8 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT8 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT8 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT8 () (_ BitVec 1))
(declare-fun not_en.in_AT8 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT8 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT8 () (_ BitVec 1))
(declare-fun en.in_AT8 () (_ BitVec 1))
(declare-fun en.clk_AT8 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT8 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT8 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT8 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT8 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT8 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT8 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT8 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT8 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT8 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT8 () (_ BitVec 4))
(declare-fun magic_packet.out_AT8 () (_ BitVec 8))
(declare-fun magic_packet.init_AT8 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT8 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT8 () (_ BitVec 4))
(declare-fun f.mem.array_AT8 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT8 () (_ BitVec 1))
(declare-fun en.out_AT8 () (_ BitVec 1))
(declare-fun self.pop_AT8 () (_ BitVec 1))
(declare-fun self.empty_AT8 () (_ BitVec 1))
(declare-fun self.push_AT8 () (_ BitVec 1))
(declare-fun self.full_AT8 () (_ BitVec 1))
(declare-fun self.rst_AT8 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT8 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT8 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT8 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT8 () (_ BitVec 1))
(declare-fun self.start_AT8 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT8 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT8 () (_ BitVec 1))
(declare-fun self.prop_signal_AT8 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT8 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT8 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT8 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT8 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT8 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT8 () (_ BitVec 1))
(declare-fun mp_en.out_AT8 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT8 () (_ BitVec 1))
(declare-fun self.data_in_AT8 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT8 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT8 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT8 () (_ BitVec 1))
(declare-fun zero.out_AT8 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT8 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.one.out_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT8 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT8 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT8 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT8 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT8 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT8 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT8 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT8 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT8 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT8 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT8 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT8 () (_ BitVec 4))
(declare-fun self.clk_AT8 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT8 () (_ BitVec 1))
(declare-fun not_en.out_AT8 () (_ BitVec 1))
(declare-fun mp_en.in1_AT8 () (_ BitVec 1))
(declare-fun start_and_push.out_AT8 () (_ BitVec 1))
(declare-fun mp_en.in0_AT8 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT8 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT8 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT8 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT8 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT8 () (_ BitVec 8))
(declare-fun magic_packet.in_AT8 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT8 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT8 () (_ BitVec 1))
(declare-fun f.zero.out_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT8 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT8 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT8 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT8 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT8 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT8 () (_ BitVec 1))

(assert (=> (= self.empty_AT8 #b1) (= self.pop_AT8 #b0)))
(assert (=> (= self.full_AT8 #b1) (= self.push_AT8 #b0)))
(assert (=> (= _-_state_id_-__AT8 #b10) (and true (= self.rst_AT8 #b0))))
(assert (=> (= _-_state_id_-__AT8 #b01) (and (and (and true (= self.rst_AT8 #b1)) (= self.push_AT8 #b0)) (= self.pop_AT8 #b0))))
(assert (=> (= _-_state_id_-__AT8 #b00) (and (and (and true (= self.rst_AT8 #b1)) (= self.push_AT8 #b0)) (= self.pop_AT8 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT8 ((_ extract 3 3) f.wrPtr.out_AT8)))
(assert (= f.fullEq_1.in0_AT8 ((_ extract 3 3) f.rdPtr.out_AT8)))
(assert (= en.out_AT8 mpt.not_captured.in_AT8))
(assert (= self.start_AT8 start_and_push.in0_AT8))
(assert (= self.push_AT8 start_and_push.in1_AT8))
(assert (= self.push_AT8 mpt.ssa_cnt_and1.in1_AT8))
(assert (= self.prop_signal_AT8 prop_signal_or.out_AT8))
(assert (= self.pop_AT8 mpt.next_cnt_and1.in1_AT8))
(assert (= self.full_AT8 f.fullCalc.out_AT8))
(assert (= self.data_out_vld_AT8 data_out_vld_and2.out_AT8))
(assert (= not_data_out_vld.out_AT8 prop_signal_or.in0_AT8))
(assert (= next_magic_packet.sel_AT8 mp_en.out_AT8))
(assert (= next_magic_packet.in1_AT8 self.data_in_AT8))
(assert (= next_cnt_eq0.out_AT8 data_out_vld_and2.in1_AT8))
(assert (= next_cnt_eq0.in1_AT8 zero.out_AT8))
(assert (= mpt.ssa_cnt_gt_0.out_AT8 mpt.next_cnt_and1.in0_AT8))
(assert (= mpt.ssa_cnt_gt_0.in1_AT8 mpt.zero.out_AT8))
(assert (= mpt.ssa_cnt_and1.out_AT8 mpt.ssa_cnt_and2.in0_AT8))
(assert (= mpt.ssa_cnt.sel_AT8 mpt.ssa_cnt_and2.out_AT8))
(assert (= mpt.ssa_cnt.out_AT8 mpt.ssa_cnt_m1.in0_AT8))
(assert (= mpt.ssa_cnt.out_AT8 mpt.ssa_cnt_gt_0.in0_AT8))
(assert (= mpt.one.out_AT8 mpt.ssa_cnt_m1.in1_AT8))
(assert (= mpt.not_captured.out_AT8 mpt.ssa_cnt_and2.in1_AT8))
(assert (= mpt.next_cnt.sel_AT8 self.rst_AT8))
(assert (= mpt.next_cnt.out_AT8 next_cnt_eq0.in0_AT8))
(assert (= mpt.next_cnt.in1_AT8 mpt.zero.out_AT8))
(assert (= mpt.decr_mux.sel_AT8 mpt.next_cnt_and1.out_AT8))
(assert (= mpt.decr_mux.out_AT8 mpt.next_cnt.in0_AT8))
(assert (= mpt.decr_mux.in1_AT8 mpt.ssa_cnt_m1.out_AT8))
(assert (= mpt.decr_mux.in0_AT8 mpt.ssa_cnt.out_AT8))
(assert (= mpt.cnt_p1.out_AT8 mpt.ssa_cnt.in1_AT8))
(assert (= mpt.cnt_p1.in1_AT8 mpt.one.out_AT8))
(assert (= mpt.cnt_lt_depth.out_AT8 mpt.ssa_cnt_and1.in0_AT8))
(assert (= mpt.cnt_lt_depth.in1_AT8 mpt.depth.out_AT8))
(assert (= mpt.cnt.out_AT8 mpt.ssa_cnt.in0_AT8))
(assert (= mpt.cnt.out_AT8 mpt.cnt_p1.in0_AT8))
(assert (= mpt.cnt.out_AT8 mpt.cnt_lt_depth.in0_AT8))
(assert (= mpt.cnt.in_AT8 mpt.next_cnt.out_AT8))
(assert (= mpt.cnt.clk_AT8 self.clk_AT8))
(assert (= mp_en.in1_AT8 not_en.out_AT8))
(assert (= mp_en.in0_AT8 start_and_push.out_AT8))
(assert (= magic_packet_eq.out_AT8 prop_signal_or.in1_AT8))
(assert (= magic_packet.out_AT8 next_magic_packet.in0_AT8))
(assert (= magic_packet.out_AT8 magic_packet_eq.in0_AT8))
(assert (= magic_packet.in_AT8 next_magic_packet.out_AT8))
(assert (= magic_packet.clk_AT8 self.clk_AT8))
(assert (= f.wrPtrRst.sel_AT8 self.rst_AT8))
(assert (= f.wrPtrRst.in1_AT8 f.zero.out_AT8))
(assert (= f.wrPtrEn.sel_AT8 self.push_AT8))
(assert (= f.wrPtrEn.out_AT8 f.wrPtrRst.in0_AT8))
(assert (= f.wrPtrEn.in1_AT8 f.wrPtrp1.out_AT8))
(assert (= f.wrPtr.out_AT8 f.wrPtrp1.in1_AT8))
(assert (= f.wrPtr.out_AT8 f.wrPtrSlice.in_AT8))
(assert (= f.wrPtr.out_AT8 f.wrPtrEn.in0_AT8))
(assert (= f.wrPtr.in_AT8 f.wrPtrRst.out_AT8))
(assert (= f.wrPtr.clk_AT8 self.clk_AT8))
(assert (= f.rdPtrRst.sel_AT8 self.rst_AT8))
(assert (= f.rdPtrRst.in1_AT8 f.zero.out_AT8))
(assert (= f.rdPtrEn.sel_AT8 self.pop_AT8))
(assert (= f.rdPtrEn.out_AT8 f.rdPtrRst.in0_AT8))
(assert (= f.rdPtrEn.in1_AT8 f.rdPtrp1.out_AT8))
(assert (= f.rdPtr.out_AT8 f.rdPtrp1.in1_AT8))
(assert (= f.rdPtr.out_AT8 f.rdPtrSlice.in_AT8))
(assert (= f.rdPtr.out_AT8 f.rdPtrEn.in0_AT8))
(assert (= f.rdPtr.in_AT8 f.rdPtrRst.out_AT8))
(assert (= f.rdPtr.clk_AT8 self.clk_AT8))
(assert (= f.one.out_AT8 f.wrPtrp1.in0_AT8))
(assert (= f.one.out_AT8 f.rdPtrp1.in0_AT8))
(assert (= f.mem.wen_AT8 self.push_AT8))
(assert (= f.mem.wdata_AT8 self.data_in_AT8))
(assert (= f.mem.waddr_AT8 f.wrPtrSlice.out_AT8))
(assert (= f.mem.rdata_AT8 self.data_out_AT8))
(assert (= f.mem.rdata_AT8 magic_packet_eq.in1_AT8))
(assert (= f.mem.raddr_AT8 f.rdPtrSlice.out_AT8))
(assert (= f.mem.clk_AT8 self.clk_AT8))
(assert (= f.fullEq_2.out_AT8 f.fullCalc.in1_AT8))
(assert (= f.fullEq_2.in1_AT8 f.wrPtrSlice.out_AT8))
(assert (= f.fullEq_2.in0_AT8 f.rdPtrSlice.out_AT8))
(assert (= f.fullEq_1.out_AT8 f.notfullEq_1.in_AT8))
(assert (= f.fullCalc.in0_AT8 f.notfullEq_1.out_AT8))
(assert (= f.emptyEq.out_AT8 self.empty_AT8))
(assert (= f.emptyEq.in1_AT8 f.wrPtr.out_AT8))
(assert (= f.emptyEq.in0_AT8 f.rdPtr.out_AT8))
(assert (= en_or_sp.in1_AT8 start_and_push.out_AT8))
(assert (= en.out_AT8 not_en.in_AT8))
(assert (= en.out_AT8 en_or_sp.in0_AT8))
(assert (= en.in_AT8 en_or_sp.out_AT8))
(assert (= en.clk_AT8 self.clk_AT8))
(assert (= data_out_vld_and2.out_AT8 not_data_out_vld.in_AT8))
(assert (= data_out_vld_and1.out_AT8 data_out_vld_and2.in0_AT8))
(assert (= data_out_vld_and1.in0_AT8 en.out_AT8))
(assert (= cnt_gt_0.out_AT8 data_out_vld_and1.in1_AT8))
(assert (= cnt_gt_0.in1_AT8 zero.out_AT8))
(assert (= cnt_gt_0.in0_AT8 mpt.cnt.out_AT8))
(assert (= self.clk_AT8 #b0))
(assert (= zero.out_AT8 #b0000))
(assert (= (bvand start_and_push.in0_AT8 start_and_push.in1_AT8) start_and_push.out_AT8))
(assert (= (bvor prop_signal_or.in0_AT8 prop_signal_or.in1_AT8) prop_signal_or.out_AT8))
(assert (= (bvnot not_en.in_AT8) not_en.out_AT8))
(assert (= (bvnot not_data_out_vld.in_AT8) not_data_out_vld.out_AT8))
(assert (=> (= next_magic_packet.sel_AT8 #b1) (= next_magic_packet.in1_AT8 next_magic_packet.out_AT8)))
(assert (=> (= next_magic_packet.sel_AT8 #b0) (= next_magic_packet.in0_AT8 next_magic_packet.out_AT8)))
(assert (=> (not (= next_cnt_eq0.in0_AT8 next_cnt_eq0.in1_AT8)) (= next_cnt_eq0.out_AT8 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT8 next_cnt_eq0.in1_AT8) (= next_cnt_eq0.out_AT8 #b1)))
(assert (= mpt.zero.out_AT8 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT8 mpt.ssa_cnt_m1.in1_AT8) mpt.ssa_cnt_m1.out_AT8))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT8 mpt.ssa_cnt_gt_0.in0_AT8) (= mpt.ssa_cnt_gt_0.out_AT8 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT8 mpt.ssa_cnt_and2.in1_AT8) mpt.ssa_cnt_and2.out_AT8))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT8 mpt.ssa_cnt_and1.in1_AT8) mpt.ssa_cnt_and1.out_AT8))
(assert (=> (= mpt.ssa_cnt.sel_AT8 #b1) (= mpt.ssa_cnt.in1_AT8 mpt.ssa_cnt.out_AT8)))
(assert (=> (= mpt.ssa_cnt.sel_AT8 #b0) (= mpt.ssa_cnt.in0_AT8 mpt.ssa_cnt.out_AT8)))
(assert (= mpt.one.out_AT8 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT8) mpt.not_captured.out_AT8))
(assert (= (bvand mpt.next_cnt_and1.in0_AT8 mpt.next_cnt_and1.in1_AT8) mpt.next_cnt_and1.out_AT8))
(assert (=> (= mpt.next_cnt.sel_AT8 #b1) (= mpt.next_cnt.in1_AT8 mpt.next_cnt.out_AT8)))
(assert (=> (= mpt.next_cnt.sel_AT8 #b0) (= mpt.next_cnt.in0_AT8 mpt.next_cnt.out_AT8)))
(assert (= mpt.depth.out_AT8 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT8 #b1) (= mpt.decr_mux.in1_AT8 mpt.decr_mux.out_AT8)))
(assert (=> (= mpt.decr_mux.sel_AT8 #b0) (= mpt.decr_mux.in0_AT8 mpt.decr_mux.out_AT8)))
(assert (= (bvadd mpt.cnt_p1.in0_AT8 mpt.cnt_p1.in1_AT8) mpt.cnt_p1.out_AT8))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT8 mpt.cnt_lt_depth.in1_AT8) (= mpt.cnt_lt_depth.out_AT8 #b1)))
(assert (= (bvand mp_en.in0_AT8 mp_en.in1_AT8) mp_en.out_AT8))
(assert (=> (not (= magic_packet_eq.in0_AT8 magic_packet_eq.in1_AT8)) (= magic_packet_eq.out_AT8 #b0)))
(assert (=> (= magic_packet_eq.in0_AT8 magic_packet_eq.in1_AT8) (= magic_packet_eq.out_AT8 #b1)))
(assert (= f.zero.out_AT8 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT8 f.wrPtrp1.in1_AT8) f.wrPtrp1.out_AT8))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT8) f.wrPtrSlice.out_AT8))
(assert (=> (= f.wrPtrRst.sel_AT8 #b1) (= f.wrPtrRst.in1_AT8 f.wrPtrRst.out_AT8)))
(assert (=> (= f.wrPtrRst.sel_AT8 #b0) (= f.wrPtrRst.in0_AT8 f.wrPtrRst.out_AT8)))
(assert (=> (= f.wrPtrEn.sel_AT8 #b1) (= f.wrPtrEn.in1_AT8 f.wrPtrEn.out_AT8)))
(assert (=> (= f.wrPtrEn.sel_AT8 #b0) (= f.wrPtrEn.in0_AT8 f.wrPtrEn.out_AT8)))
(assert (= (bvadd f.rdPtrp1.in0_AT8 f.rdPtrp1.in1_AT8) f.rdPtrp1.out_AT8))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT8) f.rdPtrSlice.out_AT8))
(assert (=> (= f.rdPtrRst.sel_AT8 #b1) (= f.rdPtrRst.in1_AT8 f.rdPtrRst.out_AT8)))
(assert (=> (= f.rdPtrRst.sel_AT8 #b0) (= f.rdPtrRst.in0_AT8 f.rdPtrRst.out_AT8)))
(assert (=> (= f.rdPtrEn.sel_AT8 #b1) (= f.rdPtrEn.in1_AT8 f.rdPtrEn.out_AT8)))
(assert (=> (= f.rdPtrEn.sel_AT8 #b0) (= f.rdPtrEn.in0_AT8 f.rdPtrEn.out_AT8)))
(assert (= f.one.out_AT8 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT8) f.notfullEq_1.out_AT8))
(assert (= f.mem.rdata_AT8 (select f.mem.array_AT8 f.mem.raddr_AT8)))
(assert (=> (not (= f.fullEq_2.in0_AT8 f.fullEq_2.in1_AT8)) (= f.fullEq_2.out_AT8 #b0)))
(assert (=> (= f.fullEq_2.in0_AT8 f.fullEq_2.in1_AT8) (= f.fullEq_2.out_AT8 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT8 f.fullEq_1.in1_AT8)) (= f.fullEq_1.out_AT8 #b0)))
(assert (=> (= f.fullEq_1.in0_AT8 f.fullEq_1.in1_AT8) (= f.fullEq_1.out_AT8 #b1)))
(assert (= (bvand f.fullCalc.in0_AT8 f.fullCalc.in1_AT8) f.fullCalc.out_AT8))
(assert (=> (not (= f.emptyEq.in0_AT8 f.emptyEq.in1_AT8)) (= f.emptyEq.out_AT8 #b0)))
(assert (=> (= f.emptyEq.in0_AT8 f.emptyEq.in1_AT8) (= f.emptyEq.out_AT8 #b1)))
(assert (= (bvor en_or_sp.in0_AT8 en_or_sp.in1_AT8) en_or_sp.out_AT8))
(assert (= (bvand data_out_vld_and2.in0_AT8 data_out_vld_and2.in1_AT8) data_out_vld_and2.out_AT8))
(assert (= (bvand data_out_vld_and1.in0_AT8 data_out_vld_and1.in1_AT8) data_out_vld_and1.out_AT8))
(assert (= (bvult cnt_gt_0.in1_AT8 cnt_gt_0.in0_AT8) (= cnt_gt_0.out_AT8 #b1)))
(assert (=> (= _-_state_id_-__AT7 #b10) (= _-_state_id_-__AT8 #b10)))
(assert (=> (= _-_state_id_-__AT7 #b01) (= _-_state_id_-__AT8 #b10)))
(assert (=> (= _-_state_id_-__AT7 #b00) (= _-_state_id_-__AT8 #b01)))
(assert (= mpt.cnt.in_AT7 mpt.cnt.out_AT8))
(assert (= magic_packet.in_AT7 magic_packet.out_AT8))
(assert (= magic_packet.init_AT7 magic_packet.init_AT8))
(assert (= f.wrPtr.in_AT7 f.wrPtr.out_AT8))
(assert (= f.rdPtr.in_AT7 f.rdPtr.out_AT8))
(assert (= f.mem.array_AT8 (ite (= f.mem.wen_AT7 #b1) (store f.mem.array_AT7 f.mem.waddr_AT7 f.mem.wdata_AT7) f.mem.array_AT7)))
(assert (= en.init_AT7 en.init_AT8))
(assert (= en.in_AT7 en.out_AT8))
(push 1)

(assert (not (= self.prop_signal_AT8 #b1)))
(check-sat)

(pop 1)
(declare-fun mp_en.out_AT9 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT9 () (_ BitVec 1))
(declare-fun self.data_in_AT9 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT9 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT9 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT9 () (_ BitVec 1))
(declare-fun zero.out_AT9 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT9 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.one.out_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT9 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT9 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT9 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT9 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT9 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT9 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT9 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT9 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT9 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT9 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT9 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT9 () (_ BitVec 4))
(declare-fun self.clk_AT9 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT9 () (_ BitVec 1))
(declare-fun not_en.out_AT9 () (_ BitVec 1))
(declare-fun mp_en.in1_AT9 () (_ BitVec 1))
(declare-fun start_and_push.out_AT9 () (_ BitVec 1))
(declare-fun mp_en.in0_AT9 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT9 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT9 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT9 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT9 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT9 () (_ BitVec 8))
(declare-fun magic_packet.in_AT9 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT9 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT9 () (_ BitVec 1))
(declare-fun f.zero.out_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT9 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT9 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT9 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT9 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT9 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT9 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT9 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT9 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT9 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT9 () (_ BitVec 4))
(declare-fun f.one.out_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT9 () (_ BitVec 4))
(declare-fun f.mem.wen_AT9 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT9 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT9 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT9 () (_ BitVec 3))
(declare-fun self.data_out_AT9 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT9 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT9 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT9 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT9 () (_ BitVec 3))
(declare-fun f.mem.clk_AT9 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT9 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT9 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT9 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT9 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT9 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT9 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT9 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT9 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT9 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT9 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT9 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT9 () (_ BitVec 1))
(declare-fun not_en.in_AT9 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT9 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT9 () (_ BitVec 1))
(declare-fun en.in_AT9 () (_ BitVec 1))
(declare-fun en.clk_AT9 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT9 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT9 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT9 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT9 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT9 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT9 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT9 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT9 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT9 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT9 () (_ BitVec 4))
(declare-fun magic_packet.out_AT9 () (_ BitVec 8))
(declare-fun magic_packet.init_AT9 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT9 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT9 () (_ BitVec 4))
(declare-fun f.mem.array_AT9 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT9 () (_ BitVec 1))
(declare-fun en.out_AT9 () (_ BitVec 1))
(declare-fun self.pop_AT9 () (_ BitVec 1))
(declare-fun self.empty_AT9 () (_ BitVec 1))
(declare-fun self.push_AT9 () (_ BitVec 1))
(declare-fun self.full_AT9 () (_ BitVec 1))
(declare-fun self.rst_AT9 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT9 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT9 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT9 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT9 () (_ BitVec 1))
(declare-fun self.start_AT9 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT9 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT9 () (_ BitVec 1))
(declare-fun self.prop_signal_AT9 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT9 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT9 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT9 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT9 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT9 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT9 () (_ BitVec 1))

(assert (=> (= self.empty_AT9 #b1) (= self.pop_AT9 #b0)))
(assert (=> (= self.full_AT9 #b1) (= self.push_AT9 #b0)))
(assert (=> (= _-_state_id_-__AT9 #b10) (and true (= self.rst_AT9 #b0))))
(assert (=> (= _-_state_id_-__AT9 #b01) (and (and (and true (= self.rst_AT9 #b1)) (= self.push_AT9 #b0)) (= self.pop_AT9 #b0))))
(assert (=> (= _-_state_id_-__AT9 #b00) (and (and (and true (= self.rst_AT9 #b1)) (= self.push_AT9 #b0)) (= self.pop_AT9 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT9 ((_ extract 3 3) f.wrPtr.out_AT9)))
(assert (= f.fullEq_1.in0_AT9 ((_ extract 3 3) f.rdPtr.out_AT9)))
(assert (= en.out_AT9 mpt.not_captured.in_AT9))
(assert (= self.start_AT9 start_and_push.in0_AT9))
(assert (= self.push_AT9 start_and_push.in1_AT9))
(assert (= self.push_AT9 mpt.ssa_cnt_and1.in1_AT9))
(assert (= self.prop_signal_AT9 prop_signal_or.out_AT9))
(assert (= self.pop_AT9 mpt.next_cnt_and1.in1_AT9))
(assert (= self.full_AT9 f.fullCalc.out_AT9))
(assert (= self.data_out_vld_AT9 data_out_vld_and2.out_AT9))
(assert (= not_data_out_vld.out_AT9 prop_signal_or.in0_AT9))
(assert (= next_magic_packet.sel_AT9 mp_en.out_AT9))
(assert (= next_magic_packet.in1_AT9 self.data_in_AT9))
(assert (= next_cnt_eq0.out_AT9 data_out_vld_and2.in1_AT9))
(assert (= next_cnt_eq0.in1_AT9 zero.out_AT9))
(assert (= mpt.ssa_cnt_gt_0.out_AT9 mpt.next_cnt_and1.in0_AT9))
(assert (= mpt.ssa_cnt_gt_0.in1_AT9 mpt.zero.out_AT9))
(assert (= mpt.ssa_cnt_and1.out_AT9 mpt.ssa_cnt_and2.in0_AT9))
(assert (= mpt.ssa_cnt.sel_AT9 mpt.ssa_cnt_and2.out_AT9))
(assert (= mpt.ssa_cnt.out_AT9 mpt.ssa_cnt_m1.in0_AT9))
(assert (= mpt.ssa_cnt.out_AT9 mpt.ssa_cnt_gt_0.in0_AT9))
(assert (= mpt.one.out_AT9 mpt.ssa_cnt_m1.in1_AT9))
(assert (= mpt.not_captured.out_AT9 mpt.ssa_cnt_and2.in1_AT9))
(assert (= mpt.next_cnt.sel_AT9 self.rst_AT9))
(assert (= mpt.next_cnt.out_AT9 next_cnt_eq0.in0_AT9))
(assert (= mpt.next_cnt.in1_AT9 mpt.zero.out_AT9))
(assert (= mpt.decr_mux.sel_AT9 mpt.next_cnt_and1.out_AT9))
(assert (= mpt.decr_mux.out_AT9 mpt.next_cnt.in0_AT9))
(assert (= mpt.decr_mux.in1_AT9 mpt.ssa_cnt_m1.out_AT9))
(assert (= mpt.decr_mux.in0_AT9 mpt.ssa_cnt.out_AT9))
(assert (= mpt.cnt_p1.out_AT9 mpt.ssa_cnt.in1_AT9))
(assert (= mpt.cnt_p1.in1_AT9 mpt.one.out_AT9))
(assert (= mpt.cnt_lt_depth.out_AT9 mpt.ssa_cnt_and1.in0_AT9))
(assert (= mpt.cnt_lt_depth.in1_AT9 mpt.depth.out_AT9))
(assert (= mpt.cnt.out_AT9 mpt.ssa_cnt.in0_AT9))
(assert (= mpt.cnt.out_AT9 mpt.cnt_p1.in0_AT9))
(assert (= mpt.cnt.out_AT9 mpt.cnt_lt_depth.in0_AT9))
(assert (= mpt.cnt.in_AT9 mpt.next_cnt.out_AT9))
(assert (= mpt.cnt.clk_AT9 self.clk_AT9))
(assert (= mp_en.in1_AT9 not_en.out_AT9))
(assert (= mp_en.in0_AT9 start_and_push.out_AT9))
(assert (= magic_packet_eq.out_AT9 prop_signal_or.in1_AT9))
(assert (= magic_packet.out_AT9 next_magic_packet.in0_AT9))
(assert (= magic_packet.out_AT9 magic_packet_eq.in0_AT9))
(assert (= magic_packet.in_AT9 next_magic_packet.out_AT9))
(assert (= magic_packet.clk_AT9 self.clk_AT9))
(assert (= f.wrPtrRst.sel_AT9 self.rst_AT9))
(assert (= f.wrPtrRst.in1_AT9 f.zero.out_AT9))
(assert (= f.wrPtrEn.sel_AT9 self.push_AT9))
(assert (= f.wrPtrEn.out_AT9 f.wrPtrRst.in0_AT9))
(assert (= f.wrPtrEn.in1_AT9 f.wrPtrp1.out_AT9))
(assert (= f.wrPtr.out_AT9 f.wrPtrp1.in1_AT9))
(assert (= f.wrPtr.out_AT9 f.wrPtrSlice.in_AT9))
(assert (= f.wrPtr.out_AT9 f.wrPtrEn.in0_AT9))
(assert (= f.wrPtr.in_AT9 f.wrPtrRst.out_AT9))
(assert (= f.wrPtr.clk_AT9 self.clk_AT9))
(assert (= f.rdPtrRst.sel_AT9 self.rst_AT9))
(assert (= f.rdPtrRst.in1_AT9 f.zero.out_AT9))
(assert (= f.rdPtrEn.sel_AT9 self.pop_AT9))
(assert (= f.rdPtrEn.out_AT9 f.rdPtrRst.in0_AT9))
(assert (= f.rdPtrEn.in1_AT9 f.rdPtrp1.out_AT9))
(assert (= f.rdPtr.out_AT9 f.rdPtrp1.in1_AT9))
(assert (= f.rdPtr.out_AT9 f.rdPtrSlice.in_AT9))
(assert (= f.rdPtr.out_AT9 f.rdPtrEn.in0_AT9))
(assert (= f.rdPtr.in_AT9 f.rdPtrRst.out_AT9))
(assert (= f.rdPtr.clk_AT9 self.clk_AT9))
(assert (= f.one.out_AT9 f.wrPtrp1.in0_AT9))
(assert (= f.one.out_AT9 f.rdPtrp1.in0_AT9))
(assert (= f.mem.wen_AT9 self.push_AT9))
(assert (= f.mem.wdata_AT9 self.data_in_AT9))
(assert (= f.mem.waddr_AT9 f.wrPtrSlice.out_AT9))
(assert (= f.mem.rdata_AT9 self.data_out_AT9))
(assert (= f.mem.rdata_AT9 magic_packet_eq.in1_AT9))
(assert (= f.mem.raddr_AT9 f.rdPtrSlice.out_AT9))
(assert (= f.mem.clk_AT9 self.clk_AT9))
(assert (= f.fullEq_2.out_AT9 f.fullCalc.in1_AT9))
(assert (= f.fullEq_2.in1_AT9 f.wrPtrSlice.out_AT9))
(assert (= f.fullEq_2.in0_AT9 f.rdPtrSlice.out_AT9))
(assert (= f.fullEq_1.out_AT9 f.notfullEq_1.in_AT9))
(assert (= f.fullCalc.in0_AT9 f.notfullEq_1.out_AT9))
(assert (= f.emptyEq.out_AT9 self.empty_AT9))
(assert (= f.emptyEq.in1_AT9 f.wrPtr.out_AT9))
(assert (= f.emptyEq.in0_AT9 f.rdPtr.out_AT9))
(assert (= en_or_sp.in1_AT9 start_and_push.out_AT9))
(assert (= en.out_AT9 not_en.in_AT9))
(assert (= en.out_AT9 en_or_sp.in0_AT9))
(assert (= en.in_AT9 en_or_sp.out_AT9))
(assert (= en.clk_AT9 self.clk_AT9))
(assert (= data_out_vld_and2.out_AT9 not_data_out_vld.in_AT9))
(assert (= data_out_vld_and1.out_AT9 data_out_vld_and2.in0_AT9))
(assert (= data_out_vld_and1.in0_AT9 en.out_AT9))
(assert (= cnt_gt_0.out_AT9 data_out_vld_and1.in1_AT9))
(assert (= cnt_gt_0.in1_AT9 zero.out_AT9))
(assert (= cnt_gt_0.in0_AT9 mpt.cnt.out_AT9))
(assert (= self.clk_AT9 #b0))
(assert (= zero.out_AT9 #b0000))
(assert (= (bvand start_and_push.in0_AT9 start_and_push.in1_AT9) start_and_push.out_AT9))
(assert (= (bvor prop_signal_or.in0_AT9 prop_signal_or.in1_AT9) prop_signal_or.out_AT9))
(assert (= (bvnot not_en.in_AT9) not_en.out_AT9))
(assert (= (bvnot not_data_out_vld.in_AT9) not_data_out_vld.out_AT9))
(assert (=> (= next_magic_packet.sel_AT9 #b1) (= next_magic_packet.in1_AT9 next_magic_packet.out_AT9)))
(assert (=> (= next_magic_packet.sel_AT9 #b0) (= next_magic_packet.in0_AT9 next_magic_packet.out_AT9)))
(assert (=> (not (= next_cnt_eq0.in0_AT9 next_cnt_eq0.in1_AT9)) (= next_cnt_eq0.out_AT9 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT9 next_cnt_eq0.in1_AT9) (= next_cnt_eq0.out_AT9 #b1)))
(assert (= mpt.zero.out_AT9 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT9 mpt.ssa_cnt_m1.in1_AT9) mpt.ssa_cnt_m1.out_AT9))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT9 mpt.ssa_cnt_gt_0.in0_AT9) (= mpt.ssa_cnt_gt_0.out_AT9 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT9 mpt.ssa_cnt_and2.in1_AT9) mpt.ssa_cnt_and2.out_AT9))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT9 mpt.ssa_cnt_and1.in1_AT9) mpt.ssa_cnt_and1.out_AT9))
(assert (=> (= mpt.ssa_cnt.sel_AT9 #b1) (= mpt.ssa_cnt.in1_AT9 mpt.ssa_cnt.out_AT9)))
(assert (=> (= mpt.ssa_cnt.sel_AT9 #b0) (= mpt.ssa_cnt.in0_AT9 mpt.ssa_cnt.out_AT9)))
(assert (= mpt.one.out_AT9 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT9) mpt.not_captured.out_AT9))
(assert (= (bvand mpt.next_cnt_and1.in0_AT9 mpt.next_cnt_and1.in1_AT9) mpt.next_cnt_and1.out_AT9))
(assert (=> (= mpt.next_cnt.sel_AT9 #b1) (= mpt.next_cnt.in1_AT9 mpt.next_cnt.out_AT9)))
(assert (=> (= mpt.next_cnt.sel_AT9 #b0) (= mpt.next_cnt.in0_AT9 mpt.next_cnt.out_AT9)))
(assert (= mpt.depth.out_AT9 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT9 #b1) (= mpt.decr_mux.in1_AT9 mpt.decr_mux.out_AT9)))
(assert (=> (= mpt.decr_mux.sel_AT9 #b0) (= mpt.decr_mux.in0_AT9 mpt.decr_mux.out_AT9)))
(assert (= (bvadd mpt.cnt_p1.in0_AT9 mpt.cnt_p1.in1_AT9) mpt.cnt_p1.out_AT9))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT9 mpt.cnt_lt_depth.in1_AT9) (= mpt.cnt_lt_depth.out_AT9 #b1)))
(assert (= (bvand mp_en.in0_AT9 mp_en.in1_AT9) mp_en.out_AT9))
(assert (=> (not (= magic_packet_eq.in0_AT9 magic_packet_eq.in1_AT9)) (= magic_packet_eq.out_AT9 #b0)))
(assert (=> (= magic_packet_eq.in0_AT9 magic_packet_eq.in1_AT9) (= magic_packet_eq.out_AT9 #b1)))
(assert (= f.zero.out_AT9 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT9 f.wrPtrp1.in1_AT9) f.wrPtrp1.out_AT9))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT9) f.wrPtrSlice.out_AT9))
(assert (=> (= f.wrPtrRst.sel_AT9 #b1) (= f.wrPtrRst.in1_AT9 f.wrPtrRst.out_AT9)))
(assert (=> (= f.wrPtrRst.sel_AT9 #b0) (= f.wrPtrRst.in0_AT9 f.wrPtrRst.out_AT9)))
(assert (=> (= f.wrPtrEn.sel_AT9 #b1) (= f.wrPtrEn.in1_AT9 f.wrPtrEn.out_AT9)))
(assert (=> (= f.wrPtrEn.sel_AT9 #b0) (= f.wrPtrEn.in0_AT9 f.wrPtrEn.out_AT9)))
(assert (= (bvadd f.rdPtrp1.in0_AT9 f.rdPtrp1.in1_AT9) f.rdPtrp1.out_AT9))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT9) f.rdPtrSlice.out_AT9))
(assert (=> (= f.rdPtrRst.sel_AT9 #b1) (= f.rdPtrRst.in1_AT9 f.rdPtrRst.out_AT9)))
(assert (=> (= f.rdPtrRst.sel_AT9 #b0) (= f.rdPtrRst.in0_AT9 f.rdPtrRst.out_AT9)))
(assert (=> (= f.rdPtrEn.sel_AT9 #b1) (= f.rdPtrEn.in1_AT9 f.rdPtrEn.out_AT9)))
(assert (=> (= f.rdPtrEn.sel_AT9 #b0) (= f.rdPtrEn.in0_AT9 f.rdPtrEn.out_AT9)))
(assert (= f.one.out_AT9 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT9) f.notfullEq_1.out_AT9))
(assert (= f.mem.rdata_AT9 (select f.mem.array_AT9 f.mem.raddr_AT9)))
(assert (=> (not (= f.fullEq_2.in0_AT9 f.fullEq_2.in1_AT9)) (= f.fullEq_2.out_AT9 #b0)))
(assert (=> (= f.fullEq_2.in0_AT9 f.fullEq_2.in1_AT9) (= f.fullEq_2.out_AT9 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT9 f.fullEq_1.in1_AT9)) (= f.fullEq_1.out_AT9 #b0)))
(assert (=> (= f.fullEq_1.in0_AT9 f.fullEq_1.in1_AT9) (= f.fullEq_1.out_AT9 #b1)))
(assert (= (bvand f.fullCalc.in0_AT9 f.fullCalc.in1_AT9) f.fullCalc.out_AT9))
(assert (=> (not (= f.emptyEq.in0_AT9 f.emptyEq.in1_AT9)) (= f.emptyEq.out_AT9 #b0)))
(assert (=> (= f.emptyEq.in0_AT9 f.emptyEq.in1_AT9) (= f.emptyEq.out_AT9 #b1)))
(assert (= (bvor en_or_sp.in0_AT9 en_or_sp.in1_AT9) en_or_sp.out_AT9))
(assert (= (bvand data_out_vld_and2.in0_AT9 data_out_vld_and2.in1_AT9) data_out_vld_and2.out_AT9))
(assert (= (bvand data_out_vld_and1.in0_AT9 data_out_vld_and1.in1_AT9) data_out_vld_and1.out_AT9))
(assert (= (bvult cnt_gt_0.in1_AT9 cnt_gt_0.in0_AT9) (= cnt_gt_0.out_AT9 #b1)))
(assert (=> (= _-_state_id_-__AT8 #b10) (= _-_state_id_-__AT9 #b10)))
(assert (=> (= _-_state_id_-__AT8 #b01) (= _-_state_id_-__AT9 #b10)))
(assert (=> (= _-_state_id_-__AT8 #b00) (= _-_state_id_-__AT9 #b01)))
(assert (= mpt.cnt.in_AT8 mpt.cnt.out_AT9))
(assert (= magic_packet.in_AT8 magic_packet.out_AT9))
(assert (= magic_packet.init_AT8 magic_packet.init_AT9))
(assert (= f.wrPtr.in_AT8 f.wrPtr.out_AT9))
(assert (= f.rdPtr.in_AT8 f.rdPtr.out_AT9))
(assert (= f.mem.array_AT9 (ite (= f.mem.wen_AT8 #b1) (store f.mem.array_AT8 f.mem.waddr_AT8 f.mem.wdata_AT8) f.mem.array_AT8)))
(assert (= en.init_AT8 en.init_AT9))
(assert (= en.in_AT8 en.out_AT9))
(push 1)

(assert (not (= self.prop_signal_AT9 #b1)))
(check-sat)

(pop 1)
(declare-fun mpt.cnt.out_AT10 () (_ BitVec 4))
(declare-fun magic_packet.out_AT10 () (_ BitVec 8))
(declare-fun magic_packet.init_AT10 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT10 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT10 () (_ BitVec 4))
(declare-fun f.mem.array_AT10 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT10 () (_ BitVec 1))
(declare-fun en.out_AT10 () (_ BitVec 1))
(declare-fun self.pop_AT10 () (_ BitVec 1))
(declare-fun self.empty_AT10 () (_ BitVec 1))
(declare-fun self.push_AT10 () (_ BitVec 1))
(declare-fun self.full_AT10 () (_ BitVec 1))
(declare-fun self.rst_AT10 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT10 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT10 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT10 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT10 () (_ BitVec 1))
(declare-fun self.start_AT10 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT10 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT10 () (_ BitVec 1))
(declare-fun self.prop_signal_AT10 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT10 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT10 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT10 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT10 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT10 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT10 () (_ BitVec 1))
(declare-fun mp_en.out_AT10 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT10 () (_ BitVec 1))
(declare-fun self.data_in_AT10 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT10 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT10 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT10 () (_ BitVec 1))
(declare-fun zero.out_AT10 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT10 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.one.out_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT10 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT10 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT10 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT10 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT10 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT10 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT10 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT10 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT10 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT10 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT10 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT10 () (_ BitVec 4))
(declare-fun self.clk_AT10 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT10 () (_ BitVec 1))
(declare-fun not_en.out_AT10 () (_ BitVec 1))
(declare-fun mp_en.in1_AT10 () (_ BitVec 1))
(declare-fun start_and_push.out_AT10 () (_ BitVec 1))
(declare-fun mp_en.in0_AT10 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT10 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT10 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT10 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT10 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT10 () (_ BitVec 8))
(declare-fun magic_packet.in_AT10 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT10 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT10 () (_ BitVec 1))
(declare-fun f.zero.out_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT10 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT10 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT10 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT10 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT10 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT10 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT10 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT10 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT10 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT10 () (_ BitVec 4))
(declare-fun f.one.out_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT10 () (_ BitVec 4))
(declare-fun f.mem.wen_AT10 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT10 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT10 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT10 () (_ BitVec 3))
(declare-fun self.data_out_AT10 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT10 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT10 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT10 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT10 () (_ BitVec 3))
(declare-fun f.mem.clk_AT10 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT10 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT10 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT10 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT10 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT10 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT10 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT10 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT10 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT10 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT10 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT10 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT10 () (_ BitVec 1))
(declare-fun not_en.in_AT10 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT10 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT10 () (_ BitVec 1))
(declare-fun en.in_AT10 () (_ BitVec 1))
(declare-fun en.clk_AT10 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT10 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT10 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT10 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT10 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT10 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT10 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT10 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT10 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT10 () (_ BitVec 2))

(assert (=> (= self.empty_AT10 #b1) (= self.pop_AT10 #b0)))
(assert (=> (= self.full_AT10 #b1) (= self.push_AT10 #b0)))
(assert (=> (= _-_state_id_-__AT10 #b10) (and true (= self.rst_AT10 #b0))))
(assert (=> (= _-_state_id_-__AT10 #b01) (and (and (and true (= self.rst_AT10 #b1)) (= self.push_AT10 #b0)) (= self.pop_AT10 #b0))))
(assert (=> (= _-_state_id_-__AT10 #b00) (and (and (and true (= self.rst_AT10 #b1)) (= self.push_AT10 #b0)) (= self.pop_AT10 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT10 ((_ extract 3 3) f.wrPtr.out_AT10)))
(assert (= f.fullEq_1.in0_AT10 ((_ extract 3 3) f.rdPtr.out_AT10)))
(assert (= en.out_AT10 mpt.not_captured.in_AT10))
(assert (= self.start_AT10 start_and_push.in0_AT10))
(assert (= self.push_AT10 start_and_push.in1_AT10))
(assert (= self.push_AT10 mpt.ssa_cnt_and1.in1_AT10))
(assert (= self.prop_signal_AT10 prop_signal_or.out_AT10))
(assert (= self.pop_AT10 mpt.next_cnt_and1.in1_AT10))
(assert (= self.full_AT10 f.fullCalc.out_AT10))
(assert (= self.data_out_vld_AT10 data_out_vld_and2.out_AT10))
(assert (= not_data_out_vld.out_AT10 prop_signal_or.in0_AT10))
(assert (= next_magic_packet.sel_AT10 mp_en.out_AT10))
(assert (= next_magic_packet.in1_AT10 self.data_in_AT10))
(assert (= next_cnt_eq0.out_AT10 data_out_vld_and2.in1_AT10))
(assert (= next_cnt_eq0.in1_AT10 zero.out_AT10))
(assert (= mpt.ssa_cnt_gt_0.out_AT10 mpt.next_cnt_and1.in0_AT10))
(assert (= mpt.ssa_cnt_gt_0.in1_AT10 mpt.zero.out_AT10))
(assert (= mpt.ssa_cnt_and1.out_AT10 mpt.ssa_cnt_and2.in0_AT10))
(assert (= mpt.ssa_cnt.sel_AT10 mpt.ssa_cnt_and2.out_AT10))
(assert (= mpt.ssa_cnt.out_AT10 mpt.ssa_cnt_m1.in0_AT10))
(assert (= mpt.ssa_cnt.out_AT10 mpt.ssa_cnt_gt_0.in0_AT10))
(assert (= mpt.one.out_AT10 mpt.ssa_cnt_m1.in1_AT10))
(assert (= mpt.not_captured.out_AT10 mpt.ssa_cnt_and2.in1_AT10))
(assert (= mpt.next_cnt.sel_AT10 self.rst_AT10))
(assert (= mpt.next_cnt.out_AT10 next_cnt_eq0.in0_AT10))
(assert (= mpt.next_cnt.in1_AT10 mpt.zero.out_AT10))
(assert (= mpt.decr_mux.sel_AT10 mpt.next_cnt_and1.out_AT10))
(assert (= mpt.decr_mux.out_AT10 mpt.next_cnt.in0_AT10))
(assert (= mpt.decr_mux.in1_AT10 mpt.ssa_cnt_m1.out_AT10))
(assert (= mpt.decr_mux.in0_AT10 mpt.ssa_cnt.out_AT10))
(assert (= mpt.cnt_p1.out_AT10 mpt.ssa_cnt.in1_AT10))
(assert (= mpt.cnt_p1.in1_AT10 mpt.one.out_AT10))
(assert (= mpt.cnt_lt_depth.out_AT10 mpt.ssa_cnt_and1.in0_AT10))
(assert (= mpt.cnt_lt_depth.in1_AT10 mpt.depth.out_AT10))
(assert (= mpt.cnt.out_AT10 mpt.ssa_cnt.in0_AT10))
(assert (= mpt.cnt.out_AT10 mpt.cnt_p1.in0_AT10))
(assert (= mpt.cnt.out_AT10 mpt.cnt_lt_depth.in0_AT10))
(assert (= mpt.cnt.in_AT10 mpt.next_cnt.out_AT10))
(assert (= mpt.cnt.clk_AT10 self.clk_AT10))
(assert (= mp_en.in1_AT10 not_en.out_AT10))
(assert (= mp_en.in0_AT10 start_and_push.out_AT10))
(assert (= magic_packet_eq.out_AT10 prop_signal_or.in1_AT10))
(assert (= magic_packet.out_AT10 next_magic_packet.in0_AT10))
(assert (= magic_packet.out_AT10 magic_packet_eq.in0_AT10))
(assert (= magic_packet.in_AT10 next_magic_packet.out_AT10))
(assert (= magic_packet.clk_AT10 self.clk_AT10))
(assert (= f.wrPtrRst.sel_AT10 self.rst_AT10))
(assert (= f.wrPtrRst.in1_AT10 f.zero.out_AT10))
(assert (= f.wrPtrEn.sel_AT10 self.push_AT10))
(assert (= f.wrPtrEn.out_AT10 f.wrPtrRst.in0_AT10))
(assert (= f.wrPtrEn.in1_AT10 f.wrPtrp1.out_AT10))
(assert (= f.wrPtr.out_AT10 f.wrPtrp1.in1_AT10))
(assert (= f.wrPtr.out_AT10 f.wrPtrSlice.in_AT10))
(assert (= f.wrPtr.out_AT10 f.wrPtrEn.in0_AT10))
(assert (= f.wrPtr.in_AT10 f.wrPtrRst.out_AT10))
(assert (= f.wrPtr.clk_AT10 self.clk_AT10))
(assert (= f.rdPtrRst.sel_AT10 self.rst_AT10))
(assert (= f.rdPtrRst.in1_AT10 f.zero.out_AT10))
(assert (= f.rdPtrEn.sel_AT10 self.pop_AT10))
(assert (= f.rdPtrEn.out_AT10 f.rdPtrRst.in0_AT10))
(assert (= f.rdPtrEn.in1_AT10 f.rdPtrp1.out_AT10))
(assert (= f.rdPtr.out_AT10 f.rdPtrp1.in1_AT10))
(assert (= f.rdPtr.out_AT10 f.rdPtrSlice.in_AT10))
(assert (= f.rdPtr.out_AT10 f.rdPtrEn.in0_AT10))
(assert (= f.rdPtr.in_AT10 f.rdPtrRst.out_AT10))
(assert (= f.rdPtr.clk_AT10 self.clk_AT10))
(assert (= f.one.out_AT10 f.wrPtrp1.in0_AT10))
(assert (= f.one.out_AT10 f.rdPtrp1.in0_AT10))
(assert (= f.mem.wen_AT10 self.push_AT10))
(assert (= f.mem.wdata_AT10 self.data_in_AT10))
(assert (= f.mem.waddr_AT10 f.wrPtrSlice.out_AT10))
(assert (= f.mem.rdata_AT10 self.data_out_AT10))
(assert (= f.mem.rdata_AT10 magic_packet_eq.in1_AT10))
(assert (= f.mem.raddr_AT10 f.rdPtrSlice.out_AT10))
(assert (= f.mem.clk_AT10 self.clk_AT10))
(assert (= f.fullEq_2.out_AT10 f.fullCalc.in1_AT10))
(assert (= f.fullEq_2.in1_AT10 f.wrPtrSlice.out_AT10))
(assert (= f.fullEq_2.in0_AT10 f.rdPtrSlice.out_AT10))
(assert (= f.fullEq_1.out_AT10 f.notfullEq_1.in_AT10))
(assert (= f.fullCalc.in0_AT10 f.notfullEq_1.out_AT10))
(assert (= f.emptyEq.out_AT10 self.empty_AT10))
(assert (= f.emptyEq.in1_AT10 f.wrPtr.out_AT10))
(assert (= f.emptyEq.in0_AT10 f.rdPtr.out_AT10))
(assert (= en_or_sp.in1_AT10 start_and_push.out_AT10))
(assert (= en.out_AT10 not_en.in_AT10))
(assert (= en.out_AT10 en_or_sp.in0_AT10))
(assert (= en.in_AT10 en_or_sp.out_AT10))
(assert (= en.clk_AT10 self.clk_AT10))
(assert (= data_out_vld_and2.out_AT10 not_data_out_vld.in_AT10))
(assert (= data_out_vld_and1.out_AT10 data_out_vld_and2.in0_AT10))
(assert (= data_out_vld_and1.in0_AT10 en.out_AT10))
(assert (= cnt_gt_0.out_AT10 data_out_vld_and1.in1_AT10))
(assert (= cnt_gt_0.in1_AT10 zero.out_AT10))
(assert (= cnt_gt_0.in0_AT10 mpt.cnt.out_AT10))
(assert (= self.clk_AT10 #b0))
(assert (= zero.out_AT10 #b0000))
(assert (= (bvand start_and_push.in0_AT10 start_and_push.in1_AT10) start_and_push.out_AT10))
(assert (= (bvor prop_signal_or.in0_AT10 prop_signal_or.in1_AT10) prop_signal_or.out_AT10))
(assert (= (bvnot not_en.in_AT10) not_en.out_AT10))
(assert (= (bvnot not_data_out_vld.in_AT10) not_data_out_vld.out_AT10))
(assert (=> (= next_magic_packet.sel_AT10 #b1) (= next_magic_packet.in1_AT10 next_magic_packet.out_AT10)))
(assert (=> (= next_magic_packet.sel_AT10 #b0) (= next_magic_packet.in0_AT10 next_magic_packet.out_AT10)))
(assert (=> (not (= next_cnt_eq0.in0_AT10 next_cnt_eq0.in1_AT10)) (= next_cnt_eq0.out_AT10 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT10 next_cnt_eq0.in1_AT10) (= next_cnt_eq0.out_AT10 #b1)))
(assert (= mpt.zero.out_AT10 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT10 mpt.ssa_cnt_m1.in1_AT10) mpt.ssa_cnt_m1.out_AT10))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT10 mpt.ssa_cnt_gt_0.in0_AT10) (= mpt.ssa_cnt_gt_0.out_AT10 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT10 mpt.ssa_cnt_and2.in1_AT10) mpt.ssa_cnt_and2.out_AT10))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT10 mpt.ssa_cnt_and1.in1_AT10) mpt.ssa_cnt_and1.out_AT10))
(assert (=> (= mpt.ssa_cnt.sel_AT10 #b1) (= mpt.ssa_cnt.in1_AT10 mpt.ssa_cnt.out_AT10)))
(assert (=> (= mpt.ssa_cnt.sel_AT10 #b0) (= mpt.ssa_cnt.in0_AT10 mpt.ssa_cnt.out_AT10)))
(assert (= mpt.one.out_AT10 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT10) mpt.not_captured.out_AT10))
(assert (= (bvand mpt.next_cnt_and1.in0_AT10 mpt.next_cnt_and1.in1_AT10) mpt.next_cnt_and1.out_AT10))
(assert (=> (= mpt.next_cnt.sel_AT10 #b1) (= mpt.next_cnt.in1_AT10 mpt.next_cnt.out_AT10)))
(assert (=> (= mpt.next_cnt.sel_AT10 #b0) (= mpt.next_cnt.in0_AT10 mpt.next_cnt.out_AT10)))
(assert (= mpt.depth.out_AT10 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT10 #b1) (= mpt.decr_mux.in1_AT10 mpt.decr_mux.out_AT10)))
(assert (=> (= mpt.decr_mux.sel_AT10 #b0) (= mpt.decr_mux.in0_AT10 mpt.decr_mux.out_AT10)))
(assert (= (bvadd mpt.cnt_p1.in0_AT10 mpt.cnt_p1.in1_AT10) mpt.cnt_p1.out_AT10))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT10 mpt.cnt_lt_depth.in1_AT10) (= mpt.cnt_lt_depth.out_AT10 #b1)))
(assert (= (bvand mp_en.in0_AT10 mp_en.in1_AT10) mp_en.out_AT10))
(assert (=> (not (= magic_packet_eq.in0_AT10 magic_packet_eq.in1_AT10)) (= magic_packet_eq.out_AT10 #b0)))
(assert (=> (= magic_packet_eq.in0_AT10 magic_packet_eq.in1_AT10) (= magic_packet_eq.out_AT10 #b1)))
(assert (= f.zero.out_AT10 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT10 f.wrPtrp1.in1_AT10) f.wrPtrp1.out_AT10))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT10) f.wrPtrSlice.out_AT10))
(assert (=> (= f.wrPtrRst.sel_AT10 #b1) (= f.wrPtrRst.in1_AT10 f.wrPtrRst.out_AT10)))
(assert (=> (= f.wrPtrRst.sel_AT10 #b0) (= f.wrPtrRst.in0_AT10 f.wrPtrRst.out_AT10)))
(assert (=> (= f.wrPtrEn.sel_AT10 #b1) (= f.wrPtrEn.in1_AT10 f.wrPtrEn.out_AT10)))
(assert (=> (= f.wrPtrEn.sel_AT10 #b0) (= f.wrPtrEn.in0_AT10 f.wrPtrEn.out_AT10)))
(assert (= (bvadd f.rdPtrp1.in0_AT10 f.rdPtrp1.in1_AT10) f.rdPtrp1.out_AT10))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT10) f.rdPtrSlice.out_AT10))
(assert (=> (= f.rdPtrRst.sel_AT10 #b1) (= f.rdPtrRst.in1_AT10 f.rdPtrRst.out_AT10)))
(assert (=> (= f.rdPtrRst.sel_AT10 #b0) (= f.rdPtrRst.in0_AT10 f.rdPtrRst.out_AT10)))
(assert (=> (= f.rdPtrEn.sel_AT10 #b1) (= f.rdPtrEn.in1_AT10 f.rdPtrEn.out_AT10)))
(assert (=> (= f.rdPtrEn.sel_AT10 #b0) (= f.rdPtrEn.in0_AT10 f.rdPtrEn.out_AT10)))
(assert (= f.one.out_AT10 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT10) f.notfullEq_1.out_AT10))
(assert (= f.mem.rdata_AT10 (select f.mem.array_AT10 f.mem.raddr_AT10)))
(assert (=> (not (= f.fullEq_2.in0_AT10 f.fullEq_2.in1_AT10)) (= f.fullEq_2.out_AT10 #b0)))
(assert (=> (= f.fullEq_2.in0_AT10 f.fullEq_2.in1_AT10) (= f.fullEq_2.out_AT10 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT10 f.fullEq_1.in1_AT10)) (= f.fullEq_1.out_AT10 #b0)))
(assert (=> (= f.fullEq_1.in0_AT10 f.fullEq_1.in1_AT10) (= f.fullEq_1.out_AT10 #b1)))
(assert (= (bvand f.fullCalc.in0_AT10 f.fullCalc.in1_AT10) f.fullCalc.out_AT10))
(assert (=> (not (= f.emptyEq.in0_AT10 f.emptyEq.in1_AT10)) (= f.emptyEq.out_AT10 #b0)))
(assert (=> (= f.emptyEq.in0_AT10 f.emptyEq.in1_AT10) (= f.emptyEq.out_AT10 #b1)))
(assert (= (bvor en_or_sp.in0_AT10 en_or_sp.in1_AT10) en_or_sp.out_AT10))
(assert (= (bvand data_out_vld_and2.in0_AT10 data_out_vld_and2.in1_AT10) data_out_vld_and2.out_AT10))
(assert (= (bvand data_out_vld_and1.in0_AT10 data_out_vld_and1.in1_AT10) data_out_vld_and1.out_AT10))
(assert (= (bvult cnt_gt_0.in1_AT10 cnt_gt_0.in0_AT10) (= cnt_gt_0.out_AT10 #b1)))
(assert (=> (= _-_state_id_-__AT9 #b10) (= _-_state_id_-__AT10 #b10)))
(assert (=> (= _-_state_id_-__AT9 #b01) (= _-_state_id_-__AT10 #b10)))
(assert (=> (= _-_state_id_-__AT9 #b00) (= _-_state_id_-__AT10 #b01)))
(assert (= mpt.cnt.in_AT9 mpt.cnt.out_AT10))
(assert (= magic_packet.in_AT9 magic_packet.out_AT10))
(assert (= magic_packet.init_AT9 magic_packet.init_AT10))
(assert (= f.wrPtr.in_AT9 f.wrPtr.out_AT10))
(assert (= f.rdPtr.in_AT9 f.rdPtr.out_AT10))
(assert (= f.mem.array_AT10 (ite (= f.mem.wen_AT9 #b1) (store f.mem.array_AT9 f.mem.waddr_AT9 f.mem.wdata_AT9) f.mem.array_AT9)))
(assert (= en.init_AT9 en.init_AT10))
(assert (= en.in_AT9 en.out_AT10))
(push 1)

(assert (not (= self.prop_signal_AT10 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT11 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT11 () (_ BitVec 4))
(declare-fun magic_packet.out_AT11 () (_ BitVec 8))
(declare-fun magic_packet.init_AT11 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT11 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT11 () (_ BitVec 4))
(declare-fun f.mem.array_AT11 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT11 () (_ BitVec 1))
(declare-fun en.out_AT11 () (_ BitVec 1))
(declare-fun self.pop_AT11 () (_ BitVec 1))
(declare-fun self.empty_AT11 () (_ BitVec 1))
(declare-fun self.push_AT11 () (_ BitVec 1))
(declare-fun self.full_AT11 () (_ BitVec 1))
(declare-fun self.rst_AT11 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT11 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT11 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT11 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT11 () (_ BitVec 1))
(declare-fun self.start_AT11 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT11 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT11 () (_ BitVec 1))
(declare-fun self.prop_signal_AT11 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT11 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT11 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT11 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT11 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT11 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT11 () (_ BitVec 1))
(declare-fun mp_en.out_AT11 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT11 () (_ BitVec 1))
(declare-fun self.data_in_AT11 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT11 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT11 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT11 () (_ BitVec 1))
(declare-fun zero.out_AT11 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT11 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.one.out_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT11 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT11 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT11 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT11 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT11 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT11 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT11 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT11 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT11 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT11 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT11 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT11 () (_ BitVec 4))
(declare-fun self.clk_AT11 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT11 () (_ BitVec 1))
(declare-fun not_en.out_AT11 () (_ BitVec 1))
(declare-fun mp_en.in1_AT11 () (_ BitVec 1))
(declare-fun start_and_push.out_AT11 () (_ BitVec 1))
(declare-fun mp_en.in0_AT11 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT11 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT11 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT11 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT11 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT11 () (_ BitVec 8))
(declare-fun magic_packet.in_AT11 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT11 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT11 () (_ BitVec 1))
(declare-fun f.zero.out_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT11 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT11 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT11 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT11 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT11 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT11 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT11 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT11 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT11 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT11 () (_ BitVec 4))
(declare-fun f.one.out_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT11 () (_ BitVec 4))
(declare-fun f.mem.wen_AT11 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT11 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT11 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT11 () (_ BitVec 3))
(declare-fun self.data_out_AT11 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT11 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT11 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT11 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT11 () (_ BitVec 3))
(declare-fun f.mem.clk_AT11 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT11 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT11 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT11 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT11 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT11 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT11 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT11 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT11 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT11 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT11 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT11 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT11 () (_ BitVec 1))
(declare-fun not_en.in_AT11 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT11 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT11 () (_ BitVec 1))
(declare-fun en.in_AT11 () (_ BitVec 1))
(declare-fun en.clk_AT11 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT11 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT11 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT11 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT11 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT11 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT11 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT11 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT11 () (_ BitVec 4))

(assert (=> (= self.empty_AT11 #b1) (= self.pop_AT11 #b0)))
(assert (=> (= self.full_AT11 #b1) (= self.push_AT11 #b0)))
(assert (=> (= _-_state_id_-__AT11 #b10) (and true (= self.rst_AT11 #b0))))
(assert (=> (= _-_state_id_-__AT11 #b01) (and (and (and true (= self.rst_AT11 #b1)) (= self.push_AT11 #b0)) (= self.pop_AT11 #b0))))
(assert (=> (= _-_state_id_-__AT11 #b00) (and (and (and true (= self.rst_AT11 #b1)) (= self.push_AT11 #b0)) (= self.pop_AT11 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT11 ((_ extract 3 3) f.wrPtr.out_AT11)))
(assert (= f.fullEq_1.in0_AT11 ((_ extract 3 3) f.rdPtr.out_AT11)))
(assert (= en.out_AT11 mpt.not_captured.in_AT11))
(assert (= self.start_AT11 start_and_push.in0_AT11))
(assert (= self.push_AT11 start_and_push.in1_AT11))
(assert (= self.push_AT11 mpt.ssa_cnt_and1.in1_AT11))
(assert (= self.prop_signal_AT11 prop_signal_or.out_AT11))
(assert (= self.pop_AT11 mpt.next_cnt_and1.in1_AT11))
(assert (= self.full_AT11 f.fullCalc.out_AT11))
(assert (= self.data_out_vld_AT11 data_out_vld_and2.out_AT11))
(assert (= not_data_out_vld.out_AT11 prop_signal_or.in0_AT11))
(assert (= next_magic_packet.sel_AT11 mp_en.out_AT11))
(assert (= next_magic_packet.in1_AT11 self.data_in_AT11))
(assert (= next_cnt_eq0.out_AT11 data_out_vld_and2.in1_AT11))
(assert (= next_cnt_eq0.in1_AT11 zero.out_AT11))
(assert (= mpt.ssa_cnt_gt_0.out_AT11 mpt.next_cnt_and1.in0_AT11))
(assert (= mpt.ssa_cnt_gt_0.in1_AT11 mpt.zero.out_AT11))
(assert (= mpt.ssa_cnt_and1.out_AT11 mpt.ssa_cnt_and2.in0_AT11))
(assert (= mpt.ssa_cnt.sel_AT11 mpt.ssa_cnt_and2.out_AT11))
(assert (= mpt.ssa_cnt.out_AT11 mpt.ssa_cnt_m1.in0_AT11))
(assert (= mpt.ssa_cnt.out_AT11 mpt.ssa_cnt_gt_0.in0_AT11))
(assert (= mpt.one.out_AT11 mpt.ssa_cnt_m1.in1_AT11))
(assert (= mpt.not_captured.out_AT11 mpt.ssa_cnt_and2.in1_AT11))
(assert (= mpt.next_cnt.sel_AT11 self.rst_AT11))
(assert (= mpt.next_cnt.out_AT11 next_cnt_eq0.in0_AT11))
(assert (= mpt.next_cnt.in1_AT11 mpt.zero.out_AT11))
(assert (= mpt.decr_mux.sel_AT11 mpt.next_cnt_and1.out_AT11))
(assert (= mpt.decr_mux.out_AT11 mpt.next_cnt.in0_AT11))
(assert (= mpt.decr_mux.in1_AT11 mpt.ssa_cnt_m1.out_AT11))
(assert (= mpt.decr_mux.in0_AT11 mpt.ssa_cnt.out_AT11))
(assert (= mpt.cnt_p1.out_AT11 mpt.ssa_cnt.in1_AT11))
(assert (= mpt.cnt_p1.in1_AT11 mpt.one.out_AT11))
(assert (= mpt.cnt_lt_depth.out_AT11 mpt.ssa_cnt_and1.in0_AT11))
(assert (= mpt.cnt_lt_depth.in1_AT11 mpt.depth.out_AT11))
(assert (= mpt.cnt.out_AT11 mpt.ssa_cnt.in0_AT11))
(assert (= mpt.cnt.out_AT11 mpt.cnt_p1.in0_AT11))
(assert (= mpt.cnt.out_AT11 mpt.cnt_lt_depth.in0_AT11))
(assert (= mpt.cnt.in_AT11 mpt.next_cnt.out_AT11))
(assert (= mpt.cnt.clk_AT11 self.clk_AT11))
(assert (= mp_en.in1_AT11 not_en.out_AT11))
(assert (= mp_en.in0_AT11 start_and_push.out_AT11))
(assert (= magic_packet_eq.out_AT11 prop_signal_or.in1_AT11))
(assert (= magic_packet.out_AT11 next_magic_packet.in0_AT11))
(assert (= magic_packet.out_AT11 magic_packet_eq.in0_AT11))
(assert (= magic_packet.in_AT11 next_magic_packet.out_AT11))
(assert (= magic_packet.clk_AT11 self.clk_AT11))
(assert (= f.wrPtrRst.sel_AT11 self.rst_AT11))
(assert (= f.wrPtrRst.in1_AT11 f.zero.out_AT11))
(assert (= f.wrPtrEn.sel_AT11 self.push_AT11))
(assert (= f.wrPtrEn.out_AT11 f.wrPtrRst.in0_AT11))
(assert (= f.wrPtrEn.in1_AT11 f.wrPtrp1.out_AT11))
(assert (= f.wrPtr.out_AT11 f.wrPtrp1.in1_AT11))
(assert (= f.wrPtr.out_AT11 f.wrPtrSlice.in_AT11))
(assert (= f.wrPtr.out_AT11 f.wrPtrEn.in0_AT11))
(assert (= f.wrPtr.in_AT11 f.wrPtrRst.out_AT11))
(assert (= f.wrPtr.clk_AT11 self.clk_AT11))
(assert (= f.rdPtrRst.sel_AT11 self.rst_AT11))
(assert (= f.rdPtrRst.in1_AT11 f.zero.out_AT11))
(assert (= f.rdPtrEn.sel_AT11 self.pop_AT11))
(assert (= f.rdPtrEn.out_AT11 f.rdPtrRst.in0_AT11))
(assert (= f.rdPtrEn.in1_AT11 f.rdPtrp1.out_AT11))
(assert (= f.rdPtr.out_AT11 f.rdPtrp1.in1_AT11))
(assert (= f.rdPtr.out_AT11 f.rdPtrSlice.in_AT11))
(assert (= f.rdPtr.out_AT11 f.rdPtrEn.in0_AT11))
(assert (= f.rdPtr.in_AT11 f.rdPtrRst.out_AT11))
(assert (= f.rdPtr.clk_AT11 self.clk_AT11))
(assert (= f.one.out_AT11 f.wrPtrp1.in0_AT11))
(assert (= f.one.out_AT11 f.rdPtrp1.in0_AT11))
(assert (= f.mem.wen_AT11 self.push_AT11))
(assert (= f.mem.wdata_AT11 self.data_in_AT11))
(assert (= f.mem.waddr_AT11 f.wrPtrSlice.out_AT11))
(assert (= f.mem.rdata_AT11 self.data_out_AT11))
(assert (= f.mem.rdata_AT11 magic_packet_eq.in1_AT11))
(assert (= f.mem.raddr_AT11 f.rdPtrSlice.out_AT11))
(assert (= f.mem.clk_AT11 self.clk_AT11))
(assert (= f.fullEq_2.out_AT11 f.fullCalc.in1_AT11))
(assert (= f.fullEq_2.in1_AT11 f.wrPtrSlice.out_AT11))
(assert (= f.fullEq_2.in0_AT11 f.rdPtrSlice.out_AT11))
(assert (= f.fullEq_1.out_AT11 f.notfullEq_1.in_AT11))
(assert (= f.fullCalc.in0_AT11 f.notfullEq_1.out_AT11))
(assert (= f.emptyEq.out_AT11 self.empty_AT11))
(assert (= f.emptyEq.in1_AT11 f.wrPtr.out_AT11))
(assert (= f.emptyEq.in0_AT11 f.rdPtr.out_AT11))
(assert (= en_or_sp.in1_AT11 start_and_push.out_AT11))
(assert (= en.out_AT11 not_en.in_AT11))
(assert (= en.out_AT11 en_or_sp.in0_AT11))
(assert (= en.in_AT11 en_or_sp.out_AT11))
(assert (= en.clk_AT11 self.clk_AT11))
(assert (= data_out_vld_and2.out_AT11 not_data_out_vld.in_AT11))
(assert (= data_out_vld_and1.out_AT11 data_out_vld_and2.in0_AT11))
(assert (= data_out_vld_and1.in0_AT11 en.out_AT11))
(assert (= cnt_gt_0.out_AT11 data_out_vld_and1.in1_AT11))
(assert (= cnt_gt_0.in1_AT11 zero.out_AT11))
(assert (= cnt_gt_0.in0_AT11 mpt.cnt.out_AT11))
(assert (= self.clk_AT11 #b0))
(assert (= zero.out_AT11 #b0000))
(assert (= (bvand start_and_push.in0_AT11 start_and_push.in1_AT11) start_and_push.out_AT11))
(assert (= (bvor prop_signal_or.in0_AT11 prop_signal_or.in1_AT11) prop_signal_or.out_AT11))
(assert (= (bvnot not_en.in_AT11) not_en.out_AT11))
(assert (= (bvnot not_data_out_vld.in_AT11) not_data_out_vld.out_AT11))
(assert (=> (= next_magic_packet.sel_AT11 #b1) (= next_magic_packet.in1_AT11 next_magic_packet.out_AT11)))
(assert (=> (= next_magic_packet.sel_AT11 #b0) (= next_magic_packet.in0_AT11 next_magic_packet.out_AT11)))
(assert (=> (not (= next_cnt_eq0.in0_AT11 next_cnt_eq0.in1_AT11)) (= next_cnt_eq0.out_AT11 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT11 next_cnt_eq0.in1_AT11) (= next_cnt_eq0.out_AT11 #b1)))
(assert (= mpt.zero.out_AT11 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT11 mpt.ssa_cnt_m1.in1_AT11) mpt.ssa_cnt_m1.out_AT11))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT11 mpt.ssa_cnt_gt_0.in0_AT11) (= mpt.ssa_cnt_gt_0.out_AT11 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT11 mpt.ssa_cnt_and2.in1_AT11) mpt.ssa_cnt_and2.out_AT11))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT11 mpt.ssa_cnt_and1.in1_AT11) mpt.ssa_cnt_and1.out_AT11))
(assert (=> (= mpt.ssa_cnt.sel_AT11 #b1) (= mpt.ssa_cnt.in1_AT11 mpt.ssa_cnt.out_AT11)))
(assert (=> (= mpt.ssa_cnt.sel_AT11 #b0) (= mpt.ssa_cnt.in0_AT11 mpt.ssa_cnt.out_AT11)))
(assert (= mpt.one.out_AT11 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT11) mpt.not_captured.out_AT11))
(assert (= (bvand mpt.next_cnt_and1.in0_AT11 mpt.next_cnt_and1.in1_AT11) mpt.next_cnt_and1.out_AT11))
(assert (=> (= mpt.next_cnt.sel_AT11 #b1) (= mpt.next_cnt.in1_AT11 mpt.next_cnt.out_AT11)))
(assert (=> (= mpt.next_cnt.sel_AT11 #b0) (= mpt.next_cnt.in0_AT11 mpt.next_cnt.out_AT11)))
(assert (= mpt.depth.out_AT11 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT11 #b1) (= mpt.decr_mux.in1_AT11 mpt.decr_mux.out_AT11)))
(assert (=> (= mpt.decr_mux.sel_AT11 #b0) (= mpt.decr_mux.in0_AT11 mpt.decr_mux.out_AT11)))
(assert (= (bvadd mpt.cnt_p1.in0_AT11 mpt.cnt_p1.in1_AT11) mpt.cnt_p1.out_AT11))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT11 mpt.cnt_lt_depth.in1_AT11) (= mpt.cnt_lt_depth.out_AT11 #b1)))
(assert (= (bvand mp_en.in0_AT11 mp_en.in1_AT11) mp_en.out_AT11))
(assert (=> (not (= magic_packet_eq.in0_AT11 magic_packet_eq.in1_AT11)) (= magic_packet_eq.out_AT11 #b0)))
(assert (=> (= magic_packet_eq.in0_AT11 magic_packet_eq.in1_AT11) (= magic_packet_eq.out_AT11 #b1)))
(assert (= f.zero.out_AT11 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT11 f.wrPtrp1.in1_AT11) f.wrPtrp1.out_AT11))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT11) f.wrPtrSlice.out_AT11))
(assert (=> (= f.wrPtrRst.sel_AT11 #b1) (= f.wrPtrRst.in1_AT11 f.wrPtrRst.out_AT11)))
(assert (=> (= f.wrPtrRst.sel_AT11 #b0) (= f.wrPtrRst.in0_AT11 f.wrPtrRst.out_AT11)))
(assert (=> (= f.wrPtrEn.sel_AT11 #b1) (= f.wrPtrEn.in1_AT11 f.wrPtrEn.out_AT11)))
(assert (=> (= f.wrPtrEn.sel_AT11 #b0) (= f.wrPtrEn.in0_AT11 f.wrPtrEn.out_AT11)))
(assert (= (bvadd f.rdPtrp1.in0_AT11 f.rdPtrp1.in1_AT11) f.rdPtrp1.out_AT11))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT11) f.rdPtrSlice.out_AT11))
(assert (=> (= f.rdPtrRst.sel_AT11 #b1) (= f.rdPtrRst.in1_AT11 f.rdPtrRst.out_AT11)))
(assert (=> (= f.rdPtrRst.sel_AT11 #b0) (= f.rdPtrRst.in0_AT11 f.rdPtrRst.out_AT11)))
(assert (=> (= f.rdPtrEn.sel_AT11 #b1) (= f.rdPtrEn.in1_AT11 f.rdPtrEn.out_AT11)))
(assert (=> (= f.rdPtrEn.sel_AT11 #b0) (= f.rdPtrEn.in0_AT11 f.rdPtrEn.out_AT11)))
(assert (= f.one.out_AT11 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT11) f.notfullEq_1.out_AT11))
(assert (= f.mem.rdata_AT11 (select f.mem.array_AT11 f.mem.raddr_AT11)))
(assert (=> (not (= f.fullEq_2.in0_AT11 f.fullEq_2.in1_AT11)) (= f.fullEq_2.out_AT11 #b0)))
(assert (=> (= f.fullEq_2.in0_AT11 f.fullEq_2.in1_AT11) (= f.fullEq_2.out_AT11 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT11 f.fullEq_1.in1_AT11)) (= f.fullEq_1.out_AT11 #b0)))
(assert (=> (= f.fullEq_1.in0_AT11 f.fullEq_1.in1_AT11) (= f.fullEq_1.out_AT11 #b1)))
(assert (= (bvand f.fullCalc.in0_AT11 f.fullCalc.in1_AT11) f.fullCalc.out_AT11))
(assert (=> (not (= f.emptyEq.in0_AT11 f.emptyEq.in1_AT11)) (= f.emptyEq.out_AT11 #b0)))
(assert (=> (= f.emptyEq.in0_AT11 f.emptyEq.in1_AT11) (= f.emptyEq.out_AT11 #b1)))
(assert (= (bvor en_or_sp.in0_AT11 en_or_sp.in1_AT11) en_or_sp.out_AT11))
(assert (= (bvand data_out_vld_and2.in0_AT11 data_out_vld_and2.in1_AT11) data_out_vld_and2.out_AT11))
(assert (= (bvand data_out_vld_and1.in0_AT11 data_out_vld_and1.in1_AT11) data_out_vld_and1.out_AT11))
(assert (= (bvult cnt_gt_0.in1_AT11 cnt_gt_0.in0_AT11) (= cnt_gt_0.out_AT11 #b1)))
(assert (=> (= _-_state_id_-__AT10 #b10) (= _-_state_id_-__AT11 #b10)))
(assert (=> (= _-_state_id_-__AT10 #b01) (= _-_state_id_-__AT11 #b10)))
(assert (=> (= _-_state_id_-__AT10 #b00) (= _-_state_id_-__AT11 #b01)))
(assert (= mpt.cnt.in_AT10 mpt.cnt.out_AT11))
(assert (= magic_packet.in_AT10 magic_packet.out_AT11))
(assert (= magic_packet.init_AT10 magic_packet.init_AT11))
(assert (= f.wrPtr.in_AT10 f.wrPtr.out_AT11))
(assert (= f.rdPtr.in_AT10 f.rdPtr.out_AT11))
(assert (= f.mem.array_AT11 (ite (= f.mem.wen_AT10 #b1) (store f.mem.array_AT10 f.mem.waddr_AT10 f.mem.wdata_AT10) f.mem.array_AT10)))
(assert (= en.init_AT10 en.init_AT11))
(assert (= en.in_AT10 en.out_AT11))
(push 1)

(assert (not (= self.prop_signal_AT11 #b1)))
(check-sat)

(pop 1)
(declare-fun f.rdPtrp1.in0_AT12 () (_ BitVec 4))
(declare-fun f.mem.wen_AT12 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT12 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT12 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT12 () (_ BitVec 3))
(declare-fun self.data_out_AT12 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT12 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT12 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT12 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT12 () (_ BitVec 3))
(declare-fun f.mem.clk_AT12 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT12 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT12 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT12 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT12 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT12 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT12 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT12 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT12 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT12 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT12 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT12 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT12 () (_ BitVec 1))
(declare-fun not_en.in_AT12 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT12 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT12 () (_ BitVec 1))
(declare-fun en.in_AT12 () (_ BitVec 1))
(declare-fun en.clk_AT12 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT12 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT12 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT12 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT12 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT12 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT12 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT12 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT12 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT12 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT12 () (_ BitVec 4))
(declare-fun magic_packet.out_AT12 () (_ BitVec 8))
(declare-fun magic_packet.init_AT12 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT12 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT12 () (_ BitVec 4))
(declare-fun f.mem.array_AT12 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT12 () (_ BitVec 1))
(declare-fun en.out_AT12 () (_ BitVec 1))
(declare-fun self.pop_AT12 () (_ BitVec 1))
(declare-fun self.empty_AT12 () (_ BitVec 1))
(declare-fun self.push_AT12 () (_ BitVec 1))
(declare-fun self.full_AT12 () (_ BitVec 1))
(declare-fun self.rst_AT12 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT12 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT12 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT12 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT12 () (_ BitVec 1))
(declare-fun self.start_AT12 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT12 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT12 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT12 () (_ BitVec 1))
(declare-fun self.prop_signal_AT12 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT12 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT12 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT12 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT12 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT12 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT12 () (_ BitVec 1))
(declare-fun mp_en.out_AT12 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT12 () (_ BitVec 1))
(declare-fun self.data_in_AT12 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT12 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT12 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT12 () (_ BitVec 1))
(declare-fun zero.out_AT12 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT12 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT12 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT12 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT12 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT12 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT12 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT12 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT12 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT12 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT12 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT12 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT12 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT12 () (_ BitVec 4))
(declare-fun mpt.one.out_AT12 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT12 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT12 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT12 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT12 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT12 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT12 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT12 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT12 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT12 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT12 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT12 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT12 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT12 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT12 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT12 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT12 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT12 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT12 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT12 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT12 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT12 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT12 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT12 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT12 () (_ BitVec 4))
(declare-fun self.clk_AT12 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT12 () (_ BitVec 1))
(declare-fun not_en.out_AT12 () (_ BitVec 1))
(declare-fun mp_en.in1_AT12 () (_ BitVec 1))
(declare-fun start_and_push.out_AT12 () (_ BitVec 1))
(declare-fun mp_en.in0_AT12 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT12 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT12 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT12 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT12 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT12 () (_ BitVec 8))
(declare-fun magic_packet.in_AT12 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT12 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT12 () (_ BitVec 1))
(declare-fun f.zero.out_AT12 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT12 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT12 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT12 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT12 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT12 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT12 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT12 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT12 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT12 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT12 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT12 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT12 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT12 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT12 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT12 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT12 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT12 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT12 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT12 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT12 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT12 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT12 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT12 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT12 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT12 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT12 () (_ BitVec 4))
(declare-fun f.one.out_AT12 () (_ BitVec 4))

(assert (=> (= self.empty_AT12 #b1) (= self.pop_AT12 #b0)))
(assert (=> (= self.full_AT12 #b1) (= self.push_AT12 #b0)))
(assert (=> (= _-_state_id_-__AT12 #b10) (and true (= self.rst_AT12 #b0))))
(assert (=> (= _-_state_id_-__AT12 #b01) (and (and (and true (= self.rst_AT12 #b1)) (= self.push_AT12 #b0)) (= self.pop_AT12 #b0))))
(assert (=> (= _-_state_id_-__AT12 #b00) (and (and (and true (= self.rst_AT12 #b1)) (= self.push_AT12 #b0)) (= self.pop_AT12 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT12 ((_ extract 3 3) f.wrPtr.out_AT12)))
(assert (= f.fullEq_1.in0_AT12 ((_ extract 3 3) f.rdPtr.out_AT12)))
(assert (= en.out_AT12 mpt.not_captured.in_AT12))
(assert (= self.start_AT12 start_and_push.in0_AT12))
(assert (= self.push_AT12 start_and_push.in1_AT12))
(assert (= self.push_AT12 mpt.ssa_cnt_and1.in1_AT12))
(assert (= self.prop_signal_AT12 prop_signal_or.out_AT12))
(assert (= self.pop_AT12 mpt.next_cnt_and1.in1_AT12))
(assert (= self.full_AT12 f.fullCalc.out_AT12))
(assert (= self.data_out_vld_AT12 data_out_vld_and2.out_AT12))
(assert (= not_data_out_vld.out_AT12 prop_signal_or.in0_AT12))
(assert (= next_magic_packet.sel_AT12 mp_en.out_AT12))
(assert (= next_magic_packet.in1_AT12 self.data_in_AT12))
(assert (= next_cnt_eq0.out_AT12 data_out_vld_and2.in1_AT12))
(assert (= next_cnt_eq0.in1_AT12 zero.out_AT12))
(assert (= mpt.ssa_cnt_gt_0.out_AT12 mpt.next_cnt_and1.in0_AT12))
(assert (= mpt.ssa_cnt_gt_0.in1_AT12 mpt.zero.out_AT12))
(assert (= mpt.ssa_cnt_and1.out_AT12 mpt.ssa_cnt_and2.in0_AT12))
(assert (= mpt.ssa_cnt.sel_AT12 mpt.ssa_cnt_and2.out_AT12))
(assert (= mpt.ssa_cnt.out_AT12 mpt.ssa_cnt_m1.in0_AT12))
(assert (= mpt.ssa_cnt.out_AT12 mpt.ssa_cnt_gt_0.in0_AT12))
(assert (= mpt.one.out_AT12 mpt.ssa_cnt_m1.in1_AT12))
(assert (= mpt.not_captured.out_AT12 mpt.ssa_cnt_and2.in1_AT12))
(assert (= mpt.next_cnt.sel_AT12 self.rst_AT12))
(assert (= mpt.next_cnt.out_AT12 next_cnt_eq0.in0_AT12))
(assert (= mpt.next_cnt.in1_AT12 mpt.zero.out_AT12))
(assert (= mpt.decr_mux.sel_AT12 mpt.next_cnt_and1.out_AT12))
(assert (= mpt.decr_mux.out_AT12 mpt.next_cnt.in0_AT12))
(assert (= mpt.decr_mux.in1_AT12 mpt.ssa_cnt_m1.out_AT12))
(assert (= mpt.decr_mux.in0_AT12 mpt.ssa_cnt.out_AT12))
(assert (= mpt.cnt_p1.out_AT12 mpt.ssa_cnt.in1_AT12))
(assert (= mpt.cnt_p1.in1_AT12 mpt.one.out_AT12))
(assert (= mpt.cnt_lt_depth.out_AT12 mpt.ssa_cnt_and1.in0_AT12))
(assert (= mpt.cnt_lt_depth.in1_AT12 mpt.depth.out_AT12))
(assert (= mpt.cnt.out_AT12 mpt.ssa_cnt.in0_AT12))
(assert (= mpt.cnt.out_AT12 mpt.cnt_p1.in0_AT12))
(assert (= mpt.cnt.out_AT12 mpt.cnt_lt_depth.in0_AT12))
(assert (= mpt.cnt.in_AT12 mpt.next_cnt.out_AT12))
(assert (= mpt.cnt.clk_AT12 self.clk_AT12))
(assert (= mp_en.in1_AT12 not_en.out_AT12))
(assert (= mp_en.in0_AT12 start_and_push.out_AT12))
(assert (= magic_packet_eq.out_AT12 prop_signal_or.in1_AT12))
(assert (= magic_packet.out_AT12 next_magic_packet.in0_AT12))
(assert (= magic_packet.out_AT12 magic_packet_eq.in0_AT12))
(assert (= magic_packet.in_AT12 next_magic_packet.out_AT12))
(assert (= magic_packet.clk_AT12 self.clk_AT12))
(assert (= f.wrPtrRst.sel_AT12 self.rst_AT12))
(assert (= f.wrPtrRst.in1_AT12 f.zero.out_AT12))
(assert (= f.wrPtrEn.sel_AT12 self.push_AT12))
(assert (= f.wrPtrEn.out_AT12 f.wrPtrRst.in0_AT12))
(assert (= f.wrPtrEn.in1_AT12 f.wrPtrp1.out_AT12))
(assert (= f.wrPtr.out_AT12 f.wrPtrp1.in1_AT12))
(assert (= f.wrPtr.out_AT12 f.wrPtrSlice.in_AT12))
(assert (= f.wrPtr.out_AT12 f.wrPtrEn.in0_AT12))
(assert (= f.wrPtr.in_AT12 f.wrPtrRst.out_AT12))
(assert (= f.wrPtr.clk_AT12 self.clk_AT12))
(assert (= f.rdPtrRst.sel_AT12 self.rst_AT12))
(assert (= f.rdPtrRst.in1_AT12 f.zero.out_AT12))
(assert (= f.rdPtrEn.sel_AT12 self.pop_AT12))
(assert (= f.rdPtrEn.out_AT12 f.rdPtrRst.in0_AT12))
(assert (= f.rdPtrEn.in1_AT12 f.rdPtrp1.out_AT12))
(assert (= f.rdPtr.out_AT12 f.rdPtrp1.in1_AT12))
(assert (= f.rdPtr.out_AT12 f.rdPtrSlice.in_AT12))
(assert (= f.rdPtr.out_AT12 f.rdPtrEn.in0_AT12))
(assert (= f.rdPtr.in_AT12 f.rdPtrRst.out_AT12))
(assert (= f.rdPtr.clk_AT12 self.clk_AT12))
(assert (= f.one.out_AT12 f.wrPtrp1.in0_AT12))
(assert (= f.one.out_AT12 f.rdPtrp1.in0_AT12))
(assert (= f.mem.wen_AT12 self.push_AT12))
(assert (= f.mem.wdata_AT12 self.data_in_AT12))
(assert (= f.mem.waddr_AT12 f.wrPtrSlice.out_AT12))
(assert (= f.mem.rdata_AT12 self.data_out_AT12))
(assert (= f.mem.rdata_AT12 magic_packet_eq.in1_AT12))
(assert (= f.mem.raddr_AT12 f.rdPtrSlice.out_AT12))
(assert (= f.mem.clk_AT12 self.clk_AT12))
(assert (= f.fullEq_2.out_AT12 f.fullCalc.in1_AT12))
(assert (= f.fullEq_2.in1_AT12 f.wrPtrSlice.out_AT12))
(assert (= f.fullEq_2.in0_AT12 f.rdPtrSlice.out_AT12))
(assert (= f.fullEq_1.out_AT12 f.notfullEq_1.in_AT12))
(assert (= f.fullCalc.in0_AT12 f.notfullEq_1.out_AT12))
(assert (= f.emptyEq.out_AT12 self.empty_AT12))
(assert (= f.emptyEq.in1_AT12 f.wrPtr.out_AT12))
(assert (= f.emptyEq.in0_AT12 f.rdPtr.out_AT12))
(assert (= en_or_sp.in1_AT12 start_and_push.out_AT12))
(assert (= en.out_AT12 not_en.in_AT12))
(assert (= en.out_AT12 en_or_sp.in0_AT12))
(assert (= en.in_AT12 en_or_sp.out_AT12))
(assert (= en.clk_AT12 self.clk_AT12))
(assert (= data_out_vld_and2.out_AT12 not_data_out_vld.in_AT12))
(assert (= data_out_vld_and1.out_AT12 data_out_vld_and2.in0_AT12))
(assert (= data_out_vld_and1.in0_AT12 en.out_AT12))
(assert (= cnt_gt_0.out_AT12 data_out_vld_and1.in1_AT12))
(assert (= cnt_gt_0.in1_AT12 zero.out_AT12))
(assert (= cnt_gt_0.in0_AT12 mpt.cnt.out_AT12))
(assert (= self.clk_AT12 #b0))
(assert (= zero.out_AT12 #b0000))
(assert (= (bvand start_and_push.in0_AT12 start_and_push.in1_AT12) start_and_push.out_AT12))
(assert (= (bvor prop_signal_or.in0_AT12 prop_signal_or.in1_AT12) prop_signal_or.out_AT12))
(assert (= (bvnot not_en.in_AT12) not_en.out_AT12))
(assert (= (bvnot not_data_out_vld.in_AT12) not_data_out_vld.out_AT12))
(assert (=> (= next_magic_packet.sel_AT12 #b1) (= next_magic_packet.in1_AT12 next_magic_packet.out_AT12)))
(assert (=> (= next_magic_packet.sel_AT12 #b0) (= next_magic_packet.in0_AT12 next_magic_packet.out_AT12)))
(assert (=> (not (= next_cnt_eq0.in0_AT12 next_cnt_eq0.in1_AT12)) (= next_cnt_eq0.out_AT12 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT12 next_cnt_eq0.in1_AT12) (= next_cnt_eq0.out_AT12 #b1)))
(assert (= mpt.zero.out_AT12 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT12 mpt.ssa_cnt_m1.in1_AT12) mpt.ssa_cnt_m1.out_AT12))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT12 mpt.ssa_cnt_gt_0.in0_AT12) (= mpt.ssa_cnt_gt_0.out_AT12 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT12 mpt.ssa_cnt_and2.in1_AT12) mpt.ssa_cnt_and2.out_AT12))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT12 mpt.ssa_cnt_and1.in1_AT12) mpt.ssa_cnt_and1.out_AT12))
(assert (=> (= mpt.ssa_cnt.sel_AT12 #b1) (= mpt.ssa_cnt.in1_AT12 mpt.ssa_cnt.out_AT12)))
(assert (=> (= mpt.ssa_cnt.sel_AT12 #b0) (= mpt.ssa_cnt.in0_AT12 mpt.ssa_cnt.out_AT12)))
(assert (= mpt.one.out_AT12 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT12) mpt.not_captured.out_AT12))
(assert (= (bvand mpt.next_cnt_and1.in0_AT12 mpt.next_cnt_and1.in1_AT12) mpt.next_cnt_and1.out_AT12))
(assert (=> (= mpt.next_cnt.sel_AT12 #b1) (= mpt.next_cnt.in1_AT12 mpt.next_cnt.out_AT12)))
(assert (=> (= mpt.next_cnt.sel_AT12 #b0) (= mpt.next_cnt.in0_AT12 mpt.next_cnt.out_AT12)))
(assert (= mpt.depth.out_AT12 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT12 #b1) (= mpt.decr_mux.in1_AT12 mpt.decr_mux.out_AT12)))
(assert (=> (= mpt.decr_mux.sel_AT12 #b0) (= mpt.decr_mux.in0_AT12 mpt.decr_mux.out_AT12)))
(assert (= (bvadd mpt.cnt_p1.in0_AT12 mpt.cnt_p1.in1_AT12) mpt.cnt_p1.out_AT12))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT12 mpt.cnt_lt_depth.in1_AT12) (= mpt.cnt_lt_depth.out_AT12 #b1)))
(assert (= (bvand mp_en.in0_AT12 mp_en.in1_AT12) mp_en.out_AT12))
(assert (=> (not (= magic_packet_eq.in0_AT12 magic_packet_eq.in1_AT12)) (= magic_packet_eq.out_AT12 #b0)))
(assert (=> (= magic_packet_eq.in0_AT12 magic_packet_eq.in1_AT12) (= magic_packet_eq.out_AT12 #b1)))
(assert (= f.zero.out_AT12 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT12 f.wrPtrp1.in1_AT12) f.wrPtrp1.out_AT12))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT12) f.wrPtrSlice.out_AT12))
(assert (=> (= f.wrPtrRst.sel_AT12 #b1) (= f.wrPtrRst.in1_AT12 f.wrPtrRst.out_AT12)))
(assert (=> (= f.wrPtrRst.sel_AT12 #b0) (= f.wrPtrRst.in0_AT12 f.wrPtrRst.out_AT12)))
(assert (=> (= f.wrPtrEn.sel_AT12 #b1) (= f.wrPtrEn.in1_AT12 f.wrPtrEn.out_AT12)))
(assert (=> (= f.wrPtrEn.sel_AT12 #b0) (= f.wrPtrEn.in0_AT12 f.wrPtrEn.out_AT12)))
(assert (= (bvadd f.rdPtrp1.in0_AT12 f.rdPtrp1.in1_AT12) f.rdPtrp1.out_AT12))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT12) f.rdPtrSlice.out_AT12))
(assert (=> (= f.rdPtrRst.sel_AT12 #b1) (= f.rdPtrRst.in1_AT12 f.rdPtrRst.out_AT12)))
(assert (=> (= f.rdPtrRst.sel_AT12 #b0) (= f.rdPtrRst.in0_AT12 f.rdPtrRst.out_AT12)))
(assert (=> (= f.rdPtrEn.sel_AT12 #b1) (= f.rdPtrEn.in1_AT12 f.rdPtrEn.out_AT12)))
(assert (=> (= f.rdPtrEn.sel_AT12 #b0) (= f.rdPtrEn.in0_AT12 f.rdPtrEn.out_AT12)))
(assert (= f.one.out_AT12 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT12) f.notfullEq_1.out_AT12))
(assert (= f.mem.rdata_AT12 (select f.mem.array_AT12 f.mem.raddr_AT12)))
(assert (=> (not (= f.fullEq_2.in0_AT12 f.fullEq_2.in1_AT12)) (= f.fullEq_2.out_AT12 #b0)))
(assert (=> (= f.fullEq_2.in0_AT12 f.fullEq_2.in1_AT12) (= f.fullEq_2.out_AT12 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT12 f.fullEq_1.in1_AT12)) (= f.fullEq_1.out_AT12 #b0)))
(assert (=> (= f.fullEq_1.in0_AT12 f.fullEq_1.in1_AT12) (= f.fullEq_1.out_AT12 #b1)))
(assert (= (bvand f.fullCalc.in0_AT12 f.fullCalc.in1_AT12) f.fullCalc.out_AT12))
(assert (=> (not (= f.emptyEq.in0_AT12 f.emptyEq.in1_AT12)) (= f.emptyEq.out_AT12 #b0)))
(assert (=> (= f.emptyEq.in0_AT12 f.emptyEq.in1_AT12) (= f.emptyEq.out_AT12 #b1)))
(assert (= (bvor en_or_sp.in0_AT12 en_or_sp.in1_AT12) en_or_sp.out_AT12))
(assert (= (bvand data_out_vld_and2.in0_AT12 data_out_vld_and2.in1_AT12) data_out_vld_and2.out_AT12))
(assert (= (bvand data_out_vld_and1.in0_AT12 data_out_vld_and1.in1_AT12) data_out_vld_and1.out_AT12))
(assert (= (bvult cnt_gt_0.in1_AT12 cnt_gt_0.in0_AT12) (= cnt_gt_0.out_AT12 #b1)))
(assert (=> (= _-_state_id_-__AT11 #b10) (= _-_state_id_-__AT12 #b10)))
(assert (=> (= _-_state_id_-__AT11 #b01) (= _-_state_id_-__AT12 #b10)))
(assert (=> (= _-_state_id_-__AT11 #b00) (= _-_state_id_-__AT12 #b01)))
(assert (= mpt.cnt.in_AT11 mpt.cnt.out_AT12))
(assert (= magic_packet.in_AT11 magic_packet.out_AT12))
(assert (= magic_packet.init_AT11 magic_packet.init_AT12))
(assert (= f.wrPtr.in_AT11 f.wrPtr.out_AT12))
(assert (= f.rdPtr.in_AT11 f.rdPtr.out_AT12))
(assert (= f.mem.array_AT12 (ite (= f.mem.wen_AT11 #b1) (store f.mem.array_AT11 f.mem.waddr_AT11 f.mem.wdata_AT11) f.mem.array_AT11)))
(assert (= en.init_AT11 en.init_AT12))
(assert (= en.in_AT11 en.out_AT12))
(push 1)

(assert (not (= self.prop_signal_AT12 #b1)))
(check-sat)

(pop 1)
(declare-fun mpt.ssa_cnt_and1.out_AT13 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT13 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT13 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT13 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT13 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT13 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT13 () (_ BitVec 4))
(declare-fun mpt.one.out_AT13 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT13 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT13 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT13 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT13 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT13 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT13 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT13 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT13 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT13 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT13 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT13 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT13 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT13 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT13 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT13 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT13 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT13 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT13 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT13 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT13 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT13 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT13 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT13 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT13 () (_ BitVec 4))
(declare-fun self.clk_AT13 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT13 () (_ BitVec 1))
(declare-fun not_en.out_AT13 () (_ BitVec 1))
(declare-fun mp_en.in1_AT13 () (_ BitVec 1))
(declare-fun start_and_push.out_AT13 () (_ BitVec 1))
(declare-fun mp_en.in0_AT13 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT13 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT13 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT13 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT13 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT13 () (_ BitVec 8))
(declare-fun magic_packet.in_AT13 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT13 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT13 () (_ BitVec 1))
(declare-fun f.zero.out_AT13 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT13 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT13 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT13 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT13 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT13 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT13 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT13 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT13 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT13 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT13 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT13 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT13 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT13 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT13 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT13 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT13 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT13 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT13 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT13 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT13 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT13 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT13 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT13 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT13 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT13 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT13 () (_ BitVec 4))
(declare-fun f.one.out_AT13 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT13 () (_ BitVec 4))
(declare-fun f.mem.wen_AT13 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT13 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT13 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT13 () (_ BitVec 3))
(declare-fun self.data_out_AT13 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT13 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT13 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT13 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT13 () (_ BitVec 3))
(declare-fun f.mem.clk_AT13 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT13 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT13 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT13 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT13 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT13 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT13 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT13 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT13 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT13 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT13 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT13 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT13 () (_ BitVec 1))
(declare-fun not_en.in_AT13 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT13 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT13 () (_ BitVec 1))
(declare-fun en.in_AT13 () (_ BitVec 1))
(declare-fun en.clk_AT13 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT13 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT13 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT13 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT13 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT13 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT13 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT13 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT13 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT13 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT13 () (_ BitVec 4))
(declare-fun magic_packet.out_AT13 () (_ BitVec 8))
(declare-fun magic_packet.init_AT13 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT13 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT13 () (_ BitVec 4))
(declare-fun f.mem.array_AT13 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT13 () (_ BitVec 1))
(declare-fun en.out_AT13 () (_ BitVec 1))
(declare-fun self.pop_AT13 () (_ BitVec 1))
(declare-fun self.empty_AT13 () (_ BitVec 1))
(declare-fun self.push_AT13 () (_ BitVec 1))
(declare-fun self.full_AT13 () (_ BitVec 1))
(declare-fun self.rst_AT13 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT13 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT13 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT13 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT13 () (_ BitVec 1))
(declare-fun self.start_AT13 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT13 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT13 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT13 () (_ BitVec 1))
(declare-fun self.prop_signal_AT13 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT13 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT13 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT13 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT13 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT13 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT13 () (_ BitVec 1))
(declare-fun mp_en.out_AT13 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT13 () (_ BitVec 1))
(declare-fun self.data_in_AT13 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT13 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT13 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT13 () (_ BitVec 1))
(declare-fun zero.out_AT13 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT13 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT13 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT13 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT13 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT13 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT13 () (_ BitVec 1))

(assert (=> (= self.empty_AT13 #b1) (= self.pop_AT13 #b0)))
(assert (=> (= self.full_AT13 #b1) (= self.push_AT13 #b0)))
(assert (=> (= _-_state_id_-__AT13 #b10) (and true (= self.rst_AT13 #b0))))
(assert (=> (= _-_state_id_-__AT13 #b01) (and (and (and true (= self.rst_AT13 #b1)) (= self.push_AT13 #b0)) (= self.pop_AT13 #b0))))
(assert (=> (= _-_state_id_-__AT13 #b00) (and (and (and true (= self.rst_AT13 #b1)) (= self.push_AT13 #b0)) (= self.pop_AT13 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT13 ((_ extract 3 3) f.wrPtr.out_AT13)))
(assert (= f.fullEq_1.in0_AT13 ((_ extract 3 3) f.rdPtr.out_AT13)))
(assert (= en.out_AT13 mpt.not_captured.in_AT13))
(assert (= self.start_AT13 start_and_push.in0_AT13))
(assert (= self.push_AT13 start_and_push.in1_AT13))
(assert (= self.push_AT13 mpt.ssa_cnt_and1.in1_AT13))
(assert (= self.prop_signal_AT13 prop_signal_or.out_AT13))
(assert (= self.pop_AT13 mpt.next_cnt_and1.in1_AT13))
(assert (= self.full_AT13 f.fullCalc.out_AT13))
(assert (= self.data_out_vld_AT13 data_out_vld_and2.out_AT13))
(assert (= not_data_out_vld.out_AT13 prop_signal_or.in0_AT13))
(assert (= next_magic_packet.sel_AT13 mp_en.out_AT13))
(assert (= next_magic_packet.in1_AT13 self.data_in_AT13))
(assert (= next_cnt_eq0.out_AT13 data_out_vld_and2.in1_AT13))
(assert (= next_cnt_eq0.in1_AT13 zero.out_AT13))
(assert (= mpt.ssa_cnt_gt_0.out_AT13 mpt.next_cnt_and1.in0_AT13))
(assert (= mpt.ssa_cnt_gt_0.in1_AT13 mpt.zero.out_AT13))
(assert (= mpt.ssa_cnt_and1.out_AT13 mpt.ssa_cnt_and2.in0_AT13))
(assert (= mpt.ssa_cnt.sel_AT13 mpt.ssa_cnt_and2.out_AT13))
(assert (= mpt.ssa_cnt.out_AT13 mpt.ssa_cnt_m1.in0_AT13))
(assert (= mpt.ssa_cnt.out_AT13 mpt.ssa_cnt_gt_0.in0_AT13))
(assert (= mpt.one.out_AT13 mpt.ssa_cnt_m1.in1_AT13))
(assert (= mpt.not_captured.out_AT13 mpt.ssa_cnt_and2.in1_AT13))
(assert (= mpt.next_cnt.sel_AT13 self.rst_AT13))
(assert (= mpt.next_cnt.out_AT13 next_cnt_eq0.in0_AT13))
(assert (= mpt.next_cnt.in1_AT13 mpt.zero.out_AT13))
(assert (= mpt.decr_mux.sel_AT13 mpt.next_cnt_and1.out_AT13))
(assert (= mpt.decr_mux.out_AT13 mpt.next_cnt.in0_AT13))
(assert (= mpt.decr_mux.in1_AT13 mpt.ssa_cnt_m1.out_AT13))
(assert (= mpt.decr_mux.in0_AT13 mpt.ssa_cnt.out_AT13))
(assert (= mpt.cnt_p1.out_AT13 mpt.ssa_cnt.in1_AT13))
(assert (= mpt.cnt_p1.in1_AT13 mpt.one.out_AT13))
(assert (= mpt.cnt_lt_depth.out_AT13 mpt.ssa_cnt_and1.in0_AT13))
(assert (= mpt.cnt_lt_depth.in1_AT13 mpt.depth.out_AT13))
(assert (= mpt.cnt.out_AT13 mpt.ssa_cnt.in0_AT13))
(assert (= mpt.cnt.out_AT13 mpt.cnt_p1.in0_AT13))
(assert (= mpt.cnt.out_AT13 mpt.cnt_lt_depth.in0_AT13))
(assert (= mpt.cnt.in_AT13 mpt.next_cnt.out_AT13))
(assert (= mpt.cnt.clk_AT13 self.clk_AT13))
(assert (= mp_en.in1_AT13 not_en.out_AT13))
(assert (= mp_en.in0_AT13 start_and_push.out_AT13))
(assert (= magic_packet_eq.out_AT13 prop_signal_or.in1_AT13))
(assert (= magic_packet.out_AT13 next_magic_packet.in0_AT13))
(assert (= magic_packet.out_AT13 magic_packet_eq.in0_AT13))
(assert (= magic_packet.in_AT13 next_magic_packet.out_AT13))
(assert (= magic_packet.clk_AT13 self.clk_AT13))
(assert (= f.wrPtrRst.sel_AT13 self.rst_AT13))
(assert (= f.wrPtrRst.in1_AT13 f.zero.out_AT13))
(assert (= f.wrPtrEn.sel_AT13 self.push_AT13))
(assert (= f.wrPtrEn.out_AT13 f.wrPtrRst.in0_AT13))
(assert (= f.wrPtrEn.in1_AT13 f.wrPtrp1.out_AT13))
(assert (= f.wrPtr.out_AT13 f.wrPtrp1.in1_AT13))
(assert (= f.wrPtr.out_AT13 f.wrPtrSlice.in_AT13))
(assert (= f.wrPtr.out_AT13 f.wrPtrEn.in0_AT13))
(assert (= f.wrPtr.in_AT13 f.wrPtrRst.out_AT13))
(assert (= f.wrPtr.clk_AT13 self.clk_AT13))
(assert (= f.rdPtrRst.sel_AT13 self.rst_AT13))
(assert (= f.rdPtrRst.in1_AT13 f.zero.out_AT13))
(assert (= f.rdPtrEn.sel_AT13 self.pop_AT13))
(assert (= f.rdPtrEn.out_AT13 f.rdPtrRst.in0_AT13))
(assert (= f.rdPtrEn.in1_AT13 f.rdPtrp1.out_AT13))
(assert (= f.rdPtr.out_AT13 f.rdPtrp1.in1_AT13))
(assert (= f.rdPtr.out_AT13 f.rdPtrSlice.in_AT13))
(assert (= f.rdPtr.out_AT13 f.rdPtrEn.in0_AT13))
(assert (= f.rdPtr.in_AT13 f.rdPtrRst.out_AT13))
(assert (= f.rdPtr.clk_AT13 self.clk_AT13))
(assert (= f.one.out_AT13 f.wrPtrp1.in0_AT13))
(assert (= f.one.out_AT13 f.rdPtrp1.in0_AT13))
(assert (= f.mem.wen_AT13 self.push_AT13))
(assert (= f.mem.wdata_AT13 self.data_in_AT13))
(assert (= f.mem.waddr_AT13 f.wrPtrSlice.out_AT13))
(assert (= f.mem.rdata_AT13 self.data_out_AT13))
(assert (= f.mem.rdata_AT13 magic_packet_eq.in1_AT13))
(assert (= f.mem.raddr_AT13 f.rdPtrSlice.out_AT13))
(assert (= f.mem.clk_AT13 self.clk_AT13))
(assert (= f.fullEq_2.out_AT13 f.fullCalc.in1_AT13))
(assert (= f.fullEq_2.in1_AT13 f.wrPtrSlice.out_AT13))
(assert (= f.fullEq_2.in0_AT13 f.rdPtrSlice.out_AT13))
(assert (= f.fullEq_1.out_AT13 f.notfullEq_1.in_AT13))
(assert (= f.fullCalc.in0_AT13 f.notfullEq_1.out_AT13))
(assert (= f.emptyEq.out_AT13 self.empty_AT13))
(assert (= f.emptyEq.in1_AT13 f.wrPtr.out_AT13))
(assert (= f.emptyEq.in0_AT13 f.rdPtr.out_AT13))
(assert (= en_or_sp.in1_AT13 start_and_push.out_AT13))
(assert (= en.out_AT13 not_en.in_AT13))
(assert (= en.out_AT13 en_or_sp.in0_AT13))
(assert (= en.in_AT13 en_or_sp.out_AT13))
(assert (= en.clk_AT13 self.clk_AT13))
(assert (= data_out_vld_and2.out_AT13 not_data_out_vld.in_AT13))
(assert (= data_out_vld_and1.out_AT13 data_out_vld_and2.in0_AT13))
(assert (= data_out_vld_and1.in0_AT13 en.out_AT13))
(assert (= cnt_gt_0.out_AT13 data_out_vld_and1.in1_AT13))
(assert (= cnt_gt_0.in1_AT13 zero.out_AT13))
(assert (= cnt_gt_0.in0_AT13 mpt.cnt.out_AT13))
(assert (= self.clk_AT13 #b0))
(assert (= zero.out_AT13 #b0000))
(assert (= (bvand start_and_push.in0_AT13 start_and_push.in1_AT13) start_and_push.out_AT13))
(assert (= (bvor prop_signal_or.in0_AT13 prop_signal_or.in1_AT13) prop_signal_or.out_AT13))
(assert (= (bvnot not_en.in_AT13) not_en.out_AT13))
(assert (= (bvnot not_data_out_vld.in_AT13) not_data_out_vld.out_AT13))
(assert (=> (= next_magic_packet.sel_AT13 #b1) (= next_magic_packet.in1_AT13 next_magic_packet.out_AT13)))
(assert (=> (= next_magic_packet.sel_AT13 #b0) (= next_magic_packet.in0_AT13 next_magic_packet.out_AT13)))
(assert (=> (not (= next_cnt_eq0.in0_AT13 next_cnt_eq0.in1_AT13)) (= next_cnt_eq0.out_AT13 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT13 next_cnt_eq0.in1_AT13) (= next_cnt_eq0.out_AT13 #b1)))
(assert (= mpt.zero.out_AT13 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT13 mpt.ssa_cnt_m1.in1_AT13) mpt.ssa_cnt_m1.out_AT13))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT13 mpt.ssa_cnt_gt_0.in0_AT13) (= mpt.ssa_cnt_gt_0.out_AT13 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT13 mpt.ssa_cnt_and2.in1_AT13) mpt.ssa_cnt_and2.out_AT13))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT13 mpt.ssa_cnt_and1.in1_AT13) mpt.ssa_cnt_and1.out_AT13))
(assert (=> (= mpt.ssa_cnt.sel_AT13 #b1) (= mpt.ssa_cnt.in1_AT13 mpt.ssa_cnt.out_AT13)))
(assert (=> (= mpt.ssa_cnt.sel_AT13 #b0) (= mpt.ssa_cnt.in0_AT13 mpt.ssa_cnt.out_AT13)))
(assert (= mpt.one.out_AT13 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT13) mpt.not_captured.out_AT13))
(assert (= (bvand mpt.next_cnt_and1.in0_AT13 mpt.next_cnt_and1.in1_AT13) mpt.next_cnt_and1.out_AT13))
(assert (=> (= mpt.next_cnt.sel_AT13 #b1) (= mpt.next_cnt.in1_AT13 mpt.next_cnt.out_AT13)))
(assert (=> (= mpt.next_cnt.sel_AT13 #b0) (= mpt.next_cnt.in0_AT13 mpt.next_cnt.out_AT13)))
(assert (= mpt.depth.out_AT13 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT13 #b1) (= mpt.decr_mux.in1_AT13 mpt.decr_mux.out_AT13)))
(assert (=> (= mpt.decr_mux.sel_AT13 #b0) (= mpt.decr_mux.in0_AT13 mpt.decr_mux.out_AT13)))
(assert (= (bvadd mpt.cnt_p1.in0_AT13 mpt.cnt_p1.in1_AT13) mpt.cnt_p1.out_AT13))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT13 mpt.cnt_lt_depth.in1_AT13) (= mpt.cnt_lt_depth.out_AT13 #b1)))
(assert (= (bvand mp_en.in0_AT13 mp_en.in1_AT13) mp_en.out_AT13))
(assert (=> (not (= magic_packet_eq.in0_AT13 magic_packet_eq.in1_AT13)) (= magic_packet_eq.out_AT13 #b0)))
(assert (=> (= magic_packet_eq.in0_AT13 magic_packet_eq.in1_AT13) (= magic_packet_eq.out_AT13 #b1)))
(assert (= f.zero.out_AT13 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT13 f.wrPtrp1.in1_AT13) f.wrPtrp1.out_AT13))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT13) f.wrPtrSlice.out_AT13))
(assert (=> (= f.wrPtrRst.sel_AT13 #b1) (= f.wrPtrRst.in1_AT13 f.wrPtrRst.out_AT13)))
(assert (=> (= f.wrPtrRst.sel_AT13 #b0) (= f.wrPtrRst.in0_AT13 f.wrPtrRst.out_AT13)))
(assert (=> (= f.wrPtrEn.sel_AT13 #b1) (= f.wrPtrEn.in1_AT13 f.wrPtrEn.out_AT13)))
(assert (=> (= f.wrPtrEn.sel_AT13 #b0) (= f.wrPtrEn.in0_AT13 f.wrPtrEn.out_AT13)))
(assert (= (bvadd f.rdPtrp1.in0_AT13 f.rdPtrp1.in1_AT13) f.rdPtrp1.out_AT13))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT13) f.rdPtrSlice.out_AT13))
(assert (=> (= f.rdPtrRst.sel_AT13 #b1) (= f.rdPtrRst.in1_AT13 f.rdPtrRst.out_AT13)))
(assert (=> (= f.rdPtrRst.sel_AT13 #b0) (= f.rdPtrRst.in0_AT13 f.rdPtrRst.out_AT13)))
(assert (=> (= f.rdPtrEn.sel_AT13 #b1) (= f.rdPtrEn.in1_AT13 f.rdPtrEn.out_AT13)))
(assert (=> (= f.rdPtrEn.sel_AT13 #b0) (= f.rdPtrEn.in0_AT13 f.rdPtrEn.out_AT13)))
(assert (= f.one.out_AT13 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT13) f.notfullEq_1.out_AT13))
(assert (= f.mem.rdata_AT13 (select f.mem.array_AT13 f.mem.raddr_AT13)))
(assert (=> (not (= f.fullEq_2.in0_AT13 f.fullEq_2.in1_AT13)) (= f.fullEq_2.out_AT13 #b0)))
(assert (=> (= f.fullEq_2.in0_AT13 f.fullEq_2.in1_AT13) (= f.fullEq_2.out_AT13 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT13 f.fullEq_1.in1_AT13)) (= f.fullEq_1.out_AT13 #b0)))
(assert (=> (= f.fullEq_1.in0_AT13 f.fullEq_1.in1_AT13) (= f.fullEq_1.out_AT13 #b1)))
(assert (= (bvand f.fullCalc.in0_AT13 f.fullCalc.in1_AT13) f.fullCalc.out_AT13))
(assert (=> (not (= f.emptyEq.in0_AT13 f.emptyEq.in1_AT13)) (= f.emptyEq.out_AT13 #b0)))
(assert (=> (= f.emptyEq.in0_AT13 f.emptyEq.in1_AT13) (= f.emptyEq.out_AT13 #b1)))
(assert (= (bvor en_or_sp.in0_AT13 en_or_sp.in1_AT13) en_or_sp.out_AT13))
(assert (= (bvand data_out_vld_and2.in0_AT13 data_out_vld_and2.in1_AT13) data_out_vld_and2.out_AT13))
(assert (= (bvand data_out_vld_and1.in0_AT13 data_out_vld_and1.in1_AT13) data_out_vld_and1.out_AT13))
(assert (= (bvult cnt_gt_0.in1_AT13 cnt_gt_0.in0_AT13) (= cnt_gt_0.out_AT13 #b1)))
(assert (=> (= _-_state_id_-__AT12 #b10) (= _-_state_id_-__AT13 #b10)))
(assert (=> (= _-_state_id_-__AT12 #b01) (= _-_state_id_-__AT13 #b10)))
(assert (=> (= _-_state_id_-__AT12 #b00) (= _-_state_id_-__AT13 #b01)))
(assert (= mpt.cnt.in_AT12 mpt.cnt.out_AT13))
(assert (= magic_packet.in_AT12 magic_packet.out_AT13))
(assert (= magic_packet.init_AT12 magic_packet.init_AT13))
(assert (= f.wrPtr.in_AT12 f.wrPtr.out_AT13))
(assert (= f.rdPtr.in_AT12 f.rdPtr.out_AT13))
(assert (= f.mem.array_AT13 (ite (= f.mem.wen_AT12 #b1) (store f.mem.array_AT12 f.mem.waddr_AT12 f.mem.wdata_AT12) f.mem.array_AT12)))
(assert (= en.init_AT12 en.init_AT13))
(assert (= en.in_AT12 en.out_AT13))
(push 1)

(assert (not (= self.prop_signal_AT13 #b1)))
(check-sat)

(pop 1)
(declare-fun en.out_AT14 () (_ BitVec 1))
(declare-fun self.pop_AT14 () (_ BitVec 1))
(declare-fun self.empty_AT14 () (_ BitVec 1))
(declare-fun self.push_AT14 () (_ BitVec 1))
(declare-fun self.full_AT14 () (_ BitVec 1))
(declare-fun self.rst_AT14 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT14 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT14 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT14 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT14 () (_ BitVec 1))
(declare-fun self.start_AT14 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT14 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT14 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT14 () (_ BitVec 1))
(declare-fun self.prop_signal_AT14 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT14 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT14 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT14 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT14 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT14 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT14 () (_ BitVec 1))
(declare-fun mp_en.out_AT14 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT14 () (_ BitVec 1))
(declare-fun self.data_in_AT14 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT14 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT14 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT14 () (_ BitVec 1))
(declare-fun zero.out_AT14 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT14 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT14 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT14 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT14 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT14 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT14 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT14 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT14 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT14 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT14 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT14 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT14 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT14 () (_ BitVec 4))
(declare-fun mpt.one.out_AT14 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT14 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT14 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT14 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT14 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT14 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT14 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT14 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT14 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT14 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT14 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT14 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT14 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT14 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT14 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT14 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT14 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT14 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT14 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT14 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT14 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT14 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT14 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT14 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT14 () (_ BitVec 4))
(declare-fun self.clk_AT14 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT14 () (_ BitVec 1))
(declare-fun not_en.out_AT14 () (_ BitVec 1))
(declare-fun mp_en.in1_AT14 () (_ BitVec 1))
(declare-fun start_and_push.out_AT14 () (_ BitVec 1))
(declare-fun mp_en.in0_AT14 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT14 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT14 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT14 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT14 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT14 () (_ BitVec 8))
(declare-fun magic_packet.in_AT14 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT14 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT14 () (_ BitVec 1))
(declare-fun f.zero.out_AT14 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT14 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT14 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT14 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT14 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT14 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT14 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT14 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT14 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT14 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT14 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT14 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT14 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT14 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT14 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT14 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT14 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT14 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT14 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT14 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT14 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT14 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT14 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT14 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT14 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT14 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT14 () (_ BitVec 4))
(declare-fun f.one.out_AT14 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT14 () (_ BitVec 4))
(declare-fun f.mem.wen_AT14 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT14 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT14 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT14 () (_ BitVec 3))
(declare-fun self.data_out_AT14 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT14 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT14 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT14 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT14 () (_ BitVec 3))
(declare-fun f.mem.clk_AT14 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT14 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT14 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT14 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT14 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT14 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT14 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT14 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT14 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT14 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT14 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT14 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT14 () (_ BitVec 1))
(declare-fun not_en.in_AT14 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT14 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT14 () (_ BitVec 1))
(declare-fun en.in_AT14 () (_ BitVec 1))
(declare-fun en.clk_AT14 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT14 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT14 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT14 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT14 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT14 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT14 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT14 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT14 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT14 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT14 () (_ BitVec 4))
(declare-fun magic_packet.out_AT14 () (_ BitVec 8))
(declare-fun magic_packet.init_AT14 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT14 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT14 () (_ BitVec 4))
(declare-fun f.mem.array_AT14 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT14 () (_ BitVec 1))

(assert (=> (= self.empty_AT14 #b1) (= self.pop_AT14 #b0)))
(assert (=> (= self.full_AT14 #b1) (= self.push_AT14 #b0)))
(assert (=> (= _-_state_id_-__AT14 #b10) (and true (= self.rst_AT14 #b0))))
(assert (=> (= _-_state_id_-__AT14 #b01) (and (and (and true (= self.rst_AT14 #b1)) (= self.push_AT14 #b0)) (= self.pop_AT14 #b0))))
(assert (=> (= _-_state_id_-__AT14 #b00) (and (and (and true (= self.rst_AT14 #b1)) (= self.push_AT14 #b0)) (= self.pop_AT14 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT14 ((_ extract 3 3) f.wrPtr.out_AT14)))
(assert (= f.fullEq_1.in0_AT14 ((_ extract 3 3) f.rdPtr.out_AT14)))
(assert (= en.out_AT14 mpt.not_captured.in_AT14))
(assert (= self.start_AT14 start_and_push.in0_AT14))
(assert (= self.push_AT14 start_and_push.in1_AT14))
(assert (= self.push_AT14 mpt.ssa_cnt_and1.in1_AT14))
(assert (= self.prop_signal_AT14 prop_signal_or.out_AT14))
(assert (= self.pop_AT14 mpt.next_cnt_and1.in1_AT14))
(assert (= self.full_AT14 f.fullCalc.out_AT14))
(assert (= self.data_out_vld_AT14 data_out_vld_and2.out_AT14))
(assert (= not_data_out_vld.out_AT14 prop_signal_or.in0_AT14))
(assert (= next_magic_packet.sel_AT14 mp_en.out_AT14))
(assert (= next_magic_packet.in1_AT14 self.data_in_AT14))
(assert (= next_cnt_eq0.out_AT14 data_out_vld_and2.in1_AT14))
(assert (= next_cnt_eq0.in1_AT14 zero.out_AT14))
(assert (= mpt.ssa_cnt_gt_0.out_AT14 mpt.next_cnt_and1.in0_AT14))
(assert (= mpt.ssa_cnt_gt_0.in1_AT14 mpt.zero.out_AT14))
(assert (= mpt.ssa_cnt_and1.out_AT14 mpt.ssa_cnt_and2.in0_AT14))
(assert (= mpt.ssa_cnt.sel_AT14 mpt.ssa_cnt_and2.out_AT14))
(assert (= mpt.ssa_cnt.out_AT14 mpt.ssa_cnt_m1.in0_AT14))
(assert (= mpt.ssa_cnt.out_AT14 mpt.ssa_cnt_gt_0.in0_AT14))
(assert (= mpt.one.out_AT14 mpt.ssa_cnt_m1.in1_AT14))
(assert (= mpt.not_captured.out_AT14 mpt.ssa_cnt_and2.in1_AT14))
(assert (= mpt.next_cnt.sel_AT14 self.rst_AT14))
(assert (= mpt.next_cnt.out_AT14 next_cnt_eq0.in0_AT14))
(assert (= mpt.next_cnt.in1_AT14 mpt.zero.out_AT14))
(assert (= mpt.decr_mux.sel_AT14 mpt.next_cnt_and1.out_AT14))
(assert (= mpt.decr_mux.out_AT14 mpt.next_cnt.in0_AT14))
(assert (= mpt.decr_mux.in1_AT14 mpt.ssa_cnt_m1.out_AT14))
(assert (= mpt.decr_mux.in0_AT14 mpt.ssa_cnt.out_AT14))
(assert (= mpt.cnt_p1.out_AT14 mpt.ssa_cnt.in1_AT14))
(assert (= mpt.cnt_p1.in1_AT14 mpt.one.out_AT14))
(assert (= mpt.cnt_lt_depth.out_AT14 mpt.ssa_cnt_and1.in0_AT14))
(assert (= mpt.cnt_lt_depth.in1_AT14 mpt.depth.out_AT14))
(assert (= mpt.cnt.out_AT14 mpt.ssa_cnt.in0_AT14))
(assert (= mpt.cnt.out_AT14 mpt.cnt_p1.in0_AT14))
(assert (= mpt.cnt.out_AT14 mpt.cnt_lt_depth.in0_AT14))
(assert (= mpt.cnt.in_AT14 mpt.next_cnt.out_AT14))
(assert (= mpt.cnt.clk_AT14 self.clk_AT14))
(assert (= mp_en.in1_AT14 not_en.out_AT14))
(assert (= mp_en.in0_AT14 start_and_push.out_AT14))
(assert (= magic_packet_eq.out_AT14 prop_signal_or.in1_AT14))
(assert (= magic_packet.out_AT14 next_magic_packet.in0_AT14))
(assert (= magic_packet.out_AT14 magic_packet_eq.in0_AT14))
(assert (= magic_packet.in_AT14 next_magic_packet.out_AT14))
(assert (= magic_packet.clk_AT14 self.clk_AT14))
(assert (= f.wrPtrRst.sel_AT14 self.rst_AT14))
(assert (= f.wrPtrRst.in1_AT14 f.zero.out_AT14))
(assert (= f.wrPtrEn.sel_AT14 self.push_AT14))
(assert (= f.wrPtrEn.out_AT14 f.wrPtrRst.in0_AT14))
(assert (= f.wrPtrEn.in1_AT14 f.wrPtrp1.out_AT14))
(assert (= f.wrPtr.out_AT14 f.wrPtrp1.in1_AT14))
(assert (= f.wrPtr.out_AT14 f.wrPtrSlice.in_AT14))
(assert (= f.wrPtr.out_AT14 f.wrPtrEn.in0_AT14))
(assert (= f.wrPtr.in_AT14 f.wrPtrRst.out_AT14))
(assert (= f.wrPtr.clk_AT14 self.clk_AT14))
(assert (= f.rdPtrRst.sel_AT14 self.rst_AT14))
(assert (= f.rdPtrRst.in1_AT14 f.zero.out_AT14))
(assert (= f.rdPtrEn.sel_AT14 self.pop_AT14))
(assert (= f.rdPtrEn.out_AT14 f.rdPtrRst.in0_AT14))
(assert (= f.rdPtrEn.in1_AT14 f.rdPtrp1.out_AT14))
(assert (= f.rdPtr.out_AT14 f.rdPtrp1.in1_AT14))
(assert (= f.rdPtr.out_AT14 f.rdPtrSlice.in_AT14))
(assert (= f.rdPtr.out_AT14 f.rdPtrEn.in0_AT14))
(assert (= f.rdPtr.in_AT14 f.rdPtrRst.out_AT14))
(assert (= f.rdPtr.clk_AT14 self.clk_AT14))
(assert (= f.one.out_AT14 f.wrPtrp1.in0_AT14))
(assert (= f.one.out_AT14 f.rdPtrp1.in0_AT14))
(assert (= f.mem.wen_AT14 self.push_AT14))
(assert (= f.mem.wdata_AT14 self.data_in_AT14))
(assert (= f.mem.waddr_AT14 f.wrPtrSlice.out_AT14))
(assert (= f.mem.rdata_AT14 self.data_out_AT14))
(assert (= f.mem.rdata_AT14 magic_packet_eq.in1_AT14))
(assert (= f.mem.raddr_AT14 f.rdPtrSlice.out_AT14))
(assert (= f.mem.clk_AT14 self.clk_AT14))
(assert (= f.fullEq_2.out_AT14 f.fullCalc.in1_AT14))
(assert (= f.fullEq_2.in1_AT14 f.wrPtrSlice.out_AT14))
(assert (= f.fullEq_2.in0_AT14 f.rdPtrSlice.out_AT14))
(assert (= f.fullEq_1.out_AT14 f.notfullEq_1.in_AT14))
(assert (= f.fullCalc.in0_AT14 f.notfullEq_1.out_AT14))
(assert (= f.emptyEq.out_AT14 self.empty_AT14))
(assert (= f.emptyEq.in1_AT14 f.wrPtr.out_AT14))
(assert (= f.emptyEq.in0_AT14 f.rdPtr.out_AT14))
(assert (= en_or_sp.in1_AT14 start_and_push.out_AT14))
(assert (= en.out_AT14 not_en.in_AT14))
(assert (= en.out_AT14 en_or_sp.in0_AT14))
(assert (= en.in_AT14 en_or_sp.out_AT14))
(assert (= en.clk_AT14 self.clk_AT14))
(assert (= data_out_vld_and2.out_AT14 not_data_out_vld.in_AT14))
(assert (= data_out_vld_and1.out_AT14 data_out_vld_and2.in0_AT14))
(assert (= data_out_vld_and1.in0_AT14 en.out_AT14))
(assert (= cnt_gt_0.out_AT14 data_out_vld_and1.in1_AT14))
(assert (= cnt_gt_0.in1_AT14 zero.out_AT14))
(assert (= cnt_gt_0.in0_AT14 mpt.cnt.out_AT14))
(assert (= self.clk_AT14 #b0))
(assert (= zero.out_AT14 #b0000))
(assert (= (bvand start_and_push.in0_AT14 start_and_push.in1_AT14) start_and_push.out_AT14))
(assert (= (bvor prop_signal_or.in0_AT14 prop_signal_or.in1_AT14) prop_signal_or.out_AT14))
(assert (= (bvnot not_en.in_AT14) not_en.out_AT14))
(assert (= (bvnot not_data_out_vld.in_AT14) not_data_out_vld.out_AT14))
(assert (=> (= next_magic_packet.sel_AT14 #b1) (= next_magic_packet.in1_AT14 next_magic_packet.out_AT14)))
(assert (=> (= next_magic_packet.sel_AT14 #b0) (= next_magic_packet.in0_AT14 next_magic_packet.out_AT14)))
(assert (=> (not (= next_cnt_eq0.in0_AT14 next_cnt_eq0.in1_AT14)) (= next_cnt_eq0.out_AT14 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT14 next_cnt_eq0.in1_AT14) (= next_cnt_eq0.out_AT14 #b1)))
(assert (= mpt.zero.out_AT14 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT14 mpt.ssa_cnt_m1.in1_AT14) mpt.ssa_cnt_m1.out_AT14))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT14 mpt.ssa_cnt_gt_0.in0_AT14) (= mpt.ssa_cnt_gt_0.out_AT14 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT14 mpt.ssa_cnt_and2.in1_AT14) mpt.ssa_cnt_and2.out_AT14))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT14 mpt.ssa_cnt_and1.in1_AT14) mpt.ssa_cnt_and1.out_AT14))
(assert (=> (= mpt.ssa_cnt.sel_AT14 #b1) (= mpt.ssa_cnt.in1_AT14 mpt.ssa_cnt.out_AT14)))
(assert (=> (= mpt.ssa_cnt.sel_AT14 #b0) (= mpt.ssa_cnt.in0_AT14 mpt.ssa_cnt.out_AT14)))
(assert (= mpt.one.out_AT14 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT14) mpt.not_captured.out_AT14))
(assert (= (bvand mpt.next_cnt_and1.in0_AT14 mpt.next_cnt_and1.in1_AT14) mpt.next_cnt_and1.out_AT14))
(assert (=> (= mpt.next_cnt.sel_AT14 #b1) (= mpt.next_cnt.in1_AT14 mpt.next_cnt.out_AT14)))
(assert (=> (= mpt.next_cnt.sel_AT14 #b0) (= mpt.next_cnt.in0_AT14 mpt.next_cnt.out_AT14)))
(assert (= mpt.depth.out_AT14 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT14 #b1) (= mpt.decr_mux.in1_AT14 mpt.decr_mux.out_AT14)))
(assert (=> (= mpt.decr_mux.sel_AT14 #b0) (= mpt.decr_mux.in0_AT14 mpt.decr_mux.out_AT14)))
(assert (= (bvadd mpt.cnt_p1.in0_AT14 mpt.cnt_p1.in1_AT14) mpt.cnt_p1.out_AT14))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT14 mpt.cnt_lt_depth.in1_AT14) (= mpt.cnt_lt_depth.out_AT14 #b1)))
(assert (= (bvand mp_en.in0_AT14 mp_en.in1_AT14) mp_en.out_AT14))
(assert (=> (not (= magic_packet_eq.in0_AT14 magic_packet_eq.in1_AT14)) (= magic_packet_eq.out_AT14 #b0)))
(assert (=> (= magic_packet_eq.in0_AT14 magic_packet_eq.in1_AT14) (= magic_packet_eq.out_AT14 #b1)))
(assert (= f.zero.out_AT14 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT14 f.wrPtrp1.in1_AT14) f.wrPtrp1.out_AT14))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT14) f.wrPtrSlice.out_AT14))
(assert (=> (= f.wrPtrRst.sel_AT14 #b1) (= f.wrPtrRst.in1_AT14 f.wrPtrRst.out_AT14)))
(assert (=> (= f.wrPtrRst.sel_AT14 #b0) (= f.wrPtrRst.in0_AT14 f.wrPtrRst.out_AT14)))
(assert (=> (= f.wrPtrEn.sel_AT14 #b1) (= f.wrPtrEn.in1_AT14 f.wrPtrEn.out_AT14)))
(assert (=> (= f.wrPtrEn.sel_AT14 #b0) (= f.wrPtrEn.in0_AT14 f.wrPtrEn.out_AT14)))
(assert (= (bvadd f.rdPtrp1.in0_AT14 f.rdPtrp1.in1_AT14) f.rdPtrp1.out_AT14))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT14) f.rdPtrSlice.out_AT14))
(assert (=> (= f.rdPtrRst.sel_AT14 #b1) (= f.rdPtrRst.in1_AT14 f.rdPtrRst.out_AT14)))
(assert (=> (= f.rdPtrRst.sel_AT14 #b0) (= f.rdPtrRst.in0_AT14 f.rdPtrRst.out_AT14)))
(assert (=> (= f.rdPtrEn.sel_AT14 #b1) (= f.rdPtrEn.in1_AT14 f.rdPtrEn.out_AT14)))
(assert (=> (= f.rdPtrEn.sel_AT14 #b0) (= f.rdPtrEn.in0_AT14 f.rdPtrEn.out_AT14)))
(assert (= f.one.out_AT14 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT14) f.notfullEq_1.out_AT14))
(assert (= f.mem.rdata_AT14 (select f.mem.array_AT14 f.mem.raddr_AT14)))
(assert (=> (not (= f.fullEq_2.in0_AT14 f.fullEq_2.in1_AT14)) (= f.fullEq_2.out_AT14 #b0)))
(assert (=> (= f.fullEq_2.in0_AT14 f.fullEq_2.in1_AT14) (= f.fullEq_2.out_AT14 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT14 f.fullEq_1.in1_AT14)) (= f.fullEq_1.out_AT14 #b0)))
(assert (=> (= f.fullEq_1.in0_AT14 f.fullEq_1.in1_AT14) (= f.fullEq_1.out_AT14 #b1)))
(assert (= (bvand f.fullCalc.in0_AT14 f.fullCalc.in1_AT14) f.fullCalc.out_AT14))
(assert (=> (not (= f.emptyEq.in0_AT14 f.emptyEq.in1_AT14)) (= f.emptyEq.out_AT14 #b0)))
(assert (=> (= f.emptyEq.in0_AT14 f.emptyEq.in1_AT14) (= f.emptyEq.out_AT14 #b1)))
(assert (= (bvor en_or_sp.in0_AT14 en_or_sp.in1_AT14) en_or_sp.out_AT14))
(assert (= (bvand data_out_vld_and2.in0_AT14 data_out_vld_and2.in1_AT14) data_out_vld_and2.out_AT14))
(assert (= (bvand data_out_vld_and1.in0_AT14 data_out_vld_and1.in1_AT14) data_out_vld_and1.out_AT14))
(assert (= (bvult cnt_gt_0.in1_AT14 cnt_gt_0.in0_AT14) (= cnt_gt_0.out_AT14 #b1)))
(assert (=> (= _-_state_id_-__AT13 #b10) (= _-_state_id_-__AT14 #b10)))
(assert (=> (= _-_state_id_-__AT13 #b01) (= _-_state_id_-__AT14 #b10)))
(assert (=> (= _-_state_id_-__AT13 #b00) (= _-_state_id_-__AT14 #b01)))
(assert (= mpt.cnt.in_AT13 mpt.cnt.out_AT14))
(assert (= magic_packet.in_AT13 magic_packet.out_AT14))
(assert (= magic_packet.init_AT13 magic_packet.init_AT14))
(assert (= f.wrPtr.in_AT13 f.wrPtr.out_AT14))
(assert (= f.rdPtr.in_AT13 f.rdPtr.out_AT14))
(assert (= f.mem.array_AT14 (ite (= f.mem.wen_AT13 #b1) (store f.mem.array_AT13 f.mem.waddr_AT13 f.mem.wdata_AT13) f.mem.array_AT13)))
(assert (= en.init_AT13 en.init_AT14))
(assert (= en.in_AT13 en.out_AT14))
(push 1)

(assert (not (= self.prop_signal_AT14 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT15 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT15 () (_ BitVec 4))
(declare-fun magic_packet.out_AT15 () (_ BitVec 8))
(declare-fun magic_packet.init_AT15 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT15 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT15 () (_ BitVec 4))
(declare-fun f.mem.array_AT15 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT15 () (_ BitVec 1))
(declare-fun en.out_AT15 () (_ BitVec 1))
(declare-fun self.pop_AT15 () (_ BitVec 1))
(declare-fun self.empty_AT15 () (_ BitVec 1))
(declare-fun self.push_AT15 () (_ BitVec 1))
(declare-fun self.full_AT15 () (_ BitVec 1))
(declare-fun self.rst_AT15 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT15 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT15 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT15 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT15 () (_ BitVec 1))
(declare-fun self.start_AT15 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT15 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT15 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT15 () (_ BitVec 1))
(declare-fun self.prop_signal_AT15 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT15 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT15 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT15 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT15 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT15 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT15 () (_ BitVec 1))
(declare-fun mp_en.out_AT15 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT15 () (_ BitVec 1))
(declare-fun self.data_in_AT15 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT15 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT15 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT15 () (_ BitVec 1))
(declare-fun zero.out_AT15 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT15 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT15 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT15 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT15 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT15 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT15 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT15 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT15 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT15 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT15 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT15 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT15 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT15 () (_ BitVec 4))
(declare-fun mpt.one.out_AT15 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT15 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT15 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT15 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT15 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT15 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT15 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT15 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT15 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT15 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT15 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT15 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT15 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT15 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT15 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT15 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT15 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT15 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT15 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT15 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT15 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT15 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT15 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT15 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT15 () (_ BitVec 4))
(declare-fun self.clk_AT15 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT15 () (_ BitVec 1))
(declare-fun not_en.out_AT15 () (_ BitVec 1))
(declare-fun mp_en.in1_AT15 () (_ BitVec 1))
(declare-fun start_and_push.out_AT15 () (_ BitVec 1))
(declare-fun mp_en.in0_AT15 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT15 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT15 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT15 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT15 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT15 () (_ BitVec 8))
(declare-fun magic_packet.in_AT15 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT15 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT15 () (_ BitVec 1))
(declare-fun f.zero.out_AT15 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT15 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT15 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT15 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT15 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT15 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT15 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT15 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT15 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT15 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT15 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT15 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT15 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT15 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT15 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT15 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT15 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT15 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT15 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT15 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT15 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT15 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT15 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT15 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT15 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT15 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT15 () (_ BitVec 4))
(declare-fun f.one.out_AT15 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT15 () (_ BitVec 4))
(declare-fun f.mem.wen_AT15 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT15 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT15 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT15 () (_ BitVec 3))
(declare-fun self.data_out_AT15 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT15 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT15 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT15 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT15 () (_ BitVec 3))
(declare-fun f.mem.clk_AT15 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT15 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT15 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT15 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT15 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT15 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT15 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT15 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT15 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT15 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT15 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT15 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT15 () (_ BitVec 1))
(declare-fun not_en.in_AT15 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT15 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT15 () (_ BitVec 1))
(declare-fun en.in_AT15 () (_ BitVec 1))
(declare-fun en.clk_AT15 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT15 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT15 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT15 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT15 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT15 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT15 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT15 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT15 () (_ BitVec 4))

(assert (=> (= self.empty_AT15 #b1) (= self.pop_AT15 #b0)))
(assert (=> (= self.full_AT15 #b1) (= self.push_AT15 #b0)))
(assert (=> (= _-_state_id_-__AT15 #b10) (and true (= self.rst_AT15 #b0))))
(assert (=> (= _-_state_id_-__AT15 #b01) (and (and (and true (= self.rst_AT15 #b1)) (= self.push_AT15 #b0)) (= self.pop_AT15 #b0))))
(assert (=> (= _-_state_id_-__AT15 #b00) (and (and (and true (= self.rst_AT15 #b1)) (= self.push_AT15 #b0)) (= self.pop_AT15 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT15 ((_ extract 3 3) f.wrPtr.out_AT15)))
(assert (= f.fullEq_1.in0_AT15 ((_ extract 3 3) f.rdPtr.out_AT15)))
(assert (= en.out_AT15 mpt.not_captured.in_AT15))
(assert (= self.start_AT15 start_and_push.in0_AT15))
(assert (= self.push_AT15 start_and_push.in1_AT15))
(assert (= self.push_AT15 mpt.ssa_cnt_and1.in1_AT15))
(assert (= self.prop_signal_AT15 prop_signal_or.out_AT15))
(assert (= self.pop_AT15 mpt.next_cnt_and1.in1_AT15))
(assert (= self.full_AT15 f.fullCalc.out_AT15))
(assert (= self.data_out_vld_AT15 data_out_vld_and2.out_AT15))
(assert (= not_data_out_vld.out_AT15 prop_signal_or.in0_AT15))
(assert (= next_magic_packet.sel_AT15 mp_en.out_AT15))
(assert (= next_magic_packet.in1_AT15 self.data_in_AT15))
(assert (= next_cnt_eq0.out_AT15 data_out_vld_and2.in1_AT15))
(assert (= next_cnt_eq0.in1_AT15 zero.out_AT15))
(assert (= mpt.ssa_cnt_gt_0.out_AT15 mpt.next_cnt_and1.in0_AT15))
(assert (= mpt.ssa_cnt_gt_0.in1_AT15 mpt.zero.out_AT15))
(assert (= mpt.ssa_cnt_and1.out_AT15 mpt.ssa_cnt_and2.in0_AT15))
(assert (= mpt.ssa_cnt.sel_AT15 mpt.ssa_cnt_and2.out_AT15))
(assert (= mpt.ssa_cnt.out_AT15 mpt.ssa_cnt_m1.in0_AT15))
(assert (= mpt.ssa_cnt.out_AT15 mpt.ssa_cnt_gt_0.in0_AT15))
(assert (= mpt.one.out_AT15 mpt.ssa_cnt_m1.in1_AT15))
(assert (= mpt.not_captured.out_AT15 mpt.ssa_cnt_and2.in1_AT15))
(assert (= mpt.next_cnt.sel_AT15 self.rst_AT15))
(assert (= mpt.next_cnt.out_AT15 next_cnt_eq0.in0_AT15))
(assert (= mpt.next_cnt.in1_AT15 mpt.zero.out_AT15))
(assert (= mpt.decr_mux.sel_AT15 mpt.next_cnt_and1.out_AT15))
(assert (= mpt.decr_mux.out_AT15 mpt.next_cnt.in0_AT15))
(assert (= mpt.decr_mux.in1_AT15 mpt.ssa_cnt_m1.out_AT15))
(assert (= mpt.decr_mux.in0_AT15 mpt.ssa_cnt.out_AT15))
(assert (= mpt.cnt_p1.out_AT15 mpt.ssa_cnt.in1_AT15))
(assert (= mpt.cnt_p1.in1_AT15 mpt.one.out_AT15))
(assert (= mpt.cnt_lt_depth.out_AT15 mpt.ssa_cnt_and1.in0_AT15))
(assert (= mpt.cnt_lt_depth.in1_AT15 mpt.depth.out_AT15))
(assert (= mpt.cnt.out_AT15 mpt.ssa_cnt.in0_AT15))
(assert (= mpt.cnt.out_AT15 mpt.cnt_p1.in0_AT15))
(assert (= mpt.cnt.out_AT15 mpt.cnt_lt_depth.in0_AT15))
(assert (= mpt.cnt.in_AT15 mpt.next_cnt.out_AT15))
(assert (= mpt.cnt.clk_AT15 self.clk_AT15))
(assert (= mp_en.in1_AT15 not_en.out_AT15))
(assert (= mp_en.in0_AT15 start_and_push.out_AT15))
(assert (= magic_packet_eq.out_AT15 prop_signal_or.in1_AT15))
(assert (= magic_packet.out_AT15 next_magic_packet.in0_AT15))
(assert (= magic_packet.out_AT15 magic_packet_eq.in0_AT15))
(assert (= magic_packet.in_AT15 next_magic_packet.out_AT15))
(assert (= magic_packet.clk_AT15 self.clk_AT15))
(assert (= f.wrPtrRst.sel_AT15 self.rst_AT15))
(assert (= f.wrPtrRst.in1_AT15 f.zero.out_AT15))
(assert (= f.wrPtrEn.sel_AT15 self.push_AT15))
(assert (= f.wrPtrEn.out_AT15 f.wrPtrRst.in0_AT15))
(assert (= f.wrPtrEn.in1_AT15 f.wrPtrp1.out_AT15))
(assert (= f.wrPtr.out_AT15 f.wrPtrp1.in1_AT15))
(assert (= f.wrPtr.out_AT15 f.wrPtrSlice.in_AT15))
(assert (= f.wrPtr.out_AT15 f.wrPtrEn.in0_AT15))
(assert (= f.wrPtr.in_AT15 f.wrPtrRst.out_AT15))
(assert (= f.wrPtr.clk_AT15 self.clk_AT15))
(assert (= f.rdPtrRst.sel_AT15 self.rst_AT15))
(assert (= f.rdPtrRst.in1_AT15 f.zero.out_AT15))
(assert (= f.rdPtrEn.sel_AT15 self.pop_AT15))
(assert (= f.rdPtrEn.out_AT15 f.rdPtrRst.in0_AT15))
(assert (= f.rdPtrEn.in1_AT15 f.rdPtrp1.out_AT15))
(assert (= f.rdPtr.out_AT15 f.rdPtrp1.in1_AT15))
(assert (= f.rdPtr.out_AT15 f.rdPtrSlice.in_AT15))
(assert (= f.rdPtr.out_AT15 f.rdPtrEn.in0_AT15))
(assert (= f.rdPtr.in_AT15 f.rdPtrRst.out_AT15))
(assert (= f.rdPtr.clk_AT15 self.clk_AT15))
(assert (= f.one.out_AT15 f.wrPtrp1.in0_AT15))
(assert (= f.one.out_AT15 f.rdPtrp1.in0_AT15))
(assert (= f.mem.wen_AT15 self.push_AT15))
(assert (= f.mem.wdata_AT15 self.data_in_AT15))
(assert (= f.mem.waddr_AT15 f.wrPtrSlice.out_AT15))
(assert (= f.mem.rdata_AT15 self.data_out_AT15))
(assert (= f.mem.rdata_AT15 magic_packet_eq.in1_AT15))
(assert (= f.mem.raddr_AT15 f.rdPtrSlice.out_AT15))
(assert (= f.mem.clk_AT15 self.clk_AT15))
(assert (= f.fullEq_2.out_AT15 f.fullCalc.in1_AT15))
(assert (= f.fullEq_2.in1_AT15 f.wrPtrSlice.out_AT15))
(assert (= f.fullEq_2.in0_AT15 f.rdPtrSlice.out_AT15))
(assert (= f.fullEq_1.out_AT15 f.notfullEq_1.in_AT15))
(assert (= f.fullCalc.in0_AT15 f.notfullEq_1.out_AT15))
(assert (= f.emptyEq.out_AT15 self.empty_AT15))
(assert (= f.emptyEq.in1_AT15 f.wrPtr.out_AT15))
(assert (= f.emptyEq.in0_AT15 f.rdPtr.out_AT15))
(assert (= en_or_sp.in1_AT15 start_and_push.out_AT15))
(assert (= en.out_AT15 not_en.in_AT15))
(assert (= en.out_AT15 en_or_sp.in0_AT15))
(assert (= en.in_AT15 en_or_sp.out_AT15))
(assert (= en.clk_AT15 self.clk_AT15))
(assert (= data_out_vld_and2.out_AT15 not_data_out_vld.in_AT15))
(assert (= data_out_vld_and1.out_AT15 data_out_vld_and2.in0_AT15))
(assert (= data_out_vld_and1.in0_AT15 en.out_AT15))
(assert (= cnt_gt_0.out_AT15 data_out_vld_and1.in1_AT15))
(assert (= cnt_gt_0.in1_AT15 zero.out_AT15))
(assert (= cnt_gt_0.in0_AT15 mpt.cnt.out_AT15))
(assert (= self.clk_AT15 #b0))
(assert (= zero.out_AT15 #b0000))
(assert (= (bvand start_and_push.in0_AT15 start_and_push.in1_AT15) start_and_push.out_AT15))
(assert (= (bvor prop_signal_or.in0_AT15 prop_signal_or.in1_AT15) prop_signal_or.out_AT15))
(assert (= (bvnot not_en.in_AT15) not_en.out_AT15))
(assert (= (bvnot not_data_out_vld.in_AT15) not_data_out_vld.out_AT15))
(assert (=> (= next_magic_packet.sel_AT15 #b1) (= next_magic_packet.in1_AT15 next_magic_packet.out_AT15)))
(assert (=> (= next_magic_packet.sel_AT15 #b0) (= next_magic_packet.in0_AT15 next_magic_packet.out_AT15)))
(assert (=> (not (= next_cnt_eq0.in0_AT15 next_cnt_eq0.in1_AT15)) (= next_cnt_eq0.out_AT15 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT15 next_cnt_eq0.in1_AT15) (= next_cnt_eq0.out_AT15 #b1)))
(assert (= mpt.zero.out_AT15 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT15 mpt.ssa_cnt_m1.in1_AT15) mpt.ssa_cnt_m1.out_AT15))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT15 mpt.ssa_cnt_gt_0.in0_AT15) (= mpt.ssa_cnt_gt_0.out_AT15 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT15 mpt.ssa_cnt_and2.in1_AT15) mpt.ssa_cnt_and2.out_AT15))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT15 mpt.ssa_cnt_and1.in1_AT15) mpt.ssa_cnt_and1.out_AT15))
(assert (=> (= mpt.ssa_cnt.sel_AT15 #b1) (= mpt.ssa_cnt.in1_AT15 mpt.ssa_cnt.out_AT15)))
(assert (=> (= mpt.ssa_cnt.sel_AT15 #b0) (= mpt.ssa_cnt.in0_AT15 mpt.ssa_cnt.out_AT15)))
(assert (= mpt.one.out_AT15 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT15) mpt.not_captured.out_AT15))
(assert (= (bvand mpt.next_cnt_and1.in0_AT15 mpt.next_cnt_and1.in1_AT15) mpt.next_cnt_and1.out_AT15))
(assert (=> (= mpt.next_cnt.sel_AT15 #b1) (= mpt.next_cnt.in1_AT15 mpt.next_cnt.out_AT15)))
(assert (=> (= mpt.next_cnt.sel_AT15 #b0) (= mpt.next_cnt.in0_AT15 mpt.next_cnt.out_AT15)))
(assert (= mpt.depth.out_AT15 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT15 #b1) (= mpt.decr_mux.in1_AT15 mpt.decr_mux.out_AT15)))
(assert (=> (= mpt.decr_mux.sel_AT15 #b0) (= mpt.decr_mux.in0_AT15 mpt.decr_mux.out_AT15)))
(assert (= (bvadd mpt.cnt_p1.in0_AT15 mpt.cnt_p1.in1_AT15) mpt.cnt_p1.out_AT15))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT15 mpt.cnt_lt_depth.in1_AT15) (= mpt.cnt_lt_depth.out_AT15 #b1)))
(assert (= (bvand mp_en.in0_AT15 mp_en.in1_AT15) mp_en.out_AT15))
(assert (=> (not (= magic_packet_eq.in0_AT15 magic_packet_eq.in1_AT15)) (= magic_packet_eq.out_AT15 #b0)))
(assert (=> (= magic_packet_eq.in0_AT15 magic_packet_eq.in1_AT15) (= magic_packet_eq.out_AT15 #b1)))
(assert (= f.zero.out_AT15 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT15 f.wrPtrp1.in1_AT15) f.wrPtrp1.out_AT15))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT15) f.wrPtrSlice.out_AT15))
(assert (=> (= f.wrPtrRst.sel_AT15 #b1) (= f.wrPtrRst.in1_AT15 f.wrPtrRst.out_AT15)))
(assert (=> (= f.wrPtrRst.sel_AT15 #b0) (= f.wrPtrRst.in0_AT15 f.wrPtrRst.out_AT15)))
(assert (=> (= f.wrPtrEn.sel_AT15 #b1) (= f.wrPtrEn.in1_AT15 f.wrPtrEn.out_AT15)))
(assert (=> (= f.wrPtrEn.sel_AT15 #b0) (= f.wrPtrEn.in0_AT15 f.wrPtrEn.out_AT15)))
(assert (= (bvadd f.rdPtrp1.in0_AT15 f.rdPtrp1.in1_AT15) f.rdPtrp1.out_AT15))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT15) f.rdPtrSlice.out_AT15))
(assert (=> (= f.rdPtrRst.sel_AT15 #b1) (= f.rdPtrRst.in1_AT15 f.rdPtrRst.out_AT15)))
(assert (=> (= f.rdPtrRst.sel_AT15 #b0) (= f.rdPtrRst.in0_AT15 f.rdPtrRst.out_AT15)))
(assert (=> (= f.rdPtrEn.sel_AT15 #b1) (= f.rdPtrEn.in1_AT15 f.rdPtrEn.out_AT15)))
(assert (=> (= f.rdPtrEn.sel_AT15 #b0) (= f.rdPtrEn.in0_AT15 f.rdPtrEn.out_AT15)))
(assert (= f.one.out_AT15 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT15) f.notfullEq_1.out_AT15))
(assert (= f.mem.rdata_AT15 (select f.mem.array_AT15 f.mem.raddr_AT15)))
(assert (=> (not (= f.fullEq_2.in0_AT15 f.fullEq_2.in1_AT15)) (= f.fullEq_2.out_AT15 #b0)))
(assert (=> (= f.fullEq_2.in0_AT15 f.fullEq_2.in1_AT15) (= f.fullEq_2.out_AT15 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT15 f.fullEq_1.in1_AT15)) (= f.fullEq_1.out_AT15 #b0)))
(assert (=> (= f.fullEq_1.in0_AT15 f.fullEq_1.in1_AT15) (= f.fullEq_1.out_AT15 #b1)))
(assert (= (bvand f.fullCalc.in0_AT15 f.fullCalc.in1_AT15) f.fullCalc.out_AT15))
(assert (=> (not (= f.emptyEq.in0_AT15 f.emptyEq.in1_AT15)) (= f.emptyEq.out_AT15 #b0)))
(assert (=> (= f.emptyEq.in0_AT15 f.emptyEq.in1_AT15) (= f.emptyEq.out_AT15 #b1)))
(assert (= (bvor en_or_sp.in0_AT15 en_or_sp.in1_AT15) en_or_sp.out_AT15))
(assert (= (bvand data_out_vld_and2.in0_AT15 data_out_vld_and2.in1_AT15) data_out_vld_and2.out_AT15))
(assert (= (bvand data_out_vld_and1.in0_AT15 data_out_vld_and1.in1_AT15) data_out_vld_and1.out_AT15))
(assert (= (bvult cnt_gt_0.in1_AT15 cnt_gt_0.in0_AT15) (= cnt_gt_0.out_AT15 #b1)))
(assert (=> (= _-_state_id_-__AT14 #b10) (= _-_state_id_-__AT15 #b10)))
(assert (=> (= _-_state_id_-__AT14 #b01) (= _-_state_id_-__AT15 #b10)))
(assert (=> (= _-_state_id_-__AT14 #b00) (= _-_state_id_-__AT15 #b01)))
(assert (= mpt.cnt.in_AT14 mpt.cnt.out_AT15))
(assert (= magic_packet.in_AT14 magic_packet.out_AT15))
(assert (= magic_packet.init_AT14 magic_packet.init_AT15))
(assert (= f.wrPtr.in_AT14 f.wrPtr.out_AT15))
(assert (= f.rdPtr.in_AT14 f.rdPtr.out_AT15))
(assert (= f.mem.array_AT15 (ite (= f.mem.wen_AT14 #b1) (store f.mem.array_AT14 f.mem.waddr_AT14 f.mem.wdata_AT14) f.mem.array_AT14)))
(assert (= en.init_AT14 en.init_AT15))
(assert (= en.in_AT14 en.out_AT15))
(push 1)

(assert (not (= self.prop_signal_AT15 #b1)))
(check-sat)

(pop 1)
(declare-fun f.fullCalc.in1_AT16 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT16 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT16 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT16 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT16 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT16 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT16 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT16 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT16 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT16 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT16 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT16 () (_ BitVec 1))
(declare-fun not_en.in_AT16 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT16 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT16 () (_ BitVec 1))
(declare-fun en.in_AT16 () (_ BitVec 1))
(declare-fun en.clk_AT16 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT16 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT16 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT16 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT16 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT16 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT16 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT16 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT16 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT16 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT16 () (_ BitVec 4))
(declare-fun magic_packet.out_AT16 () (_ BitVec 8))
(declare-fun magic_packet.init_AT16 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT16 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT16 () (_ BitVec 4))
(declare-fun f.mem.array_AT16 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT16 () (_ BitVec 1))
(declare-fun en.out_AT16 () (_ BitVec 1))
(declare-fun self.pop_AT16 () (_ BitVec 1))
(declare-fun self.empty_AT16 () (_ BitVec 1))
(declare-fun self.push_AT16 () (_ BitVec 1))
(declare-fun self.full_AT16 () (_ BitVec 1))
(declare-fun self.rst_AT16 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT16 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT16 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT16 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT16 () (_ BitVec 1))
(declare-fun self.start_AT16 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT16 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT16 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT16 () (_ BitVec 1))
(declare-fun self.prop_signal_AT16 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT16 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT16 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT16 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT16 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT16 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT16 () (_ BitVec 1))
(declare-fun mp_en.out_AT16 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT16 () (_ BitVec 1))
(declare-fun self.data_in_AT16 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT16 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT16 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT16 () (_ BitVec 1))
(declare-fun zero.out_AT16 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT16 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT16 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT16 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT16 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT16 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT16 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT16 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT16 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT16 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT16 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT16 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT16 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT16 () (_ BitVec 4))
(declare-fun mpt.one.out_AT16 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT16 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT16 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT16 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT16 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT16 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT16 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT16 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT16 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT16 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT16 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT16 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT16 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT16 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT16 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT16 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT16 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT16 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT16 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT16 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT16 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT16 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT16 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT16 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT16 () (_ BitVec 4))
(declare-fun self.clk_AT16 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT16 () (_ BitVec 1))
(declare-fun not_en.out_AT16 () (_ BitVec 1))
(declare-fun mp_en.in1_AT16 () (_ BitVec 1))
(declare-fun start_and_push.out_AT16 () (_ BitVec 1))
(declare-fun mp_en.in0_AT16 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT16 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT16 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT16 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT16 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT16 () (_ BitVec 8))
(declare-fun magic_packet.in_AT16 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT16 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT16 () (_ BitVec 1))
(declare-fun f.zero.out_AT16 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT16 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT16 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT16 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT16 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT16 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT16 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT16 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT16 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT16 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT16 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT16 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT16 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT16 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT16 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT16 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT16 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT16 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT16 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT16 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT16 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT16 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT16 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT16 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT16 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT16 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT16 () (_ BitVec 4))
(declare-fun f.one.out_AT16 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT16 () (_ BitVec 4))
(declare-fun f.mem.wen_AT16 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT16 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT16 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT16 () (_ BitVec 3))
(declare-fun self.data_out_AT16 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT16 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT16 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT16 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT16 () (_ BitVec 3))
(declare-fun f.mem.clk_AT16 () (_ BitVec 1))

(assert (=> (= self.empty_AT16 #b1) (= self.pop_AT16 #b0)))
(assert (=> (= self.full_AT16 #b1) (= self.push_AT16 #b0)))
(assert (=> (= _-_state_id_-__AT16 #b10) (and true (= self.rst_AT16 #b0))))
(assert (=> (= _-_state_id_-__AT16 #b01) (and (and (and true (= self.rst_AT16 #b1)) (= self.push_AT16 #b0)) (= self.pop_AT16 #b0))))
(assert (=> (= _-_state_id_-__AT16 #b00) (and (and (and true (= self.rst_AT16 #b1)) (= self.push_AT16 #b0)) (= self.pop_AT16 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT16 ((_ extract 3 3) f.wrPtr.out_AT16)))
(assert (= f.fullEq_1.in0_AT16 ((_ extract 3 3) f.rdPtr.out_AT16)))
(assert (= en.out_AT16 mpt.not_captured.in_AT16))
(assert (= self.start_AT16 start_and_push.in0_AT16))
(assert (= self.push_AT16 start_and_push.in1_AT16))
(assert (= self.push_AT16 mpt.ssa_cnt_and1.in1_AT16))
(assert (= self.prop_signal_AT16 prop_signal_or.out_AT16))
(assert (= self.pop_AT16 mpt.next_cnt_and1.in1_AT16))
(assert (= self.full_AT16 f.fullCalc.out_AT16))
(assert (= self.data_out_vld_AT16 data_out_vld_and2.out_AT16))
(assert (= not_data_out_vld.out_AT16 prop_signal_or.in0_AT16))
(assert (= next_magic_packet.sel_AT16 mp_en.out_AT16))
(assert (= next_magic_packet.in1_AT16 self.data_in_AT16))
(assert (= next_cnt_eq0.out_AT16 data_out_vld_and2.in1_AT16))
(assert (= next_cnt_eq0.in1_AT16 zero.out_AT16))
(assert (= mpt.ssa_cnt_gt_0.out_AT16 mpt.next_cnt_and1.in0_AT16))
(assert (= mpt.ssa_cnt_gt_0.in1_AT16 mpt.zero.out_AT16))
(assert (= mpt.ssa_cnt_and1.out_AT16 mpt.ssa_cnt_and2.in0_AT16))
(assert (= mpt.ssa_cnt.sel_AT16 mpt.ssa_cnt_and2.out_AT16))
(assert (= mpt.ssa_cnt.out_AT16 mpt.ssa_cnt_m1.in0_AT16))
(assert (= mpt.ssa_cnt.out_AT16 mpt.ssa_cnt_gt_0.in0_AT16))
(assert (= mpt.one.out_AT16 mpt.ssa_cnt_m1.in1_AT16))
(assert (= mpt.not_captured.out_AT16 mpt.ssa_cnt_and2.in1_AT16))
(assert (= mpt.next_cnt.sel_AT16 self.rst_AT16))
(assert (= mpt.next_cnt.out_AT16 next_cnt_eq0.in0_AT16))
(assert (= mpt.next_cnt.in1_AT16 mpt.zero.out_AT16))
(assert (= mpt.decr_mux.sel_AT16 mpt.next_cnt_and1.out_AT16))
(assert (= mpt.decr_mux.out_AT16 mpt.next_cnt.in0_AT16))
(assert (= mpt.decr_mux.in1_AT16 mpt.ssa_cnt_m1.out_AT16))
(assert (= mpt.decr_mux.in0_AT16 mpt.ssa_cnt.out_AT16))
(assert (= mpt.cnt_p1.out_AT16 mpt.ssa_cnt.in1_AT16))
(assert (= mpt.cnt_p1.in1_AT16 mpt.one.out_AT16))
(assert (= mpt.cnt_lt_depth.out_AT16 mpt.ssa_cnt_and1.in0_AT16))
(assert (= mpt.cnt_lt_depth.in1_AT16 mpt.depth.out_AT16))
(assert (= mpt.cnt.out_AT16 mpt.ssa_cnt.in0_AT16))
(assert (= mpt.cnt.out_AT16 mpt.cnt_p1.in0_AT16))
(assert (= mpt.cnt.out_AT16 mpt.cnt_lt_depth.in0_AT16))
(assert (= mpt.cnt.in_AT16 mpt.next_cnt.out_AT16))
(assert (= mpt.cnt.clk_AT16 self.clk_AT16))
(assert (= mp_en.in1_AT16 not_en.out_AT16))
(assert (= mp_en.in0_AT16 start_and_push.out_AT16))
(assert (= magic_packet_eq.out_AT16 prop_signal_or.in1_AT16))
(assert (= magic_packet.out_AT16 next_magic_packet.in0_AT16))
(assert (= magic_packet.out_AT16 magic_packet_eq.in0_AT16))
(assert (= magic_packet.in_AT16 next_magic_packet.out_AT16))
(assert (= magic_packet.clk_AT16 self.clk_AT16))
(assert (= f.wrPtrRst.sel_AT16 self.rst_AT16))
(assert (= f.wrPtrRst.in1_AT16 f.zero.out_AT16))
(assert (= f.wrPtrEn.sel_AT16 self.push_AT16))
(assert (= f.wrPtrEn.out_AT16 f.wrPtrRst.in0_AT16))
(assert (= f.wrPtrEn.in1_AT16 f.wrPtrp1.out_AT16))
(assert (= f.wrPtr.out_AT16 f.wrPtrp1.in1_AT16))
(assert (= f.wrPtr.out_AT16 f.wrPtrSlice.in_AT16))
(assert (= f.wrPtr.out_AT16 f.wrPtrEn.in0_AT16))
(assert (= f.wrPtr.in_AT16 f.wrPtrRst.out_AT16))
(assert (= f.wrPtr.clk_AT16 self.clk_AT16))
(assert (= f.rdPtrRst.sel_AT16 self.rst_AT16))
(assert (= f.rdPtrRst.in1_AT16 f.zero.out_AT16))
(assert (= f.rdPtrEn.sel_AT16 self.pop_AT16))
(assert (= f.rdPtrEn.out_AT16 f.rdPtrRst.in0_AT16))
(assert (= f.rdPtrEn.in1_AT16 f.rdPtrp1.out_AT16))
(assert (= f.rdPtr.out_AT16 f.rdPtrp1.in1_AT16))
(assert (= f.rdPtr.out_AT16 f.rdPtrSlice.in_AT16))
(assert (= f.rdPtr.out_AT16 f.rdPtrEn.in0_AT16))
(assert (= f.rdPtr.in_AT16 f.rdPtrRst.out_AT16))
(assert (= f.rdPtr.clk_AT16 self.clk_AT16))
(assert (= f.one.out_AT16 f.wrPtrp1.in0_AT16))
(assert (= f.one.out_AT16 f.rdPtrp1.in0_AT16))
(assert (= f.mem.wen_AT16 self.push_AT16))
(assert (= f.mem.wdata_AT16 self.data_in_AT16))
(assert (= f.mem.waddr_AT16 f.wrPtrSlice.out_AT16))
(assert (= f.mem.rdata_AT16 self.data_out_AT16))
(assert (= f.mem.rdata_AT16 magic_packet_eq.in1_AT16))
(assert (= f.mem.raddr_AT16 f.rdPtrSlice.out_AT16))
(assert (= f.mem.clk_AT16 self.clk_AT16))
(assert (= f.fullEq_2.out_AT16 f.fullCalc.in1_AT16))
(assert (= f.fullEq_2.in1_AT16 f.wrPtrSlice.out_AT16))
(assert (= f.fullEq_2.in0_AT16 f.rdPtrSlice.out_AT16))
(assert (= f.fullEq_1.out_AT16 f.notfullEq_1.in_AT16))
(assert (= f.fullCalc.in0_AT16 f.notfullEq_1.out_AT16))
(assert (= f.emptyEq.out_AT16 self.empty_AT16))
(assert (= f.emptyEq.in1_AT16 f.wrPtr.out_AT16))
(assert (= f.emptyEq.in0_AT16 f.rdPtr.out_AT16))
(assert (= en_or_sp.in1_AT16 start_and_push.out_AT16))
(assert (= en.out_AT16 not_en.in_AT16))
(assert (= en.out_AT16 en_or_sp.in0_AT16))
(assert (= en.in_AT16 en_or_sp.out_AT16))
(assert (= en.clk_AT16 self.clk_AT16))
(assert (= data_out_vld_and2.out_AT16 not_data_out_vld.in_AT16))
(assert (= data_out_vld_and1.out_AT16 data_out_vld_and2.in0_AT16))
(assert (= data_out_vld_and1.in0_AT16 en.out_AT16))
(assert (= cnt_gt_0.out_AT16 data_out_vld_and1.in1_AT16))
(assert (= cnt_gt_0.in1_AT16 zero.out_AT16))
(assert (= cnt_gt_0.in0_AT16 mpt.cnt.out_AT16))
(assert (= self.clk_AT16 #b0))
(assert (= zero.out_AT16 #b0000))
(assert (= (bvand start_and_push.in0_AT16 start_and_push.in1_AT16) start_and_push.out_AT16))
(assert (= (bvor prop_signal_or.in0_AT16 prop_signal_or.in1_AT16) prop_signal_or.out_AT16))
(assert (= (bvnot not_en.in_AT16) not_en.out_AT16))
(assert (= (bvnot not_data_out_vld.in_AT16) not_data_out_vld.out_AT16))
(assert (=> (= next_magic_packet.sel_AT16 #b1) (= next_magic_packet.in1_AT16 next_magic_packet.out_AT16)))
(assert (=> (= next_magic_packet.sel_AT16 #b0) (= next_magic_packet.in0_AT16 next_magic_packet.out_AT16)))
(assert (=> (not (= next_cnt_eq0.in0_AT16 next_cnt_eq0.in1_AT16)) (= next_cnt_eq0.out_AT16 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT16 next_cnt_eq0.in1_AT16) (= next_cnt_eq0.out_AT16 #b1)))
(assert (= mpt.zero.out_AT16 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT16 mpt.ssa_cnt_m1.in1_AT16) mpt.ssa_cnt_m1.out_AT16))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT16 mpt.ssa_cnt_gt_0.in0_AT16) (= mpt.ssa_cnt_gt_0.out_AT16 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT16 mpt.ssa_cnt_and2.in1_AT16) mpt.ssa_cnt_and2.out_AT16))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT16 mpt.ssa_cnt_and1.in1_AT16) mpt.ssa_cnt_and1.out_AT16))
(assert (=> (= mpt.ssa_cnt.sel_AT16 #b1) (= mpt.ssa_cnt.in1_AT16 mpt.ssa_cnt.out_AT16)))
(assert (=> (= mpt.ssa_cnt.sel_AT16 #b0) (= mpt.ssa_cnt.in0_AT16 mpt.ssa_cnt.out_AT16)))
(assert (= mpt.one.out_AT16 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT16) mpt.not_captured.out_AT16))
(assert (= (bvand mpt.next_cnt_and1.in0_AT16 mpt.next_cnt_and1.in1_AT16) mpt.next_cnt_and1.out_AT16))
(assert (=> (= mpt.next_cnt.sel_AT16 #b1) (= mpt.next_cnt.in1_AT16 mpt.next_cnt.out_AT16)))
(assert (=> (= mpt.next_cnt.sel_AT16 #b0) (= mpt.next_cnt.in0_AT16 mpt.next_cnt.out_AT16)))
(assert (= mpt.depth.out_AT16 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT16 #b1) (= mpt.decr_mux.in1_AT16 mpt.decr_mux.out_AT16)))
(assert (=> (= mpt.decr_mux.sel_AT16 #b0) (= mpt.decr_mux.in0_AT16 mpt.decr_mux.out_AT16)))
(assert (= (bvadd mpt.cnt_p1.in0_AT16 mpt.cnt_p1.in1_AT16) mpt.cnt_p1.out_AT16))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT16 mpt.cnt_lt_depth.in1_AT16) (= mpt.cnt_lt_depth.out_AT16 #b1)))
(assert (= (bvand mp_en.in0_AT16 mp_en.in1_AT16) mp_en.out_AT16))
(assert (=> (not (= magic_packet_eq.in0_AT16 magic_packet_eq.in1_AT16)) (= magic_packet_eq.out_AT16 #b0)))
(assert (=> (= magic_packet_eq.in0_AT16 magic_packet_eq.in1_AT16) (= magic_packet_eq.out_AT16 #b1)))
(assert (= f.zero.out_AT16 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT16 f.wrPtrp1.in1_AT16) f.wrPtrp1.out_AT16))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT16) f.wrPtrSlice.out_AT16))
(assert (=> (= f.wrPtrRst.sel_AT16 #b1) (= f.wrPtrRst.in1_AT16 f.wrPtrRst.out_AT16)))
(assert (=> (= f.wrPtrRst.sel_AT16 #b0) (= f.wrPtrRst.in0_AT16 f.wrPtrRst.out_AT16)))
(assert (=> (= f.wrPtrEn.sel_AT16 #b1) (= f.wrPtrEn.in1_AT16 f.wrPtrEn.out_AT16)))
(assert (=> (= f.wrPtrEn.sel_AT16 #b0) (= f.wrPtrEn.in0_AT16 f.wrPtrEn.out_AT16)))
(assert (= (bvadd f.rdPtrp1.in0_AT16 f.rdPtrp1.in1_AT16) f.rdPtrp1.out_AT16))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT16) f.rdPtrSlice.out_AT16))
(assert (=> (= f.rdPtrRst.sel_AT16 #b1) (= f.rdPtrRst.in1_AT16 f.rdPtrRst.out_AT16)))
(assert (=> (= f.rdPtrRst.sel_AT16 #b0) (= f.rdPtrRst.in0_AT16 f.rdPtrRst.out_AT16)))
(assert (=> (= f.rdPtrEn.sel_AT16 #b1) (= f.rdPtrEn.in1_AT16 f.rdPtrEn.out_AT16)))
(assert (=> (= f.rdPtrEn.sel_AT16 #b0) (= f.rdPtrEn.in0_AT16 f.rdPtrEn.out_AT16)))
(assert (= f.one.out_AT16 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT16) f.notfullEq_1.out_AT16))
(assert (= f.mem.rdata_AT16 (select f.mem.array_AT16 f.mem.raddr_AT16)))
(assert (=> (not (= f.fullEq_2.in0_AT16 f.fullEq_2.in1_AT16)) (= f.fullEq_2.out_AT16 #b0)))
(assert (=> (= f.fullEq_2.in0_AT16 f.fullEq_2.in1_AT16) (= f.fullEq_2.out_AT16 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT16 f.fullEq_1.in1_AT16)) (= f.fullEq_1.out_AT16 #b0)))
(assert (=> (= f.fullEq_1.in0_AT16 f.fullEq_1.in1_AT16) (= f.fullEq_1.out_AT16 #b1)))
(assert (= (bvand f.fullCalc.in0_AT16 f.fullCalc.in1_AT16) f.fullCalc.out_AT16))
(assert (=> (not (= f.emptyEq.in0_AT16 f.emptyEq.in1_AT16)) (= f.emptyEq.out_AT16 #b0)))
(assert (=> (= f.emptyEq.in0_AT16 f.emptyEq.in1_AT16) (= f.emptyEq.out_AT16 #b1)))
(assert (= (bvor en_or_sp.in0_AT16 en_or_sp.in1_AT16) en_or_sp.out_AT16))
(assert (= (bvand data_out_vld_and2.in0_AT16 data_out_vld_and2.in1_AT16) data_out_vld_and2.out_AT16))
(assert (= (bvand data_out_vld_and1.in0_AT16 data_out_vld_and1.in1_AT16) data_out_vld_and1.out_AT16))
(assert (= (bvult cnt_gt_0.in1_AT16 cnt_gt_0.in0_AT16) (= cnt_gt_0.out_AT16 #b1)))
(assert (=> (= _-_state_id_-__AT15 #b10) (= _-_state_id_-__AT16 #b10)))
(assert (=> (= _-_state_id_-__AT15 #b01) (= _-_state_id_-__AT16 #b10)))
(assert (=> (= _-_state_id_-__AT15 #b00) (= _-_state_id_-__AT16 #b01)))
(assert (= mpt.cnt.in_AT15 mpt.cnt.out_AT16))
(assert (= magic_packet.in_AT15 magic_packet.out_AT16))
(assert (= magic_packet.init_AT15 magic_packet.init_AT16))
(assert (= f.wrPtr.in_AT15 f.wrPtr.out_AT16))
(assert (= f.rdPtr.in_AT15 f.rdPtr.out_AT16))
(assert (= f.mem.array_AT16 (ite (= f.mem.wen_AT15 #b1) (store f.mem.array_AT15 f.mem.waddr_AT15 f.mem.wdata_AT15) f.mem.array_AT15)))
(assert (= en.init_AT15 en.init_AT16))
(assert (= en.in_AT15 en.out_AT16))
(push 1)

(assert (not (= self.prop_signal_AT16 #b1)))
(check-sat)

(pop 1)
(declare-fun mpt.next_cnt.in1_AT17 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT17 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT17 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT17 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT17 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT17 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT17 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT17 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT17 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT17 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT17 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT17 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT17 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT17 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT17 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT17 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT17 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT17 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT17 () (_ BitVec 4))
(declare-fun self.clk_AT17 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT17 () (_ BitVec 1))
(declare-fun not_en.out_AT17 () (_ BitVec 1))
(declare-fun mp_en.in1_AT17 () (_ BitVec 1))
(declare-fun start_and_push.out_AT17 () (_ BitVec 1))
(declare-fun mp_en.in0_AT17 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT17 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT17 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT17 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT17 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT17 () (_ BitVec 8))
(declare-fun magic_packet.in_AT17 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT17 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT17 () (_ BitVec 1))
(declare-fun f.zero.out_AT17 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT17 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT17 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT17 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT17 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT17 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT17 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT17 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT17 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT17 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT17 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT17 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT17 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT17 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT17 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT17 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT17 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT17 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT17 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT17 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT17 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT17 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT17 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT17 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT17 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT17 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT17 () (_ BitVec 4))
(declare-fun f.one.out_AT17 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT17 () (_ BitVec 4))
(declare-fun f.mem.wen_AT17 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT17 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT17 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT17 () (_ BitVec 3))
(declare-fun self.data_out_AT17 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT17 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT17 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT17 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT17 () (_ BitVec 3))
(declare-fun f.mem.clk_AT17 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT17 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT17 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT17 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT17 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT17 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT17 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT17 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT17 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT17 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT17 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT17 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT17 () (_ BitVec 1))
(declare-fun not_en.in_AT17 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT17 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT17 () (_ BitVec 1))
(declare-fun en.in_AT17 () (_ BitVec 1))
(declare-fun en.clk_AT17 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT17 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT17 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT17 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT17 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT17 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT17 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT17 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT17 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT17 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT17 () (_ BitVec 4))
(declare-fun magic_packet.out_AT17 () (_ BitVec 8))
(declare-fun magic_packet.init_AT17 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT17 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT17 () (_ BitVec 4))
(declare-fun f.mem.array_AT17 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT17 () (_ BitVec 1))
(declare-fun en.out_AT17 () (_ BitVec 1))
(declare-fun self.pop_AT17 () (_ BitVec 1))
(declare-fun self.empty_AT17 () (_ BitVec 1))
(declare-fun self.push_AT17 () (_ BitVec 1))
(declare-fun self.full_AT17 () (_ BitVec 1))
(declare-fun self.rst_AT17 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT17 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT17 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT17 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT17 () (_ BitVec 1))
(declare-fun self.start_AT17 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT17 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT17 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT17 () (_ BitVec 1))
(declare-fun self.prop_signal_AT17 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT17 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT17 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT17 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT17 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT17 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT17 () (_ BitVec 1))
(declare-fun mp_en.out_AT17 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT17 () (_ BitVec 1))
(declare-fun self.data_in_AT17 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT17 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT17 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT17 () (_ BitVec 1))
(declare-fun zero.out_AT17 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT17 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT17 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT17 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT17 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT17 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT17 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT17 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT17 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT17 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT17 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT17 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT17 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT17 () (_ BitVec 4))
(declare-fun mpt.one.out_AT17 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT17 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT17 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT17 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT17 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT17 () (_ BitVec 4))

(assert (=> (= self.empty_AT17 #b1) (= self.pop_AT17 #b0)))
(assert (=> (= self.full_AT17 #b1) (= self.push_AT17 #b0)))
(assert (=> (= _-_state_id_-__AT17 #b10) (and true (= self.rst_AT17 #b0))))
(assert (=> (= _-_state_id_-__AT17 #b01) (and (and (and true (= self.rst_AT17 #b1)) (= self.push_AT17 #b0)) (= self.pop_AT17 #b0))))
(assert (=> (= _-_state_id_-__AT17 #b00) (and (and (and true (= self.rst_AT17 #b1)) (= self.push_AT17 #b0)) (= self.pop_AT17 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT17 ((_ extract 3 3) f.wrPtr.out_AT17)))
(assert (= f.fullEq_1.in0_AT17 ((_ extract 3 3) f.rdPtr.out_AT17)))
(assert (= en.out_AT17 mpt.not_captured.in_AT17))
(assert (= self.start_AT17 start_and_push.in0_AT17))
(assert (= self.push_AT17 start_and_push.in1_AT17))
(assert (= self.push_AT17 mpt.ssa_cnt_and1.in1_AT17))
(assert (= self.prop_signal_AT17 prop_signal_or.out_AT17))
(assert (= self.pop_AT17 mpt.next_cnt_and1.in1_AT17))
(assert (= self.full_AT17 f.fullCalc.out_AT17))
(assert (= self.data_out_vld_AT17 data_out_vld_and2.out_AT17))
(assert (= not_data_out_vld.out_AT17 prop_signal_or.in0_AT17))
(assert (= next_magic_packet.sel_AT17 mp_en.out_AT17))
(assert (= next_magic_packet.in1_AT17 self.data_in_AT17))
(assert (= next_cnt_eq0.out_AT17 data_out_vld_and2.in1_AT17))
(assert (= next_cnt_eq0.in1_AT17 zero.out_AT17))
(assert (= mpt.ssa_cnt_gt_0.out_AT17 mpt.next_cnt_and1.in0_AT17))
(assert (= mpt.ssa_cnt_gt_0.in1_AT17 mpt.zero.out_AT17))
(assert (= mpt.ssa_cnt_and1.out_AT17 mpt.ssa_cnt_and2.in0_AT17))
(assert (= mpt.ssa_cnt.sel_AT17 mpt.ssa_cnt_and2.out_AT17))
(assert (= mpt.ssa_cnt.out_AT17 mpt.ssa_cnt_m1.in0_AT17))
(assert (= mpt.ssa_cnt.out_AT17 mpt.ssa_cnt_gt_0.in0_AT17))
(assert (= mpt.one.out_AT17 mpt.ssa_cnt_m1.in1_AT17))
(assert (= mpt.not_captured.out_AT17 mpt.ssa_cnt_and2.in1_AT17))
(assert (= mpt.next_cnt.sel_AT17 self.rst_AT17))
(assert (= mpt.next_cnt.out_AT17 next_cnt_eq0.in0_AT17))
(assert (= mpt.next_cnt.in1_AT17 mpt.zero.out_AT17))
(assert (= mpt.decr_mux.sel_AT17 mpt.next_cnt_and1.out_AT17))
(assert (= mpt.decr_mux.out_AT17 mpt.next_cnt.in0_AT17))
(assert (= mpt.decr_mux.in1_AT17 mpt.ssa_cnt_m1.out_AT17))
(assert (= mpt.decr_mux.in0_AT17 mpt.ssa_cnt.out_AT17))
(assert (= mpt.cnt_p1.out_AT17 mpt.ssa_cnt.in1_AT17))
(assert (= mpt.cnt_p1.in1_AT17 mpt.one.out_AT17))
(assert (= mpt.cnt_lt_depth.out_AT17 mpt.ssa_cnt_and1.in0_AT17))
(assert (= mpt.cnt_lt_depth.in1_AT17 mpt.depth.out_AT17))
(assert (= mpt.cnt.out_AT17 mpt.ssa_cnt.in0_AT17))
(assert (= mpt.cnt.out_AT17 mpt.cnt_p1.in0_AT17))
(assert (= mpt.cnt.out_AT17 mpt.cnt_lt_depth.in0_AT17))
(assert (= mpt.cnt.in_AT17 mpt.next_cnt.out_AT17))
(assert (= mpt.cnt.clk_AT17 self.clk_AT17))
(assert (= mp_en.in1_AT17 not_en.out_AT17))
(assert (= mp_en.in0_AT17 start_and_push.out_AT17))
(assert (= magic_packet_eq.out_AT17 prop_signal_or.in1_AT17))
(assert (= magic_packet.out_AT17 next_magic_packet.in0_AT17))
(assert (= magic_packet.out_AT17 magic_packet_eq.in0_AT17))
(assert (= magic_packet.in_AT17 next_magic_packet.out_AT17))
(assert (= magic_packet.clk_AT17 self.clk_AT17))
(assert (= f.wrPtrRst.sel_AT17 self.rst_AT17))
(assert (= f.wrPtrRst.in1_AT17 f.zero.out_AT17))
(assert (= f.wrPtrEn.sel_AT17 self.push_AT17))
(assert (= f.wrPtrEn.out_AT17 f.wrPtrRst.in0_AT17))
(assert (= f.wrPtrEn.in1_AT17 f.wrPtrp1.out_AT17))
(assert (= f.wrPtr.out_AT17 f.wrPtrp1.in1_AT17))
(assert (= f.wrPtr.out_AT17 f.wrPtrSlice.in_AT17))
(assert (= f.wrPtr.out_AT17 f.wrPtrEn.in0_AT17))
(assert (= f.wrPtr.in_AT17 f.wrPtrRst.out_AT17))
(assert (= f.wrPtr.clk_AT17 self.clk_AT17))
(assert (= f.rdPtrRst.sel_AT17 self.rst_AT17))
(assert (= f.rdPtrRst.in1_AT17 f.zero.out_AT17))
(assert (= f.rdPtrEn.sel_AT17 self.pop_AT17))
(assert (= f.rdPtrEn.out_AT17 f.rdPtrRst.in0_AT17))
(assert (= f.rdPtrEn.in1_AT17 f.rdPtrp1.out_AT17))
(assert (= f.rdPtr.out_AT17 f.rdPtrp1.in1_AT17))
(assert (= f.rdPtr.out_AT17 f.rdPtrSlice.in_AT17))
(assert (= f.rdPtr.out_AT17 f.rdPtrEn.in0_AT17))
(assert (= f.rdPtr.in_AT17 f.rdPtrRst.out_AT17))
(assert (= f.rdPtr.clk_AT17 self.clk_AT17))
(assert (= f.one.out_AT17 f.wrPtrp1.in0_AT17))
(assert (= f.one.out_AT17 f.rdPtrp1.in0_AT17))
(assert (= f.mem.wen_AT17 self.push_AT17))
(assert (= f.mem.wdata_AT17 self.data_in_AT17))
(assert (= f.mem.waddr_AT17 f.wrPtrSlice.out_AT17))
(assert (= f.mem.rdata_AT17 self.data_out_AT17))
(assert (= f.mem.rdata_AT17 magic_packet_eq.in1_AT17))
(assert (= f.mem.raddr_AT17 f.rdPtrSlice.out_AT17))
(assert (= f.mem.clk_AT17 self.clk_AT17))
(assert (= f.fullEq_2.out_AT17 f.fullCalc.in1_AT17))
(assert (= f.fullEq_2.in1_AT17 f.wrPtrSlice.out_AT17))
(assert (= f.fullEq_2.in0_AT17 f.rdPtrSlice.out_AT17))
(assert (= f.fullEq_1.out_AT17 f.notfullEq_1.in_AT17))
(assert (= f.fullCalc.in0_AT17 f.notfullEq_1.out_AT17))
(assert (= f.emptyEq.out_AT17 self.empty_AT17))
(assert (= f.emptyEq.in1_AT17 f.wrPtr.out_AT17))
(assert (= f.emptyEq.in0_AT17 f.rdPtr.out_AT17))
(assert (= en_or_sp.in1_AT17 start_and_push.out_AT17))
(assert (= en.out_AT17 not_en.in_AT17))
(assert (= en.out_AT17 en_or_sp.in0_AT17))
(assert (= en.in_AT17 en_or_sp.out_AT17))
(assert (= en.clk_AT17 self.clk_AT17))
(assert (= data_out_vld_and2.out_AT17 not_data_out_vld.in_AT17))
(assert (= data_out_vld_and1.out_AT17 data_out_vld_and2.in0_AT17))
(assert (= data_out_vld_and1.in0_AT17 en.out_AT17))
(assert (= cnt_gt_0.out_AT17 data_out_vld_and1.in1_AT17))
(assert (= cnt_gt_0.in1_AT17 zero.out_AT17))
(assert (= cnt_gt_0.in0_AT17 mpt.cnt.out_AT17))
(assert (= self.clk_AT17 #b0))
(assert (= zero.out_AT17 #b0000))
(assert (= (bvand start_and_push.in0_AT17 start_and_push.in1_AT17) start_and_push.out_AT17))
(assert (= (bvor prop_signal_or.in0_AT17 prop_signal_or.in1_AT17) prop_signal_or.out_AT17))
(assert (= (bvnot not_en.in_AT17) not_en.out_AT17))
(assert (= (bvnot not_data_out_vld.in_AT17) not_data_out_vld.out_AT17))
(assert (=> (= next_magic_packet.sel_AT17 #b1) (= next_magic_packet.in1_AT17 next_magic_packet.out_AT17)))
(assert (=> (= next_magic_packet.sel_AT17 #b0) (= next_magic_packet.in0_AT17 next_magic_packet.out_AT17)))
(assert (=> (not (= next_cnt_eq0.in0_AT17 next_cnt_eq0.in1_AT17)) (= next_cnt_eq0.out_AT17 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT17 next_cnt_eq0.in1_AT17) (= next_cnt_eq0.out_AT17 #b1)))
(assert (= mpt.zero.out_AT17 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT17 mpt.ssa_cnt_m1.in1_AT17) mpt.ssa_cnt_m1.out_AT17))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT17 mpt.ssa_cnt_gt_0.in0_AT17) (= mpt.ssa_cnt_gt_0.out_AT17 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT17 mpt.ssa_cnt_and2.in1_AT17) mpt.ssa_cnt_and2.out_AT17))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT17 mpt.ssa_cnt_and1.in1_AT17) mpt.ssa_cnt_and1.out_AT17))
(assert (=> (= mpt.ssa_cnt.sel_AT17 #b1) (= mpt.ssa_cnt.in1_AT17 mpt.ssa_cnt.out_AT17)))
(assert (=> (= mpt.ssa_cnt.sel_AT17 #b0) (= mpt.ssa_cnt.in0_AT17 mpt.ssa_cnt.out_AT17)))
(assert (= mpt.one.out_AT17 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT17) mpt.not_captured.out_AT17))
(assert (= (bvand mpt.next_cnt_and1.in0_AT17 mpt.next_cnt_and1.in1_AT17) mpt.next_cnt_and1.out_AT17))
(assert (=> (= mpt.next_cnt.sel_AT17 #b1) (= mpt.next_cnt.in1_AT17 mpt.next_cnt.out_AT17)))
(assert (=> (= mpt.next_cnt.sel_AT17 #b0) (= mpt.next_cnt.in0_AT17 mpt.next_cnt.out_AT17)))
(assert (= mpt.depth.out_AT17 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT17 #b1) (= mpt.decr_mux.in1_AT17 mpt.decr_mux.out_AT17)))
(assert (=> (= mpt.decr_mux.sel_AT17 #b0) (= mpt.decr_mux.in0_AT17 mpt.decr_mux.out_AT17)))
(assert (= (bvadd mpt.cnt_p1.in0_AT17 mpt.cnt_p1.in1_AT17) mpt.cnt_p1.out_AT17))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT17 mpt.cnt_lt_depth.in1_AT17) (= mpt.cnt_lt_depth.out_AT17 #b1)))
(assert (= (bvand mp_en.in0_AT17 mp_en.in1_AT17) mp_en.out_AT17))
(assert (=> (not (= magic_packet_eq.in0_AT17 magic_packet_eq.in1_AT17)) (= magic_packet_eq.out_AT17 #b0)))
(assert (=> (= magic_packet_eq.in0_AT17 magic_packet_eq.in1_AT17) (= magic_packet_eq.out_AT17 #b1)))
(assert (= f.zero.out_AT17 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT17 f.wrPtrp1.in1_AT17) f.wrPtrp1.out_AT17))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT17) f.wrPtrSlice.out_AT17))
(assert (=> (= f.wrPtrRst.sel_AT17 #b1) (= f.wrPtrRst.in1_AT17 f.wrPtrRst.out_AT17)))
(assert (=> (= f.wrPtrRst.sel_AT17 #b0) (= f.wrPtrRst.in0_AT17 f.wrPtrRst.out_AT17)))
(assert (=> (= f.wrPtrEn.sel_AT17 #b1) (= f.wrPtrEn.in1_AT17 f.wrPtrEn.out_AT17)))
(assert (=> (= f.wrPtrEn.sel_AT17 #b0) (= f.wrPtrEn.in0_AT17 f.wrPtrEn.out_AT17)))
(assert (= (bvadd f.rdPtrp1.in0_AT17 f.rdPtrp1.in1_AT17) f.rdPtrp1.out_AT17))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT17) f.rdPtrSlice.out_AT17))
(assert (=> (= f.rdPtrRst.sel_AT17 #b1) (= f.rdPtrRst.in1_AT17 f.rdPtrRst.out_AT17)))
(assert (=> (= f.rdPtrRst.sel_AT17 #b0) (= f.rdPtrRst.in0_AT17 f.rdPtrRst.out_AT17)))
(assert (=> (= f.rdPtrEn.sel_AT17 #b1) (= f.rdPtrEn.in1_AT17 f.rdPtrEn.out_AT17)))
(assert (=> (= f.rdPtrEn.sel_AT17 #b0) (= f.rdPtrEn.in0_AT17 f.rdPtrEn.out_AT17)))
(assert (= f.one.out_AT17 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT17) f.notfullEq_1.out_AT17))
(assert (= f.mem.rdata_AT17 (select f.mem.array_AT17 f.mem.raddr_AT17)))
(assert (=> (not (= f.fullEq_2.in0_AT17 f.fullEq_2.in1_AT17)) (= f.fullEq_2.out_AT17 #b0)))
(assert (=> (= f.fullEq_2.in0_AT17 f.fullEq_2.in1_AT17) (= f.fullEq_2.out_AT17 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT17 f.fullEq_1.in1_AT17)) (= f.fullEq_1.out_AT17 #b0)))
(assert (=> (= f.fullEq_1.in0_AT17 f.fullEq_1.in1_AT17) (= f.fullEq_1.out_AT17 #b1)))
(assert (= (bvand f.fullCalc.in0_AT17 f.fullCalc.in1_AT17) f.fullCalc.out_AT17))
(assert (=> (not (= f.emptyEq.in0_AT17 f.emptyEq.in1_AT17)) (= f.emptyEq.out_AT17 #b0)))
(assert (=> (= f.emptyEq.in0_AT17 f.emptyEq.in1_AT17) (= f.emptyEq.out_AT17 #b1)))
(assert (= (bvor en_or_sp.in0_AT17 en_or_sp.in1_AT17) en_or_sp.out_AT17))
(assert (= (bvand data_out_vld_and2.in0_AT17 data_out_vld_and2.in1_AT17) data_out_vld_and2.out_AT17))
(assert (= (bvand data_out_vld_and1.in0_AT17 data_out_vld_and1.in1_AT17) data_out_vld_and1.out_AT17))
(assert (= (bvult cnt_gt_0.in1_AT17 cnt_gt_0.in0_AT17) (= cnt_gt_0.out_AT17 #b1)))
(assert (=> (= _-_state_id_-__AT16 #b10) (= _-_state_id_-__AT17 #b10)))
(assert (=> (= _-_state_id_-__AT16 #b01) (= _-_state_id_-__AT17 #b10)))
(assert (=> (= _-_state_id_-__AT16 #b00) (= _-_state_id_-__AT17 #b01)))
(assert (= mpt.cnt.in_AT16 mpt.cnt.out_AT17))
(assert (= magic_packet.in_AT16 magic_packet.out_AT17))
(assert (= magic_packet.init_AT16 magic_packet.init_AT17))
(assert (= f.wrPtr.in_AT16 f.wrPtr.out_AT17))
(assert (= f.rdPtr.in_AT16 f.rdPtr.out_AT17))
(assert (= f.mem.array_AT17 (ite (= f.mem.wen_AT16 #b1) (store f.mem.array_AT16 f.mem.waddr_AT16 f.mem.wdata_AT16) f.mem.array_AT16)))
(assert (= en.init_AT16 en.init_AT17))
(assert (= en.in_AT16 en.out_AT17))
(push 1)

(assert (not (= self.prop_signal_AT17 #b1)))
(check-sat)

(pop 1)
(declare-fun self.pop_AT18 () (_ BitVec 1))
(declare-fun self.empty_AT18 () (_ BitVec 1))
(declare-fun self.push_AT18 () (_ BitVec 1))
(declare-fun self.full_AT18 () (_ BitVec 1))
(declare-fun self.rst_AT18 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT18 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT18 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT18 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT18 () (_ BitVec 1))
(declare-fun self.start_AT18 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT18 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT18 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT18 () (_ BitVec 1))
(declare-fun self.prop_signal_AT18 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT18 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT18 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT18 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT18 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT18 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT18 () (_ BitVec 1))
(declare-fun mp_en.out_AT18 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT18 () (_ BitVec 1))
(declare-fun self.data_in_AT18 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT18 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT18 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT18 () (_ BitVec 1))
(declare-fun zero.out_AT18 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT18 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT18 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT18 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT18 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT18 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT18 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT18 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT18 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT18 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT18 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT18 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT18 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT18 () (_ BitVec 4))
(declare-fun mpt.one.out_AT18 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT18 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT18 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT18 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT18 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT18 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT18 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT18 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT18 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT18 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT18 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT18 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT18 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT18 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT18 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT18 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT18 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT18 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT18 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT18 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT18 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT18 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT18 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT18 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT18 () (_ BitVec 4))
(declare-fun self.clk_AT18 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT18 () (_ BitVec 1))
(declare-fun not_en.out_AT18 () (_ BitVec 1))
(declare-fun mp_en.in1_AT18 () (_ BitVec 1))
(declare-fun start_and_push.out_AT18 () (_ BitVec 1))
(declare-fun mp_en.in0_AT18 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT18 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT18 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT18 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT18 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT18 () (_ BitVec 8))
(declare-fun magic_packet.in_AT18 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT18 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT18 () (_ BitVec 1))
(declare-fun f.zero.out_AT18 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT18 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT18 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT18 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT18 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT18 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT18 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT18 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT18 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT18 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT18 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT18 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT18 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT18 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT18 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT18 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT18 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT18 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT18 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT18 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT18 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT18 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT18 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT18 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT18 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT18 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT18 () (_ BitVec 4))
(declare-fun f.one.out_AT18 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT18 () (_ BitVec 4))
(declare-fun f.mem.wen_AT18 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT18 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT18 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT18 () (_ BitVec 3))
(declare-fun self.data_out_AT18 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT18 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT18 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT18 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT18 () (_ BitVec 3))
(declare-fun f.mem.clk_AT18 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT18 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT18 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT18 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT18 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT18 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT18 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT18 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT18 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT18 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT18 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT18 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT18 () (_ BitVec 1))
(declare-fun not_en.in_AT18 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT18 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT18 () (_ BitVec 1))
(declare-fun en.in_AT18 () (_ BitVec 1))
(declare-fun en.clk_AT18 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT18 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT18 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT18 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT18 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT18 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT18 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT18 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT18 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT18 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT18 () (_ BitVec 4))
(declare-fun magic_packet.out_AT18 () (_ BitVec 8))
(declare-fun magic_packet.init_AT18 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT18 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT18 () (_ BitVec 4))
(declare-fun f.mem.array_AT18 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT18 () (_ BitVec 1))
(declare-fun en.out_AT18 () (_ BitVec 1))

(assert (=> (= self.empty_AT18 #b1) (= self.pop_AT18 #b0)))
(assert (=> (= self.full_AT18 #b1) (= self.push_AT18 #b0)))
(assert (=> (= _-_state_id_-__AT18 #b10) (and true (= self.rst_AT18 #b0))))
(assert (=> (= _-_state_id_-__AT18 #b01) (and (and (and true (= self.rst_AT18 #b1)) (= self.push_AT18 #b0)) (= self.pop_AT18 #b0))))
(assert (=> (= _-_state_id_-__AT18 #b00) (and (and (and true (= self.rst_AT18 #b1)) (= self.push_AT18 #b0)) (= self.pop_AT18 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT18 ((_ extract 3 3) f.wrPtr.out_AT18)))
(assert (= f.fullEq_1.in0_AT18 ((_ extract 3 3) f.rdPtr.out_AT18)))
(assert (= en.out_AT18 mpt.not_captured.in_AT18))
(assert (= self.start_AT18 start_and_push.in0_AT18))
(assert (= self.push_AT18 start_and_push.in1_AT18))
(assert (= self.push_AT18 mpt.ssa_cnt_and1.in1_AT18))
(assert (= self.prop_signal_AT18 prop_signal_or.out_AT18))
(assert (= self.pop_AT18 mpt.next_cnt_and1.in1_AT18))
(assert (= self.full_AT18 f.fullCalc.out_AT18))
(assert (= self.data_out_vld_AT18 data_out_vld_and2.out_AT18))
(assert (= not_data_out_vld.out_AT18 prop_signal_or.in0_AT18))
(assert (= next_magic_packet.sel_AT18 mp_en.out_AT18))
(assert (= next_magic_packet.in1_AT18 self.data_in_AT18))
(assert (= next_cnt_eq0.out_AT18 data_out_vld_and2.in1_AT18))
(assert (= next_cnt_eq0.in1_AT18 zero.out_AT18))
(assert (= mpt.ssa_cnt_gt_0.out_AT18 mpt.next_cnt_and1.in0_AT18))
(assert (= mpt.ssa_cnt_gt_0.in1_AT18 mpt.zero.out_AT18))
(assert (= mpt.ssa_cnt_and1.out_AT18 mpt.ssa_cnt_and2.in0_AT18))
(assert (= mpt.ssa_cnt.sel_AT18 mpt.ssa_cnt_and2.out_AT18))
(assert (= mpt.ssa_cnt.out_AT18 mpt.ssa_cnt_m1.in0_AT18))
(assert (= mpt.ssa_cnt.out_AT18 mpt.ssa_cnt_gt_0.in0_AT18))
(assert (= mpt.one.out_AT18 mpt.ssa_cnt_m1.in1_AT18))
(assert (= mpt.not_captured.out_AT18 mpt.ssa_cnt_and2.in1_AT18))
(assert (= mpt.next_cnt.sel_AT18 self.rst_AT18))
(assert (= mpt.next_cnt.out_AT18 next_cnt_eq0.in0_AT18))
(assert (= mpt.next_cnt.in1_AT18 mpt.zero.out_AT18))
(assert (= mpt.decr_mux.sel_AT18 mpt.next_cnt_and1.out_AT18))
(assert (= mpt.decr_mux.out_AT18 mpt.next_cnt.in0_AT18))
(assert (= mpt.decr_mux.in1_AT18 mpt.ssa_cnt_m1.out_AT18))
(assert (= mpt.decr_mux.in0_AT18 mpt.ssa_cnt.out_AT18))
(assert (= mpt.cnt_p1.out_AT18 mpt.ssa_cnt.in1_AT18))
(assert (= mpt.cnt_p1.in1_AT18 mpt.one.out_AT18))
(assert (= mpt.cnt_lt_depth.out_AT18 mpt.ssa_cnt_and1.in0_AT18))
(assert (= mpt.cnt_lt_depth.in1_AT18 mpt.depth.out_AT18))
(assert (= mpt.cnt.out_AT18 mpt.ssa_cnt.in0_AT18))
(assert (= mpt.cnt.out_AT18 mpt.cnt_p1.in0_AT18))
(assert (= mpt.cnt.out_AT18 mpt.cnt_lt_depth.in0_AT18))
(assert (= mpt.cnt.in_AT18 mpt.next_cnt.out_AT18))
(assert (= mpt.cnt.clk_AT18 self.clk_AT18))
(assert (= mp_en.in1_AT18 not_en.out_AT18))
(assert (= mp_en.in0_AT18 start_and_push.out_AT18))
(assert (= magic_packet_eq.out_AT18 prop_signal_or.in1_AT18))
(assert (= magic_packet.out_AT18 next_magic_packet.in0_AT18))
(assert (= magic_packet.out_AT18 magic_packet_eq.in0_AT18))
(assert (= magic_packet.in_AT18 next_magic_packet.out_AT18))
(assert (= magic_packet.clk_AT18 self.clk_AT18))
(assert (= f.wrPtrRst.sel_AT18 self.rst_AT18))
(assert (= f.wrPtrRst.in1_AT18 f.zero.out_AT18))
(assert (= f.wrPtrEn.sel_AT18 self.push_AT18))
(assert (= f.wrPtrEn.out_AT18 f.wrPtrRst.in0_AT18))
(assert (= f.wrPtrEn.in1_AT18 f.wrPtrp1.out_AT18))
(assert (= f.wrPtr.out_AT18 f.wrPtrp1.in1_AT18))
(assert (= f.wrPtr.out_AT18 f.wrPtrSlice.in_AT18))
(assert (= f.wrPtr.out_AT18 f.wrPtrEn.in0_AT18))
(assert (= f.wrPtr.in_AT18 f.wrPtrRst.out_AT18))
(assert (= f.wrPtr.clk_AT18 self.clk_AT18))
(assert (= f.rdPtrRst.sel_AT18 self.rst_AT18))
(assert (= f.rdPtrRst.in1_AT18 f.zero.out_AT18))
(assert (= f.rdPtrEn.sel_AT18 self.pop_AT18))
(assert (= f.rdPtrEn.out_AT18 f.rdPtrRst.in0_AT18))
(assert (= f.rdPtrEn.in1_AT18 f.rdPtrp1.out_AT18))
(assert (= f.rdPtr.out_AT18 f.rdPtrp1.in1_AT18))
(assert (= f.rdPtr.out_AT18 f.rdPtrSlice.in_AT18))
(assert (= f.rdPtr.out_AT18 f.rdPtrEn.in0_AT18))
(assert (= f.rdPtr.in_AT18 f.rdPtrRst.out_AT18))
(assert (= f.rdPtr.clk_AT18 self.clk_AT18))
(assert (= f.one.out_AT18 f.wrPtrp1.in0_AT18))
(assert (= f.one.out_AT18 f.rdPtrp1.in0_AT18))
(assert (= f.mem.wen_AT18 self.push_AT18))
(assert (= f.mem.wdata_AT18 self.data_in_AT18))
(assert (= f.mem.waddr_AT18 f.wrPtrSlice.out_AT18))
(assert (= f.mem.rdata_AT18 self.data_out_AT18))
(assert (= f.mem.rdata_AT18 magic_packet_eq.in1_AT18))
(assert (= f.mem.raddr_AT18 f.rdPtrSlice.out_AT18))
(assert (= f.mem.clk_AT18 self.clk_AT18))
(assert (= f.fullEq_2.out_AT18 f.fullCalc.in1_AT18))
(assert (= f.fullEq_2.in1_AT18 f.wrPtrSlice.out_AT18))
(assert (= f.fullEq_2.in0_AT18 f.rdPtrSlice.out_AT18))
(assert (= f.fullEq_1.out_AT18 f.notfullEq_1.in_AT18))
(assert (= f.fullCalc.in0_AT18 f.notfullEq_1.out_AT18))
(assert (= f.emptyEq.out_AT18 self.empty_AT18))
(assert (= f.emptyEq.in1_AT18 f.wrPtr.out_AT18))
(assert (= f.emptyEq.in0_AT18 f.rdPtr.out_AT18))
(assert (= en_or_sp.in1_AT18 start_and_push.out_AT18))
(assert (= en.out_AT18 not_en.in_AT18))
(assert (= en.out_AT18 en_or_sp.in0_AT18))
(assert (= en.in_AT18 en_or_sp.out_AT18))
(assert (= en.clk_AT18 self.clk_AT18))
(assert (= data_out_vld_and2.out_AT18 not_data_out_vld.in_AT18))
(assert (= data_out_vld_and1.out_AT18 data_out_vld_and2.in0_AT18))
(assert (= data_out_vld_and1.in0_AT18 en.out_AT18))
(assert (= cnt_gt_0.out_AT18 data_out_vld_and1.in1_AT18))
(assert (= cnt_gt_0.in1_AT18 zero.out_AT18))
(assert (= cnt_gt_0.in0_AT18 mpt.cnt.out_AT18))
(assert (= self.clk_AT18 #b0))
(assert (= zero.out_AT18 #b0000))
(assert (= (bvand start_and_push.in0_AT18 start_and_push.in1_AT18) start_and_push.out_AT18))
(assert (= (bvor prop_signal_or.in0_AT18 prop_signal_or.in1_AT18) prop_signal_or.out_AT18))
(assert (= (bvnot not_en.in_AT18) not_en.out_AT18))
(assert (= (bvnot not_data_out_vld.in_AT18) not_data_out_vld.out_AT18))
(assert (=> (= next_magic_packet.sel_AT18 #b1) (= next_magic_packet.in1_AT18 next_magic_packet.out_AT18)))
(assert (=> (= next_magic_packet.sel_AT18 #b0) (= next_magic_packet.in0_AT18 next_magic_packet.out_AT18)))
(assert (=> (not (= next_cnt_eq0.in0_AT18 next_cnt_eq0.in1_AT18)) (= next_cnt_eq0.out_AT18 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT18 next_cnt_eq0.in1_AT18) (= next_cnt_eq0.out_AT18 #b1)))
(assert (= mpt.zero.out_AT18 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT18 mpt.ssa_cnt_m1.in1_AT18) mpt.ssa_cnt_m1.out_AT18))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT18 mpt.ssa_cnt_gt_0.in0_AT18) (= mpt.ssa_cnt_gt_0.out_AT18 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT18 mpt.ssa_cnt_and2.in1_AT18) mpt.ssa_cnt_and2.out_AT18))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT18 mpt.ssa_cnt_and1.in1_AT18) mpt.ssa_cnt_and1.out_AT18))
(assert (=> (= mpt.ssa_cnt.sel_AT18 #b1) (= mpt.ssa_cnt.in1_AT18 mpt.ssa_cnt.out_AT18)))
(assert (=> (= mpt.ssa_cnt.sel_AT18 #b0) (= mpt.ssa_cnt.in0_AT18 mpt.ssa_cnt.out_AT18)))
(assert (= mpt.one.out_AT18 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT18) mpt.not_captured.out_AT18))
(assert (= (bvand mpt.next_cnt_and1.in0_AT18 mpt.next_cnt_and1.in1_AT18) mpt.next_cnt_and1.out_AT18))
(assert (=> (= mpt.next_cnt.sel_AT18 #b1) (= mpt.next_cnt.in1_AT18 mpt.next_cnt.out_AT18)))
(assert (=> (= mpt.next_cnt.sel_AT18 #b0) (= mpt.next_cnt.in0_AT18 mpt.next_cnt.out_AT18)))
(assert (= mpt.depth.out_AT18 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT18 #b1) (= mpt.decr_mux.in1_AT18 mpt.decr_mux.out_AT18)))
(assert (=> (= mpt.decr_mux.sel_AT18 #b0) (= mpt.decr_mux.in0_AT18 mpt.decr_mux.out_AT18)))
(assert (= (bvadd mpt.cnt_p1.in0_AT18 mpt.cnt_p1.in1_AT18) mpt.cnt_p1.out_AT18))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT18 mpt.cnt_lt_depth.in1_AT18) (= mpt.cnt_lt_depth.out_AT18 #b1)))
(assert (= (bvand mp_en.in0_AT18 mp_en.in1_AT18) mp_en.out_AT18))
(assert (=> (not (= magic_packet_eq.in0_AT18 magic_packet_eq.in1_AT18)) (= magic_packet_eq.out_AT18 #b0)))
(assert (=> (= magic_packet_eq.in0_AT18 magic_packet_eq.in1_AT18) (= magic_packet_eq.out_AT18 #b1)))
(assert (= f.zero.out_AT18 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT18 f.wrPtrp1.in1_AT18) f.wrPtrp1.out_AT18))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT18) f.wrPtrSlice.out_AT18))
(assert (=> (= f.wrPtrRst.sel_AT18 #b1) (= f.wrPtrRst.in1_AT18 f.wrPtrRst.out_AT18)))
(assert (=> (= f.wrPtrRst.sel_AT18 #b0) (= f.wrPtrRst.in0_AT18 f.wrPtrRst.out_AT18)))
(assert (=> (= f.wrPtrEn.sel_AT18 #b1) (= f.wrPtrEn.in1_AT18 f.wrPtrEn.out_AT18)))
(assert (=> (= f.wrPtrEn.sel_AT18 #b0) (= f.wrPtrEn.in0_AT18 f.wrPtrEn.out_AT18)))
(assert (= (bvadd f.rdPtrp1.in0_AT18 f.rdPtrp1.in1_AT18) f.rdPtrp1.out_AT18))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT18) f.rdPtrSlice.out_AT18))
(assert (=> (= f.rdPtrRst.sel_AT18 #b1) (= f.rdPtrRst.in1_AT18 f.rdPtrRst.out_AT18)))
(assert (=> (= f.rdPtrRst.sel_AT18 #b0) (= f.rdPtrRst.in0_AT18 f.rdPtrRst.out_AT18)))
(assert (=> (= f.rdPtrEn.sel_AT18 #b1) (= f.rdPtrEn.in1_AT18 f.rdPtrEn.out_AT18)))
(assert (=> (= f.rdPtrEn.sel_AT18 #b0) (= f.rdPtrEn.in0_AT18 f.rdPtrEn.out_AT18)))
(assert (= f.one.out_AT18 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT18) f.notfullEq_1.out_AT18))
(assert (= f.mem.rdata_AT18 (select f.mem.array_AT18 f.mem.raddr_AT18)))
(assert (=> (not (= f.fullEq_2.in0_AT18 f.fullEq_2.in1_AT18)) (= f.fullEq_2.out_AT18 #b0)))
(assert (=> (= f.fullEq_2.in0_AT18 f.fullEq_2.in1_AT18) (= f.fullEq_2.out_AT18 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT18 f.fullEq_1.in1_AT18)) (= f.fullEq_1.out_AT18 #b0)))
(assert (=> (= f.fullEq_1.in0_AT18 f.fullEq_1.in1_AT18) (= f.fullEq_1.out_AT18 #b1)))
(assert (= (bvand f.fullCalc.in0_AT18 f.fullCalc.in1_AT18) f.fullCalc.out_AT18))
(assert (=> (not (= f.emptyEq.in0_AT18 f.emptyEq.in1_AT18)) (= f.emptyEq.out_AT18 #b0)))
(assert (=> (= f.emptyEq.in0_AT18 f.emptyEq.in1_AT18) (= f.emptyEq.out_AT18 #b1)))
(assert (= (bvor en_or_sp.in0_AT18 en_or_sp.in1_AT18) en_or_sp.out_AT18))
(assert (= (bvand data_out_vld_and2.in0_AT18 data_out_vld_and2.in1_AT18) data_out_vld_and2.out_AT18))
(assert (= (bvand data_out_vld_and1.in0_AT18 data_out_vld_and1.in1_AT18) data_out_vld_and1.out_AT18))
(assert (= (bvult cnt_gt_0.in1_AT18 cnt_gt_0.in0_AT18) (= cnt_gt_0.out_AT18 #b1)))
(assert (=> (= _-_state_id_-__AT17 #b10) (= _-_state_id_-__AT18 #b10)))
(assert (=> (= _-_state_id_-__AT17 #b01) (= _-_state_id_-__AT18 #b10)))
(assert (=> (= _-_state_id_-__AT17 #b00) (= _-_state_id_-__AT18 #b01)))
(assert (= mpt.cnt.in_AT17 mpt.cnt.out_AT18))
(assert (= magic_packet.in_AT17 magic_packet.out_AT18))
(assert (= magic_packet.init_AT17 magic_packet.init_AT18))
(assert (= f.wrPtr.in_AT17 f.wrPtr.out_AT18))
(assert (= f.rdPtr.in_AT17 f.rdPtr.out_AT18))
(assert (= f.mem.array_AT18 (ite (= f.mem.wen_AT17 #b1) (store f.mem.array_AT17 f.mem.waddr_AT17 f.mem.wdata_AT17) f.mem.array_AT17)))
(assert (= en.init_AT17 en.init_AT18))
(assert (= en.in_AT17 en.out_AT18))
(push 1)

(assert (not (= self.prop_signal_AT18 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT19 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT19 () (_ BitVec 4))
(declare-fun magic_packet.out_AT19 () (_ BitVec 8))
(declare-fun magic_packet.init_AT19 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT19 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT19 () (_ BitVec 4))
(declare-fun f.mem.array_AT19 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT19 () (_ BitVec 1))
(declare-fun en.out_AT19 () (_ BitVec 1))
(declare-fun self.pop_AT19 () (_ BitVec 1))
(declare-fun self.empty_AT19 () (_ BitVec 1))
(declare-fun self.push_AT19 () (_ BitVec 1))
(declare-fun self.full_AT19 () (_ BitVec 1))
(declare-fun self.rst_AT19 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT19 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT19 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT19 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT19 () (_ BitVec 1))
(declare-fun self.start_AT19 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT19 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT19 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT19 () (_ BitVec 1))
(declare-fun self.prop_signal_AT19 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT19 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT19 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT19 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT19 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT19 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT19 () (_ BitVec 1))
(declare-fun mp_en.out_AT19 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT19 () (_ BitVec 1))
(declare-fun self.data_in_AT19 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT19 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT19 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT19 () (_ BitVec 1))
(declare-fun zero.out_AT19 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT19 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT19 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT19 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT19 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT19 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT19 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT19 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT19 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT19 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT19 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT19 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT19 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT19 () (_ BitVec 4))
(declare-fun mpt.one.out_AT19 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT19 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT19 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT19 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT19 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT19 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT19 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT19 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT19 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT19 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT19 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT19 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT19 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT19 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT19 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT19 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT19 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT19 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT19 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT19 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT19 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT19 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT19 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT19 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT19 () (_ BitVec 4))
(declare-fun self.clk_AT19 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT19 () (_ BitVec 1))
(declare-fun not_en.out_AT19 () (_ BitVec 1))
(declare-fun mp_en.in1_AT19 () (_ BitVec 1))
(declare-fun start_and_push.out_AT19 () (_ BitVec 1))
(declare-fun mp_en.in0_AT19 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT19 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT19 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT19 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT19 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT19 () (_ BitVec 8))
(declare-fun magic_packet.in_AT19 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT19 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT19 () (_ BitVec 1))
(declare-fun f.zero.out_AT19 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT19 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT19 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT19 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT19 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT19 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT19 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT19 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT19 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT19 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT19 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT19 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT19 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT19 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT19 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT19 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT19 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT19 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT19 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT19 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT19 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT19 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT19 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT19 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT19 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT19 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT19 () (_ BitVec 4))
(declare-fun f.one.out_AT19 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT19 () (_ BitVec 4))
(declare-fun f.mem.wen_AT19 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT19 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT19 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT19 () (_ BitVec 3))
(declare-fun self.data_out_AT19 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT19 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT19 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT19 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT19 () (_ BitVec 3))
(declare-fun f.mem.clk_AT19 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT19 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT19 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT19 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT19 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT19 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT19 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT19 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT19 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT19 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT19 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT19 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT19 () (_ BitVec 1))
(declare-fun not_en.in_AT19 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT19 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT19 () (_ BitVec 1))
(declare-fun en.in_AT19 () (_ BitVec 1))
(declare-fun en.clk_AT19 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT19 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT19 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT19 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT19 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT19 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT19 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT19 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT19 () (_ BitVec 4))

(assert (=> (= self.empty_AT19 #b1) (= self.pop_AT19 #b0)))
(assert (=> (= self.full_AT19 #b1) (= self.push_AT19 #b0)))
(assert (=> (= _-_state_id_-__AT19 #b10) (and true (= self.rst_AT19 #b0))))
(assert (=> (= _-_state_id_-__AT19 #b01) (and (and (and true (= self.rst_AT19 #b1)) (= self.push_AT19 #b0)) (= self.pop_AT19 #b0))))
(assert (=> (= _-_state_id_-__AT19 #b00) (and (and (and true (= self.rst_AT19 #b1)) (= self.push_AT19 #b0)) (= self.pop_AT19 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT19 ((_ extract 3 3) f.wrPtr.out_AT19)))
(assert (= f.fullEq_1.in0_AT19 ((_ extract 3 3) f.rdPtr.out_AT19)))
(assert (= en.out_AT19 mpt.not_captured.in_AT19))
(assert (= self.start_AT19 start_and_push.in0_AT19))
(assert (= self.push_AT19 start_and_push.in1_AT19))
(assert (= self.push_AT19 mpt.ssa_cnt_and1.in1_AT19))
(assert (= self.prop_signal_AT19 prop_signal_or.out_AT19))
(assert (= self.pop_AT19 mpt.next_cnt_and1.in1_AT19))
(assert (= self.full_AT19 f.fullCalc.out_AT19))
(assert (= self.data_out_vld_AT19 data_out_vld_and2.out_AT19))
(assert (= not_data_out_vld.out_AT19 prop_signal_or.in0_AT19))
(assert (= next_magic_packet.sel_AT19 mp_en.out_AT19))
(assert (= next_magic_packet.in1_AT19 self.data_in_AT19))
(assert (= next_cnt_eq0.out_AT19 data_out_vld_and2.in1_AT19))
(assert (= next_cnt_eq0.in1_AT19 zero.out_AT19))
(assert (= mpt.ssa_cnt_gt_0.out_AT19 mpt.next_cnt_and1.in0_AT19))
(assert (= mpt.ssa_cnt_gt_0.in1_AT19 mpt.zero.out_AT19))
(assert (= mpt.ssa_cnt_and1.out_AT19 mpt.ssa_cnt_and2.in0_AT19))
(assert (= mpt.ssa_cnt.sel_AT19 mpt.ssa_cnt_and2.out_AT19))
(assert (= mpt.ssa_cnt.out_AT19 mpt.ssa_cnt_m1.in0_AT19))
(assert (= mpt.ssa_cnt.out_AT19 mpt.ssa_cnt_gt_0.in0_AT19))
(assert (= mpt.one.out_AT19 mpt.ssa_cnt_m1.in1_AT19))
(assert (= mpt.not_captured.out_AT19 mpt.ssa_cnt_and2.in1_AT19))
(assert (= mpt.next_cnt.sel_AT19 self.rst_AT19))
(assert (= mpt.next_cnt.out_AT19 next_cnt_eq0.in0_AT19))
(assert (= mpt.next_cnt.in1_AT19 mpt.zero.out_AT19))
(assert (= mpt.decr_mux.sel_AT19 mpt.next_cnt_and1.out_AT19))
(assert (= mpt.decr_mux.out_AT19 mpt.next_cnt.in0_AT19))
(assert (= mpt.decr_mux.in1_AT19 mpt.ssa_cnt_m1.out_AT19))
(assert (= mpt.decr_mux.in0_AT19 mpt.ssa_cnt.out_AT19))
(assert (= mpt.cnt_p1.out_AT19 mpt.ssa_cnt.in1_AT19))
(assert (= mpt.cnt_p1.in1_AT19 mpt.one.out_AT19))
(assert (= mpt.cnt_lt_depth.out_AT19 mpt.ssa_cnt_and1.in0_AT19))
(assert (= mpt.cnt_lt_depth.in1_AT19 mpt.depth.out_AT19))
(assert (= mpt.cnt.out_AT19 mpt.ssa_cnt.in0_AT19))
(assert (= mpt.cnt.out_AT19 mpt.cnt_p1.in0_AT19))
(assert (= mpt.cnt.out_AT19 mpt.cnt_lt_depth.in0_AT19))
(assert (= mpt.cnt.in_AT19 mpt.next_cnt.out_AT19))
(assert (= mpt.cnt.clk_AT19 self.clk_AT19))
(assert (= mp_en.in1_AT19 not_en.out_AT19))
(assert (= mp_en.in0_AT19 start_and_push.out_AT19))
(assert (= magic_packet_eq.out_AT19 prop_signal_or.in1_AT19))
(assert (= magic_packet.out_AT19 next_magic_packet.in0_AT19))
(assert (= magic_packet.out_AT19 magic_packet_eq.in0_AT19))
(assert (= magic_packet.in_AT19 next_magic_packet.out_AT19))
(assert (= magic_packet.clk_AT19 self.clk_AT19))
(assert (= f.wrPtrRst.sel_AT19 self.rst_AT19))
(assert (= f.wrPtrRst.in1_AT19 f.zero.out_AT19))
(assert (= f.wrPtrEn.sel_AT19 self.push_AT19))
(assert (= f.wrPtrEn.out_AT19 f.wrPtrRst.in0_AT19))
(assert (= f.wrPtrEn.in1_AT19 f.wrPtrp1.out_AT19))
(assert (= f.wrPtr.out_AT19 f.wrPtrp1.in1_AT19))
(assert (= f.wrPtr.out_AT19 f.wrPtrSlice.in_AT19))
(assert (= f.wrPtr.out_AT19 f.wrPtrEn.in0_AT19))
(assert (= f.wrPtr.in_AT19 f.wrPtrRst.out_AT19))
(assert (= f.wrPtr.clk_AT19 self.clk_AT19))
(assert (= f.rdPtrRst.sel_AT19 self.rst_AT19))
(assert (= f.rdPtrRst.in1_AT19 f.zero.out_AT19))
(assert (= f.rdPtrEn.sel_AT19 self.pop_AT19))
(assert (= f.rdPtrEn.out_AT19 f.rdPtrRst.in0_AT19))
(assert (= f.rdPtrEn.in1_AT19 f.rdPtrp1.out_AT19))
(assert (= f.rdPtr.out_AT19 f.rdPtrp1.in1_AT19))
(assert (= f.rdPtr.out_AT19 f.rdPtrSlice.in_AT19))
(assert (= f.rdPtr.out_AT19 f.rdPtrEn.in0_AT19))
(assert (= f.rdPtr.in_AT19 f.rdPtrRst.out_AT19))
(assert (= f.rdPtr.clk_AT19 self.clk_AT19))
(assert (= f.one.out_AT19 f.wrPtrp1.in0_AT19))
(assert (= f.one.out_AT19 f.rdPtrp1.in0_AT19))
(assert (= f.mem.wen_AT19 self.push_AT19))
(assert (= f.mem.wdata_AT19 self.data_in_AT19))
(assert (= f.mem.waddr_AT19 f.wrPtrSlice.out_AT19))
(assert (= f.mem.rdata_AT19 self.data_out_AT19))
(assert (= f.mem.rdata_AT19 magic_packet_eq.in1_AT19))
(assert (= f.mem.raddr_AT19 f.rdPtrSlice.out_AT19))
(assert (= f.mem.clk_AT19 self.clk_AT19))
(assert (= f.fullEq_2.out_AT19 f.fullCalc.in1_AT19))
(assert (= f.fullEq_2.in1_AT19 f.wrPtrSlice.out_AT19))
(assert (= f.fullEq_2.in0_AT19 f.rdPtrSlice.out_AT19))
(assert (= f.fullEq_1.out_AT19 f.notfullEq_1.in_AT19))
(assert (= f.fullCalc.in0_AT19 f.notfullEq_1.out_AT19))
(assert (= f.emptyEq.out_AT19 self.empty_AT19))
(assert (= f.emptyEq.in1_AT19 f.wrPtr.out_AT19))
(assert (= f.emptyEq.in0_AT19 f.rdPtr.out_AT19))
(assert (= en_or_sp.in1_AT19 start_and_push.out_AT19))
(assert (= en.out_AT19 not_en.in_AT19))
(assert (= en.out_AT19 en_or_sp.in0_AT19))
(assert (= en.in_AT19 en_or_sp.out_AT19))
(assert (= en.clk_AT19 self.clk_AT19))
(assert (= data_out_vld_and2.out_AT19 not_data_out_vld.in_AT19))
(assert (= data_out_vld_and1.out_AT19 data_out_vld_and2.in0_AT19))
(assert (= data_out_vld_and1.in0_AT19 en.out_AT19))
(assert (= cnt_gt_0.out_AT19 data_out_vld_and1.in1_AT19))
(assert (= cnt_gt_0.in1_AT19 zero.out_AT19))
(assert (= cnt_gt_0.in0_AT19 mpt.cnt.out_AT19))
(assert (= self.clk_AT19 #b0))
(assert (= zero.out_AT19 #b0000))
(assert (= (bvand start_and_push.in0_AT19 start_and_push.in1_AT19) start_and_push.out_AT19))
(assert (= (bvor prop_signal_or.in0_AT19 prop_signal_or.in1_AT19) prop_signal_or.out_AT19))
(assert (= (bvnot not_en.in_AT19) not_en.out_AT19))
(assert (= (bvnot not_data_out_vld.in_AT19) not_data_out_vld.out_AT19))
(assert (=> (= next_magic_packet.sel_AT19 #b1) (= next_magic_packet.in1_AT19 next_magic_packet.out_AT19)))
(assert (=> (= next_magic_packet.sel_AT19 #b0) (= next_magic_packet.in0_AT19 next_magic_packet.out_AT19)))
(assert (=> (not (= next_cnt_eq0.in0_AT19 next_cnt_eq0.in1_AT19)) (= next_cnt_eq0.out_AT19 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT19 next_cnt_eq0.in1_AT19) (= next_cnt_eq0.out_AT19 #b1)))
(assert (= mpt.zero.out_AT19 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT19 mpt.ssa_cnt_m1.in1_AT19) mpt.ssa_cnt_m1.out_AT19))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT19 mpt.ssa_cnt_gt_0.in0_AT19) (= mpt.ssa_cnt_gt_0.out_AT19 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT19 mpt.ssa_cnt_and2.in1_AT19) mpt.ssa_cnt_and2.out_AT19))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT19 mpt.ssa_cnt_and1.in1_AT19) mpt.ssa_cnt_and1.out_AT19))
(assert (=> (= mpt.ssa_cnt.sel_AT19 #b1) (= mpt.ssa_cnt.in1_AT19 mpt.ssa_cnt.out_AT19)))
(assert (=> (= mpt.ssa_cnt.sel_AT19 #b0) (= mpt.ssa_cnt.in0_AT19 mpt.ssa_cnt.out_AT19)))
(assert (= mpt.one.out_AT19 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT19) mpt.not_captured.out_AT19))
(assert (= (bvand mpt.next_cnt_and1.in0_AT19 mpt.next_cnt_and1.in1_AT19) mpt.next_cnt_and1.out_AT19))
(assert (=> (= mpt.next_cnt.sel_AT19 #b1) (= mpt.next_cnt.in1_AT19 mpt.next_cnt.out_AT19)))
(assert (=> (= mpt.next_cnt.sel_AT19 #b0) (= mpt.next_cnt.in0_AT19 mpt.next_cnt.out_AT19)))
(assert (= mpt.depth.out_AT19 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT19 #b1) (= mpt.decr_mux.in1_AT19 mpt.decr_mux.out_AT19)))
(assert (=> (= mpt.decr_mux.sel_AT19 #b0) (= mpt.decr_mux.in0_AT19 mpt.decr_mux.out_AT19)))
(assert (= (bvadd mpt.cnt_p1.in0_AT19 mpt.cnt_p1.in1_AT19) mpt.cnt_p1.out_AT19))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT19 mpt.cnt_lt_depth.in1_AT19) (= mpt.cnt_lt_depth.out_AT19 #b1)))
(assert (= (bvand mp_en.in0_AT19 mp_en.in1_AT19) mp_en.out_AT19))
(assert (=> (not (= magic_packet_eq.in0_AT19 magic_packet_eq.in1_AT19)) (= magic_packet_eq.out_AT19 #b0)))
(assert (=> (= magic_packet_eq.in0_AT19 magic_packet_eq.in1_AT19) (= magic_packet_eq.out_AT19 #b1)))
(assert (= f.zero.out_AT19 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT19 f.wrPtrp1.in1_AT19) f.wrPtrp1.out_AT19))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT19) f.wrPtrSlice.out_AT19))
(assert (=> (= f.wrPtrRst.sel_AT19 #b1) (= f.wrPtrRst.in1_AT19 f.wrPtrRst.out_AT19)))
(assert (=> (= f.wrPtrRst.sel_AT19 #b0) (= f.wrPtrRst.in0_AT19 f.wrPtrRst.out_AT19)))
(assert (=> (= f.wrPtrEn.sel_AT19 #b1) (= f.wrPtrEn.in1_AT19 f.wrPtrEn.out_AT19)))
(assert (=> (= f.wrPtrEn.sel_AT19 #b0) (= f.wrPtrEn.in0_AT19 f.wrPtrEn.out_AT19)))
(assert (= (bvadd f.rdPtrp1.in0_AT19 f.rdPtrp1.in1_AT19) f.rdPtrp1.out_AT19))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT19) f.rdPtrSlice.out_AT19))
(assert (=> (= f.rdPtrRst.sel_AT19 #b1) (= f.rdPtrRst.in1_AT19 f.rdPtrRst.out_AT19)))
(assert (=> (= f.rdPtrRst.sel_AT19 #b0) (= f.rdPtrRst.in0_AT19 f.rdPtrRst.out_AT19)))
(assert (=> (= f.rdPtrEn.sel_AT19 #b1) (= f.rdPtrEn.in1_AT19 f.rdPtrEn.out_AT19)))
(assert (=> (= f.rdPtrEn.sel_AT19 #b0) (= f.rdPtrEn.in0_AT19 f.rdPtrEn.out_AT19)))
(assert (= f.one.out_AT19 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT19) f.notfullEq_1.out_AT19))
(assert (= f.mem.rdata_AT19 (select f.mem.array_AT19 f.mem.raddr_AT19)))
(assert (=> (not (= f.fullEq_2.in0_AT19 f.fullEq_2.in1_AT19)) (= f.fullEq_2.out_AT19 #b0)))
(assert (=> (= f.fullEq_2.in0_AT19 f.fullEq_2.in1_AT19) (= f.fullEq_2.out_AT19 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT19 f.fullEq_1.in1_AT19)) (= f.fullEq_1.out_AT19 #b0)))
(assert (=> (= f.fullEq_1.in0_AT19 f.fullEq_1.in1_AT19) (= f.fullEq_1.out_AT19 #b1)))
(assert (= (bvand f.fullCalc.in0_AT19 f.fullCalc.in1_AT19) f.fullCalc.out_AT19))
(assert (=> (not (= f.emptyEq.in0_AT19 f.emptyEq.in1_AT19)) (= f.emptyEq.out_AT19 #b0)))
(assert (=> (= f.emptyEq.in0_AT19 f.emptyEq.in1_AT19) (= f.emptyEq.out_AT19 #b1)))
(assert (= (bvor en_or_sp.in0_AT19 en_or_sp.in1_AT19) en_or_sp.out_AT19))
(assert (= (bvand data_out_vld_and2.in0_AT19 data_out_vld_and2.in1_AT19) data_out_vld_and2.out_AT19))
(assert (= (bvand data_out_vld_and1.in0_AT19 data_out_vld_and1.in1_AT19) data_out_vld_and1.out_AT19))
(assert (= (bvult cnt_gt_0.in1_AT19 cnt_gt_0.in0_AT19) (= cnt_gt_0.out_AT19 #b1)))
(assert (=> (= _-_state_id_-__AT18 #b10) (= _-_state_id_-__AT19 #b10)))
(assert (=> (= _-_state_id_-__AT18 #b01) (= _-_state_id_-__AT19 #b10)))
(assert (=> (= _-_state_id_-__AT18 #b00) (= _-_state_id_-__AT19 #b01)))
(assert (= mpt.cnt.in_AT18 mpt.cnt.out_AT19))
(assert (= magic_packet.in_AT18 magic_packet.out_AT19))
(assert (= magic_packet.init_AT18 magic_packet.init_AT19))
(assert (= f.wrPtr.in_AT18 f.wrPtr.out_AT19))
(assert (= f.rdPtr.in_AT18 f.rdPtr.out_AT19))
(assert (= f.mem.array_AT19 (ite (= f.mem.wen_AT18 #b1) (store f.mem.array_AT18 f.mem.waddr_AT18 f.mem.wdata_AT18) f.mem.array_AT18)))
(assert (= en.init_AT18 en.init_AT19))
(assert (= en.in_AT18 en.out_AT19))
(push 1)

(assert (not (= self.prop_signal_AT19 #b1)))
(check-sat)

(pop 1)
(declare-fun not_en.in_AT20 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT20 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT20 () (_ BitVec 1))
(declare-fun en.in_AT20 () (_ BitVec 1))
(declare-fun en.clk_AT20 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT20 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT20 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT20 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT20 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT20 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT20 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT20 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT20 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT20 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT20 () (_ BitVec 4))
(declare-fun magic_packet.out_AT20 () (_ BitVec 8))
(declare-fun magic_packet.init_AT20 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT20 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT20 () (_ BitVec 4))
(declare-fun f.mem.array_AT20 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT20 () (_ BitVec 1))
(declare-fun en.out_AT20 () (_ BitVec 1))
(declare-fun self.pop_AT20 () (_ BitVec 1))
(declare-fun self.empty_AT20 () (_ BitVec 1))
(declare-fun self.push_AT20 () (_ BitVec 1))
(declare-fun self.full_AT20 () (_ BitVec 1))
(declare-fun self.rst_AT20 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT20 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT20 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT20 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT20 () (_ BitVec 1))
(declare-fun self.start_AT20 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT20 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT20 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT20 () (_ BitVec 1))
(declare-fun self.prop_signal_AT20 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT20 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT20 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT20 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT20 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT20 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT20 () (_ BitVec 1))
(declare-fun mp_en.out_AT20 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT20 () (_ BitVec 1))
(declare-fun self.data_in_AT20 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT20 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT20 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT20 () (_ BitVec 1))
(declare-fun zero.out_AT20 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT20 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT20 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT20 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT20 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT20 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT20 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT20 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT20 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT20 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT20 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT20 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT20 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT20 () (_ BitVec 4))
(declare-fun mpt.one.out_AT20 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT20 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT20 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT20 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT20 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT20 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT20 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT20 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT20 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT20 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT20 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT20 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT20 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT20 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT20 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT20 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT20 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT20 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT20 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT20 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT20 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT20 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT20 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT20 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT20 () (_ BitVec 4))
(declare-fun self.clk_AT20 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT20 () (_ BitVec 1))
(declare-fun not_en.out_AT20 () (_ BitVec 1))
(declare-fun mp_en.in1_AT20 () (_ BitVec 1))
(declare-fun start_and_push.out_AT20 () (_ BitVec 1))
(declare-fun mp_en.in0_AT20 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT20 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT20 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT20 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT20 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT20 () (_ BitVec 8))
(declare-fun magic_packet.in_AT20 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT20 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT20 () (_ BitVec 1))
(declare-fun f.zero.out_AT20 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT20 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT20 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT20 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT20 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT20 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT20 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT20 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT20 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT20 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT20 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT20 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT20 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT20 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT20 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT20 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT20 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT20 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT20 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT20 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT20 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT20 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT20 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT20 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT20 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT20 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT20 () (_ BitVec 4))
(declare-fun f.one.out_AT20 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT20 () (_ BitVec 4))
(declare-fun f.mem.wen_AT20 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT20 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT20 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT20 () (_ BitVec 3))
(declare-fun self.data_out_AT20 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT20 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT20 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT20 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT20 () (_ BitVec 3))
(declare-fun f.mem.clk_AT20 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT20 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT20 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT20 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT20 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT20 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT20 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT20 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT20 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT20 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT20 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT20 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT20 () (_ BitVec 1))

(assert (=> (= self.empty_AT20 #b1) (= self.pop_AT20 #b0)))
(assert (=> (= self.full_AT20 #b1) (= self.push_AT20 #b0)))
(assert (=> (= _-_state_id_-__AT20 #b10) (and true (= self.rst_AT20 #b0))))
(assert (=> (= _-_state_id_-__AT20 #b01) (and (and (and true (= self.rst_AT20 #b1)) (= self.push_AT20 #b0)) (= self.pop_AT20 #b0))))
(assert (=> (= _-_state_id_-__AT20 #b00) (and (and (and true (= self.rst_AT20 #b1)) (= self.push_AT20 #b0)) (= self.pop_AT20 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT20 ((_ extract 3 3) f.wrPtr.out_AT20)))
(assert (= f.fullEq_1.in0_AT20 ((_ extract 3 3) f.rdPtr.out_AT20)))
(assert (= en.out_AT20 mpt.not_captured.in_AT20))
(assert (= self.start_AT20 start_and_push.in0_AT20))
(assert (= self.push_AT20 start_and_push.in1_AT20))
(assert (= self.push_AT20 mpt.ssa_cnt_and1.in1_AT20))
(assert (= self.prop_signal_AT20 prop_signal_or.out_AT20))
(assert (= self.pop_AT20 mpt.next_cnt_and1.in1_AT20))
(assert (= self.full_AT20 f.fullCalc.out_AT20))
(assert (= self.data_out_vld_AT20 data_out_vld_and2.out_AT20))
(assert (= not_data_out_vld.out_AT20 prop_signal_or.in0_AT20))
(assert (= next_magic_packet.sel_AT20 mp_en.out_AT20))
(assert (= next_magic_packet.in1_AT20 self.data_in_AT20))
(assert (= next_cnt_eq0.out_AT20 data_out_vld_and2.in1_AT20))
(assert (= next_cnt_eq0.in1_AT20 zero.out_AT20))
(assert (= mpt.ssa_cnt_gt_0.out_AT20 mpt.next_cnt_and1.in0_AT20))
(assert (= mpt.ssa_cnt_gt_0.in1_AT20 mpt.zero.out_AT20))
(assert (= mpt.ssa_cnt_and1.out_AT20 mpt.ssa_cnt_and2.in0_AT20))
(assert (= mpt.ssa_cnt.sel_AT20 mpt.ssa_cnt_and2.out_AT20))
(assert (= mpt.ssa_cnt.out_AT20 mpt.ssa_cnt_m1.in0_AT20))
(assert (= mpt.ssa_cnt.out_AT20 mpt.ssa_cnt_gt_0.in0_AT20))
(assert (= mpt.one.out_AT20 mpt.ssa_cnt_m1.in1_AT20))
(assert (= mpt.not_captured.out_AT20 mpt.ssa_cnt_and2.in1_AT20))
(assert (= mpt.next_cnt.sel_AT20 self.rst_AT20))
(assert (= mpt.next_cnt.out_AT20 next_cnt_eq0.in0_AT20))
(assert (= mpt.next_cnt.in1_AT20 mpt.zero.out_AT20))
(assert (= mpt.decr_mux.sel_AT20 mpt.next_cnt_and1.out_AT20))
(assert (= mpt.decr_mux.out_AT20 mpt.next_cnt.in0_AT20))
(assert (= mpt.decr_mux.in1_AT20 mpt.ssa_cnt_m1.out_AT20))
(assert (= mpt.decr_mux.in0_AT20 mpt.ssa_cnt.out_AT20))
(assert (= mpt.cnt_p1.out_AT20 mpt.ssa_cnt.in1_AT20))
(assert (= mpt.cnt_p1.in1_AT20 mpt.one.out_AT20))
(assert (= mpt.cnt_lt_depth.out_AT20 mpt.ssa_cnt_and1.in0_AT20))
(assert (= mpt.cnt_lt_depth.in1_AT20 mpt.depth.out_AT20))
(assert (= mpt.cnt.out_AT20 mpt.ssa_cnt.in0_AT20))
(assert (= mpt.cnt.out_AT20 mpt.cnt_p1.in0_AT20))
(assert (= mpt.cnt.out_AT20 mpt.cnt_lt_depth.in0_AT20))
(assert (= mpt.cnt.in_AT20 mpt.next_cnt.out_AT20))
(assert (= mpt.cnt.clk_AT20 self.clk_AT20))
(assert (= mp_en.in1_AT20 not_en.out_AT20))
(assert (= mp_en.in0_AT20 start_and_push.out_AT20))
(assert (= magic_packet_eq.out_AT20 prop_signal_or.in1_AT20))
(assert (= magic_packet.out_AT20 next_magic_packet.in0_AT20))
(assert (= magic_packet.out_AT20 magic_packet_eq.in0_AT20))
(assert (= magic_packet.in_AT20 next_magic_packet.out_AT20))
(assert (= magic_packet.clk_AT20 self.clk_AT20))
(assert (= f.wrPtrRst.sel_AT20 self.rst_AT20))
(assert (= f.wrPtrRst.in1_AT20 f.zero.out_AT20))
(assert (= f.wrPtrEn.sel_AT20 self.push_AT20))
(assert (= f.wrPtrEn.out_AT20 f.wrPtrRst.in0_AT20))
(assert (= f.wrPtrEn.in1_AT20 f.wrPtrp1.out_AT20))
(assert (= f.wrPtr.out_AT20 f.wrPtrp1.in1_AT20))
(assert (= f.wrPtr.out_AT20 f.wrPtrSlice.in_AT20))
(assert (= f.wrPtr.out_AT20 f.wrPtrEn.in0_AT20))
(assert (= f.wrPtr.in_AT20 f.wrPtrRst.out_AT20))
(assert (= f.wrPtr.clk_AT20 self.clk_AT20))
(assert (= f.rdPtrRst.sel_AT20 self.rst_AT20))
(assert (= f.rdPtrRst.in1_AT20 f.zero.out_AT20))
(assert (= f.rdPtrEn.sel_AT20 self.pop_AT20))
(assert (= f.rdPtrEn.out_AT20 f.rdPtrRst.in0_AT20))
(assert (= f.rdPtrEn.in1_AT20 f.rdPtrp1.out_AT20))
(assert (= f.rdPtr.out_AT20 f.rdPtrp1.in1_AT20))
(assert (= f.rdPtr.out_AT20 f.rdPtrSlice.in_AT20))
(assert (= f.rdPtr.out_AT20 f.rdPtrEn.in0_AT20))
(assert (= f.rdPtr.in_AT20 f.rdPtrRst.out_AT20))
(assert (= f.rdPtr.clk_AT20 self.clk_AT20))
(assert (= f.one.out_AT20 f.wrPtrp1.in0_AT20))
(assert (= f.one.out_AT20 f.rdPtrp1.in0_AT20))
(assert (= f.mem.wen_AT20 self.push_AT20))
(assert (= f.mem.wdata_AT20 self.data_in_AT20))
(assert (= f.mem.waddr_AT20 f.wrPtrSlice.out_AT20))
(assert (= f.mem.rdata_AT20 self.data_out_AT20))
(assert (= f.mem.rdata_AT20 magic_packet_eq.in1_AT20))
(assert (= f.mem.raddr_AT20 f.rdPtrSlice.out_AT20))
(assert (= f.mem.clk_AT20 self.clk_AT20))
(assert (= f.fullEq_2.out_AT20 f.fullCalc.in1_AT20))
(assert (= f.fullEq_2.in1_AT20 f.wrPtrSlice.out_AT20))
(assert (= f.fullEq_2.in0_AT20 f.rdPtrSlice.out_AT20))
(assert (= f.fullEq_1.out_AT20 f.notfullEq_1.in_AT20))
(assert (= f.fullCalc.in0_AT20 f.notfullEq_1.out_AT20))
(assert (= f.emptyEq.out_AT20 self.empty_AT20))
(assert (= f.emptyEq.in1_AT20 f.wrPtr.out_AT20))
(assert (= f.emptyEq.in0_AT20 f.rdPtr.out_AT20))
(assert (= en_or_sp.in1_AT20 start_and_push.out_AT20))
(assert (= en.out_AT20 not_en.in_AT20))
(assert (= en.out_AT20 en_or_sp.in0_AT20))
(assert (= en.in_AT20 en_or_sp.out_AT20))
(assert (= en.clk_AT20 self.clk_AT20))
(assert (= data_out_vld_and2.out_AT20 not_data_out_vld.in_AT20))
(assert (= data_out_vld_and1.out_AT20 data_out_vld_and2.in0_AT20))
(assert (= data_out_vld_and1.in0_AT20 en.out_AT20))
(assert (= cnt_gt_0.out_AT20 data_out_vld_and1.in1_AT20))
(assert (= cnt_gt_0.in1_AT20 zero.out_AT20))
(assert (= cnt_gt_0.in0_AT20 mpt.cnt.out_AT20))
(assert (= self.clk_AT20 #b0))
(assert (= zero.out_AT20 #b0000))
(assert (= (bvand start_and_push.in0_AT20 start_and_push.in1_AT20) start_and_push.out_AT20))
(assert (= (bvor prop_signal_or.in0_AT20 prop_signal_or.in1_AT20) prop_signal_or.out_AT20))
(assert (= (bvnot not_en.in_AT20) not_en.out_AT20))
(assert (= (bvnot not_data_out_vld.in_AT20) not_data_out_vld.out_AT20))
(assert (=> (= next_magic_packet.sel_AT20 #b1) (= next_magic_packet.in1_AT20 next_magic_packet.out_AT20)))
(assert (=> (= next_magic_packet.sel_AT20 #b0) (= next_magic_packet.in0_AT20 next_magic_packet.out_AT20)))
(assert (=> (not (= next_cnt_eq0.in0_AT20 next_cnt_eq0.in1_AT20)) (= next_cnt_eq0.out_AT20 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT20 next_cnt_eq0.in1_AT20) (= next_cnt_eq0.out_AT20 #b1)))
(assert (= mpt.zero.out_AT20 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT20 mpt.ssa_cnt_m1.in1_AT20) mpt.ssa_cnt_m1.out_AT20))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT20 mpt.ssa_cnt_gt_0.in0_AT20) (= mpt.ssa_cnt_gt_0.out_AT20 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT20 mpt.ssa_cnt_and2.in1_AT20) mpt.ssa_cnt_and2.out_AT20))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT20 mpt.ssa_cnt_and1.in1_AT20) mpt.ssa_cnt_and1.out_AT20))
(assert (=> (= mpt.ssa_cnt.sel_AT20 #b1) (= mpt.ssa_cnt.in1_AT20 mpt.ssa_cnt.out_AT20)))
(assert (=> (= mpt.ssa_cnt.sel_AT20 #b0) (= mpt.ssa_cnt.in0_AT20 mpt.ssa_cnt.out_AT20)))
(assert (= mpt.one.out_AT20 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT20) mpt.not_captured.out_AT20))
(assert (= (bvand mpt.next_cnt_and1.in0_AT20 mpt.next_cnt_and1.in1_AT20) mpt.next_cnt_and1.out_AT20))
(assert (=> (= mpt.next_cnt.sel_AT20 #b1) (= mpt.next_cnt.in1_AT20 mpt.next_cnt.out_AT20)))
(assert (=> (= mpt.next_cnt.sel_AT20 #b0) (= mpt.next_cnt.in0_AT20 mpt.next_cnt.out_AT20)))
(assert (= mpt.depth.out_AT20 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT20 #b1) (= mpt.decr_mux.in1_AT20 mpt.decr_mux.out_AT20)))
(assert (=> (= mpt.decr_mux.sel_AT20 #b0) (= mpt.decr_mux.in0_AT20 mpt.decr_mux.out_AT20)))
(assert (= (bvadd mpt.cnt_p1.in0_AT20 mpt.cnt_p1.in1_AT20) mpt.cnt_p1.out_AT20))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT20 mpt.cnt_lt_depth.in1_AT20) (= mpt.cnt_lt_depth.out_AT20 #b1)))
(assert (= (bvand mp_en.in0_AT20 mp_en.in1_AT20) mp_en.out_AT20))
(assert (=> (not (= magic_packet_eq.in0_AT20 magic_packet_eq.in1_AT20)) (= magic_packet_eq.out_AT20 #b0)))
(assert (=> (= magic_packet_eq.in0_AT20 magic_packet_eq.in1_AT20) (= magic_packet_eq.out_AT20 #b1)))
(assert (= f.zero.out_AT20 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT20 f.wrPtrp1.in1_AT20) f.wrPtrp1.out_AT20))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT20) f.wrPtrSlice.out_AT20))
(assert (=> (= f.wrPtrRst.sel_AT20 #b1) (= f.wrPtrRst.in1_AT20 f.wrPtrRst.out_AT20)))
(assert (=> (= f.wrPtrRst.sel_AT20 #b0) (= f.wrPtrRst.in0_AT20 f.wrPtrRst.out_AT20)))
(assert (=> (= f.wrPtrEn.sel_AT20 #b1) (= f.wrPtrEn.in1_AT20 f.wrPtrEn.out_AT20)))
(assert (=> (= f.wrPtrEn.sel_AT20 #b0) (= f.wrPtrEn.in0_AT20 f.wrPtrEn.out_AT20)))
(assert (= (bvadd f.rdPtrp1.in0_AT20 f.rdPtrp1.in1_AT20) f.rdPtrp1.out_AT20))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT20) f.rdPtrSlice.out_AT20))
(assert (=> (= f.rdPtrRst.sel_AT20 #b1) (= f.rdPtrRst.in1_AT20 f.rdPtrRst.out_AT20)))
(assert (=> (= f.rdPtrRst.sel_AT20 #b0) (= f.rdPtrRst.in0_AT20 f.rdPtrRst.out_AT20)))
(assert (=> (= f.rdPtrEn.sel_AT20 #b1) (= f.rdPtrEn.in1_AT20 f.rdPtrEn.out_AT20)))
(assert (=> (= f.rdPtrEn.sel_AT20 #b0) (= f.rdPtrEn.in0_AT20 f.rdPtrEn.out_AT20)))
(assert (= f.one.out_AT20 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT20) f.notfullEq_1.out_AT20))
(assert (= f.mem.rdata_AT20 (select f.mem.array_AT20 f.mem.raddr_AT20)))
(assert (=> (not (= f.fullEq_2.in0_AT20 f.fullEq_2.in1_AT20)) (= f.fullEq_2.out_AT20 #b0)))
(assert (=> (= f.fullEq_2.in0_AT20 f.fullEq_2.in1_AT20) (= f.fullEq_2.out_AT20 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT20 f.fullEq_1.in1_AT20)) (= f.fullEq_1.out_AT20 #b0)))
(assert (=> (= f.fullEq_1.in0_AT20 f.fullEq_1.in1_AT20) (= f.fullEq_1.out_AT20 #b1)))
(assert (= (bvand f.fullCalc.in0_AT20 f.fullCalc.in1_AT20) f.fullCalc.out_AT20))
(assert (=> (not (= f.emptyEq.in0_AT20 f.emptyEq.in1_AT20)) (= f.emptyEq.out_AT20 #b0)))
(assert (=> (= f.emptyEq.in0_AT20 f.emptyEq.in1_AT20) (= f.emptyEq.out_AT20 #b1)))
(assert (= (bvor en_or_sp.in0_AT20 en_or_sp.in1_AT20) en_or_sp.out_AT20))
(assert (= (bvand data_out_vld_and2.in0_AT20 data_out_vld_and2.in1_AT20) data_out_vld_and2.out_AT20))
(assert (= (bvand data_out_vld_and1.in0_AT20 data_out_vld_and1.in1_AT20) data_out_vld_and1.out_AT20))
(assert (= (bvult cnt_gt_0.in1_AT20 cnt_gt_0.in0_AT20) (= cnt_gt_0.out_AT20 #b1)))
(assert (=> (= _-_state_id_-__AT19 #b10) (= _-_state_id_-__AT20 #b10)))
(assert (=> (= _-_state_id_-__AT19 #b01) (= _-_state_id_-__AT20 #b10)))
(assert (=> (= _-_state_id_-__AT19 #b00) (= _-_state_id_-__AT20 #b01)))
(assert (= mpt.cnt.in_AT19 mpt.cnt.out_AT20))
(assert (= magic_packet.in_AT19 magic_packet.out_AT20))
(assert (= magic_packet.init_AT19 magic_packet.init_AT20))
(assert (= f.wrPtr.in_AT19 f.wrPtr.out_AT20))
(assert (= f.rdPtr.in_AT19 f.rdPtr.out_AT20))
(assert (= f.mem.array_AT20 (ite (= f.mem.wen_AT19 #b1) (store f.mem.array_AT19 f.mem.waddr_AT19 f.mem.wdata_AT19) f.mem.array_AT19)))
(assert (= en.init_AT19 en.init_AT20))
(assert (= en.in_AT19 en.out_AT20))
(push 1)

(assert (not (= self.prop_signal_AT20 #b1)))
(check-sat)

(pop 1)
(declare-fun mpt.cnt_lt_depth.out_AT21 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT21 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT21 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT21 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT21 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT21 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT21 () (_ BitVec 4))
(declare-fun self.clk_AT21 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT21 () (_ BitVec 1))
(declare-fun not_en.out_AT21 () (_ BitVec 1))
(declare-fun mp_en.in1_AT21 () (_ BitVec 1))
(declare-fun start_and_push.out_AT21 () (_ BitVec 1))
(declare-fun mp_en.in0_AT21 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT21 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT21 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT21 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT21 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT21 () (_ BitVec 8))
(declare-fun magic_packet.in_AT21 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT21 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT21 () (_ BitVec 1))
(declare-fun f.zero.out_AT21 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT21 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT21 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT21 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT21 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT21 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT21 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT21 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT21 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT21 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT21 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT21 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT21 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT21 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT21 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT21 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT21 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT21 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT21 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT21 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT21 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT21 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT21 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT21 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT21 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT21 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT21 () (_ BitVec 4))
(declare-fun f.one.out_AT21 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT21 () (_ BitVec 4))
(declare-fun f.mem.wen_AT21 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT21 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT21 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT21 () (_ BitVec 3))
(declare-fun self.data_out_AT21 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT21 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT21 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT21 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT21 () (_ BitVec 3))
(declare-fun f.mem.clk_AT21 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT21 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT21 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT21 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT21 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT21 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT21 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT21 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT21 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT21 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT21 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT21 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT21 () (_ BitVec 1))
(declare-fun not_en.in_AT21 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT21 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT21 () (_ BitVec 1))
(declare-fun en.in_AT21 () (_ BitVec 1))
(declare-fun en.clk_AT21 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT21 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT21 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT21 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT21 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT21 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT21 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT21 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT21 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT21 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT21 () (_ BitVec 4))
(declare-fun magic_packet.out_AT21 () (_ BitVec 8))
(declare-fun magic_packet.init_AT21 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT21 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT21 () (_ BitVec 4))
(declare-fun f.mem.array_AT21 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT21 () (_ BitVec 1))
(declare-fun en.out_AT21 () (_ BitVec 1))
(declare-fun self.pop_AT21 () (_ BitVec 1))
(declare-fun self.empty_AT21 () (_ BitVec 1))
(declare-fun self.push_AT21 () (_ BitVec 1))
(declare-fun self.full_AT21 () (_ BitVec 1))
(declare-fun self.rst_AT21 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT21 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT21 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT21 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT21 () (_ BitVec 1))
(declare-fun self.start_AT21 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT21 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT21 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT21 () (_ BitVec 1))
(declare-fun self.prop_signal_AT21 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT21 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT21 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT21 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT21 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT21 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT21 () (_ BitVec 1))
(declare-fun mp_en.out_AT21 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT21 () (_ BitVec 1))
(declare-fun self.data_in_AT21 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT21 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT21 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT21 () (_ BitVec 1))
(declare-fun zero.out_AT21 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT21 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT21 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT21 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT21 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT21 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT21 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT21 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT21 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT21 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT21 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT21 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT21 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT21 () (_ BitVec 4))
(declare-fun mpt.one.out_AT21 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT21 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT21 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT21 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT21 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT21 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT21 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT21 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT21 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT21 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT21 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT21 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT21 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT21 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT21 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT21 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT21 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT21 () (_ BitVec 1))

(assert (=> (= self.empty_AT21 #b1) (= self.pop_AT21 #b0)))
(assert (=> (= self.full_AT21 #b1) (= self.push_AT21 #b0)))
(assert (=> (= _-_state_id_-__AT21 #b10) (and true (= self.rst_AT21 #b0))))
(assert (=> (= _-_state_id_-__AT21 #b01) (and (and (and true (= self.rst_AT21 #b1)) (= self.push_AT21 #b0)) (= self.pop_AT21 #b0))))
(assert (=> (= _-_state_id_-__AT21 #b00) (and (and (and true (= self.rst_AT21 #b1)) (= self.push_AT21 #b0)) (= self.pop_AT21 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT21 ((_ extract 3 3) f.wrPtr.out_AT21)))
(assert (= f.fullEq_1.in0_AT21 ((_ extract 3 3) f.rdPtr.out_AT21)))
(assert (= en.out_AT21 mpt.not_captured.in_AT21))
(assert (= self.start_AT21 start_and_push.in0_AT21))
(assert (= self.push_AT21 start_and_push.in1_AT21))
(assert (= self.push_AT21 mpt.ssa_cnt_and1.in1_AT21))
(assert (= self.prop_signal_AT21 prop_signal_or.out_AT21))
(assert (= self.pop_AT21 mpt.next_cnt_and1.in1_AT21))
(assert (= self.full_AT21 f.fullCalc.out_AT21))
(assert (= self.data_out_vld_AT21 data_out_vld_and2.out_AT21))
(assert (= not_data_out_vld.out_AT21 prop_signal_or.in0_AT21))
(assert (= next_magic_packet.sel_AT21 mp_en.out_AT21))
(assert (= next_magic_packet.in1_AT21 self.data_in_AT21))
(assert (= next_cnt_eq0.out_AT21 data_out_vld_and2.in1_AT21))
(assert (= next_cnt_eq0.in1_AT21 zero.out_AT21))
(assert (= mpt.ssa_cnt_gt_0.out_AT21 mpt.next_cnt_and1.in0_AT21))
(assert (= mpt.ssa_cnt_gt_0.in1_AT21 mpt.zero.out_AT21))
(assert (= mpt.ssa_cnt_and1.out_AT21 mpt.ssa_cnt_and2.in0_AT21))
(assert (= mpt.ssa_cnt.sel_AT21 mpt.ssa_cnt_and2.out_AT21))
(assert (= mpt.ssa_cnt.out_AT21 mpt.ssa_cnt_m1.in0_AT21))
(assert (= mpt.ssa_cnt.out_AT21 mpt.ssa_cnt_gt_0.in0_AT21))
(assert (= mpt.one.out_AT21 mpt.ssa_cnt_m1.in1_AT21))
(assert (= mpt.not_captured.out_AT21 mpt.ssa_cnt_and2.in1_AT21))
(assert (= mpt.next_cnt.sel_AT21 self.rst_AT21))
(assert (= mpt.next_cnt.out_AT21 next_cnt_eq0.in0_AT21))
(assert (= mpt.next_cnt.in1_AT21 mpt.zero.out_AT21))
(assert (= mpt.decr_mux.sel_AT21 mpt.next_cnt_and1.out_AT21))
(assert (= mpt.decr_mux.out_AT21 mpt.next_cnt.in0_AT21))
(assert (= mpt.decr_mux.in1_AT21 mpt.ssa_cnt_m1.out_AT21))
(assert (= mpt.decr_mux.in0_AT21 mpt.ssa_cnt.out_AT21))
(assert (= mpt.cnt_p1.out_AT21 mpt.ssa_cnt.in1_AT21))
(assert (= mpt.cnt_p1.in1_AT21 mpt.one.out_AT21))
(assert (= mpt.cnt_lt_depth.out_AT21 mpt.ssa_cnt_and1.in0_AT21))
(assert (= mpt.cnt_lt_depth.in1_AT21 mpt.depth.out_AT21))
(assert (= mpt.cnt.out_AT21 mpt.ssa_cnt.in0_AT21))
(assert (= mpt.cnt.out_AT21 mpt.cnt_p1.in0_AT21))
(assert (= mpt.cnt.out_AT21 mpt.cnt_lt_depth.in0_AT21))
(assert (= mpt.cnt.in_AT21 mpt.next_cnt.out_AT21))
(assert (= mpt.cnt.clk_AT21 self.clk_AT21))
(assert (= mp_en.in1_AT21 not_en.out_AT21))
(assert (= mp_en.in0_AT21 start_and_push.out_AT21))
(assert (= magic_packet_eq.out_AT21 prop_signal_or.in1_AT21))
(assert (= magic_packet.out_AT21 next_magic_packet.in0_AT21))
(assert (= magic_packet.out_AT21 magic_packet_eq.in0_AT21))
(assert (= magic_packet.in_AT21 next_magic_packet.out_AT21))
(assert (= magic_packet.clk_AT21 self.clk_AT21))
(assert (= f.wrPtrRst.sel_AT21 self.rst_AT21))
(assert (= f.wrPtrRst.in1_AT21 f.zero.out_AT21))
(assert (= f.wrPtrEn.sel_AT21 self.push_AT21))
(assert (= f.wrPtrEn.out_AT21 f.wrPtrRst.in0_AT21))
(assert (= f.wrPtrEn.in1_AT21 f.wrPtrp1.out_AT21))
(assert (= f.wrPtr.out_AT21 f.wrPtrp1.in1_AT21))
(assert (= f.wrPtr.out_AT21 f.wrPtrSlice.in_AT21))
(assert (= f.wrPtr.out_AT21 f.wrPtrEn.in0_AT21))
(assert (= f.wrPtr.in_AT21 f.wrPtrRst.out_AT21))
(assert (= f.wrPtr.clk_AT21 self.clk_AT21))
(assert (= f.rdPtrRst.sel_AT21 self.rst_AT21))
(assert (= f.rdPtrRst.in1_AT21 f.zero.out_AT21))
(assert (= f.rdPtrEn.sel_AT21 self.pop_AT21))
(assert (= f.rdPtrEn.out_AT21 f.rdPtrRst.in0_AT21))
(assert (= f.rdPtrEn.in1_AT21 f.rdPtrp1.out_AT21))
(assert (= f.rdPtr.out_AT21 f.rdPtrp1.in1_AT21))
(assert (= f.rdPtr.out_AT21 f.rdPtrSlice.in_AT21))
(assert (= f.rdPtr.out_AT21 f.rdPtrEn.in0_AT21))
(assert (= f.rdPtr.in_AT21 f.rdPtrRst.out_AT21))
(assert (= f.rdPtr.clk_AT21 self.clk_AT21))
(assert (= f.one.out_AT21 f.wrPtrp1.in0_AT21))
(assert (= f.one.out_AT21 f.rdPtrp1.in0_AT21))
(assert (= f.mem.wen_AT21 self.push_AT21))
(assert (= f.mem.wdata_AT21 self.data_in_AT21))
(assert (= f.mem.waddr_AT21 f.wrPtrSlice.out_AT21))
(assert (= f.mem.rdata_AT21 self.data_out_AT21))
(assert (= f.mem.rdata_AT21 magic_packet_eq.in1_AT21))
(assert (= f.mem.raddr_AT21 f.rdPtrSlice.out_AT21))
(assert (= f.mem.clk_AT21 self.clk_AT21))
(assert (= f.fullEq_2.out_AT21 f.fullCalc.in1_AT21))
(assert (= f.fullEq_2.in1_AT21 f.wrPtrSlice.out_AT21))
(assert (= f.fullEq_2.in0_AT21 f.rdPtrSlice.out_AT21))
(assert (= f.fullEq_1.out_AT21 f.notfullEq_1.in_AT21))
(assert (= f.fullCalc.in0_AT21 f.notfullEq_1.out_AT21))
(assert (= f.emptyEq.out_AT21 self.empty_AT21))
(assert (= f.emptyEq.in1_AT21 f.wrPtr.out_AT21))
(assert (= f.emptyEq.in0_AT21 f.rdPtr.out_AT21))
(assert (= en_or_sp.in1_AT21 start_and_push.out_AT21))
(assert (= en.out_AT21 not_en.in_AT21))
(assert (= en.out_AT21 en_or_sp.in0_AT21))
(assert (= en.in_AT21 en_or_sp.out_AT21))
(assert (= en.clk_AT21 self.clk_AT21))
(assert (= data_out_vld_and2.out_AT21 not_data_out_vld.in_AT21))
(assert (= data_out_vld_and1.out_AT21 data_out_vld_and2.in0_AT21))
(assert (= data_out_vld_and1.in0_AT21 en.out_AT21))
(assert (= cnt_gt_0.out_AT21 data_out_vld_and1.in1_AT21))
(assert (= cnt_gt_0.in1_AT21 zero.out_AT21))
(assert (= cnt_gt_0.in0_AT21 mpt.cnt.out_AT21))
(assert (= self.clk_AT21 #b0))
(assert (= zero.out_AT21 #b0000))
(assert (= (bvand start_and_push.in0_AT21 start_and_push.in1_AT21) start_and_push.out_AT21))
(assert (= (bvor prop_signal_or.in0_AT21 prop_signal_or.in1_AT21) prop_signal_or.out_AT21))
(assert (= (bvnot not_en.in_AT21) not_en.out_AT21))
(assert (= (bvnot not_data_out_vld.in_AT21) not_data_out_vld.out_AT21))
(assert (=> (= next_magic_packet.sel_AT21 #b1) (= next_magic_packet.in1_AT21 next_magic_packet.out_AT21)))
(assert (=> (= next_magic_packet.sel_AT21 #b0) (= next_magic_packet.in0_AT21 next_magic_packet.out_AT21)))
(assert (=> (not (= next_cnt_eq0.in0_AT21 next_cnt_eq0.in1_AT21)) (= next_cnt_eq0.out_AT21 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT21 next_cnt_eq0.in1_AT21) (= next_cnt_eq0.out_AT21 #b1)))
(assert (= mpt.zero.out_AT21 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT21 mpt.ssa_cnt_m1.in1_AT21) mpt.ssa_cnt_m1.out_AT21))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT21 mpt.ssa_cnt_gt_0.in0_AT21) (= mpt.ssa_cnt_gt_0.out_AT21 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT21 mpt.ssa_cnt_and2.in1_AT21) mpt.ssa_cnt_and2.out_AT21))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT21 mpt.ssa_cnt_and1.in1_AT21) mpt.ssa_cnt_and1.out_AT21))
(assert (=> (= mpt.ssa_cnt.sel_AT21 #b1) (= mpt.ssa_cnt.in1_AT21 mpt.ssa_cnt.out_AT21)))
(assert (=> (= mpt.ssa_cnt.sel_AT21 #b0) (= mpt.ssa_cnt.in0_AT21 mpt.ssa_cnt.out_AT21)))
(assert (= mpt.one.out_AT21 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT21) mpt.not_captured.out_AT21))
(assert (= (bvand mpt.next_cnt_and1.in0_AT21 mpt.next_cnt_and1.in1_AT21) mpt.next_cnt_and1.out_AT21))
(assert (=> (= mpt.next_cnt.sel_AT21 #b1) (= mpt.next_cnt.in1_AT21 mpt.next_cnt.out_AT21)))
(assert (=> (= mpt.next_cnt.sel_AT21 #b0) (= mpt.next_cnt.in0_AT21 mpt.next_cnt.out_AT21)))
(assert (= mpt.depth.out_AT21 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT21 #b1) (= mpt.decr_mux.in1_AT21 mpt.decr_mux.out_AT21)))
(assert (=> (= mpt.decr_mux.sel_AT21 #b0) (= mpt.decr_mux.in0_AT21 mpt.decr_mux.out_AT21)))
(assert (= (bvadd mpt.cnt_p1.in0_AT21 mpt.cnt_p1.in1_AT21) mpt.cnt_p1.out_AT21))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT21 mpt.cnt_lt_depth.in1_AT21) (= mpt.cnt_lt_depth.out_AT21 #b1)))
(assert (= (bvand mp_en.in0_AT21 mp_en.in1_AT21) mp_en.out_AT21))
(assert (=> (not (= magic_packet_eq.in0_AT21 magic_packet_eq.in1_AT21)) (= magic_packet_eq.out_AT21 #b0)))
(assert (=> (= magic_packet_eq.in0_AT21 magic_packet_eq.in1_AT21) (= magic_packet_eq.out_AT21 #b1)))
(assert (= f.zero.out_AT21 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT21 f.wrPtrp1.in1_AT21) f.wrPtrp1.out_AT21))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT21) f.wrPtrSlice.out_AT21))
(assert (=> (= f.wrPtrRst.sel_AT21 #b1) (= f.wrPtrRst.in1_AT21 f.wrPtrRst.out_AT21)))
(assert (=> (= f.wrPtrRst.sel_AT21 #b0) (= f.wrPtrRst.in0_AT21 f.wrPtrRst.out_AT21)))
(assert (=> (= f.wrPtrEn.sel_AT21 #b1) (= f.wrPtrEn.in1_AT21 f.wrPtrEn.out_AT21)))
(assert (=> (= f.wrPtrEn.sel_AT21 #b0) (= f.wrPtrEn.in0_AT21 f.wrPtrEn.out_AT21)))
(assert (= (bvadd f.rdPtrp1.in0_AT21 f.rdPtrp1.in1_AT21) f.rdPtrp1.out_AT21))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT21) f.rdPtrSlice.out_AT21))
(assert (=> (= f.rdPtrRst.sel_AT21 #b1) (= f.rdPtrRst.in1_AT21 f.rdPtrRst.out_AT21)))
(assert (=> (= f.rdPtrRst.sel_AT21 #b0) (= f.rdPtrRst.in0_AT21 f.rdPtrRst.out_AT21)))
(assert (=> (= f.rdPtrEn.sel_AT21 #b1) (= f.rdPtrEn.in1_AT21 f.rdPtrEn.out_AT21)))
(assert (=> (= f.rdPtrEn.sel_AT21 #b0) (= f.rdPtrEn.in0_AT21 f.rdPtrEn.out_AT21)))
(assert (= f.one.out_AT21 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT21) f.notfullEq_1.out_AT21))
(assert (= f.mem.rdata_AT21 (select f.mem.array_AT21 f.mem.raddr_AT21)))
(assert (=> (not (= f.fullEq_2.in0_AT21 f.fullEq_2.in1_AT21)) (= f.fullEq_2.out_AT21 #b0)))
(assert (=> (= f.fullEq_2.in0_AT21 f.fullEq_2.in1_AT21) (= f.fullEq_2.out_AT21 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT21 f.fullEq_1.in1_AT21)) (= f.fullEq_1.out_AT21 #b0)))
(assert (=> (= f.fullEq_1.in0_AT21 f.fullEq_1.in1_AT21) (= f.fullEq_1.out_AT21 #b1)))
(assert (= (bvand f.fullCalc.in0_AT21 f.fullCalc.in1_AT21) f.fullCalc.out_AT21))
(assert (=> (not (= f.emptyEq.in0_AT21 f.emptyEq.in1_AT21)) (= f.emptyEq.out_AT21 #b0)))
(assert (=> (= f.emptyEq.in0_AT21 f.emptyEq.in1_AT21) (= f.emptyEq.out_AT21 #b1)))
(assert (= (bvor en_or_sp.in0_AT21 en_or_sp.in1_AT21) en_or_sp.out_AT21))
(assert (= (bvand data_out_vld_and2.in0_AT21 data_out_vld_and2.in1_AT21) data_out_vld_and2.out_AT21))
(assert (= (bvand data_out_vld_and1.in0_AT21 data_out_vld_and1.in1_AT21) data_out_vld_and1.out_AT21))
(assert (= (bvult cnt_gt_0.in1_AT21 cnt_gt_0.in0_AT21) (= cnt_gt_0.out_AT21 #b1)))
(assert (=> (= _-_state_id_-__AT20 #b10) (= _-_state_id_-__AT21 #b10)))
(assert (=> (= _-_state_id_-__AT20 #b01) (= _-_state_id_-__AT21 #b10)))
(assert (=> (= _-_state_id_-__AT20 #b00) (= _-_state_id_-__AT21 #b01)))
(assert (= mpt.cnt.in_AT20 mpt.cnt.out_AT21))
(assert (= magic_packet.in_AT20 magic_packet.out_AT21))
(assert (= magic_packet.init_AT20 magic_packet.init_AT21))
(assert (= f.wrPtr.in_AT20 f.wrPtr.out_AT21))
(assert (= f.rdPtr.in_AT20 f.rdPtr.out_AT21))
(assert (= f.mem.array_AT21 (ite (= f.mem.wen_AT20 #b1) (store f.mem.array_AT20 f.mem.waddr_AT20 f.mem.wdata_AT20) f.mem.array_AT20)))
(assert (= en.init_AT20 en.init_AT21))
(assert (= en.in_AT20 en.out_AT21))
(push 1)

(assert (not (= self.prop_signal_AT21 #b1)))
(check-sat)

(pop 1)
(declare-fun self.pop_AT22 () (_ BitVec 1))
(declare-fun self.empty_AT22 () (_ BitVec 1))
(declare-fun self.push_AT22 () (_ BitVec 1))
(declare-fun self.full_AT22 () (_ BitVec 1))
(declare-fun self.rst_AT22 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT22 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT22 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT22 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT22 () (_ BitVec 1))
(declare-fun self.start_AT22 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT22 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT22 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT22 () (_ BitVec 1))
(declare-fun self.prop_signal_AT22 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT22 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT22 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT22 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT22 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT22 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT22 () (_ BitVec 1))
(declare-fun mp_en.out_AT22 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT22 () (_ BitVec 1))
(declare-fun self.data_in_AT22 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT22 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT22 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT22 () (_ BitVec 1))
(declare-fun zero.out_AT22 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT22 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT22 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT22 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT22 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT22 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT22 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT22 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT22 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT22 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT22 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT22 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT22 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT22 () (_ BitVec 4))
(declare-fun mpt.one.out_AT22 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT22 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT22 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT22 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT22 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT22 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT22 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT22 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT22 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT22 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT22 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT22 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT22 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT22 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT22 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT22 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT22 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT22 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT22 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT22 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT22 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT22 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT22 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT22 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT22 () (_ BitVec 4))
(declare-fun self.clk_AT22 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT22 () (_ BitVec 1))
(declare-fun not_en.out_AT22 () (_ BitVec 1))
(declare-fun mp_en.in1_AT22 () (_ BitVec 1))
(declare-fun start_and_push.out_AT22 () (_ BitVec 1))
(declare-fun mp_en.in0_AT22 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT22 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT22 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT22 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT22 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT22 () (_ BitVec 8))
(declare-fun magic_packet.in_AT22 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT22 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT22 () (_ BitVec 1))
(declare-fun f.zero.out_AT22 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT22 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT22 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT22 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT22 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT22 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT22 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT22 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT22 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT22 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT22 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT22 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT22 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT22 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT22 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT22 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT22 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT22 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT22 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT22 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT22 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT22 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT22 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT22 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT22 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT22 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT22 () (_ BitVec 4))
(declare-fun f.one.out_AT22 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT22 () (_ BitVec 4))
(declare-fun f.mem.wen_AT22 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT22 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT22 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT22 () (_ BitVec 3))
(declare-fun self.data_out_AT22 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT22 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT22 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT22 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT22 () (_ BitVec 3))
(declare-fun f.mem.clk_AT22 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT22 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT22 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT22 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT22 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT22 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT22 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT22 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT22 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT22 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT22 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT22 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT22 () (_ BitVec 1))
(declare-fun not_en.in_AT22 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT22 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT22 () (_ BitVec 1))
(declare-fun en.in_AT22 () (_ BitVec 1))
(declare-fun en.clk_AT22 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT22 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT22 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT22 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT22 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT22 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT22 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT22 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT22 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT22 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT22 () (_ BitVec 4))
(declare-fun magic_packet.out_AT22 () (_ BitVec 8))
(declare-fun magic_packet.init_AT22 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT22 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT22 () (_ BitVec 4))
(declare-fun f.mem.array_AT22 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT22 () (_ BitVec 1))
(declare-fun en.out_AT22 () (_ BitVec 1))

(assert (=> (= self.empty_AT22 #b1) (= self.pop_AT22 #b0)))
(assert (=> (= self.full_AT22 #b1) (= self.push_AT22 #b0)))
(assert (=> (= _-_state_id_-__AT22 #b10) (and true (= self.rst_AT22 #b0))))
(assert (=> (= _-_state_id_-__AT22 #b01) (and (and (and true (= self.rst_AT22 #b1)) (= self.push_AT22 #b0)) (= self.pop_AT22 #b0))))
(assert (=> (= _-_state_id_-__AT22 #b00) (and (and (and true (= self.rst_AT22 #b1)) (= self.push_AT22 #b0)) (= self.pop_AT22 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT22 ((_ extract 3 3) f.wrPtr.out_AT22)))
(assert (= f.fullEq_1.in0_AT22 ((_ extract 3 3) f.rdPtr.out_AT22)))
(assert (= en.out_AT22 mpt.not_captured.in_AT22))
(assert (= self.start_AT22 start_and_push.in0_AT22))
(assert (= self.push_AT22 start_and_push.in1_AT22))
(assert (= self.push_AT22 mpt.ssa_cnt_and1.in1_AT22))
(assert (= self.prop_signal_AT22 prop_signal_or.out_AT22))
(assert (= self.pop_AT22 mpt.next_cnt_and1.in1_AT22))
(assert (= self.full_AT22 f.fullCalc.out_AT22))
(assert (= self.data_out_vld_AT22 data_out_vld_and2.out_AT22))
(assert (= not_data_out_vld.out_AT22 prop_signal_or.in0_AT22))
(assert (= next_magic_packet.sel_AT22 mp_en.out_AT22))
(assert (= next_magic_packet.in1_AT22 self.data_in_AT22))
(assert (= next_cnt_eq0.out_AT22 data_out_vld_and2.in1_AT22))
(assert (= next_cnt_eq0.in1_AT22 zero.out_AT22))
(assert (= mpt.ssa_cnt_gt_0.out_AT22 mpt.next_cnt_and1.in0_AT22))
(assert (= mpt.ssa_cnt_gt_0.in1_AT22 mpt.zero.out_AT22))
(assert (= mpt.ssa_cnt_and1.out_AT22 mpt.ssa_cnt_and2.in0_AT22))
(assert (= mpt.ssa_cnt.sel_AT22 mpt.ssa_cnt_and2.out_AT22))
(assert (= mpt.ssa_cnt.out_AT22 mpt.ssa_cnt_m1.in0_AT22))
(assert (= mpt.ssa_cnt.out_AT22 mpt.ssa_cnt_gt_0.in0_AT22))
(assert (= mpt.one.out_AT22 mpt.ssa_cnt_m1.in1_AT22))
(assert (= mpt.not_captured.out_AT22 mpt.ssa_cnt_and2.in1_AT22))
(assert (= mpt.next_cnt.sel_AT22 self.rst_AT22))
(assert (= mpt.next_cnt.out_AT22 next_cnt_eq0.in0_AT22))
(assert (= mpt.next_cnt.in1_AT22 mpt.zero.out_AT22))
(assert (= mpt.decr_mux.sel_AT22 mpt.next_cnt_and1.out_AT22))
(assert (= mpt.decr_mux.out_AT22 mpt.next_cnt.in0_AT22))
(assert (= mpt.decr_mux.in1_AT22 mpt.ssa_cnt_m1.out_AT22))
(assert (= mpt.decr_mux.in0_AT22 mpt.ssa_cnt.out_AT22))
(assert (= mpt.cnt_p1.out_AT22 mpt.ssa_cnt.in1_AT22))
(assert (= mpt.cnt_p1.in1_AT22 mpt.one.out_AT22))
(assert (= mpt.cnt_lt_depth.out_AT22 mpt.ssa_cnt_and1.in0_AT22))
(assert (= mpt.cnt_lt_depth.in1_AT22 mpt.depth.out_AT22))
(assert (= mpt.cnt.out_AT22 mpt.ssa_cnt.in0_AT22))
(assert (= mpt.cnt.out_AT22 mpt.cnt_p1.in0_AT22))
(assert (= mpt.cnt.out_AT22 mpt.cnt_lt_depth.in0_AT22))
(assert (= mpt.cnt.in_AT22 mpt.next_cnt.out_AT22))
(assert (= mpt.cnt.clk_AT22 self.clk_AT22))
(assert (= mp_en.in1_AT22 not_en.out_AT22))
(assert (= mp_en.in0_AT22 start_and_push.out_AT22))
(assert (= magic_packet_eq.out_AT22 prop_signal_or.in1_AT22))
(assert (= magic_packet.out_AT22 next_magic_packet.in0_AT22))
(assert (= magic_packet.out_AT22 magic_packet_eq.in0_AT22))
(assert (= magic_packet.in_AT22 next_magic_packet.out_AT22))
(assert (= magic_packet.clk_AT22 self.clk_AT22))
(assert (= f.wrPtrRst.sel_AT22 self.rst_AT22))
(assert (= f.wrPtrRst.in1_AT22 f.zero.out_AT22))
(assert (= f.wrPtrEn.sel_AT22 self.push_AT22))
(assert (= f.wrPtrEn.out_AT22 f.wrPtrRst.in0_AT22))
(assert (= f.wrPtrEn.in1_AT22 f.wrPtrp1.out_AT22))
(assert (= f.wrPtr.out_AT22 f.wrPtrp1.in1_AT22))
(assert (= f.wrPtr.out_AT22 f.wrPtrSlice.in_AT22))
(assert (= f.wrPtr.out_AT22 f.wrPtrEn.in0_AT22))
(assert (= f.wrPtr.in_AT22 f.wrPtrRst.out_AT22))
(assert (= f.wrPtr.clk_AT22 self.clk_AT22))
(assert (= f.rdPtrRst.sel_AT22 self.rst_AT22))
(assert (= f.rdPtrRst.in1_AT22 f.zero.out_AT22))
(assert (= f.rdPtrEn.sel_AT22 self.pop_AT22))
(assert (= f.rdPtrEn.out_AT22 f.rdPtrRst.in0_AT22))
(assert (= f.rdPtrEn.in1_AT22 f.rdPtrp1.out_AT22))
(assert (= f.rdPtr.out_AT22 f.rdPtrp1.in1_AT22))
(assert (= f.rdPtr.out_AT22 f.rdPtrSlice.in_AT22))
(assert (= f.rdPtr.out_AT22 f.rdPtrEn.in0_AT22))
(assert (= f.rdPtr.in_AT22 f.rdPtrRst.out_AT22))
(assert (= f.rdPtr.clk_AT22 self.clk_AT22))
(assert (= f.one.out_AT22 f.wrPtrp1.in0_AT22))
(assert (= f.one.out_AT22 f.rdPtrp1.in0_AT22))
(assert (= f.mem.wen_AT22 self.push_AT22))
(assert (= f.mem.wdata_AT22 self.data_in_AT22))
(assert (= f.mem.waddr_AT22 f.wrPtrSlice.out_AT22))
(assert (= f.mem.rdata_AT22 self.data_out_AT22))
(assert (= f.mem.rdata_AT22 magic_packet_eq.in1_AT22))
(assert (= f.mem.raddr_AT22 f.rdPtrSlice.out_AT22))
(assert (= f.mem.clk_AT22 self.clk_AT22))
(assert (= f.fullEq_2.out_AT22 f.fullCalc.in1_AT22))
(assert (= f.fullEq_2.in1_AT22 f.wrPtrSlice.out_AT22))
(assert (= f.fullEq_2.in0_AT22 f.rdPtrSlice.out_AT22))
(assert (= f.fullEq_1.out_AT22 f.notfullEq_1.in_AT22))
(assert (= f.fullCalc.in0_AT22 f.notfullEq_1.out_AT22))
(assert (= f.emptyEq.out_AT22 self.empty_AT22))
(assert (= f.emptyEq.in1_AT22 f.wrPtr.out_AT22))
(assert (= f.emptyEq.in0_AT22 f.rdPtr.out_AT22))
(assert (= en_or_sp.in1_AT22 start_and_push.out_AT22))
(assert (= en.out_AT22 not_en.in_AT22))
(assert (= en.out_AT22 en_or_sp.in0_AT22))
(assert (= en.in_AT22 en_or_sp.out_AT22))
(assert (= en.clk_AT22 self.clk_AT22))
(assert (= data_out_vld_and2.out_AT22 not_data_out_vld.in_AT22))
(assert (= data_out_vld_and1.out_AT22 data_out_vld_and2.in0_AT22))
(assert (= data_out_vld_and1.in0_AT22 en.out_AT22))
(assert (= cnt_gt_0.out_AT22 data_out_vld_and1.in1_AT22))
(assert (= cnt_gt_0.in1_AT22 zero.out_AT22))
(assert (= cnt_gt_0.in0_AT22 mpt.cnt.out_AT22))
(assert (= self.clk_AT22 #b0))
(assert (= zero.out_AT22 #b0000))
(assert (= (bvand start_and_push.in0_AT22 start_and_push.in1_AT22) start_and_push.out_AT22))
(assert (= (bvor prop_signal_or.in0_AT22 prop_signal_or.in1_AT22) prop_signal_or.out_AT22))
(assert (= (bvnot not_en.in_AT22) not_en.out_AT22))
(assert (= (bvnot not_data_out_vld.in_AT22) not_data_out_vld.out_AT22))
(assert (=> (= next_magic_packet.sel_AT22 #b1) (= next_magic_packet.in1_AT22 next_magic_packet.out_AT22)))
(assert (=> (= next_magic_packet.sel_AT22 #b0) (= next_magic_packet.in0_AT22 next_magic_packet.out_AT22)))
(assert (=> (not (= next_cnt_eq0.in0_AT22 next_cnt_eq0.in1_AT22)) (= next_cnt_eq0.out_AT22 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT22 next_cnt_eq0.in1_AT22) (= next_cnt_eq0.out_AT22 #b1)))
(assert (= mpt.zero.out_AT22 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT22 mpt.ssa_cnt_m1.in1_AT22) mpt.ssa_cnt_m1.out_AT22))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT22 mpt.ssa_cnt_gt_0.in0_AT22) (= mpt.ssa_cnt_gt_0.out_AT22 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT22 mpt.ssa_cnt_and2.in1_AT22) mpt.ssa_cnt_and2.out_AT22))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT22 mpt.ssa_cnt_and1.in1_AT22) mpt.ssa_cnt_and1.out_AT22))
(assert (=> (= mpt.ssa_cnt.sel_AT22 #b1) (= mpt.ssa_cnt.in1_AT22 mpt.ssa_cnt.out_AT22)))
(assert (=> (= mpt.ssa_cnt.sel_AT22 #b0) (= mpt.ssa_cnt.in0_AT22 mpt.ssa_cnt.out_AT22)))
(assert (= mpt.one.out_AT22 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT22) mpt.not_captured.out_AT22))
(assert (= (bvand mpt.next_cnt_and1.in0_AT22 mpt.next_cnt_and1.in1_AT22) mpt.next_cnt_and1.out_AT22))
(assert (=> (= mpt.next_cnt.sel_AT22 #b1) (= mpt.next_cnt.in1_AT22 mpt.next_cnt.out_AT22)))
(assert (=> (= mpt.next_cnt.sel_AT22 #b0) (= mpt.next_cnt.in0_AT22 mpt.next_cnt.out_AT22)))
(assert (= mpt.depth.out_AT22 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT22 #b1) (= mpt.decr_mux.in1_AT22 mpt.decr_mux.out_AT22)))
(assert (=> (= mpt.decr_mux.sel_AT22 #b0) (= mpt.decr_mux.in0_AT22 mpt.decr_mux.out_AT22)))
(assert (= (bvadd mpt.cnt_p1.in0_AT22 mpt.cnt_p1.in1_AT22) mpt.cnt_p1.out_AT22))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT22 mpt.cnt_lt_depth.in1_AT22) (= mpt.cnt_lt_depth.out_AT22 #b1)))
(assert (= (bvand mp_en.in0_AT22 mp_en.in1_AT22) mp_en.out_AT22))
(assert (=> (not (= magic_packet_eq.in0_AT22 magic_packet_eq.in1_AT22)) (= magic_packet_eq.out_AT22 #b0)))
(assert (=> (= magic_packet_eq.in0_AT22 magic_packet_eq.in1_AT22) (= magic_packet_eq.out_AT22 #b1)))
(assert (= f.zero.out_AT22 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT22 f.wrPtrp1.in1_AT22) f.wrPtrp1.out_AT22))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT22) f.wrPtrSlice.out_AT22))
(assert (=> (= f.wrPtrRst.sel_AT22 #b1) (= f.wrPtrRst.in1_AT22 f.wrPtrRst.out_AT22)))
(assert (=> (= f.wrPtrRst.sel_AT22 #b0) (= f.wrPtrRst.in0_AT22 f.wrPtrRst.out_AT22)))
(assert (=> (= f.wrPtrEn.sel_AT22 #b1) (= f.wrPtrEn.in1_AT22 f.wrPtrEn.out_AT22)))
(assert (=> (= f.wrPtrEn.sel_AT22 #b0) (= f.wrPtrEn.in0_AT22 f.wrPtrEn.out_AT22)))
(assert (= (bvadd f.rdPtrp1.in0_AT22 f.rdPtrp1.in1_AT22) f.rdPtrp1.out_AT22))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT22) f.rdPtrSlice.out_AT22))
(assert (=> (= f.rdPtrRst.sel_AT22 #b1) (= f.rdPtrRst.in1_AT22 f.rdPtrRst.out_AT22)))
(assert (=> (= f.rdPtrRst.sel_AT22 #b0) (= f.rdPtrRst.in0_AT22 f.rdPtrRst.out_AT22)))
(assert (=> (= f.rdPtrEn.sel_AT22 #b1) (= f.rdPtrEn.in1_AT22 f.rdPtrEn.out_AT22)))
(assert (=> (= f.rdPtrEn.sel_AT22 #b0) (= f.rdPtrEn.in0_AT22 f.rdPtrEn.out_AT22)))
(assert (= f.one.out_AT22 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT22) f.notfullEq_1.out_AT22))
(assert (= f.mem.rdata_AT22 (select f.mem.array_AT22 f.mem.raddr_AT22)))
(assert (=> (not (= f.fullEq_2.in0_AT22 f.fullEq_2.in1_AT22)) (= f.fullEq_2.out_AT22 #b0)))
(assert (=> (= f.fullEq_2.in0_AT22 f.fullEq_2.in1_AT22) (= f.fullEq_2.out_AT22 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT22 f.fullEq_1.in1_AT22)) (= f.fullEq_1.out_AT22 #b0)))
(assert (=> (= f.fullEq_1.in0_AT22 f.fullEq_1.in1_AT22) (= f.fullEq_1.out_AT22 #b1)))
(assert (= (bvand f.fullCalc.in0_AT22 f.fullCalc.in1_AT22) f.fullCalc.out_AT22))
(assert (=> (not (= f.emptyEq.in0_AT22 f.emptyEq.in1_AT22)) (= f.emptyEq.out_AT22 #b0)))
(assert (=> (= f.emptyEq.in0_AT22 f.emptyEq.in1_AT22) (= f.emptyEq.out_AT22 #b1)))
(assert (= (bvor en_or_sp.in0_AT22 en_or_sp.in1_AT22) en_or_sp.out_AT22))
(assert (= (bvand data_out_vld_and2.in0_AT22 data_out_vld_and2.in1_AT22) data_out_vld_and2.out_AT22))
(assert (= (bvand data_out_vld_and1.in0_AT22 data_out_vld_and1.in1_AT22) data_out_vld_and1.out_AT22))
(assert (= (bvult cnt_gt_0.in1_AT22 cnt_gt_0.in0_AT22) (= cnt_gt_0.out_AT22 #b1)))
(assert (=> (= _-_state_id_-__AT21 #b10) (= _-_state_id_-__AT22 #b10)))
(assert (=> (= _-_state_id_-__AT21 #b01) (= _-_state_id_-__AT22 #b10)))
(assert (=> (= _-_state_id_-__AT21 #b00) (= _-_state_id_-__AT22 #b01)))
(assert (= mpt.cnt.in_AT21 mpt.cnt.out_AT22))
(assert (= magic_packet.in_AT21 magic_packet.out_AT22))
(assert (= magic_packet.init_AT21 magic_packet.init_AT22))
(assert (= f.wrPtr.in_AT21 f.wrPtr.out_AT22))
(assert (= f.rdPtr.in_AT21 f.rdPtr.out_AT22))
(assert (= f.mem.array_AT22 (ite (= f.mem.wen_AT21 #b1) (store f.mem.array_AT21 f.mem.waddr_AT21 f.mem.wdata_AT21) f.mem.array_AT21)))
(assert (= en.init_AT21 en.init_AT22))
(assert (= en.in_AT21 en.out_AT22))
(push 1)

(assert (not (= self.prop_signal_AT22 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT23 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT23 () (_ BitVec 4))
(declare-fun magic_packet.out_AT23 () (_ BitVec 8))
(declare-fun magic_packet.init_AT23 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT23 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT23 () (_ BitVec 4))
(declare-fun f.mem.array_AT23 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT23 () (_ BitVec 1))
(declare-fun en.out_AT23 () (_ BitVec 1))
(declare-fun self.pop_AT23 () (_ BitVec 1))
(declare-fun self.empty_AT23 () (_ BitVec 1))
(declare-fun self.push_AT23 () (_ BitVec 1))
(declare-fun self.full_AT23 () (_ BitVec 1))
(declare-fun self.rst_AT23 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT23 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT23 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT23 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT23 () (_ BitVec 1))
(declare-fun self.start_AT23 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT23 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT23 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT23 () (_ BitVec 1))
(declare-fun self.prop_signal_AT23 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT23 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT23 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT23 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT23 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT23 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT23 () (_ BitVec 1))
(declare-fun mp_en.out_AT23 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT23 () (_ BitVec 1))
(declare-fun self.data_in_AT23 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT23 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT23 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT23 () (_ BitVec 1))
(declare-fun zero.out_AT23 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT23 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT23 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT23 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT23 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT23 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT23 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT23 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT23 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT23 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT23 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT23 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT23 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT23 () (_ BitVec 4))
(declare-fun mpt.one.out_AT23 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT23 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT23 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT23 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT23 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT23 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT23 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT23 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT23 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT23 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT23 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT23 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT23 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT23 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT23 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT23 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT23 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT23 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT23 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT23 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT23 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT23 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT23 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT23 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT23 () (_ BitVec 4))
(declare-fun self.clk_AT23 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT23 () (_ BitVec 1))
(declare-fun not_en.out_AT23 () (_ BitVec 1))
(declare-fun mp_en.in1_AT23 () (_ BitVec 1))
(declare-fun start_and_push.out_AT23 () (_ BitVec 1))
(declare-fun mp_en.in0_AT23 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT23 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT23 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT23 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT23 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT23 () (_ BitVec 8))
(declare-fun magic_packet.in_AT23 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT23 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT23 () (_ BitVec 1))
(declare-fun f.zero.out_AT23 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT23 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT23 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT23 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT23 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT23 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT23 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT23 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT23 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT23 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT23 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT23 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT23 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT23 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT23 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT23 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT23 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT23 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT23 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT23 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT23 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT23 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT23 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT23 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT23 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT23 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT23 () (_ BitVec 4))
(declare-fun f.one.out_AT23 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT23 () (_ BitVec 4))
(declare-fun f.mem.wen_AT23 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT23 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT23 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT23 () (_ BitVec 3))
(declare-fun self.data_out_AT23 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT23 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT23 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT23 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT23 () (_ BitVec 3))
(declare-fun f.mem.clk_AT23 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT23 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT23 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT23 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT23 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT23 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT23 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT23 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT23 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT23 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT23 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT23 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT23 () (_ BitVec 1))
(declare-fun not_en.in_AT23 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT23 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT23 () (_ BitVec 1))
(declare-fun en.in_AT23 () (_ BitVec 1))
(declare-fun en.clk_AT23 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT23 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT23 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT23 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT23 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT23 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT23 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT23 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT23 () (_ BitVec 4))

(assert (=> (= self.empty_AT23 #b1) (= self.pop_AT23 #b0)))
(assert (=> (= self.full_AT23 #b1) (= self.push_AT23 #b0)))
(assert (=> (= _-_state_id_-__AT23 #b10) (and true (= self.rst_AT23 #b0))))
(assert (=> (= _-_state_id_-__AT23 #b01) (and (and (and true (= self.rst_AT23 #b1)) (= self.push_AT23 #b0)) (= self.pop_AT23 #b0))))
(assert (=> (= _-_state_id_-__AT23 #b00) (and (and (and true (= self.rst_AT23 #b1)) (= self.push_AT23 #b0)) (= self.pop_AT23 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT23 ((_ extract 3 3) f.wrPtr.out_AT23)))
(assert (= f.fullEq_1.in0_AT23 ((_ extract 3 3) f.rdPtr.out_AT23)))
(assert (= en.out_AT23 mpt.not_captured.in_AT23))
(assert (= self.start_AT23 start_and_push.in0_AT23))
(assert (= self.push_AT23 start_and_push.in1_AT23))
(assert (= self.push_AT23 mpt.ssa_cnt_and1.in1_AT23))
(assert (= self.prop_signal_AT23 prop_signal_or.out_AT23))
(assert (= self.pop_AT23 mpt.next_cnt_and1.in1_AT23))
(assert (= self.full_AT23 f.fullCalc.out_AT23))
(assert (= self.data_out_vld_AT23 data_out_vld_and2.out_AT23))
(assert (= not_data_out_vld.out_AT23 prop_signal_or.in0_AT23))
(assert (= next_magic_packet.sel_AT23 mp_en.out_AT23))
(assert (= next_magic_packet.in1_AT23 self.data_in_AT23))
(assert (= next_cnt_eq0.out_AT23 data_out_vld_and2.in1_AT23))
(assert (= next_cnt_eq0.in1_AT23 zero.out_AT23))
(assert (= mpt.ssa_cnt_gt_0.out_AT23 mpt.next_cnt_and1.in0_AT23))
(assert (= mpt.ssa_cnt_gt_0.in1_AT23 mpt.zero.out_AT23))
(assert (= mpt.ssa_cnt_and1.out_AT23 mpt.ssa_cnt_and2.in0_AT23))
(assert (= mpt.ssa_cnt.sel_AT23 mpt.ssa_cnt_and2.out_AT23))
(assert (= mpt.ssa_cnt.out_AT23 mpt.ssa_cnt_m1.in0_AT23))
(assert (= mpt.ssa_cnt.out_AT23 mpt.ssa_cnt_gt_0.in0_AT23))
(assert (= mpt.one.out_AT23 mpt.ssa_cnt_m1.in1_AT23))
(assert (= mpt.not_captured.out_AT23 mpt.ssa_cnt_and2.in1_AT23))
(assert (= mpt.next_cnt.sel_AT23 self.rst_AT23))
(assert (= mpt.next_cnt.out_AT23 next_cnt_eq0.in0_AT23))
(assert (= mpt.next_cnt.in1_AT23 mpt.zero.out_AT23))
(assert (= mpt.decr_mux.sel_AT23 mpt.next_cnt_and1.out_AT23))
(assert (= mpt.decr_mux.out_AT23 mpt.next_cnt.in0_AT23))
(assert (= mpt.decr_mux.in1_AT23 mpt.ssa_cnt_m1.out_AT23))
(assert (= mpt.decr_mux.in0_AT23 mpt.ssa_cnt.out_AT23))
(assert (= mpt.cnt_p1.out_AT23 mpt.ssa_cnt.in1_AT23))
(assert (= mpt.cnt_p1.in1_AT23 mpt.one.out_AT23))
(assert (= mpt.cnt_lt_depth.out_AT23 mpt.ssa_cnt_and1.in0_AT23))
(assert (= mpt.cnt_lt_depth.in1_AT23 mpt.depth.out_AT23))
(assert (= mpt.cnt.out_AT23 mpt.ssa_cnt.in0_AT23))
(assert (= mpt.cnt.out_AT23 mpt.cnt_p1.in0_AT23))
(assert (= mpt.cnt.out_AT23 mpt.cnt_lt_depth.in0_AT23))
(assert (= mpt.cnt.in_AT23 mpt.next_cnt.out_AT23))
(assert (= mpt.cnt.clk_AT23 self.clk_AT23))
(assert (= mp_en.in1_AT23 not_en.out_AT23))
(assert (= mp_en.in0_AT23 start_and_push.out_AT23))
(assert (= magic_packet_eq.out_AT23 prop_signal_or.in1_AT23))
(assert (= magic_packet.out_AT23 next_magic_packet.in0_AT23))
(assert (= magic_packet.out_AT23 magic_packet_eq.in0_AT23))
(assert (= magic_packet.in_AT23 next_magic_packet.out_AT23))
(assert (= magic_packet.clk_AT23 self.clk_AT23))
(assert (= f.wrPtrRst.sel_AT23 self.rst_AT23))
(assert (= f.wrPtrRst.in1_AT23 f.zero.out_AT23))
(assert (= f.wrPtrEn.sel_AT23 self.push_AT23))
(assert (= f.wrPtrEn.out_AT23 f.wrPtrRst.in0_AT23))
(assert (= f.wrPtrEn.in1_AT23 f.wrPtrp1.out_AT23))
(assert (= f.wrPtr.out_AT23 f.wrPtrp1.in1_AT23))
(assert (= f.wrPtr.out_AT23 f.wrPtrSlice.in_AT23))
(assert (= f.wrPtr.out_AT23 f.wrPtrEn.in0_AT23))
(assert (= f.wrPtr.in_AT23 f.wrPtrRst.out_AT23))
(assert (= f.wrPtr.clk_AT23 self.clk_AT23))
(assert (= f.rdPtrRst.sel_AT23 self.rst_AT23))
(assert (= f.rdPtrRst.in1_AT23 f.zero.out_AT23))
(assert (= f.rdPtrEn.sel_AT23 self.pop_AT23))
(assert (= f.rdPtrEn.out_AT23 f.rdPtrRst.in0_AT23))
(assert (= f.rdPtrEn.in1_AT23 f.rdPtrp1.out_AT23))
(assert (= f.rdPtr.out_AT23 f.rdPtrp1.in1_AT23))
(assert (= f.rdPtr.out_AT23 f.rdPtrSlice.in_AT23))
(assert (= f.rdPtr.out_AT23 f.rdPtrEn.in0_AT23))
(assert (= f.rdPtr.in_AT23 f.rdPtrRst.out_AT23))
(assert (= f.rdPtr.clk_AT23 self.clk_AT23))
(assert (= f.one.out_AT23 f.wrPtrp1.in0_AT23))
(assert (= f.one.out_AT23 f.rdPtrp1.in0_AT23))
(assert (= f.mem.wen_AT23 self.push_AT23))
(assert (= f.mem.wdata_AT23 self.data_in_AT23))
(assert (= f.mem.waddr_AT23 f.wrPtrSlice.out_AT23))
(assert (= f.mem.rdata_AT23 self.data_out_AT23))
(assert (= f.mem.rdata_AT23 magic_packet_eq.in1_AT23))
(assert (= f.mem.raddr_AT23 f.rdPtrSlice.out_AT23))
(assert (= f.mem.clk_AT23 self.clk_AT23))
(assert (= f.fullEq_2.out_AT23 f.fullCalc.in1_AT23))
(assert (= f.fullEq_2.in1_AT23 f.wrPtrSlice.out_AT23))
(assert (= f.fullEq_2.in0_AT23 f.rdPtrSlice.out_AT23))
(assert (= f.fullEq_1.out_AT23 f.notfullEq_1.in_AT23))
(assert (= f.fullCalc.in0_AT23 f.notfullEq_1.out_AT23))
(assert (= f.emptyEq.out_AT23 self.empty_AT23))
(assert (= f.emptyEq.in1_AT23 f.wrPtr.out_AT23))
(assert (= f.emptyEq.in0_AT23 f.rdPtr.out_AT23))
(assert (= en_or_sp.in1_AT23 start_and_push.out_AT23))
(assert (= en.out_AT23 not_en.in_AT23))
(assert (= en.out_AT23 en_or_sp.in0_AT23))
(assert (= en.in_AT23 en_or_sp.out_AT23))
(assert (= en.clk_AT23 self.clk_AT23))
(assert (= data_out_vld_and2.out_AT23 not_data_out_vld.in_AT23))
(assert (= data_out_vld_and1.out_AT23 data_out_vld_and2.in0_AT23))
(assert (= data_out_vld_and1.in0_AT23 en.out_AT23))
(assert (= cnt_gt_0.out_AT23 data_out_vld_and1.in1_AT23))
(assert (= cnt_gt_0.in1_AT23 zero.out_AT23))
(assert (= cnt_gt_0.in0_AT23 mpt.cnt.out_AT23))
(assert (= self.clk_AT23 #b0))
(assert (= zero.out_AT23 #b0000))
(assert (= (bvand start_and_push.in0_AT23 start_and_push.in1_AT23) start_and_push.out_AT23))
(assert (= (bvor prop_signal_or.in0_AT23 prop_signal_or.in1_AT23) prop_signal_or.out_AT23))
(assert (= (bvnot not_en.in_AT23) not_en.out_AT23))
(assert (= (bvnot not_data_out_vld.in_AT23) not_data_out_vld.out_AT23))
(assert (=> (= next_magic_packet.sel_AT23 #b1) (= next_magic_packet.in1_AT23 next_magic_packet.out_AT23)))
(assert (=> (= next_magic_packet.sel_AT23 #b0) (= next_magic_packet.in0_AT23 next_magic_packet.out_AT23)))
(assert (=> (not (= next_cnt_eq0.in0_AT23 next_cnt_eq0.in1_AT23)) (= next_cnt_eq0.out_AT23 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT23 next_cnt_eq0.in1_AT23) (= next_cnt_eq0.out_AT23 #b1)))
(assert (= mpt.zero.out_AT23 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT23 mpt.ssa_cnt_m1.in1_AT23) mpt.ssa_cnt_m1.out_AT23))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT23 mpt.ssa_cnt_gt_0.in0_AT23) (= mpt.ssa_cnt_gt_0.out_AT23 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT23 mpt.ssa_cnt_and2.in1_AT23) mpt.ssa_cnt_and2.out_AT23))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT23 mpt.ssa_cnt_and1.in1_AT23) mpt.ssa_cnt_and1.out_AT23))
(assert (=> (= mpt.ssa_cnt.sel_AT23 #b1) (= mpt.ssa_cnt.in1_AT23 mpt.ssa_cnt.out_AT23)))
(assert (=> (= mpt.ssa_cnt.sel_AT23 #b0) (= mpt.ssa_cnt.in0_AT23 mpt.ssa_cnt.out_AT23)))
(assert (= mpt.one.out_AT23 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT23) mpt.not_captured.out_AT23))
(assert (= (bvand mpt.next_cnt_and1.in0_AT23 mpt.next_cnt_and1.in1_AT23) mpt.next_cnt_and1.out_AT23))
(assert (=> (= mpt.next_cnt.sel_AT23 #b1) (= mpt.next_cnt.in1_AT23 mpt.next_cnt.out_AT23)))
(assert (=> (= mpt.next_cnt.sel_AT23 #b0) (= mpt.next_cnt.in0_AT23 mpt.next_cnt.out_AT23)))
(assert (= mpt.depth.out_AT23 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT23 #b1) (= mpt.decr_mux.in1_AT23 mpt.decr_mux.out_AT23)))
(assert (=> (= mpt.decr_mux.sel_AT23 #b0) (= mpt.decr_mux.in0_AT23 mpt.decr_mux.out_AT23)))
(assert (= (bvadd mpt.cnt_p1.in0_AT23 mpt.cnt_p1.in1_AT23) mpt.cnt_p1.out_AT23))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT23 mpt.cnt_lt_depth.in1_AT23) (= mpt.cnt_lt_depth.out_AT23 #b1)))
(assert (= (bvand mp_en.in0_AT23 mp_en.in1_AT23) mp_en.out_AT23))
(assert (=> (not (= magic_packet_eq.in0_AT23 magic_packet_eq.in1_AT23)) (= magic_packet_eq.out_AT23 #b0)))
(assert (=> (= magic_packet_eq.in0_AT23 magic_packet_eq.in1_AT23) (= magic_packet_eq.out_AT23 #b1)))
(assert (= f.zero.out_AT23 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT23 f.wrPtrp1.in1_AT23) f.wrPtrp1.out_AT23))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT23) f.wrPtrSlice.out_AT23))
(assert (=> (= f.wrPtrRst.sel_AT23 #b1) (= f.wrPtrRst.in1_AT23 f.wrPtrRst.out_AT23)))
(assert (=> (= f.wrPtrRst.sel_AT23 #b0) (= f.wrPtrRst.in0_AT23 f.wrPtrRst.out_AT23)))
(assert (=> (= f.wrPtrEn.sel_AT23 #b1) (= f.wrPtrEn.in1_AT23 f.wrPtrEn.out_AT23)))
(assert (=> (= f.wrPtrEn.sel_AT23 #b0) (= f.wrPtrEn.in0_AT23 f.wrPtrEn.out_AT23)))
(assert (= (bvadd f.rdPtrp1.in0_AT23 f.rdPtrp1.in1_AT23) f.rdPtrp1.out_AT23))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT23) f.rdPtrSlice.out_AT23))
(assert (=> (= f.rdPtrRst.sel_AT23 #b1) (= f.rdPtrRst.in1_AT23 f.rdPtrRst.out_AT23)))
(assert (=> (= f.rdPtrRst.sel_AT23 #b0) (= f.rdPtrRst.in0_AT23 f.rdPtrRst.out_AT23)))
(assert (=> (= f.rdPtrEn.sel_AT23 #b1) (= f.rdPtrEn.in1_AT23 f.rdPtrEn.out_AT23)))
(assert (=> (= f.rdPtrEn.sel_AT23 #b0) (= f.rdPtrEn.in0_AT23 f.rdPtrEn.out_AT23)))
(assert (= f.one.out_AT23 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT23) f.notfullEq_1.out_AT23))
(assert (= f.mem.rdata_AT23 (select f.mem.array_AT23 f.mem.raddr_AT23)))
(assert (=> (not (= f.fullEq_2.in0_AT23 f.fullEq_2.in1_AT23)) (= f.fullEq_2.out_AT23 #b0)))
(assert (=> (= f.fullEq_2.in0_AT23 f.fullEq_2.in1_AT23) (= f.fullEq_2.out_AT23 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT23 f.fullEq_1.in1_AT23)) (= f.fullEq_1.out_AT23 #b0)))
(assert (=> (= f.fullEq_1.in0_AT23 f.fullEq_1.in1_AT23) (= f.fullEq_1.out_AT23 #b1)))
(assert (= (bvand f.fullCalc.in0_AT23 f.fullCalc.in1_AT23) f.fullCalc.out_AT23))
(assert (=> (not (= f.emptyEq.in0_AT23 f.emptyEq.in1_AT23)) (= f.emptyEq.out_AT23 #b0)))
(assert (=> (= f.emptyEq.in0_AT23 f.emptyEq.in1_AT23) (= f.emptyEq.out_AT23 #b1)))
(assert (= (bvor en_or_sp.in0_AT23 en_or_sp.in1_AT23) en_or_sp.out_AT23))
(assert (= (bvand data_out_vld_and2.in0_AT23 data_out_vld_and2.in1_AT23) data_out_vld_and2.out_AT23))
(assert (= (bvand data_out_vld_and1.in0_AT23 data_out_vld_and1.in1_AT23) data_out_vld_and1.out_AT23))
(assert (= (bvult cnt_gt_0.in1_AT23 cnt_gt_0.in0_AT23) (= cnt_gt_0.out_AT23 #b1)))
(assert (=> (= _-_state_id_-__AT22 #b10) (= _-_state_id_-__AT23 #b10)))
(assert (=> (= _-_state_id_-__AT22 #b01) (= _-_state_id_-__AT23 #b10)))
(assert (=> (= _-_state_id_-__AT22 #b00) (= _-_state_id_-__AT23 #b01)))
(assert (= mpt.cnt.in_AT22 mpt.cnt.out_AT23))
(assert (= magic_packet.in_AT22 magic_packet.out_AT23))
(assert (= magic_packet.init_AT22 magic_packet.init_AT23))
(assert (= f.wrPtr.in_AT22 f.wrPtr.out_AT23))
(assert (= f.rdPtr.in_AT22 f.rdPtr.out_AT23))
(assert (= f.mem.array_AT23 (ite (= f.mem.wen_AT22 #b1) (store f.mem.array_AT22 f.mem.waddr_AT22 f.mem.wdata_AT22) f.mem.array_AT22)))
(assert (= en.init_AT22 en.init_AT23))
(assert (= en.in_AT22 en.out_AT23))
(push 1)

(assert (not (= self.prop_signal_AT23 #b1)))
(check-sat)

(pop 1)
(declare-fun cnt_gt_0.in1_AT24 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT24 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT24 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT24 () (_ BitVec 4))
(declare-fun magic_packet.out_AT24 () (_ BitVec 8))
(declare-fun magic_packet.init_AT24 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT24 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT24 () (_ BitVec 4))
(declare-fun f.mem.array_AT24 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT24 () (_ BitVec 1))
(declare-fun en.out_AT24 () (_ BitVec 1))
(declare-fun self.pop_AT24 () (_ BitVec 1))
(declare-fun self.empty_AT24 () (_ BitVec 1))
(declare-fun self.push_AT24 () (_ BitVec 1))
(declare-fun self.full_AT24 () (_ BitVec 1))
(declare-fun self.rst_AT24 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT24 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT24 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT24 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT24 () (_ BitVec 1))
(declare-fun self.start_AT24 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT24 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT24 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT24 () (_ BitVec 1))
(declare-fun self.prop_signal_AT24 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT24 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT24 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT24 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT24 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT24 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT24 () (_ BitVec 1))
(declare-fun mp_en.out_AT24 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT24 () (_ BitVec 1))
(declare-fun self.data_in_AT24 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT24 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT24 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT24 () (_ BitVec 1))
(declare-fun zero.out_AT24 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT24 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT24 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT24 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT24 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT24 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT24 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT24 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT24 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT24 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT24 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT24 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT24 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT24 () (_ BitVec 4))
(declare-fun mpt.one.out_AT24 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT24 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT24 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT24 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT24 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT24 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT24 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT24 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT24 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT24 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT24 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT24 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT24 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT24 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT24 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT24 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT24 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT24 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT24 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT24 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT24 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT24 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT24 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT24 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT24 () (_ BitVec 4))
(declare-fun self.clk_AT24 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT24 () (_ BitVec 1))
(declare-fun not_en.out_AT24 () (_ BitVec 1))
(declare-fun mp_en.in1_AT24 () (_ BitVec 1))
(declare-fun start_and_push.out_AT24 () (_ BitVec 1))
(declare-fun mp_en.in0_AT24 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT24 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT24 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT24 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT24 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT24 () (_ BitVec 8))
(declare-fun magic_packet.in_AT24 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT24 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT24 () (_ BitVec 1))
(declare-fun f.zero.out_AT24 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT24 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT24 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT24 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT24 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT24 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT24 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT24 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT24 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT24 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT24 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT24 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT24 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT24 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT24 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT24 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT24 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT24 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT24 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT24 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT24 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT24 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT24 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT24 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT24 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT24 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT24 () (_ BitVec 4))
(declare-fun f.one.out_AT24 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT24 () (_ BitVec 4))
(declare-fun f.mem.wen_AT24 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT24 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT24 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT24 () (_ BitVec 3))
(declare-fun self.data_out_AT24 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT24 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT24 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT24 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT24 () (_ BitVec 3))
(declare-fun f.mem.clk_AT24 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT24 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT24 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT24 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT24 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT24 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT24 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT24 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT24 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT24 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT24 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT24 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT24 () (_ BitVec 1))
(declare-fun not_en.in_AT24 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT24 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT24 () (_ BitVec 1))
(declare-fun en.in_AT24 () (_ BitVec 1))
(declare-fun en.clk_AT24 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT24 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT24 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT24 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT24 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT24 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT24 () (_ BitVec 1))

(assert (=> (= self.empty_AT24 #b1) (= self.pop_AT24 #b0)))
(assert (=> (= self.full_AT24 #b1) (= self.push_AT24 #b0)))
(assert (=> (= _-_state_id_-__AT24 #b10) (and true (= self.rst_AT24 #b0))))
(assert (=> (= _-_state_id_-__AT24 #b01) (and (and (and true (= self.rst_AT24 #b1)) (= self.push_AT24 #b0)) (= self.pop_AT24 #b0))))
(assert (=> (= _-_state_id_-__AT24 #b00) (and (and (and true (= self.rst_AT24 #b1)) (= self.push_AT24 #b0)) (= self.pop_AT24 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT24 ((_ extract 3 3) f.wrPtr.out_AT24)))
(assert (= f.fullEq_1.in0_AT24 ((_ extract 3 3) f.rdPtr.out_AT24)))
(assert (= en.out_AT24 mpt.not_captured.in_AT24))
(assert (= self.start_AT24 start_and_push.in0_AT24))
(assert (= self.push_AT24 start_and_push.in1_AT24))
(assert (= self.push_AT24 mpt.ssa_cnt_and1.in1_AT24))
(assert (= self.prop_signal_AT24 prop_signal_or.out_AT24))
(assert (= self.pop_AT24 mpt.next_cnt_and1.in1_AT24))
(assert (= self.full_AT24 f.fullCalc.out_AT24))
(assert (= self.data_out_vld_AT24 data_out_vld_and2.out_AT24))
(assert (= not_data_out_vld.out_AT24 prop_signal_or.in0_AT24))
(assert (= next_magic_packet.sel_AT24 mp_en.out_AT24))
(assert (= next_magic_packet.in1_AT24 self.data_in_AT24))
(assert (= next_cnt_eq0.out_AT24 data_out_vld_and2.in1_AT24))
(assert (= next_cnt_eq0.in1_AT24 zero.out_AT24))
(assert (= mpt.ssa_cnt_gt_0.out_AT24 mpt.next_cnt_and1.in0_AT24))
(assert (= mpt.ssa_cnt_gt_0.in1_AT24 mpt.zero.out_AT24))
(assert (= mpt.ssa_cnt_and1.out_AT24 mpt.ssa_cnt_and2.in0_AT24))
(assert (= mpt.ssa_cnt.sel_AT24 mpt.ssa_cnt_and2.out_AT24))
(assert (= mpt.ssa_cnt.out_AT24 mpt.ssa_cnt_m1.in0_AT24))
(assert (= mpt.ssa_cnt.out_AT24 mpt.ssa_cnt_gt_0.in0_AT24))
(assert (= mpt.one.out_AT24 mpt.ssa_cnt_m1.in1_AT24))
(assert (= mpt.not_captured.out_AT24 mpt.ssa_cnt_and2.in1_AT24))
(assert (= mpt.next_cnt.sel_AT24 self.rst_AT24))
(assert (= mpt.next_cnt.out_AT24 next_cnt_eq0.in0_AT24))
(assert (= mpt.next_cnt.in1_AT24 mpt.zero.out_AT24))
(assert (= mpt.decr_mux.sel_AT24 mpt.next_cnt_and1.out_AT24))
(assert (= mpt.decr_mux.out_AT24 mpt.next_cnt.in0_AT24))
(assert (= mpt.decr_mux.in1_AT24 mpt.ssa_cnt_m1.out_AT24))
(assert (= mpt.decr_mux.in0_AT24 mpt.ssa_cnt.out_AT24))
(assert (= mpt.cnt_p1.out_AT24 mpt.ssa_cnt.in1_AT24))
(assert (= mpt.cnt_p1.in1_AT24 mpt.one.out_AT24))
(assert (= mpt.cnt_lt_depth.out_AT24 mpt.ssa_cnt_and1.in0_AT24))
(assert (= mpt.cnt_lt_depth.in1_AT24 mpt.depth.out_AT24))
(assert (= mpt.cnt.out_AT24 mpt.ssa_cnt.in0_AT24))
(assert (= mpt.cnt.out_AT24 mpt.cnt_p1.in0_AT24))
(assert (= mpt.cnt.out_AT24 mpt.cnt_lt_depth.in0_AT24))
(assert (= mpt.cnt.in_AT24 mpt.next_cnt.out_AT24))
(assert (= mpt.cnt.clk_AT24 self.clk_AT24))
(assert (= mp_en.in1_AT24 not_en.out_AT24))
(assert (= mp_en.in0_AT24 start_and_push.out_AT24))
(assert (= magic_packet_eq.out_AT24 prop_signal_or.in1_AT24))
(assert (= magic_packet.out_AT24 next_magic_packet.in0_AT24))
(assert (= magic_packet.out_AT24 magic_packet_eq.in0_AT24))
(assert (= magic_packet.in_AT24 next_magic_packet.out_AT24))
(assert (= magic_packet.clk_AT24 self.clk_AT24))
(assert (= f.wrPtrRst.sel_AT24 self.rst_AT24))
(assert (= f.wrPtrRst.in1_AT24 f.zero.out_AT24))
(assert (= f.wrPtrEn.sel_AT24 self.push_AT24))
(assert (= f.wrPtrEn.out_AT24 f.wrPtrRst.in0_AT24))
(assert (= f.wrPtrEn.in1_AT24 f.wrPtrp1.out_AT24))
(assert (= f.wrPtr.out_AT24 f.wrPtrp1.in1_AT24))
(assert (= f.wrPtr.out_AT24 f.wrPtrSlice.in_AT24))
(assert (= f.wrPtr.out_AT24 f.wrPtrEn.in0_AT24))
(assert (= f.wrPtr.in_AT24 f.wrPtrRst.out_AT24))
(assert (= f.wrPtr.clk_AT24 self.clk_AT24))
(assert (= f.rdPtrRst.sel_AT24 self.rst_AT24))
(assert (= f.rdPtrRst.in1_AT24 f.zero.out_AT24))
(assert (= f.rdPtrEn.sel_AT24 self.pop_AT24))
(assert (= f.rdPtrEn.out_AT24 f.rdPtrRst.in0_AT24))
(assert (= f.rdPtrEn.in1_AT24 f.rdPtrp1.out_AT24))
(assert (= f.rdPtr.out_AT24 f.rdPtrp1.in1_AT24))
(assert (= f.rdPtr.out_AT24 f.rdPtrSlice.in_AT24))
(assert (= f.rdPtr.out_AT24 f.rdPtrEn.in0_AT24))
(assert (= f.rdPtr.in_AT24 f.rdPtrRst.out_AT24))
(assert (= f.rdPtr.clk_AT24 self.clk_AT24))
(assert (= f.one.out_AT24 f.wrPtrp1.in0_AT24))
(assert (= f.one.out_AT24 f.rdPtrp1.in0_AT24))
(assert (= f.mem.wen_AT24 self.push_AT24))
(assert (= f.mem.wdata_AT24 self.data_in_AT24))
(assert (= f.mem.waddr_AT24 f.wrPtrSlice.out_AT24))
(assert (= f.mem.rdata_AT24 self.data_out_AT24))
(assert (= f.mem.rdata_AT24 magic_packet_eq.in1_AT24))
(assert (= f.mem.raddr_AT24 f.rdPtrSlice.out_AT24))
(assert (= f.mem.clk_AT24 self.clk_AT24))
(assert (= f.fullEq_2.out_AT24 f.fullCalc.in1_AT24))
(assert (= f.fullEq_2.in1_AT24 f.wrPtrSlice.out_AT24))
(assert (= f.fullEq_2.in0_AT24 f.rdPtrSlice.out_AT24))
(assert (= f.fullEq_1.out_AT24 f.notfullEq_1.in_AT24))
(assert (= f.fullCalc.in0_AT24 f.notfullEq_1.out_AT24))
(assert (= f.emptyEq.out_AT24 self.empty_AT24))
(assert (= f.emptyEq.in1_AT24 f.wrPtr.out_AT24))
(assert (= f.emptyEq.in0_AT24 f.rdPtr.out_AT24))
(assert (= en_or_sp.in1_AT24 start_and_push.out_AT24))
(assert (= en.out_AT24 not_en.in_AT24))
(assert (= en.out_AT24 en_or_sp.in0_AT24))
(assert (= en.in_AT24 en_or_sp.out_AT24))
(assert (= en.clk_AT24 self.clk_AT24))
(assert (= data_out_vld_and2.out_AT24 not_data_out_vld.in_AT24))
(assert (= data_out_vld_and1.out_AT24 data_out_vld_and2.in0_AT24))
(assert (= data_out_vld_and1.in0_AT24 en.out_AT24))
(assert (= cnt_gt_0.out_AT24 data_out_vld_and1.in1_AT24))
(assert (= cnt_gt_0.in1_AT24 zero.out_AT24))
(assert (= cnt_gt_0.in0_AT24 mpt.cnt.out_AT24))
(assert (= self.clk_AT24 #b0))
(assert (= zero.out_AT24 #b0000))
(assert (= (bvand start_and_push.in0_AT24 start_and_push.in1_AT24) start_and_push.out_AT24))
(assert (= (bvor prop_signal_or.in0_AT24 prop_signal_or.in1_AT24) prop_signal_or.out_AT24))
(assert (= (bvnot not_en.in_AT24) not_en.out_AT24))
(assert (= (bvnot not_data_out_vld.in_AT24) not_data_out_vld.out_AT24))
(assert (=> (= next_magic_packet.sel_AT24 #b1) (= next_magic_packet.in1_AT24 next_magic_packet.out_AT24)))
(assert (=> (= next_magic_packet.sel_AT24 #b0) (= next_magic_packet.in0_AT24 next_magic_packet.out_AT24)))
(assert (=> (not (= next_cnt_eq0.in0_AT24 next_cnt_eq0.in1_AT24)) (= next_cnt_eq0.out_AT24 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT24 next_cnt_eq0.in1_AT24) (= next_cnt_eq0.out_AT24 #b1)))
(assert (= mpt.zero.out_AT24 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT24 mpt.ssa_cnt_m1.in1_AT24) mpt.ssa_cnt_m1.out_AT24))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT24 mpt.ssa_cnt_gt_0.in0_AT24) (= mpt.ssa_cnt_gt_0.out_AT24 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT24 mpt.ssa_cnt_and2.in1_AT24) mpt.ssa_cnt_and2.out_AT24))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT24 mpt.ssa_cnt_and1.in1_AT24) mpt.ssa_cnt_and1.out_AT24))
(assert (=> (= mpt.ssa_cnt.sel_AT24 #b1) (= mpt.ssa_cnt.in1_AT24 mpt.ssa_cnt.out_AT24)))
(assert (=> (= mpt.ssa_cnt.sel_AT24 #b0) (= mpt.ssa_cnt.in0_AT24 mpt.ssa_cnt.out_AT24)))
(assert (= mpt.one.out_AT24 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT24) mpt.not_captured.out_AT24))
(assert (= (bvand mpt.next_cnt_and1.in0_AT24 mpt.next_cnt_and1.in1_AT24) mpt.next_cnt_and1.out_AT24))
(assert (=> (= mpt.next_cnt.sel_AT24 #b1) (= mpt.next_cnt.in1_AT24 mpt.next_cnt.out_AT24)))
(assert (=> (= mpt.next_cnt.sel_AT24 #b0) (= mpt.next_cnt.in0_AT24 mpt.next_cnt.out_AT24)))
(assert (= mpt.depth.out_AT24 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT24 #b1) (= mpt.decr_mux.in1_AT24 mpt.decr_mux.out_AT24)))
(assert (=> (= mpt.decr_mux.sel_AT24 #b0) (= mpt.decr_mux.in0_AT24 mpt.decr_mux.out_AT24)))
(assert (= (bvadd mpt.cnt_p1.in0_AT24 mpt.cnt_p1.in1_AT24) mpt.cnt_p1.out_AT24))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT24 mpt.cnt_lt_depth.in1_AT24) (= mpt.cnt_lt_depth.out_AT24 #b1)))
(assert (= (bvand mp_en.in0_AT24 mp_en.in1_AT24) mp_en.out_AT24))
(assert (=> (not (= magic_packet_eq.in0_AT24 magic_packet_eq.in1_AT24)) (= magic_packet_eq.out_AT24 #b0)))
(assert (=> (= magic_packet_eq.in0_AT24 magic_packet_eq.in1_AT24) (= magic_packet_eq.out_AT24 #b1)))
(assert (= f.zero.out_AT24 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT24 f.wrPtrp1.in1_AT24) f.wrPtrp1.out_AT24))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT24) f.wrPtrSlice.out_AT24))
(assert (=> (= f.wrPtrRst.sel_AT24 #b1) (= f.wrPtrRst.in1_AT24 f.wrPtrRst.out_AT24)))
(assert (=> (= f.wrPtrRst.sel_AT24 #b0) (= f.wrPtrRst.in0_AT24 f.wrPtrRst.out_AT24)))
(assert (=> (= f.wrPtrEn.sel_AT24 #b1) (= f.wrPtrEn.in1_AT24 f.wrPtrEn.out_AT24)))
(assert (=> (= f.wrPtrEn.sel_AT24 #b0) (= f.wrPtrEn.in0_AT24 f.wrPtrEn.out_AT24)))
(assert (= (bvadd f.rdPtrp1.in0_AT24 f.rdPtrp1.in1_AT24) f.rdPtrp1.out_AT24))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT24) f.rdPtrSlice.out_AT24))
(assert (=> (= f.rdPtrRst.sel_AT24 #b1) (= f.rdPtrRst.in1_AT24 f.rdPtrRst.out_AT24)))
(assert (=> (= f.rdPtrRst.sel_AT24 #b0) (= f.rdPtrRst.in0_AT24 f.rdPtrRst.out_AT24)))
(assert (=> (= f.rdPtrEn.sel_AT24 #b1) (= f.rdPtrEn.in1_AT24 f.rdPtrEn.out_AT24)))
(assert (=> (= f.rdPtrEn.sel_AT24 #b0) (= f.rdPtrEn.in0_AT24 f.rdPtrEn.out_AT24)))
(assert (= f.one.out_AT24 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT24) f.notfullEq_1.out_AT24))
(assert (= f.mem.rdata_AT24 (select f.mem.array_AT24 f.mem.raddr_AT24)))
(assert (=> (not (= f.fullEq_2.in0_AT24 f.fullEq_2.in1_AT24)) (= f.fullEq_2.out_AT24 #b0)))
(assert (=> (= f.fullEq_2.in0_AT24 f.fullEq_2.in1_AT24) (= f.fullEq_2.out_AT24 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT24 f.fullEq_1.in1_AT24)) (= f.fullEq_1.out_AT24 #b0)))
(assert (=> (= f.fullEq_1.in0_AT24 f.fullEq_1.in1_AT24) (= f.fullEq_1.out_AT24 #b1)))
(assert (= (bvand f.fullCalc.in0_AT24 f.fullCalc.in1_AT24) f.fullCalc.out_AT24))
(assert (=> (not (= f.emptyEq.in0_AT24 f.emptyEq.in1_AT24)) (= f.emptyEq.out_AT24 #b0)))
(assert (=> (= f.emptyEq.in0_AT24 f.emptyEq.in1_AT24) (= f.emptyEq.out_AT24 #b1)))
(assert (= (bvor en_or_sp.in0_AT24 en_or_sp.in1_AT24) en_or_sp.out_AT24))
(assert (= (bvand data_out_vld_and2.in0_AT24 data_out_vld_and2.in1_AT24) data_out_vld_and2.out_AT24))
(assert (= (bvand data_out_vld_and1.in0_AT24 data_out_vld_and1.in1_AT24) data_out_vld_and1.out_AT24))
(assert (= (bvult cnt_gt_0.in1_AT24 cnt_gt_0.in0_AT24) (= cnt_gt_0.out_AT24 #b1)))
(assert (=> (= _-_state_id_-__AT23 #b10) (= _-_state_id_-__AT24 #b10)))
(assert (=> (= _-_state_id_-__AT23 #b01) (= _-_state_id_-__AT24 #b10)))
(assert (=> (= _-_state_id_-__AT23 #b00) (= _-_state_id_-__AT24 #b01)))
(assert (= mpt.cnt.in_AT23 mpt.cnt.out_AT24))
(assert (= magic_packet.in_AT23 magic_packet.out_AT24))
(assert (= magic_packet.init_AT23 magic_packet.init_AT24))
(assert (= f.wrPtr.in_AT23 f.wrPtr.out_AT24))
(assert (= f.rdPtr.in_AT23 f.rdPtr.out_AT24))
(assert (= f.mem.array_AT24 (ite (= f.mem.wen_AT23 #b1) (store f.mem.array_AT23 f.mem.waddr_AT23 f.mem.wdata_AT23) f.mem.array_AT23)))
(assert (= en.init_AT23 en.init_AT24))
(assert (= en.in_AT23 en.out_AT24))
(push 1)

(assert (not (= self.prop_signal_AT24 #b1)))
(check-sat)

(pop 1)
(declare-fun mp_en.in0_AT25 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT25 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT25 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT25 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT25 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT25 () (_ BitVec 8))
(declare-fun magic_packet.in_AT25 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT25 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT25 () (_ BitVec 1))
(declare-fun f.zero.out_AT25 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT25 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT25 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT25 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT25 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT25 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT25 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT25 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT25 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT25 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT25 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT25 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT25 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT25 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT25 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT25 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT25 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT25 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT25 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT25 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT25 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT25 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT25 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT25 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT25 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT25 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT25 () (_ BitVec 4))
(declare-fun f.one.out_AT25 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT25 () (_ BitVec 4))
(declare-fun f.mem.wen_AT25 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT25 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT25 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT25 () (_ BitVec 3))
(declare-fun self.data_out_AT25 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT25 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT25 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT25 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT25 () (_ BitVec 3))
(declare-fun f.mem.clk_AT25 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT25 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT25 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT25 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT25 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT25 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT25 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT25 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT25 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT25 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT25 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT25 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT25 () (_ BitVec 1))
(declare-fun not_en.in_AT25 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT25 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT25 () (_ BitVec 1))
(declare-fun en.in_AT25 () (_ BitVec 1))
(declare-fun en.clk_AT25 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT25 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT25 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT25 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT25 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT25 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT25 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT25 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT25 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT25 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT25 () (_ BitVec 4))
(declare-fun magic_packet.out_AT25 () (_ BitVec 8))
(declare-fun magic_packet.init_AT25 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT25 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT25 () (_ BitVec 4))
(declare-fun f.mem.array_AT25 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT25 () (_ BitVec 1))
(declare-fun en.out_AT25 () (_ BitVec 1))
(declare-fun self.pop_AT25 () (_ BitVec 1))
(declare-fun self.empty_AT25 () (_ BitVec 1))
(declare-fun self.push_AT25 () (_ BitVec 1))
(declare-fun self.full_AT25 () (_ BitVec 1))
(declare-fun self.rst_AT25 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT25 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT25 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT25 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT25 () (_ BitVec 1))
(declare-fun self.start_AT25 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT25 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT25 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT25 () (_ BitVec 1))
(declare-fun self.prop_signal_AT25 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT25 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT25 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT25 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT25 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT25 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT25 () (_ BitVec 1))
(declare-fun mp_en.out_AT25 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT25 () (_ BitVec 1))
(declare-fun self.data_in_AT25 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT25 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT25 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT25 () (_ BitVec 1))
(declare-fun zero.out_AT25 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT25 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT25 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT25 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT25 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT25 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT25 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT25 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT25 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT25 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT25 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT25 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT25 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT25 () (_ BitVec 4))
(declare-fun mpt.one.out_AT25 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT25 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT25 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT25 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT25 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT25 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT25 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT25 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT25 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT25 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT25 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT25 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT25 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT25 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT25 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT25 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT25 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT25 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT25 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT25 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT25 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT25 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT25 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT25 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT25 () (_ BitVec 4))
(declare-fun self.clk_AT25 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT25 () (_ BitVec 1))
(declare-fun not_en.out_AT25 () (_ BitVec 1))
(declare-fun mp_en.in1_AT25 () (_ BitVec 1))
(declare-fun start_and_push.out_AT25 () (_ BitVec 1))

(assert (=> (= self.empty_AT25 #b1) (= self.pop_AT25 #b0)))
(assert (=> (= self.full_AT25 #b1) (= self.push_AT25 #b0)))
(assert (=> (= _-_state_id_-__AT25 #b10) (and true (= self.rst_AT25 #b0))))
(assert (=> (= _-_state_id_-__AT25 #b01) (and (and (and true (= self.rst_AT25 #b1)) (= self.push_AT25 #b0)) (= self.pop_AT25 #b0))))
(assert (=> (= _-_state_id_-__AT25 #b00) (and (and (and true (= self.rst_AT25 #b1)) (= self.push_AT25 #b0)) (= self.pop_AT25 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT25 ((_ extract 3 3) f.wrPtr.out_AT25)))
(assert (= f.fullEq_1.in0_AT25 ((_ extract 3 3) f.rdPtr.out_AT25)))
(assert (= en.out_AT25 mpt.not_captured.in_AT25))
(assert (= self.start_AT25 start_and_push.in0_AT25))
(assert (= self.push_AT25 start_and_push.in1_AT25))
(assert (= self.push_AT25 mpt.ssa_cnt_and1.in1_AT25))
(assert (= self.prop_signal_AT25 prop_signal_or.out_AT25))
(assert (= self.pop_AT25 mpt.next_cnt_and1.in1_AT25))
(assert (= self.full_AT25 f.fullCalc.out_AT25))
(assert (= self.data_out_vld_AT25 data_out_vld_and2.out_AT25))
(assert (= not_data_out_vld.out_AT25 prop_signal_or.in0_AT25))
(assert (= next_magic_packet.sel_AT25 mp_en.out_AT25))
(assert (= next_magic_packet.in1_AT25 self.data_in_AT25))
(assert (= next_cnt_eq0.out_AT25 data_out_vld_and2.in1_AT25))
(assert (= next_cnt_eq0.in1_AT25 zero.out_AT25))
(assert (= mpt.ssa_cnt_gt_0.out_AT25 mpt.next_cnt_and1.in0_AT25))
(assert (= mpt.ssa_cnt_gt_0.in1_AT25 mpt.zero.out_AT25))
(assert (= mpt.ssa_cnt_and1.out_AT25 mpt.ssa_cnt_and2.in0_AT25))
(assert (= mpt.ssa_cnt.sel_AT25 mpt.ssa_cnt_and2.out_AT25))
(assert (= mpt.ssa_cnt.out_AT25 mpt.ssa_cnt_m1.in0_AT25))
(assert (= mpt.ssa_cnt.out_AT25 mpt.ssa_cnt_gt_0.in0_AT25))
(assert (= mpt.one.out_AT25 mpt.ssa_cnt_m1.in1_AT25))
(assert (= mpt.not_captured.out_AT25 mpt.ssa_cnt_and2.in1_AT25))
(assert (= mpt.next_cnt.sel_AT25 self.rst_AT25))
(assert (= mpt.next_cnt.out_AT25 next_cnt_eq0.in0_AT25))
(assert (= mpt.next_cnt.in1_AT25 mpt.zero.out_AT25))
(assert (= mpt.decr_mux.sel_AT25 mpt.next_cnt_and1.out_AT25))
(assert (= mpt.decr_mux.out_AT25 mpt.next_cnt.in0_AT25))
(assert (= mpt.decr_mux.in1_AT25 mpt.ssa_cnt_m1.out_AT25))
(assert (= mpt.decr_mux.in0_AT25 mpt.ssa_cnt.out_AT25))
(assert (= mpt.cnt_p1.out_AT25 mpt.ssa_cnt.in1_AT25))
(assert (= mpt.cnt_p1.in1_AT25 mpt.one.out_AT25))
(assert (= mpt.cnt_lt_depth.out_AT25 mpt.ssa_cnt_and1.in0_AT25))
(assert (= mpt.cnt_lt_depth.in1_AT25 mpt.depth.out_AT25))
(assert (= mpt.cnt.out_AT25 mpt.ssa_cnt.in0_AT25))
(assert (= mpt.cnt.out_AT25 mpt.cnt_p1.in0_AT25))
(assert (= mpt.cnt.out_AT25 mpt.cnt_lt_depth.in0_AT25))
(assert (= mpt.cnt.in_AT25 mpt.next_cnt.out_AT25))
(assert (= mpt.cnt.clk_AT25 self.clk_AT25))
(assert (= mp_en.in1_AT25 not_en.out_AT25))
(assert (= mp_en.in0_AT25 start_and_push.out_AT25))
(assert (= magic_packet_eq.out_AT25 prop_signal_or.in1_AT25))
(assert (= magic_packet.out_AT25 next_magic_packet.in0_AT25))
(assert (= magic_packet.out_AT25 magic_packet_eq.in0_AT25))
(assert (= magic_packet.in_AT25 next_magic_packet.out_AT25))
(assert (= magic_packet.clk_AT25 self.clk_AT25))
(assert (= f.wrPtrRst.sel_AT25 self.rst_AT25))
(assert (= f.wrPtrRst.in1_AT25 f.zero.out_AT25))
(assert (= f.wrPtrEn.sel_AT25 self.push_AT25))
(assert (= f.wrPtrEn.out_AT25 f.wrPtrRst.in0_AT25))
(assert (= f.wrPtrEn.in1_AT25 f.wrPtrp1.out_AT25))
(assert (= f.wrPtr.out_AT25 f.wrPtrp1.in1_AT25))
(assert (= f.wrPtr.out_AT25 f.wrPtrSlice.in_AT25))
(assert (= f.wrPtr.out_AT25 f.wrPtrEn.in0_AT25))
(assert (= f.wrPtr.in_AT25 f.wrPtrRst.out_AT25))
(assert (= f.wrPtr.clk_AT25 self.clk_AT25))
(assert (= f.rdPtrRst.sel_AT25 self.rst_AT25))
(assert (= f.rdPtrRst.in1_AT25 f.zero.out_AT25))
(assert (= f.rdPtrEn.sel_AT25 self.pop_AT25))
(assert (= f.rdPtrEn.out_AT25 f.rdPtrRst.in0_AT25))
(assert (= f.rdPtrEn.in1_AT25 f.rdPtrp1.out_AT25))
(assert (= f.rdPtr.out_AT25 f.rdPtrp1.in1_AT25))
(assert (= f.rdPtr.out_AT25 f.rdPtrSlice.in_AT25))
(assert (= f.rdPtr.out_AT25 f.rdPtrEn.in0_AT25))
(assert (= f.rdPtr.in_AT25 f.rdPtrRst.out_AT25))
(assert (= f.rdPtr.clk_AT25 self.clk_AT25))
(assert (= f.one.out_AT25 f.wrPtrp1.in0_AT25))
(assert (= f.one.out_AT25 f.rdPtrp1.in0_AT25))
(assert (= f.mem.wen_AT25 self.push_AT25))
(assert (= f.mem.wdata_AT25 self.data_in_AT25))
(assert (= f.mem.waddr_AT25 f.wrPtrSlice.out_AT25))
(assert (= f.mem.rdata_AT25 self.data_out_AT25))
(assert (= f.mem.rdata_AT25 magic_packet_eq.in1_AT25))
(assert (= f.mem.raddr_AT25 f.rdPtrSlice.out_AT25))
(assert (= f.mem.clk_AT25 self.clk_AT25))
(assert (= f.fullEq_2.out_AT25 f.fullCalc.in1_AT25))
(assert (= f.fullEq_2.in1_AT25 f.wrPtrSlice.out_AT25))
(assert (= f.fullEq_2.in0_AT25 f.rdPtrSlice.out_AT25))
(assert (= f.fullEq_1.out_AT25 f.notfullEq_1.in_AT25))
(assert (= f.fullCalc.in0_AT25 f.notfullEq_1.out_AT25))
(assert (= f.emptyEq.out_AT25 self.empty_AT25))
(assert (= f.emptyEq.in1_AT25 f.wrPtr.out_AT25))
(assert (= f.emptyEq.in0_AT25 f.rdPtr.out_AT25))
(assert (= en_or_sp.in1_AT25 start_and_push.out_AT25))
(assert (= en.out_AT25 not_en.in_AT25))
(assert (= en.out_AT25 en_or_sp.in0_AT25))
(assert (= en.in_AT25 en_or_sp.out_AT25))
(assert (= en.clk_AT25 self.clk_AT25))
(assert (= data_out_vld_and2.out_AT25 not_data_out_vld.in_AT25))
(assert (= data_out_vld_and1.out_AT25 data_out_vld_and2.in0_AT25))
(assert (= data_out_vld_and1.in0_AT25 en.out_AT25))
(assert (= cnt_gt_0.out_AT25 data_out_vld_and1.in1_AT25))
(assert (= cnt_gt_0.in1_AT25 zero.out_AT25))
(assert (= cnt_gt_0.in0_AT25 mpt.cnt.out_AT25))
(assert (= self.clk_AT25 #b0))
(assert (= zero.out_AT25 #b0000))
(assert (= (bvand start_and_push.in0_AT25 start_and_push.in1_AT25) start_and_push.out_AT25))
(assert (= (bvor prop_signal_or.in0_AT25 prop_signal_or.in1_AT25) prop_signal_or.out_AT25))
(assert (= (bvnot not_en.in_AT25) not_en.out_AT25))
(assert (= (bvnot not_data_out_vld.in_AT25) not_data_out_vld.out_AT25))
(assert (=> (= next_magic_packet.sel_AT25 #b1) (= next_magic_packet.in1_AT25 next_magic_packet.out_AT25)))
(assert (=> (= next_magic_packet.sel_AT25 #b0) (= next_magic_packet.in0_AT25 next_magic_packet.out_AT25)))
(assert (=> (not (= next_cnt_eq0.in0_AT25 next_cnt_eq0.in1_AT25)) (= next_cnt_eq0.out_AT25 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT25 next_cnt_eq0.in1_AT25) (= next_cnt_eq0.out_AT25 #b1)))
(assert (= mpt.zero.out_AT25 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT25 mpt.ssa_cnt_m1.in1_AT25) mpt.ssa_cnt_m1.out_AT25))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT25 mpt.ssa_cnt_gt_0.in0_AT25) (= mpt.ssa_cnt_gt_0.out_AT25 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT25 mpt.ssa_cnt_and2.in1_AT25) mpt.ssa_cnt_and2.out_AT25))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT25 mpt.ssa_cnt_and1.in1_AT25) mpt.ssa_cnt_and1.out_AT25))
(assert (=> (= mpt.ssa_cnt.sel_AT25 #b1) (= mpt.ssa_cnt.in1_AT25 mpt.ssa_cnt.out_AT25)))
(assert (=> (= mpt.ssa_cnt.sel_AT25 #b0) (= mpt.ssa_cnt.in0_AT25 mpt.ssa_cnt.out_AT25)))
(assert (= mpt.one.out_AT25 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT25) mpt.not_captured.out_AT25))
(assert (= (bvand mpt.next_cnt_and1.in0_AT25 mpt.next_cnt_and1.in1_AT25) mpt.next_cnt_and1.out_AT25))
(assert (=> (= mpt.next_cnt.sel_AT25 #b1) (= mpt.next_cnt.in1_AT25 mpt.next_cnt.out_AT25)))
(assert (=> (= mpt.next_cnt.sel_AT25 #b0) (= mpt.next_cnt.in0_AT25 mpt.next_cnt.out_AT25)))
(assert (= mpt.depth.out_AT25 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT25 #b1) (= mpt.decr_mux.in1_AT25 mpt.decr_mux.out_AT25)))
(assert (=> (= mpt.decr_mux.sel_AT25 #b0) (= mpt.decr_mux.in0_AT25 mpt.decr_mux.out_AT25)))
(assert (= (bvadd mpt.cnt_p1.in0_AT25 mpt.cnt_p1.in1_AT25) mpt.cnt_p1.out_AT25))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT25 mpt.cnt_lt_depth.in1_AT25) (= mpt.cnt_lt_depth.out_AT25 #b1)))
(assert (= (bvand mp_en.in0_AT25 mp_en.in1_AT25) mp_en.out_AT25))
(assert (=> (not (= magic_packet_eq.in0_AT25 magic_packet_eq.in1_AT25)) (= magic_packet_eq.out_AT25 #b0)))
(assert (=> (= magic_packet_eq.in0_AT25 magic_packet_eq.in1_AT25) (= magic_packet_eq.out_AT25 #b1)))
(assert (= f.zero.out_AT25 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT25 f.wrPtrp1.in1_AT25) f.wrPtrp1.out_AT25))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT25) f.wrPtrSlice.out_AT25))
(assert (=> (= f.wrPtrRst.sel_AT25 #b1) (= f.wrPtrRst.in1_AT25 f.wrPtrRst.out_AT25)))
(assert (=> (= f.wrPtrRst.sel_AT25 #b0) (= f.wrPtrRst.in0_AT25 f.wrPtrRst.out_AT25)))
(assert (=> (= f.wrPtrEn.sel_AT25 #b1) (= f.wrPtrEn.in1_AT25 f.wrPtrEn.out_AT25)))
(assert (=> (= f.wrPtrEn.sel_AT25 #b0) (= f.wrPtrEn.in0_AT25 f.wrPtrEn.out_AT25)))
(assert (= (bvadd f.rdPtrp1.in0_AT25 f.rdPtrp1.in1_AT25) f.rdPtrp1.out_AT25))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT25) f.rdPtrSlice.out_AT25))
(assert (=> (= f.rdPtrRst.sel_AT25 #b1) (= f.rdPtrRst.in1_AT25 f.rdPtrRst.out_AT25)))
(assert (=> (= f.rdPtrRst.sel_AT25 #b0) (= f.rdPtrRst.in0_AT25 f.rdPtrRst.out_AT25)))
(assert (=> (= f.rdPtrEn.sel_AT25 #b1) (= f.rdPtrEn.in1_AT25 f.rdPtrEn.out_AT25)))
(assert (=> (= f.rdPtrEn.sel_AT25 #b0) (= f.rdPtrEn.in0_AT25 f.rdPtrEn.out_AT25)))
(assert (= f.one.out_AT25 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT25) f.notfullEq_1.out_AT25))
(assert (= f.mem.rdata_AT25 (select f.mem.array_AT25 f.mem.raddr_AT25)))
(assert (=> (not (= f.fullEq_2.in0_AT25 f.fullEq_2.in1_AT25)) (= f.fullEq_2.out_AT25 #b0)))
(assert (=> (= f.fullEq_2.in0_AT25 f.fullEq_2.in1_AT25) (= f.fullEq_2.out_AT25 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT25 f.fullEq_1.in1_AT25)) (= f.fullEq_1.out_AT25 #b0)))
(assert (=> (= f.fullEq_1.in0_AT25 f.fullEq_1.in1_AT25) (= f.fullEq_1.out_AT25 #b1)))
(assert (= (bvand f.fullCalc.in0_AT25 f.fullCalc.in1_AT25) f.fullCalc.out_AT25))
(assert (=> (not (= f.emptyEq.in0_AT25 f.emptyEq.in1_AT25)) (= f.emptyEq.out_AT25 #b0)))
(assert (=> (= f.emptyEq.in0_AT25 f.emptyEq.in1_AT25) (= f.emptyEq.out_AT25 #b1)))
(assert (= (bvor en_or_sp.in0_AT25 en_or_sp.in1_AT25) en_or_sp.out_AT25))
(assert (= (bvand data_out_vld_and2.in0_AT25 data_out_vld_and2.in1_AT25) data_out_vld_and2.out_AT25))
(assert (= (bvand data_out_vld_and1.in0_AT25 data_out_vld_and1.in1_AT25) data_out_vld_and1.out_AT25))
(assert (= (bvult cnt_gt_0.in1_AT25 cnt_gt_0.in0_AT25) (= cnt_gt_0.out_AT25 #b1)))
(assert (=> (= _-_state_id_-__AT24 #b10) (= _-_state_id_-__AT25 #b10)))
(assert (=> (= _-_state_id_-__AT24 #b01) (= _-_state_id_-__AT25 #b10)))
(assert (=> (= _-_state_id_-__AT24 #b00) (= _-_state_id_-__AT25 #b01)))
(assert (= mpt.cnt.in_AT24 mpt.cnt.out_AT25))
(assert (= magic_packet.in_AT24 magic_packet.out_AT25))
(assert (= magic_packet.init_AT24 magic_packet.init_AT25))
(assert (= f.wrPtr.in_AT24 f.wrPtr.out_AT25))
(assert (= f.rdPtr.in_AT24 f.rdPtr.out_AT25))
(assert (= f.mem.array_AT25 (ite (= f.mem.wen_AT24 #b1) (store f.mem.array_AT24 f.mem.waddr_AT24 f.mem.wdata_AT24) f.mem.array_AT24)))
(assert (= en.init_AT24 en.init_AT25))
(assert (= en.in_AT24 en.out_AT25))
(push 1)

(assert (not (= self.prop_signal_AT25 #b1)))
(check-sat)

(pop 1)
(declare-fun self.rst_AT26 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT26 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT26 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT26 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT26 () (_ BitVec 1))
(declare-fun self.start_AT26 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT26 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT26 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT26 () (_ BitVec 1))
(declare-fun self.prop_signal_AT26 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT26 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT26 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT26 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT26 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT26 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT26 () (_ BitVec 1))
(declare-fun mp_en.out_AT26 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT26 () (_ BitVec 1))
(declare-fun self.data_in_AT26 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT26 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT26 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT26 () (_ BitVec 1))
(declare-fun zero.out_AT26 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT26 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT26 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT26 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT26 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT26 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT26 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT26 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT26 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT26 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT26 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT26 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT26 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT26 () (_ BitVec 4))
(declare-fun mpt.one.out_AT26 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT26 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT26 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT26 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT26 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT26 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT26 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT26 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT26 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT26 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT26 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT26 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT26 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT26 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT26 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT26 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT26 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT26 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT26 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT26 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT26 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT26 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT26 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT26 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT26 () (_ BitVec 4))
(declare-fun self.clk_AT26 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT26 () (_ BitVec 1))
(declare-fun not_en.out_AT26 () (_ BitVec 1))
(declare-fun mp_en.in1_AT26 () (_ BitVec 1))
(declare-fun start_and_push.out_AT26 () (_ BitVec 1))
(declare-fun mp_en.in0_AT26 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT26 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT26 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT26 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT26 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT26 () (_ BitVec 8))
(declare-fun magic_packet.in_AT26 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT26 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT26 () (_ BitVec 1))
(declare-fun f.zero.out_AT26 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT26 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT26 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT26 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT26 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT26 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT26 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT26 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT26 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT26 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT26 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT26 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT26 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT26 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT26 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT26 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT26 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT26 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT26 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT26 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT26 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT26 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT26 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT26 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT26 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT26 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT26 () (_ BitVec 4))
(declare-fun f.one.out_AT26 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT26 () (_ BitVec 4))
(declare-fun f.mem.wen_AT26 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT26 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT26 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT26 () (_ BitVec 3))
(declare-fun self.data_out_AT26 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT26 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT26 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT26 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT26 () (_ BitVec 3))
(declare-fun f.mem.clk_AT26 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT26 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT26 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT26 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT26 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT26 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT26 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT26 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT26 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT26 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT26 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT26 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT26 () (_ BitVec 1))
(declare-fun not_en.in_AT26 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT26 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT26 () (_ BitVec 1))
(declare-fun en.in_AT26 () (_ BitVec 1))
(declare-fun en.clk_AT26 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT26 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT26 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT26 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT26 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT26 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT26 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT26 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT26 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT26 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT26 () (_ BitVec 4))
(declare-fun magic_packet.out_AT26 () (_ BitVec 8))
(declare-fun magic_packet.init_AT26 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT26 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT26 () (_ BitVec 4))
(declare-fun f.mem.array_AT26 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT26 () (_ BitVec 1))
(declare-fun en.out_AT26 () (_ BitVec 1))
(declare-fun self.pop_AT26 () (_ BitVec 1))
(declare-fun self.empty_AT26 () (_ BitVec 1))
(declare-fun self.push_AT26 () (_ BitVec 1))
(declare-fun self.full_AT26 () (_ BitVec 1))

(assert (=> (= self.empty_AT26 #b1) (= self.pop_AT26 #b0)))
(assert (=> (= self.full_AT26 #b1) (= self.push_AT26 #b0)))
(assert (=> (= _-_state_id_-__AT26 #b10) (and true (= self.rst_AT26 #b0))))
(assert (=> (= _-_state_id_-__AT26 #b01) (and (and (and true (= self.rst_AT26 #b1)) (= self.push_AT26 #b0)) (= self.pop_AT26 #b0))))
(assert (=> (= _-_state_id_-__AT26 #b00) (and (and (and true (= self.rst_AT26 #b1)) (= self.push_AT26 #b0)) (= self.pop_AT26 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT26 ((_ extract 3 3) f.wrPtr.out_AT26)))
(assert (= f.fullEq_1.in0_AT26 ((_ extract 3 3) f.rdPtr.out_AT26)))
(assert (= en.out_AT26 mpt.not_captured.in_AT26))
(assert (= self.start_AT26 start_and_push.in0_AT26))
(assert (= self.push_AT26 start_and_push.in1_AT26))
(assert (= self.push_AT26 mpt.ssa_cnt_and1.in1_AT26))
(assert (= self.prop_signal_AT26 prop_signal_or.out_AT26))
(assert (= self.pop_AT26 mpt.next_cnt_and1.in1_AT26))
(assert (= self.full_AT26 f.fullCalc.out_AT26))
(assert (= self.data_out_vld_AT26 data_out_vld_and2.out_AT26))
(assert (= not_data_out_vld.out_AT26 prop_signal_or.in0_AT26))
(assert (= next_magic_packet.sel_AT26 mp_en.out_AT26))
(assert (= next_magic_packet.in1_AT26 self.data_in_AT26))
(assert (= next_cnt_eq0.out_AT26 data_out_vld_and2.in1_AT26))
(assert (= next_cnt_eq0.in1_AT26 zero.out_AT26))
(assert (= mpt.ssa_cnt_gt_0.out_AT26 mpt.next_cnt_and1.in0_AT26))
(assert (= mpt.ssa_cnt_gt_0.in1_AT26 mpt.zero.out_AT26))
(assert (= mpt.ssa_cnt_and1.out_AT26 mpt.ssa_cnt_and2.in0_AT26))
(assert (= mpt.ssa_cnt.sel_AT26 mpt.ssa_cnt_and2.out_AT26))
(assert (= mpt.ssa_cnt.out_AT26 mpt.ssa_cnt_m1.in0_AT26))
(assert (= mpt.ssa_cnt.out_AT26 mpt.ssa_cnt_gt_0.in0_AT26))
(assert (= mpt.one.out_AT26 mpt.ssa_cnt_m1.in1_AT26))
(assert (= mpt.not_captured.out_AT26 mpt.ssa_cnt_and2.in1_AT26))
(assert (= mpt.next_cnt.sel_AT26 self.rst_AT26))
(assert (= mpt.next_cnt.out_AT26 next_cnt_eq0.in0_AT26))
(assert (= mpt.next_cnt.in1_AT26 mpt.zero.out_AT26))
(assert (= mpt.decr_mux.sel_AT26 mpt.next_cnt_and1.out_AT26))
(assert (= mpt.decr_mux.out_AT26 mpt.next_cnt.in0_AT26))
(assert (= mpt.decr_mux.in1_AT26 mpt.ssa_cnt_m1.out_AT26))
(assert (= mpt.decr_mux.in0_AT26 mpt.ssa_cnt.out_AT26))
(assert (= mpt.cnt_p1.out_AT26 mpt.ssa_cnt.in1_AT26))
(assert (= mpt.cnt_p1.in1_AT26 mpt.one.out_AT26))
(assert (= mpt.cnt_lt_depth.out_AT26 mpt.ssa_cnt_and1.in0_AT26))
(assert (= mpt.cnt_lt_depth.in1_AT26 mpt.depth.out_AT26))
(assert (= mpt.cnt.out_AT26 mpt.ssa_cnt.in0_AT26))
(assert (= mpt.cnt.out_AT26 mpt.cnt_p1.in0_AT26))
(assert (= mpt.cnt.out_AT26 mpt.cnt_lt_depth.in0_AT26))
(assert (= mpt.cnt.in_AT26 mpt.next_cnt.out_AT26))
(assert (= mpt.cnt.clk_AT26 self.clk_AT26))
(assert (= mp_en.in1_AT26 not_en.out_AT26))
(assert (= mp_en.in0_AT26 start_and_push.out_AT26))
(assert (= magic_packet_eq.out_AT26 prop_signal_or.in1_AT26))
(assert (= magic_packet.out_AT26 next_magic_packet.in0_AT26))
(assert (= magic_packet.out_AT26 magic_packet_eq.in0_AT26))
(assert (= magic_packet.in_AT26 next_magic_packet.out_AT26))
(assert (= magic_packet.clk_AT26 self.clk_AT26))
(assert (= f.wrPtrRst.sel_AT26 self.rst_AT26))
(assert (= f.wrPtrRst.in1_AT26 f.zero.out_AT26))
(assert (= f.wrPtrEn.sel_AT26 self.push_AT26))
(assert (= f.wrPtrEn.out_AT26 f.wrPtrRst.in0_AT26))
(assert (= f.wrPtrEn.in1_AT26 f.wrPtrp1.out_AT26))
(assert (= f.wrPtr.out_AT26 f.wrPtrp1.in1_AT26))
(assert (= f.wrPtr.out_AT26 f.wrPtrSlice.in_AT26))
(assert (= f.wrPtr.out_AT26 f.wrPtrEn.in0_AT26))
(assert (= f.wrPtr.in_AT26 f.wrPtrRst.out_AT26))
(assert (= f.wrPtr.clk_AT26 self.clk_AT26))
(assert (= f.rdPtrRst.sel_AT26 self.rst_AT26))
(assert (= f.rdPtrRst.in1_AT26 f.zero.out_AT26))
(assert (= f.rdPtrEn.sel_AT26 self.pop_AT26))
(assert (= f.rdPtrEn.out_AT26 f.rdPtrRst.in0_AT26))
(assert (= f.rdPtrEn.in1_AT26 f.rdPtrp1.out_AT26))
(assert (= f.rdPtr.out_AT26 f.rdPtrp1.in1_AT26))
(assert (= f.rdPtr.out_AT26 f.rdPtrSlice.in_AT26))
(assert (= f.rdPtr.out_AT26 f.rdPtrEn.in0_AT26))
(assert (= f.rdPtr.in_AT26 f.rdPtrRst.out_AT26))
(assert (= f.rdPtr.clk_AT26 self.clk_AT26))
(assert (= f.one.out_AT26 f.wrPtrp1.in0_AT26))
(assert (= f.one.out_AT26 f.rdPtrp1.in0_AT26))
(assert (= f.mem.wen_AT26 self.push_AT26))
(assert (= f.mem.wdata_AT26 self.data_in_AT26))
(assert (= f.mem.waddr_AT26 f.wrPtrSlice.out_AT26))
(assert (= f.mem.rdata_AT26 self.data_out_AT26))
(assert (= f.mem.rdata_AT26 magic_packet_eq.in1_AT26))
(assert (= f.mem.raddr_AT26 f.rdPtrSlice.out_AT26))
(assert (= f.mem.clk_AT26 self.clk_AT26))
(assert (= f.fullEq_2.out_AT26 f.fullCalc.in1_AT26))
(assert (= f.fullEq_2.in1_AT26 f.wrPtrSlice.out_AT26))
(assert (= f.fullEq_2.in0_AT26 f.rdPtrSlice.out_AT26))
(assert (= f.fullEq_1.out_AT26 f.notfullEq_1.in_AT26))
(assert (= f.fullCalc.in0_AT26 f.notfullEq_1.out_AT26))
(assert (= f.emptyEq.out_AT26 self.empty_AT26))
(assert (= f.emptyEq.in1_AT26 f.wrPtr.out_AT26))
(assert (= f.emptyEq.in0_AT26 f.rdPtr.out_AT26))
(assert (= en_or_sp.in1_AT26 start_and_push.out_AT26))
(assert (= en.out_AT26 not_en.in_AT26))
(assert (= en.out_AT26 en_or_sp.in0_AT26))
(assert (= en.in_AT26 en_or_sp.out_AT26))
(assert (= en.clk_AT26 self.clk_AT26))
(assert (= data_out_vld_and2.out_AT26 not_data_out_vld.in_AT26))
(assert (= data_out_vld_and1.out_AT26 data_out_vld_and2.in0_AT26))
(assert (= data_out_vld_and1.in0_AT26 en.out_AT26))
(assert (= cnt_gt_0.out_AT26 data_out_vld_and1.in1_AT26))
(assert (= cnt_gt_0.in1_AT26 zero.out_AT26))
(assert (= cnt_gt_0.in0_AT26 mpt.cnt.out_AT26))
(assert (= self.clk_AT26 #b0))
(assert (= zero.out_AT26 #b0000))
(assert (= (bvand start_and_push.in0_AT26 start_and_push.in1_AT26) start_and_push.out_AT26))
(assert (= (bvor prop_signal_or.in0_AT26 prop_signal_or.in1_AT26) prop_signal_or.out_AT26))
(assert (= (bvnot not_en.in_AT26) not_en.out_AT26))
(assert (= (bvnot not_data_out_vld.in_AT26) not_data_out_vld.out_AT26))
(assert (=> (= next_magic_packet.sel_AT26 #b1) (= next_magic_packet.in1_AT26 next_magic_packet.out_AT26)))
(assert (=> (= next_magic_packet.sel_AT26 #b0) (= next_magic_packet.in0_AT26 next_magic_packet.out_AT26)))
(assert (=> (not (= next_cnt_eq0.in0_AT26 next_cnt_eq0.in1_AT26)) (= next_cnt_eq0.out_AT26 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT26 next_cnt_eq0.in1_AT26) (= next_cnt_eq0.out_AT26 #b1)))
(assert (= mpt.zero.out_AT26 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT26 mpt.ssa_cnt_m1.in1_AT26) mpt.ssa_cnt_m1.out_AT26))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT26 mpt.ssa_cnt_gt_0.in0_AT26) (= mpt.ssa_cnt_gt_0.out_AT26 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT26 mpt.ssa_cnt_and2.in1_AT26) mpt.ssa_cnt_and2.out_AT26))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT26 mpt.ssa_cnt_and1.in1_AT26) mpt.ssa_cnt_and1.out_AT26))
(assert (=> (= mpt.ssa_cnt.sel_AT26 #b1) (= mpt.ssa_cnt.in1_AT26 mpt.ssa_cnt.out_AT26)))
(assert (=> (= mpt.ssa_cnt.sel_AT26 #b0) (= mpt.ssa_cnt.in0_AT26 mpt.ssa_cnt.out_AT26)))
(assert (= mpt.one.out_AT26 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT26) mpt.not_captured.out_AT26))
(assert (= (bvand mpt.next_cnt_and1.in0_AT26 mpt.next_cnt_and1.in1_AT26) mpt.next_cnt_and1.out_AT26))
(assert (=> (= mpt.next_cnt.sel_AT26 #b1) (= mpt.next_cnt.in1_AT26 mpt.next_cnt.out_AT26)))
(assert (=> (= mpt.next_cnt.sel_AT26 #b0) (= mpt.next_cnt.in0_AT26 mpt.next_cnt.out_AT26)))
(assert (= mpt.depth.out_AT26 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT26 #b1) (= mpt.decr_mux.in1_AT26 mpt.decr_mux.out_AT26)))
(assert (=> (= mpt.decr_mux.sel_AT26 #b0) (= mpt.decr_mux.in0_AT26 mpt.decr_mux.out_AT26)))
(assert (= (bvadd mpt.cnt_p1.in0_AT26 mpt.cnt_p1.in1_AT26) mpt.cnt_p1.out_AT26))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT26 mpt.cnt_lt_depth.in1_AT26) (= mpt.cnt_lt_depth.out_AT26 #b1)))
(assert (= (bvand mp_en.in0_AT26 mp_en.in1_AT26) mp_en.out_AT26))
(assert (=> (not (= magic_packet_eq.in0_AT26 magic_packet_eq.in1_AT26)) (= magic_packet_eq.out_AT26 #b0)))
(assert (=> (= magic_packet_eq.in0_AT26 magic_packet_eq.in1_AT26) (= magic_packet_eq.out_AT26 #b1)))
(assert (= f.zero.out_AT26 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT26 f.wrPtrp1.in1_AT26) f.wrPtrp1.out_AT26))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT26) f.wrPtrSlice.out_AT26))
(assert (=> (= f.wrPtrRst.sel_AT26 #b1) (= f.wrPtrRst.in1_AT26 f.wrPtrRst.out_AT26)))
(assert (=> (= f.wrPtrRst.sel_AT26 #b0) (= f.wrPtrRst.in0_AT26 f.wrPtrRst.out_AT26)))
(assert (=> (= f.wrPtrEn.sel_AT26 #b1) (= f.wrPtrEn.in1_AT26 f.wrPtrEn.out_AT26)))
(assert (=> (= f.wrPtrEn.sel_AT26 #b0) (= f.wrPtrEn.in0_AT26 f.wrPtrEn.out_AT26)))
(assert (= (bvadd f.rdPtrp1.in0_AT26 f.rdPtrp1.in1_AT26) f.rdPtrp1.out_AT26))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT26) f.rdPtrSlice.out_AT26))
(assert (=> (= f.rdPtrRst.sel_AT26 #b1) (= f.rdPtrRst.in1_AT26 f.rdPtrRst.out_AT26)))
(assert (=> (= f.rdPtrRst.sel_AT26 #b0) (= f.rdPtrRst.in0_AT26 f.rdPtrRst.out_AT26)))
(assert (=> (= f.rdPtrEn.sel_AT26 #b1) (= f.rdPtrEn.in1_AT26 f.rdPtrEn.out_AT26)))
(assert (=> (= f.rdPtrEn.sel_AT26 #b0) (= f.rdPtrEn.in0_AT26 f.rdPtrEn.out_AT26)))
(assert (= f.one.out_AT26 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT26) f.notfullEq_1.out_AT26))
(assert (= f.mem.rdata_AT26 (select f.mem.array_AT26 f.mem.raddr_AT26)))
(assert (=> (not (= f.fullEq_2.in0_AT26 f.fullEq_2.in1_AT26)) (= f.fullEq_2.out_AT26 #b0)))
(assert (=> (= f.fullEq_2.in0_AT26 f.fullEq_2.in1_AT26) (= f.fullEq_2.out_AT26 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT26 f.fullEq_1.in1_AT26)) (= f.fullEq_1.out_AT26 #b0)))
(assert (=> (= f.fullEq_1.in0_AT26 f.fullEq_1.in1_AT26) (= f.fullEq_1.out_AT26 #b1)))
(assert (= (bvand f.fullCalc.in0_AT26 f.fullCalc.in1_AT26) f.fullCalc.out_AT26))
(assert (=> (not (= f.emptyEq.in0_AT26 f.emptyEq.in1_AT26)) (= f.emptyEq.out_AT26 #b0)))
(assert (=> (= f.emptyEq.in0_AT26 f.emptyEq.in1_AT26) (= f.emptyEq.out_AT26 #b1)))
(assert (= (bvor en_or_sp.in0_AT26 en_or_sp.in1_AT26) en_or_sp.out_AT26))
(assert (= (bvand data_out_vld_and2.in0_AT26 data_out_vld_and2.in1_AT26) data_out_vld_and2.out_AT26))
(assert (= (bvand data_out_vld_and1.in0_AT26 data_out_vld_and1.in1_AT26) data_out_vld_and1.out_AT26))
(assert (= (bvult cnt_gt_0.in1_AT26 cnt_gt_0.in0_AT26) (= cnt_gt_0.out_AT26 #b1)))
(assert (=> (= _-_state_id_-__AT25 #b10) (= _-_state_id_-__AT26 #b10)))
(assert (=> (= _-_state_id_-__AT25 #b01) (= _-_state_id_-__AT26 #b10)))
(assert (=> (= _-_state_id_-__AT25 #b00) (= _-_state_id_-__AT26 #b01)))
(assert (= mpt.cnt.in_AT25 mpt.cnt.out_AT26))
(assert (= magic_packet.in_AT25 magic_packet.out_AT26))
(assert (= magic_packet.init_AT25 magic_packet.init_AT26))
(assert (= f.wrPtr.in_AT25 f.wrPtr.out_AT26))
(assert (= f.rdPtr.in_AT25 f.rdPtr.out_AT26))
(assert (= f.mem.array_AT26 (ite (= f.mem.wen_AT25 #b1) (store f.mem.array_AT25 f.mem.waddr_AT25 f.mem.wdata_AT25) f.mem.array_AT25)))
(assert (= en.init_AT25 en.init_AT26))
(assert (= en.in_AT25 en.out_AT26))
(push 1)

(assert (not (= self.prop_signal_AT26 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT27 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT27 () (_ BitVec 4))
(declare-fun magic_packet.out_AT27 () (_ BitVec 8))
(declare-fun magic_packet.init_AT27 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT27 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT27 () (_ BitVec 4))
(declare-fun f.mem.array_AT27 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT27 () (_ BitVec 1))
(declare-fun en.out_AT27 () (_ BitVec 1))
(declare-fun self.pop_AT27 () (_ BitVec 1))
(declare-fun self.empty_AT27 () (_ BitVec 1))
(declare-fun self.push_AT27 () (_ BitVec 1))
(declare-fun self.full_AT27 () (_ BitVec 1))
(declare-fun self.rst_AT27 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT27 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT27 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT27 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT27 () (_ BitVec 1))
(declare-fun self.start_AT27 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT27 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT27 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT27 () (_ BitVec 1))
(declare-fun self.prop_signal_AT27 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT27 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT27 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT27 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT27 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT27 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT27 () (_ BitVec 1))
(declare-fun mp_en.out_AT27 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT27 () (_ BitVec 1))
(declare-fun self.data_in_AT27 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT27 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT27 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT27 () (_ BitVec 1))
(declare-fun zero.out_AT27 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT27 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT27 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT27 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT27 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT27 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT27 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT27 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT27 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT27 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT27 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT27 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT27 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT27 () (_ BitVec 4))
(declare-fun mpt.one.out_AT27 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT27 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT27 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT27 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT27 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT27 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT27 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT27 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT27 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT27 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT27 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT27 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT27 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT27 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT27 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT27 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT27 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT27 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT27 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT27 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT27 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT27 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT27 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT27 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT27 () (_ BitVec 4))
(declare-fun self.clk_AT27 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT27 () (_ BitVec 1))
(declare-fun not_en.out_AT27 () (_ BitVec 1))
(declare-fun mp_en.in1_AT27 () (_ BitVec 1))
(declare-fun start_and_push.out_AT27 () (_ BitVec 1))
(declare-fun mp_en.in0_AT27 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT27 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT27 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT27 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT27 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT27 () (_ BitVec 8))
(declare-fun magic_packet.in_AT27 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT27 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT27 () (_ BitVec 1))
(declare-fun f.zero.out_AT27 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT27 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT27 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT27 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT27 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT27 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT27 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT27 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT27 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT27 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT27 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT27 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT27 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT27 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT27 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT27 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT27 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT27 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT27 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT27 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT27 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT27 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT27 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT27 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT27 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT27 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT27 () (_ BitVec 4))
(declare-fun f.one.out_AT27 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT27 () (_ BitVec 4))
(declare-fun f.mem.wen_AT27 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT27 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT27 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT27 () (_ BitVec 3))
(declare-fun self.data_out_AT27 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT27 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT27 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT27 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT27 () (_ BitVec 3))
(declare-fun f.mem.clk_AT27 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT27 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT27 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT27 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT27 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT27 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT27 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT27 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT27 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT27 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT27 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT27 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT27 () (_ BitVec 1))
(declare-fun not_en.in_AT27 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT27 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT27 () (_ BitVec 1))
(declare-fun en.in_AT27 () (_ BitVec 1))
(declare-fun en.clk_AT27 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT27 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT27 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT27 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT27 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT27 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT27 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT27 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT27 () (_ BitVec 4))

(assert (=> (= self.empty_AT27 #b1) (= self.pop_AT27 #b0)))
(assert (=> (= self.full_AT27 #b1) (= self.push_AT27 #b0)))
(assert (=> (= _-_state_id_-__AT27 #b10) (and true (= self.rst_AT27 #b0))))
(assert (=> (= _-_state_id_-__AT27 #b01) (and (and (and true (= self.rst_AT27 #b1)) (= self.push_AT27 #b0)) (= self.pop_AT27 #b0))))
(assert (=> (= _-_state_id_-__AT27 #b00) (and (and (and true (= self.rst_AT27 #b1)) (= self.push_AT27 #b0)) (= self.pop_AT27 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT27 ((_ extract 3 3) f.wrPtr.out_AT27)))
(assert (= f.fullEq_1.in0_AT27 ((_ extract 3 3) f.rdPtr.out_AT27)))
(assert (= en.out_AT27 mpt.not_captured.in_AT27))
(assert (= self.start_AT27 start_and_push.in0_AT27))
(assert (= self.push_AT27 start_and_push.in1_AT27))
(assert (= self.push_AT27 mpt.ssa_cnt_and1.in1_AT27))
(assert (= self.prop_signal_AT27 prop_signal_or.out_AT27))
(assert (= self.pop_AT27 mpt.next_cnt_and1.in1_AT27))
(assert (= self.full_AT27 f.fullCalc.out_AT27))
(assert (= self.data_out_vld_AT27 data_out_vld_and2.out_AT27))
(assert (= not_data_out_vld.out_AT27 prop_signal_or.in0_AT27))
(assert (= next_magic_packet.sel_AT27 mp_en.out_AT27))
(assert (= next_magic_packet.in1_AT27 self.data_in_AT27))
(assert (= next_cnt_eq0.out_AT27 data_out_vld_and2.in1_AT27))
(assert (= next_cnt_eq0.in1_AT27 zero.out_AT27))
(assert (= mpt.ssa_cnt_gt_0.out_AT27 mpt.next_cnt_and1.in0_AT27))
(assert (= mpt.ssa_cnt_gt_0.in1_AT27 mpt.zero.out_AT27))
(assert (= mpt.ssa_cnt_and1.out_AT27 mpt.ssa_cnt_and2.in0_AT27))
(assert (= mpt.ssa_cnt.sel_AT27 mpt.ssa_cnt_and2.out_AT27))
(assert (= mpt.ssa_cnt.out_AT27 mpt.ssa_cnt_m1.in0_AT27))
(assert (= mpt.ssa_cnt.out_AT27 mpt.ssa_cnt_gt_0.in0_AT27))
(assert (= mpt.one.out_AT27 mpt.ssa_cnt_m1.in1_AT27))
(assert (= mpt.not_captured.out_AT27 mpt.ssa_cnt_and2.in1_AT27))
(assert (= mpt.next_cnt.sel_AT27 self.rst_AT27))
(assert (= mpt.next_cnt.out_AT27 next_cnt_eq0.in0_AT27))
(assert (= mpt.next_cnt.in1_AT27 mpt.zero.out_AT27))
(assert (= mpt.decr_mux.sel_AT27 mpt.next_cnt_and1.out_AT27))
(assert (= mpt.decr_mux.out_AT27 mpt.next_cnt.in0_AT27))
(assert (= mpt.decr_mux.in1_AT27 mpt.ssa_cnt_m1.out_AT27))
(assert (= mpt.decr_mux.in0_AT27 mpt.ssa_cnt.out_AT27))
(assert (= mpt.cnt_p1.out_AT27 mpt.ssa_cnt.in1_AT27))
(assert (= mpt.cnt_p1.in1_AT27 mpt.one.out_AT27))
(assert (= mpt.cnt_lt_depth.out_AT27 mpt.ssa_cnt_and1.in0_AT27))
(assert (= mpt.cnt_lt_depth.in1_AT27 mpt.depth.out_AT27))
(assert (= mpt.cnt.out_AT27 mpt.ssa_cnt.in0_AT27))
(assert (= mpt.cnt.out_AT27 mpt.cnt_p1.in0_AT27))
(assert (= mpt.cnt.out_AT27 mpt.cnt_lt_depth.in0_AT27))
(assert (= mpt.cnt.in_AT27 mpt.next_cnt.out_AT27))
(assert (= mpt.cnt.clk_AT27 self.clk_AT27))
(assert (= mp_en.in1_AT27 not_en.out_AT27))
(assert (= mp_en.in0_AT27 start_and_push.out_AT27))
(assert (= magic_packet_eq.out_AT27 prop_signal_or.in1_AT27))
(assert (= magic_packet.out_AT27 next_magic_packet.in0_AT27))
(assert (= magic_packet.out_AT27 magic_packet_eq.in0_AT27))
(assert (= magic_packet.in_AT27 next_magic_packet.out_AT27))
(assert (= magic_packet.clk_AT27 self.clk_AT27))
(assert (= f.wrPtrRst.sel_AT27 self.rst_AT27))
(assert (= f.wrPtrRst.in1_AT27 f.zero.out_AT27))
(assert (= f.wrPtrEn.sel_AT27 self.push_AT27))
(assert (= f.wrPtrEn.out_AT27 f.wrPtrRst.in0_AT27))
(assert (= f.wrPtrEn.in1_AT27 f.wrPtrp1.out_AT27))
(assert (= f.wrPtr.out_AT27 f.wrPtrp1.in1_AT27))
(assert (= f.wrPtr.out_AT27 f.wrPtrSlice.in_AT27))
(assert (= f.wrPtr.out_AT27 f.wrPtrEn.in0_AT27))
(assert (= f.wrPtr.in_AT27 f.wrPtrRst.out_AT27))
(assert (= f.wrPtr.clk_AT27 self.clk_AT27))
(assert (= f.rdPtrRst.sel_AT27 self.rst_AT27))
(assert (= f.rdPtrRst.in1_AT27 f.zero.out_AT27))
(assert (= f.rdPtrEn.sel_AT27 self.pop_AT27))
(assert (= f.rdPtrEn.out_AT27 f.rdPtrRst.in0_AT27))
(assert (= f.rdPtrEn.in1_AT27 f.rdPtrp1.out_AT27))
(assert (= f.rdPtr.out_AT27 f.rdPtrp1.in1_AT27))
(assert (= f.rdPtr.out_AT27 f.rdPtrSlice.in_AT27))
(assert (= f.rdPtr.out_AT27 f.rdPtrEn.in0_AT27))
(assert (= f.rdPtr.in_AT27 f.rdPtrRst.out_AT27))
(assert (= f.rdPtr.clk_AT27 self.clk_AT27))
(assert (= f.one.out_AT27 f.wrPtrp1.in0_AT27))
(assert (= f.one.out_AT27 f.rdPtrp1.in0_AT27))
(assert (= f.mem.wen_AT27 self.push_AT27))
(assert (= f.mem.wdata_AT27 self.data_in_AT27))
(assert (= f.mem.waddr_AT27 f.wrPtrSlice.out_AT27))
(assert (= f.mem.rdata_AT27 self.data_out_AT27))
(assert (= f.mem.rdata_AT27 magic_packet_eq.in1_AT27))
(assert (= f.mem.raddr_AT27 f.rdPtrSlice.out_AT27))
(assert (= f.mem.clk_AT27 self.clk_AT27))
(assert (= f.fullEq_2.out_AT27 f.fullCalc.in1_AT27))
(assert (= f.fullEq_2.in1_AT27 f.wrPtrSlice.out_AT27))
(assert (= f.fullEq_2.in0_AT27 f.rdPtrSlice.out_AT27))
(assert (= f.fullEq_1.out_AT27 f.notfullEq_1.in_AT27))
(assert (= f.fullCalc.in0_AT27 f.notfullEq_1.out_AT27))
(assert (= f.emptyEq.out_AT27 self.empty_AT27))
(assert (= f.emptyEq.in1_AT27 f.wrPtr.out_AT27))
(assert (= f.emptyEq.in0_AT27 f.rdPtr.out_AT27))
(assert (= en_or_sp.in1_AT27 start_and_push.out_AT27))
(assert (= en.out_AT27 not_en.in_AT27))
(assert (= en.out_AT27 en_or_sp.in0_AT27))
(assert (= en.in_AT27 en_or_sp.out_AT27))
(assert (= en.clk_AT27 self.clk_AT27))
(assert (= data_out_vld_and2.out_AT27 not_data_out_vld.in_AT27))
(assert (= data_out_vld_and1.out_AT27 data_out_vld_and2.in0_AT27))
(assert (= data_out_vld_and1.in0_AT27 en.out_AT27))
(assert (= cnt_gt_0.out_AT27 data_out_vld_and1.in1_AT27))
(assert (= cnt_gt_0.in1_AT27 zero.out_AT27))
(assert (= cnt_gt_0.in0_AT27 mpt.cnt.out_AT27))
(assert (= self.clk_AT27 #b0))
(assert (= zero.out_AT27 #b0000))
(assert (= (bvand start_and_push.in0_AT27 start_and_push.in1_AT27) start_and_push.out_AT27))
(assert (= (bvor prop_signal_or.in0_AT27 prop_signal_or.in1_AT27) prop_signal_or.out_AT27))
(assert (= (bvnot not_en.in_AT27) not_en.out_AT27))
(assert (= (bvnot not_data_out_vld.in_AT27) not_data_out_vld.out_AT27))
(assert (=> (= next_magic_packet.sel_AT27 #b1) (= next_magic_packet.in1_AT27 next_magic_packet.out_AT27)))
(assert (=> (= next_magic_packet.sel_AT27 #b0) (= next_magic_packet.in0_AT27 next_magic_packet.out_AT27)))
(assert (=> (not (= next_cnt_eq0.in0_AT27 next_cnt_eq0.in1_AT27)) (= next_cnt_eq0.out_AT27 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT27 next_cnt_eq0.in1_AT27) (= next_cnt_eq0.out_AT27 #b1)))
(assert (= mpt.zero.out_AT27 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT27 mpt.ssa_cnt_m1.in1_AT27) mpt.ssa_cnt_m1.out_AT27))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT27 mpt.ssa_cnt_gt_0.in0_AT27) (= mpt.ssa_cnt_gt_0.out_AT27 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT27 mpt.ssa_cnt_and2.in1_AT27) mpt.ssa_cnt_and2.out_AT27))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT27 mpt.ssa_cnt_and1.in1_AT27) mpt.ssa_cnt_and1.out_AT27))
(assert (=> (= mpt.ssa_cnt.sel_AT27 #b1) (= mpt.ssa_cnt.in1_AT27 mpt.ssa_cnt.out_AT27)))
(assert (=> (= mpt.ssa_cnt.sel_AT27 #b0) (= mpt.ssa_cnt.in0_AT27 mpt.ssa_cnt.out_AT27)))
(assert (= mpt.one.out_AT27 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT27) mpt.not_captured.out_AT27))
(assert (= (bvand mpt.next_cnt_and1.in0_AT27 mpt.next_cnt_and1.in1_AT27) mpt.next_cnt_and1.out_AT27))
(assert (=> (= mpt.next_cnt.sel_AT27 #b1) (= mpt.next_cnt.in1_AT27 mpt.next_cnt.out_AT27)))
(assert (=> (= mpt.next_cnt.sel_AT27 #b0) (= mpt.next_cnt.in0_AT27 mpt.next_cnt.out_AT27)))
(assert (= mpt.depth.out_AT27 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT27 #b1) (= mpt.decr_mux.in1_AT27 mpt.decr_mux.out_AT27)))
(assert (=> (= mpt.decr_mux.sel_AT27 #b0) (= mpt.decr_mux.in0_AT27 mpt.decr_mux.out_AT27)))
(assert (= (bvadd mpt.cnt_p1.in0_AT27 mpt.cnt_p1.in1_AT27) mpt.cnt_p1.out_AT27))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT27 mpt.cnt_lt_depth.in1_AT27) (= mpt.cnt_lt_depth.out_AT27 #b1)))
(assert (= (bvand mp_en.in0_AT27 mp_en.in1_AT27) mp_en.out_AT27))
(assert (=> (not (= magic_packet_eq.in0_AT27 magic_packet_eq.in1_AT27)) (= magic_packet_eq.out_AT27 #b0)))
(assert (=> (= magic_packet_eq.in0_AT27 magic_packet_eq.in1_AT27) (= magic_packet_eq.out_AT27 #b1)))
(assert (= f.zero.out_AT27 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT27 f.wrPtrp1.in1_AT27) f.wrPtrp1.out_AT27))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT27) f.wrPtrSlice.out_AT27))
(assert (=> (= f.wrPtrRst.sel_AT27 #b1) (= f.wrPtrRst.in1_AT27 f.wrPtrRst.out_AT27)))
(assert (=> (= f.wrPtrRst.sel_AT27 #b0) (= f.wrPtrRst.in0_AT27 f.wrPtrRst.out_AT27)))
(assert (=> (= f.wrPtrEn.sel_AT27 #b1) (= f.wrPtrEn.in1_AT27 f.wrPtrEn.out_AT27)))
(assert (=> (= f.wrPtrEn.sel_AT27 #b0) (= f.wrPtrEn.in0_AT27 f.wrPtrEn.out_AT27)))
(assert (= (bvadd f.rdPtrp1.in0_AT27 f.rdPtrp1.in1_AT27) f.rdPtrp1.out_AT27))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT27) f.rdPtrSlice.out_AT27))
(assert (=> (= f.rdPtrRst.sel_AT27 #b1) (= f.rdPtrRst.in1_AT27 f.rdPtrRst.out_AT27)))
(assert (=> (= f.rdPtrRst.sel_AT27 #b0) (= f.rdPtrRst.in0_AT27 f.rdPtrRst.out_AT27)))
(assert (=> (= f.rdPtrEn.sel_AT27 #b1) (= f.rdPtrEn.in1_AT27 f.rdPtrEn.out_AT27)))
(assert (=> (= f.rdPtrEn.sel_AT27 #b0) (= f.rdPtrEn.in0_AT27 f.rdPtrEn.out_AT27)))
(assert (= f.one.out_AT27 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT27) f.notfullEq_1.out_AT27))
(assert (= f.mem.rdata_AT27 (select f.mem.array_AT27 f.mem.raddr_AT27)))
(assert (=> (not (= f.fullEq_2.in0_AT27 f.fullEq_2.in1_AT27)) (= f.fullEq_2.out_AT27 #b0)))
(assert (=> (= f.fullEq_2.in0_AT27 f.fullEq_2.in1_AT27) (= f.fullEq_2.out_AT27 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT27 f.fullEq_1.in1_AT27)) (= f.fullEq_1.out_AT27 #b0)))
(assert (=> (= f.fullEq_1.in0_AT27 f.fullEq_1.in1_AT27) (= f.fullEq_1.out_AT27 #b1)))
(assert (= (bvand f.fullCalc.in0_AT27 f.fullCalc.in1_AT27) f.fullCalc.out_AT27))
(assert (=> (not (= f.emptyEq.in0_AT27 f.emptyEq.in1_AT27)) (= f.emptyEq.out_AT27 #b0)))
(assert (=> (= f.emptyEq.in0_AT27 f.emptyEq.in1_AT27) (= f.emptyEq.out_AT27 #b1)))
(assert (= (bvor en_or_sp.in0_AT27 en_or_sp.in1_AT27) en_or_sp.out_AT27))
(assert (= (bvand data_out_vld_and2.in0_AT27 data_out_vld_and2.in1_AT27) data_out_vld_and2.out_AT27))
(assert (= (bvand data_out_vld_and1.in0_AT27 data_out_vld_and1.in1_AT27) data_out_vld_and1.out_AT27))
(assert (= (bvult cnt_gt_0.in1_AT27 cnt_gt_0.in0_AT27) (= cnt_gt_0.out_AT27 #b1)))
(assert (=> (= _-_state_id_-__AT26 #b10) (= _-_state_id_-__AT27 #b10)))
(assert (=> (= _-_state_id_-__AT26 #b01) (= _-_state_id_-__AT27 #b10)))
(assert (=> (= _-_state_id_-__AT26 #b00) (= _-_state_id_-__AT27 #b01)))
(assert (= mpt.cnt.in_AT26 mpt.cnt.out_AT27))
(assert (= magic_packet.in_AT26 magic_packet.out_AT27))
(assert (= magic_packet.init_AT26 magic_packet.init_AT27))
(assert (= f.wrPtr.in_AT26 f.wrPtr.out_AT27))
(assert (= f.rdPtr.in_AT26 f.rdPtr.out_AT27))
(assert (= f.mem.array_AT27 (ite (= f.mem.wen_AT26 #b1) (store f.mem.array_AT26 f.mem.waddr_AT26 f.mem.wdata_AT26) f.mem.array_AT26)))
(assert (= en.init_AT26 en.init_AT27))
(assert (= en.in_AT26 en.out_AT27))
(push 1)

(assert (not (= self.prop_signal_AT27 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT28 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT28 () (_ BitVec 4))
(declare-fun magic_packet.out_AT28 () (_ BitVec 8))
(declare-fun magic_packet.init_AT28 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT28 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT28 () (_ BitVec 4))
(declare-fun f.mem.array_AT28 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT28 () (_ BitVec 1))
(declare-fun en.out_AT28 () (_ BitVec 1))
(declare-fun self.pop_AT28 () (_ BitVec 1))
(declare-fun self.empty_AT28 () (_ BitVec 1))
(declare-fun self.push_AT28 () (_ BitVec 1))
(declare-fun self.full_AT28 () (_ BitVec 1))
(declare-fun self.rst_AT28 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT28 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT28 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT28 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT28 () (_ BitVec 1))
(declare-fun self.start_AT28 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT28 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT28 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT28 () (_ BitVec 1))
(declare-fun self.prop_signal_AT28 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT28 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT28 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT28 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT28 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT28 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT28 () (_ BitVec 1))
(declare-fun mp_en.out_AT28 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT28 () (_ BitVec 1))
(declare-fun self.data_in_AT28 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT28 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT28 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT28 () (_ BitVec 1))
(declare-fun zero.out_AT28 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT28 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT28 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT28 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT28 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT28 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT28 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT28 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT28 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT28 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT28 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT28 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT28 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT28 () (_ BitVec 4))
(declare-fun mpt.one.out_AT28 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT28 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT28 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT28 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT28 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT28 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT28 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT28 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT28 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT28 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT28 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT28 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT28 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT28 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT28 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT28 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT28 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT28 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT28 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT28 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT28 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT28 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT28 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT28 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT28 () (_ BitVec 4))
(declare-fun self.clk_AT28 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT28 () (_ BitVec 1))
(declare-fun not_en.out_AT28 () (_ BitVec 1))
(declare-fun mp_en.in1_AT28 () (_ BitVec 1))
(declare-fun start_and_push.out_AT28 () (_ BitVec 1))
(declare-fun mp_en.in0_AT28 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT28 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT28 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT28 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT28 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT28 () (_ BitVec 8))
(declare-fun magic_packet.in_AT28 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT28 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT28 () (_ BitVec 1))
(declare-fun f.zero.out_AT28 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT28 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT28 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT28 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT28 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT28 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT28 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT28 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT28 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT28 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT28 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT28 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT28 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT28 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT28 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT28 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT28 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT28 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT28 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT28 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT28 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT28 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT28 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT28 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT28 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT28 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT28 () (_ BitVec 4))
(declare-fun f.one.out_AT28 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT28 () (_ BitVec 4))
(declare-fun f.mem.wen_AT28 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT28 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT28 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT28 () (_ BitVec 3))
(declare-fun self.data_out_AT28 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT28 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT28 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT28 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT28 () (_ BitVec 3))
(declare-fun f.mem.clk_AT28 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT28 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT28 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT28 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT28 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT28 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT28 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT28 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT28 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT28 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT28 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT28 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT28 () (_ BitVec 1))
(declare-fun not_en.in_AT28 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT28 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT28 () (_ BitVec 1))
(declare-fun en.in_AT28 () (_ BitVec 1))
(declare-fun en.clk_AT28 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT28 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT28 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT28 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT28 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT28 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT28 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT28 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT28 () (_ BitVec 4))

(assert (=> (= self.empty_AT28 #b1) (= self.pop_AT28 #b0)))
(assert (=> (= self.full_AT28 #b1) (= self.push_AT28 #b0)))
(assert (=> (= _-_state_id_-__AT28 #b10) (and true (= self.rst_AT28 #b0))))
(assert (=> (= _-_state_id_-__AT28 #b01) (and (and (and true (= self.rst_AT28 #b1)) (= self.push_AT28 #b0)) (= self.pop_AT28 #b0))))
(assert (=> (= _-_state_id_-__AT28 #b00) (and (and (and true (= self.rst_AT28 #b1)) (= self.push_AT28 #b0)) (= self.pop_AT28 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT28 ((_ extract 3 3) f.wrPtr.out_AT28)))
(assert (= f.fullEq_1.in0_AT28 ((_ extract 3 3) f.rdPtr.out_AT28)))
(assert (= en.out_AT28 mpt.not_captured.in_AT28))
(assert (= self.start_AT28 start_and_push.in0_AT28))
(assert (= self.push_AT28 start_and_push.in1_AT28))
(assert (= self.push_AT28 mpt.ssa_cnt_and1.in1_AT28))
(assert (= self.prop_signal_AT28 prop_signal_or.out_AT28))
(assert (= self.pop_AT28 mpt.next_cnt_and1.in1_AT28))
(assert (= self.full_AT28 f.fullCalc.out_AT28))
(assert (= self.data_out_vld_AT28 data_out_vld_and2.out_AT28))
(assert (= not_data_out_vld.out_AT28 prop_signal_or.in0_AT28))
(assert (= next_magic_packet.sel_AT28 mp_en.out_AT28))
(assert (= next_magic_packet.in1_AT28 self.data_in_AT28))
(assert (= next_cnt_eq0.out_AT28 data_out_vld_and2.in1_AT28))
(assert (= next_cnt_eq0.in1_AT28 zero.out_AT28))
(assert (= mpt.ssa_cnt_gt_0.out_AT28 mpt.next_cnt_and1.in0_AT28))
(assert (= mpt.ssa_cnt_gt_0.in1_AT28 mpt.zero.out_AT28))
(assert (= mpt.ssa_cnt_and1.out_AT28 mpt.ssa_cnt_and2.in0_AT28))
(assert (= mpt.ssa_cnt.sel_AT28 mpt.ssa_cnt_and2.out_AT28))
(assert (= mpt.ssa_cnt.out_AT28 mpt.ssa_cnt_m1.in0_AT28))
(assert (= mpt.ssa_cnt.out_AT28 mpt.ssa_cnt_gt_0.in0_AT28))
(assert (= mpt.one.out_AT28 mpt.ssa_cnt_m1.in1_AT28))
(assert (= mpt.not_captured.out_AT28 mpt.ssa_cnt_and2.in1_AT28))
(assert (= mpt.next_cnt.sel_AT28 self.rst_AT28))
(assert (= mpt.next_cnt.out_AT28 next_cnt_eq0.in0_AT28))
(assert (= mpt.next_cnt.in1_AT28 mpt.zero.out_AT28))
(assert (= mpt.decr_mux.sel_AT28 mpt.next_cnt_and1.out_AT28))
(assert (= mpt.decr_mux.out_AT28 mpt.next_cnt.in0_AT28))
(assert (= mpt.decr_mux.in1_AT28 mpt.ssa_cnt_m1.out_AT28))
(assert (= mpt.decr_mux.in0_AT28 mpt.ssa_cnt.out_AT28))
(assert (= mpt.cnt_p1.out_AT28 mpt.ssa_cnt.in1_AT28))
(assert (= mpt.cnt_p1.in1_AT28 mpt.one.out_AT28))
(assert (= mpt.cnt_lt_depth.out_AT28 mpt.ssa_cnt_and1.in0_AT28))
(assert (= mpt.cnt_lt_depth.in1_AT28 mpt.depth.out_AT28))
(assert (= mpt.cnt.out_AT28 mpt.ssa_cnt.in0_AT28))
(assert (= mpt.cnt.out_AT28 mpt.cnt_p1.in0_AT28))
(assert (= mpt.cnt.out_AT28 mpt.cnt_lt_depth.in0_AT28))
(assert (= mpt.cnt.in_AT28 mpt.next_cnt.out_AT28))
(assert (= mpt.cnt.clk_AT28 self.clk_AT28))
(assert (= mp_en.in1_AT28 not_en.out_AT28))
(assert (= mp_en.in0_AT28 start_and_push.out_AT28))
(assert (= magic_packet_eq.out_AT28 prop_signal_or.in1_AT28))
(assert (= magic_packet.out_AT28 next_magic_packet.in0_AT28))
(assert (= magic_packet.out_AT28 magic_packet_eq.in0_AT28))
(assert (= magic_packet.in_AT28 next_magic_packet.out_AT28))
(assert (= magic_packet.clk_AT28 self.clk_AT28))
(assert (= f.wrPtrRst.sel_AT28 self.rst_AT28))
(assert (= f.wrPtrRst.in1_AT28 f.zero.out_AT28))
(assert (= f.wrPtrEn.sel_AT28 self.push_AT28))
(assert (= f.wrPtrEn.out_AT28 f.wrPtrRst.in0_AT28))
(assert (= f.wrPtrEn.in1_AT28 f.wrPtrp1.out_AT28))
(assert (= f.wrPtr.out_AT28 f.wrPtrp1.in1_AT28))
(assert (= f.wrPtr.out_AT28 f.wrPtrSlice.in_AT28))
(assert (= f.wrPtr.out_AT28 f.wrPtrEn.in0_AT28))
(assert (= f.wrPtr.in_AT28 f.wrPtrRst.out_AT28))
(assert (= f.wrPtr.clk_AT28 self.clk_AT28))
(assert (= f.rdPtrRst.sel_AT28 self.rst_AT28))
(assert (= f.rdPtrRst.in1_AT28 f.zero.out_AT28))
(assert (= f.rdPtrEn.sel_AT28 self.pop_AT28))
(assert (= f.rdPtrEn.out_AT28 f.rdPtrRst.in0_AT28))
(assert (= f.rdPtrEn.in1_AT28 f.rdPtrp1.out_AT28))
(assert (= f.rdPtr.out_AT28 f.rdPtrp1.in1_AT28))
(assert (= f.rdPtr.out_AT28 f.rdPtrSlice.in_AT28))
(assert (= f.rdPtr.out_AT28 f.rdPtrEn.in0_AT28))
(assert (= f.rdPtr.in_AT28 f.rdPtrRst.out_AT28))
(assert (= f.rdPtr.clk_AT28 self.clk_AT28))
(assert (= f.one.out_AT28 f.wrPtrp1.in0_AT28))
(assert (= f.one.out_AT28 f.rdPtrp1.in0_AT28))
(assert (= f.mem.wen_AT28 self.push_AT28))
(assert (= f.mem.wdata_AT28 self.data_in_AT28))
(assert (= f.mem.waddr_AT28 f.wrPtrSlice.out_AT28))
(assert (= f.mem.rdata_AT28 self.data_out_AT28))
(assert (= f.mem.rdata_AT28 magic_packet_eq.in1_AT28))
(assert (= f.mem.raddr_AT28 f.rdPtrSlice.out_AT28))
(assert (= f.mem.clk_AT28 self.clk_AT28))
(assert (= f.fullEq_2.out_AT28 f.fullCalc.in1_AT28))
(assert (= f.fullEq_2.in1_AT28 f.wrPtrSlice.out_AT28))
(assert (= f.fullEq_2.in0_AT28 f.rdPtrSlice.out_AT28))
(assert (= f.fullEq_1.out_AT28 f.notfullEq_1.in_AT28))
(assert (= f.fullCalc.in0_AT28 f.notfullEq_1.out_AT28))
(assert (= f.emptyEq.out_AT28 self.empty_AT28))
(assert (= f.emptyEq.in1_AT28 f.wrPtr.out_AT28))
(assert (= f.emptyEq.in0_AT28 f.rdPtr.out_AT28))
(assert (= en_or_sp.in1_AT28 start_and_push.out_AT28))
(assert (= en.out_AT28 not_en.in_AT28))
(assert (= en.out_AT28 en_or_sp.in0_AT28))
(assert (= en.in_AT28 en_or_sp.out_AT28))
(assert (= en.clk_AT28 self.clk_AT28))
(assert (= data_out_vld_and2.out_AT28 not_data_out_vld.in_AT28))
(assert (= data_out_vld_and1.out_AT28 data_out_vld_and2.in0_AT28))
(assert (= data_out_vld_and1.in0_AT28 en.out_AT28))
(assert (= cnt_gt_0.out_AT28 data_out_vld_and1.in1_AT28))
(assert (= cnt_gt_0.in1_AT28 zero.out_AT28))
(assert (= cnt_gt_0.in0_AT28 mpt.cnt.out_AT28))
(assert (= self.clk_AT28 #b0))
(assert (= zero.out_AT28 #b0000))
(assert (= (bvand start_and_push.in0_AT28 start_and_push.in1_AT28) start_and_push.out_AT28))
(assert (= (bvor prop_signal_or.in0_AT28 prop_signal_or.in1_AT28) prop_signal_or.out_AT28))
(assert (= (bvnot not_en.in_AT28) not_en.out_AT28))
(assert (= (bvnot not_data_out_vld.in_AT28) not_data_out_vld.out_AT28))
(assert (=> (= next_magic_packet.sel_AT28 #b1) (= next_magic_packet.in1_AT28 next_magic_packet.out_AT28)))
(assert (=> (= next_magic_packet.sel_AT28 #b0) (= next_magic_packet.in0_AT28 next_magic_packet.out_AT28)))
(assert (=> (not (= next_cnt_eq0.in0_AT28 next_cnt_eq0.in1_AT28)) (= next_cnt_eq0.out_AT28 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT28 next_cnt_eq0.in1_AT28) (= next_cnt_eq0.out_AT28 #b1)))
(assert (= mpt.zero.out_AT28 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT28 mpt.ssa_cnt_m1.in1_AT28) mpt.ssa_cnt_m1.out_AT28))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT28 mpt.ssa_cnt_gt_0.in0_AT28) (= mpt.ssa_cnt_gt_0.out_AT28 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT28 mpt.ssa_cnt_and2.in1_AT28) mpt.ssa_cnt_and2.out_AT28))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT28 mpt.ssa_cnt_and1.in1_AT28) mpt.ssa_cnt_and1.out_AT28))
(assert (=> (= mpt.ssa_cnt.sel_AT28 #b1) (= mpt.ssa_cnt.in1_AT28 mpt.ssa_cnt.out_AT28)))
(assert (=> (= mpt.ssa_cnt.sel_AT28 #b0) (= mpt.ssa_cnt.in0_AT28 mpt.ssa_cnt.out_AT28)))
(assert (= mpt.one.out_AT28 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT28) mpt.not_captured.out_AT28))
(assert (= (bvand mpt.next_cnt_and1.in0_AT28 mpt.next_cnt_and1.in1_AT28) mpt.next_cnt_and1.out_AT28))
(assert (=> (= mpt.next_cnt.sel_AT28 #b1) (= mpt.next_cnt.in1_AT28 mpt.next_cnt.out_AT28)))
(assert (=> (= mpt.next_cnt.sel_AT28 #b0) (= mpt.next_cnt.in0_AT28 mpt.next_cnt.out_AT28)))
(assert (= mpt.depth.out_AT28 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT28 #b1) (= mpt.decr_mux.in1_AT28 mpt.decr_mux.out_AT28)))
(assert (=> (= mpt.decr_mux.sel_AT28 #b0) (= mpt.decr_mux.in0_AT28 mpt.decr_mux.out_AT28)))
(assert (= (bvadd mpt.cnt_p1.in0_AT28 mpt.cnt_p1.in1_AT28) mpt.cnt_p1.out_AT28))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT28 mpt.cnt_lt_depth.in1_AT28) (= mpt.cnt_lt_depth.out_AT28 #b1)))
(assert (= (bvand mp_en.in0_AT28 mp_en.in1_AT28) mp_en.out_AT28))
(assert (=> (not (= magic_packet_eq.in0_AT28 magic_packet_eq.in1_AT28)) (= magic_packet_eq.out_AT28 #b0)))
(assert (=> (= magic_packet_eq.in0_AT28 magic_packet_eq.in1_AT28) (= magic_packet_eq.out_AT28 #b1)))
(assert (= f.zero.out_AT28 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT28 f.wrPtrp1.in1_AT28) f.wrPtrp1.out_AT28))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT28) f.wrPtrSlice.out_AT28))
(assert (=> (= f.wrPtrRst.sel_AT28 #b1) (= f.wrPtrRst.in1_AT28 f.wrPtrRst.out_AT28)))
(assert (=> (= f.wrPtrRst.sel_AT28 #b0) (= f.wrPtrRst.in0_AT28 f.wrPtrRst.out_AT28)))
(assert (=> (= f.wrPtrEn.sel_AT28 #b1) (= f.wrPtrEn.in1_AT28 f.wrPtrEn.out_AT28)))
(assert (=> (= f.wrPtrEn.sel_AT28 #b0) (= f.wrPtrEn.in0_AT28 f.wrPtrEn.out_AT28)))
(assert (= (bvadd f.rdPtrp1.in0_AT28 f.rdPtrp1.in1_AT28) f.rdPtrp1.out_AT28))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT28) f.rdPtrSlice.out_AT28))
(assert (=> (= f.rdPtrRst.sel_AT28 #b1) (= f.rdPtrRst.in1_AT28 f.rdPtrRst.out_AT28)))
(assert (=> (= f.rdPtrRst.sel_AT28 #b0) (= f.rdPtrRst.in0_AT28 f.rdPtrRst.out_AT28)))
(assert (=> (= f.rdPtrEn.sel_AT28 #b1) (= f.rdPtrEn.in1_AT28 f.rdPtrEn.out_AT28)))
(assert (=> (= f.rdPtrEn.sel_AT28 #b0) (= f.rdPtrEn.in0_AT28 f.rdPtrEn.out_AT28)))
(assert (= f.one.out_AT28 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT28) f.notfullEq_1.out_AT28))
(assert (= f.mem.rdata_AT28 (select f.mem.array_AT28 f.mem.raddr_AT28)))
(assert (=> (not (= f.fullEq_2.in0_AT28 f.fullEq_2.in1_AT28)) (= f.fullEq_2.out_AT28 #b0)))
(assert (=> (= f.fullEq_2.in0_AT28 f.fullEq_2.in1_AT28) (= f.fullEq_2.out_AT28 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT28 f.fullEq_1.in1_AT28)) (= f.fullEq_1.out_AT28 #b0)))
(assert (=> (= f.fullEq_1.in0_AT28 f.fullEq_1.in1_AT28) (= f.fullEq_1.out_AT28 #b1)))
(assert (= (bvand f.fullCalc.in0_AT28 f.fullCalc.in1_AT28) f.fullCalc.out_AT28))
(assert (=> (not (= f.emptyEq.in0_AT28 f.emptyEq.in1_AT28)) (= f.emptyEq.out_AT28 #b0)))
(assert (=> (= f.emptyEq.in0_AT28 f.emptyEq.in1_AT28) (= f.emptyEq.out_AT28 #b1)))
(assert (= (bvor en_or_sp.in0_AT28 en_or_sp.in1_AT28) en_or_sp.out_AT28))
(assert (= (bvand data_out_vld_and2.in0_AT28 data_out_vld_and2.in1_AT28) data_out_vld_and2.out_AT28))
(assert (= (bvand data_out_vld_and1.in0_AT28 data_out_vld_and1.in1_AT28) data_out_vld_and1.out_AT28))
(assert (= (bvult cnt_gt_0.in1_AT28 cnt_gt_0.in0_AT28) (= cnt_gt_0.out_AT28 #b1)))
(assert (=> (= _-_state_id_-__AT27 #b10) (= _-_state_id_-__AT28 #b10)))
(assert (=> (= _-_state_id_-__AT27 #b01) (= _-_state_id_-__AT28 #b10)))
(assert (=> (= _-_state_id_-__AT27 #b00) (= _-_state_id_-__AT28 #b01)))
(assert (= mpt.cnt.in_AT27 mpt.cnt.out_AT28))
(assert (= magic_packet.in_AT27 magic_packet.out_AT28))
(assert (= magic_packet.init_AT27 magic_packet.init_AT28))
(assert (= f.wrPtr.in_AT27 f.wrPtr.out_AT28))
(assert (= f.rdPtr.in_AT27 f.rdPtr.out_AT28))
(assert (= f.mem.array_AT28 (ite (= f.mem.wen_AT27 #b1) (store f.mem.array_AT27 f.mem.waddr_AT27 f.mem.wdata_AT27) f.mem.array_AT27)))
(assert (= en.init_AT27 en.init_AT28))
(assert (= en.in_AT27 en.out_AT28))
(push 1)

(assert (not (= self.prop_signal_AT28 #b1)))
(check-sat)

(pop 1)
(declare-fun f.wrPtrRst.in0_AT29 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT29 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT29 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT29 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT29 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT29 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT29 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT29 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT29 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT29 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT29 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT29 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT29 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT29 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT29 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT29 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT29 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT29 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT29 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT29 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT29 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT29 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT29 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT29 () (_ BitVec 4))
(declare-fun f.one.out_AT29 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT29 () (_ BitVec 4))
(declare-fun f.mem.wen_AT29 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT29 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT29 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT29 () (_ BitVec 3))
(declare-fun self.data_out_AT29 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT29 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT29 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT29 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT29 () (_ BitVec 3))
(declare-fun f.mem.clk_AT29 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT29 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT29 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT29 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT29 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT29 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT29 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT29 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT29 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT29 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT29 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT29 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT29 () (_ BitVec 1))
(declare-fun not_en.in_AT29 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT29 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT29 () (_ BitVec 1))
(declare-fun en.in_AT29 () (_ BitVec 1))
(declare-fun en.clk_AT29 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT29 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT29 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT29 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT29 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT29 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT29 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT29 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT29 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT29 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT29 () (_ BitVec 4))
(declare-fun magic_packet.out_AT29 () (_ BitVec 8))
(declare-fun magic_packet.init_AT29 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT29 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT29 () (_ BitVec 4))
(declare-fun f.mem.array_AT29 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT29 () (_ BitVec 1))
(declare-fun en.out_AT29 () (_ BitVec 1))
(declare-fun self.pop_AT29 () (_ BitVec 1))
(declare-fun self.empty_AT29 () (_ BitVec 1))
(declare-fun self.push_AT29 () (_ BitVec 1))
(declare-fun self.full_AT29 () (_ BitVec 1))
(declare-fun self.rst_AT29 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT29 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT29 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT29 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT29 () (_ BitVec 1))
(declare-fun self.start_AT29 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT29 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT29 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT29 () (_ BitVec 1))
(declare-fun self.prop_signal_AT29 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT29 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT29 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT29 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT29 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT29 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT29 () (_ BitVec 1))
(declare-fun mp_en.out_AT29 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT29 () (_ BitVec 1))
(declare-fun self.data_in_AT29 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT29 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT29 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT29 () (_ BitVec 1))
(declare-fun zero.out_AT29 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT29 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT29 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT29 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT29 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT29 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT29 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT29 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT29 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT29 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT29 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT29 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT29 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT29 () (_ BitVec 4))
(declare-fun mpt.one.out_AT29 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT29 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT29 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT29 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT29 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT29 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT29 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT29 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT29 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT29 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT29 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT29 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT29 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT29 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT29 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT29 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT29 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT29 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT29 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT29 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT29 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT29 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT29 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT29 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT29 () (_ BitVec 4))
(declare-fun self.clk_AT29 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT29 () (_ BitVec 1))
(declare-fun not_en.out_AT29 () (_ BitVec 1))
(declare-fun mp_en.in1_AT29 () (_ BitVec 1))
(declare-fun start_and_push.out_AT29 () (_ BitVec 1))
(declare-fun mp_en.in0_AT29 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT29 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT29 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT29 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT29 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT29 () (_ BitVec 8))
(declare-fun magic_packet.in_AT29 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT29 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT29 () (_ BitVec 1))
(declare-fun f.zero.out_AT29 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT29 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT29 () (_ BitVec 1))

(assert (=> (= self.empty_AT29 #b1) (= self.pop_AT29 #b0)))
(assert (=> (= self.full_AT29 #b1) (= self.push_AT29 #b0)))
(assert (=> (= _-_state_id_-__AT29 #b10) (and true (= self.rst_AT29 #b0))))
(assert (=> (= _-_state_id_-__AT29 #b01) (and (and (and true (= self.rst_AT29 #b1)) (= self.push_AT29 #b0)) (= self.pop_AT29 #b0))))
(assert (=> (= _-_state_id_-__AT29 #b00) (and (and (and true (= self.rst_AT29 #b1)) (= self.push_AT29 #b0)) (= self.pop_AT29 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT29 ((_ extract 3 3) f.wrPtr.out_AT29)))
(assert (= f.fullEq_1.in0_AT29 ((_ extract 3 3) f.rdPtr.out_AT29)))
(assert (= en.out_AT29 mpt.not_captured.in_AT29))
(assert (= self.start_AT29 start_and_push.in0_AT29))
(assert (= self.push_AT29 start_and_push.in1_AT29))
(assert (= self.push_AT29 mpt.ssa_cnt_and1.in1_AT29))
(assert (= self.prop_signal_AT29 prop_signal_or.out_AT29))
(assert (= self.pop_AT29 mpt.next_cnt_and1.in1_AT29))
(assert (= self.full_AT29 f.fullCalc.out_AT29))
(assert (= self.data_out_vld_AT29 data_out_vld_and2.out_AT29))
(assert (= not_data_out_vld.out_AT29 prop_signal_or.in0_AT29))
(assert (= next_magic_packet.sel_AT29 mp_en.out_AT29))
(assert (= next_magic_packet.in1_AT29 self.data_in_AT29))
(assert (= next_cnt_eq0.out_AT29 data_out_vld_and2.in1_AT29))
(assert (= next_cnt_eq0.in1_AT29 zero.out_AT29))
(assert (= mpt.ssa_cnt_gt_0.out_AT29 mpt.next_cnt_and1.in0_AT29))
(assert (= mpt.ssa_cnt_gt_0.in1_AT29 mpt.zero.out_AT29))
(assert (= mpt.ssa_cnt_and1.out_AT29 mpt.ssa_cnt_and2.in0_AT29))
(assert (= mpt.ssa_cnt.sel_AT29 mpt.ssa_cnt_and2.out_AT29))
(assert (= mpt.ssa_cnt.out_AT29 mpt.ssa_cnt_m1.in0_AT29))
(assert (= mpt.ssa_cnt.out_AT29 mpt.ssa_cnt_gt_0.in0_AT29))
(assert (= mpt.one.out_AT29 mpt.ssa_cnt_m1.in1_AT29))
(assert (= mpt.not_captured.out_AT29 mpt.ssa_cnt_and2.in1_AT29))
(assert (= mpt.next_cnt.sel_AT29 self.rst_AT29))
(assert (= mpt.next_cnt.out_AT29 next_cnt_eq0.in0_AT29))
(assert (= mpt.next_cnt.in1_AT29 mpt.zero.out_AT29))
(assert (= mpt.decr_mux.sel_AT29 mpt.next_cnt_and1.out_AT29))
(assert (= mpt.decr_mux.out_AT29 mpt.next_cnt.in0_AT29))
(assert (= mpt.decr_mux.in1_AT29 mpt.ssa_cnt_m1.out_AT29))
(assert (= mpt.decr_mux.in0_AT29 mpt.ssa_cnt.out_AT29))
(assert (= mpt.cnt_p1.out_AT29 mpt.ssa_cnt.in1_AT29))
(assert (= mpt.cnt_p1.in1_AT29 mpt.one.out_AT29))
(assert (= mpt.cnt_lt_depth.out_AT29 mpt.ssa_cnt_and1.in0_AT29))
(assert (= mpt.cnt_lt_depth.in1_AT29 mpt.depth.out_AT29))
(assert (= mpt.cnt.out_AT29 mpt.ssa_cnt.in0_AT29))
(assert (= mpt.cnt.out_AT29 mpt.cnt_p1.in0_AT29))
(assert (= mpt.cnt.out_AT29 mpt.cnt_lt_depth.in0_AT29))
(assert (= mpt.cnt.in_AT29 mpt.next_cnt.out_AT29))
(assert (= mpt.cnt.clk_AT29 self.clk_AT29))
(assert (= mp_en.in1_AT29 not_en.out_AT29))
(assert (= mp_en.in0_AT29 start_and_push.out_AT29))
(assert (= magic_packet_eq.out_AT29 prop_signal_or.in1_AT29))
(assert (= magic_packet.out_AT29 next_magic_packet.in0_AT29))
(assert (= magic_packet.out_AT29 magic_packet_eq.in0_AT29))
(assert (= magic_packet.in_AT29 next_magic_packet.out_AT29))
(assert (= magic_packet.clk_AT29 self.clk_AT29))
(assert (= f.wrPtrRst.sel_AT29 self.rst_AT29))
(assert (= f.wrPtrRst.in1_AT29 f.zero.out_AT29))
(assert (= f.wrPtrEn.sel_AT29 self.push_AT29))
(assert (= f.wrPtrEn.out_AT29 f.wrPtrRst.in0_AT29))
(assert (= f.wrPtrEn.in1_AT29 f.wrPtrp1.out_AT29))
(assert (= f.wrPtr.out_AT29 f.wrPtrp1.in1_AT29))
(assert (= f.wrPtr.out_AT29 f.wrPtrSlice.in_AT29))
(assert (= f.wrPtr.out_AT29 f.wrPtrEn.in0_AT29))
(assert (= f.wrPtr.in_AT29 f.wrPtrRst.out_AT29))
(assert (= f.wrPtr.clk_AT29 self.clk_AT29))
(assert (= f.rdPtrRst.sel_AT29 self.rst_AT29))
(assert (= f.rdPtrRst.in1_AT29 f.zero.out_AT29))
(assert (= f.rdPtrEn.sel_AT29 self.pop_AT29))
(assert (= f.rdPtrEn.out_AT29 f.rdPtrRst.in0_AT29))
(assert (= f.rdPtrEn.in1_AT29 f.rdPtrp1.out_AT29))
(assert (= f.rdPtr.out_AT29 f.rdPtrp1.in1_AT29))
(assert (= f.rdPtr.out_AT29 f.rdPtrSlice.in_AT29))
(assert (= f.rdPtr.out_AT29 f.rdPtrEn.in0_AT29))
(assert (= f.rdPtr.in_AT29 f.rdPtrRst.out_AT29))
(assert (= f.rdPtr.clk_AT29 self.clk_AT29))
(assert (= f.one.out_AT29 f.wrPtrp1.in0_AT29))
(assert (= f.one.out_AT29 f.rdPtrp1.in0_AT29))
(assert (= f.mem.wen_AT29 self.push_AT29))
(assert (= f.mem.wdata_AT29 self.data_in_AT29))
(assert (= f.mem.waddr_AT29 f.wrPtrSlice.out_AT29))
(assert (= f.mem.rdata_AT29 self.data_out_AT29))
(assert (= f.mem.rdata_AT29 magic_packet_eq.in1_AT29))
(assert (= f.mem.raddr_AT29 f.rdPtrSlice.out_AT29))
(assert (= f.mem.clk_AT29 self.clk_AT29))
(assert (= f.fullEq_2.out_AT29 f.fullCalc.in1_AT29))
(assert (= f.fullEq_2.in1_AT29 f.wrPtrSlice.out_AT29))
(assert (= f.fullEq_2.in0_AT29 f.rdPtrSlice.out_AT29))
(assert (= f.fullEq_1.out_AT29 f.notfullEq_1.in_AT29))
(assert (= f.fullCalc.in0_AT29 f.notfullEq_1.out_AT29))
(assert (= f.emptyEq.out_AT29 self.empty_AT29))
(assert (= f.emptyEq.in1_AT29 f.wrPtr.out_AT29))
(assert (= f.emptyEq.in0_AT29 f.rdPtr.out_AT29))
(assert (= en_or_sp.in1_AT29 start_and_push.out_AT29))
(assert (= en.out_AT29 not_en.in_AT29))
(assert (= en.out_AT29 en_or_sp.in0_AT29))
(assert (= en.in_AT29 en_or_sp.out_AT29))
(assert (= en.clk_AT29 self.clk_AT29))
(assert (= data_out_vld_and2.out_AT29 not_data_out_vld.in_AT29))
(assert (= data_out_vld_and1.out_AT29 data_out_vld_and2.in0_AT29))
(assert (= data_out_vld_and1.in0_AT29 en.out_AT29))
(assert (= cnt_gt_0.out_AT29 data_out_vld_and1.in1_AT29))
(assert (= cnt_gt_0.in1_AT29 zero.out_AT29))
(assert (= cnt_gt_0.in0_AT29 mpt.cnt.out_AT29))
(assert (= self.clk_AT29 #b0))
(assert (= zero.out_AT29 #b0000))
(assert (= (bvand start_and_push.in0_AT29 start_and_push.in1_AT29) start_and_push.out_AT29))
(assert (= (bvor prop_signal_or.in0_AT29 prop_signal_or.in1_AT29) prop_signal_or.out_AT29))
(assert (= (bvnot not_en.in_AT29) not_en.out_AT29))
(assert (= (bvnot not_data_out_vld.in_AT29) not_data_out_vld.out_AT29))
(assert (=> (= next_magic_packet.sel_AT29 #b1) (= next_magic_packet.in1_AT29 next_magic_packet.out_AT29)))
(assert (=> (= next_magic_packet.sel_AT29 #b0) (= next_magic_packet.in0_AT29 next_magic_packet.out_AT29)))
(assert (=> (not (= next_cnt_eq0.in0_AT29 next_cnt_eq0.in1_AT29)) (= next_cnt_eq0.out_AT29 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT29 next_cnt_eq0.in1_AT29) (= next_cnt_eq0.out_AT29 #b1)))
(assert (= mpt.zero.out_AT29 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT29 mpt.ssa_cnt_m1.in1_AT29) mpt.ssa_cnt_m1.out_AT29))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT29 mpt.ssa_cnt_gt_0.in0_AT29) (= mpt.ssa_cnt_gt_0.out_AT29 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT29 mpt.ssa_cnt_and2.in1_AT29) mpt.ssa_cnt_and2.out_AT29))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT29 mpt.ssa_cnt_and1.in1_AT29) mpt.ssa_cnt_and1.out_AT29))
(assert (=> (= mpt.ssa_cnt.sel_AT29 #b1) (= mpt.ssa_cnt.in1_AT29 mpt.ssa_cnt.out_AT29)))
(assert (=> (= mpt.ssa_cnt.sel_AT29 #b0) (= mpt.ssa_cnt.in0_AT29 mpt.ssa_cnt.out_AT29)))
(assert (= mpt.one.out_AT29 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT29) mpt.not_captured.out_AT29))
(assert (= (bvand mpt.next_cnt_and1.in0_AT29 mpt.next_cnt_and1.in1_AT29) mpt.next_cnt_and1.out_AT29))
(assert (=> (= mpt.next_cnt.sel_AT29 #b1) (= mpt.next_cnt.in1_AT29 mpt.next_cnt.out_AT29)))
(assert (=> (= mpt.next_cnt.sel_AT29 #b0) (= mpt.next_cnt.in0_AT29 mpt.next_cnt.out_AT29)))
(assert (= mpt.depth.out_AT29 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT29 #b1) (= mpt.decr_mux.in1_AT29 mpt.decr_mux.out_AT29)))
(assert (=> (= mpt.decr_mux.sel_AT29 #b0) (= mpt.decr_mux.in0_AT29 mpt.decr_mux.out_AT29)))
(assert (= (bvadd mpt.cnt_p1.in0_AT29 mpt.cnt_p1.in1_AT29) mpt.cnt_p1.out_AT29))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT29 mpt.cnt_lt_depth.in1_AT29) (= mpt.cnt_lt_depth.out_AT29 #b1)))
(assert (= (bvand mp_en.in0_AT29 mp_en.in1_AT29) mp_en.out_AT29))
(assert (=> (not (= magic_packet_eq.in0_AT29 magic_packet_eq.in1_AT29)) (= magic_packet_eq.out_AT29 #b0)))
(assert (=> (= magic_packet_eq.in0_AT29 magic_packet_eq.in1_AT29) (= magic_packet_eq.out_AT29 #b1)))
(assert (= f.zero.out_AT29 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT29 f.wrPtrp1.in1_AT29) f.wrPtrp1.out_AT29))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT29) f.wrPtrSlice.out_AT29))
(assert (=> (= f.wrPtrRst.sel_AT29 #b1) (= f.wrPtrRst.in1_AT29 f.wrPtrRst.out_AT29)))
(assert (=> (= f.wrPtrRst.sel_AT29 #b0) (= f.wrPtrRst.in0_AT29 f.wrPtrRst.out_AT29)))
(assert (=> (= f.wrPtrEn.sel_AT29 #b1) (= f.wrPtrEn.in1_AT29 f.wrPtrEn.out_AT29)))
(assert (=> (= f.wrPtrEn.sel_AT29 #b0) (= f.wrPtrEn.in0_AT29 f.wrPtrEn.out_AT29)))
(assert (= (bvadd f.rdPtrp1.in0_AT29 f.rdPtrp1.in1_AT29) f.rdPtrp1.out_AT29))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT29) f.rdPtrSlice.out_AT29))
(assert (=> (= f.rdPtrRst.sel_AT29 #b1) (= f.rdPtrRst.in1_AT29 f.rdPtrRst.out_AT29)))
(assert (=> (= f.rdPtrRst.sel_AT29 #b0) (= f.rdPtrRst.in0_AT29 f.rdPtrRst.out_AT29)))
(assert (=> (= f.rdPtrEn.sel_AT29 #b1) (= f.rdPtrEn.in1_AT29 f.rdPtrEn.out_AT29)))
(assert (=> (= f.rdPtrEn.sel_AT29 #b0) (= f.rdPtrEn.in0_AT29 f.rdPtrEn.out_AT29)))
(assert (= f.one.out_AT29 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT29) f.notfullEq_1.out_AT29))
(assert (= f.mem.rdata_AT29 (select f.mem.array_AT29 f.mem.raddr_AT29)))
(assert (=> (not (= f.fullEq_2.in0_AT29 f.fullEq_2.in1_AT29)) (= f.fullEq_2.out_AT29 #b0)))
(assert (=> (= f.fullEq_2.in0_AT29 f.fullEq_2.in1_AT29) (= f.fullEq_2.out_AT29 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT29 f.fullEq_1.in1_AT29)) (= f.fullEq_1.out_AT29 #b0)))
(assert (=> (= f.fullEq_1.in0_AT29 f.fullEq_1.in1_AT29) (= f.fullEq_1.out_AT29 #b1)))
(assert (= (bvand f.fullCalc.in0_AT29 f.fullCalc.in1_AT29) f.fullCalc.out_AT29))
(assert (=> (not (= f.emptyEq.in0_AT29 f.emptyEq.in1_AT29)) (= f.emptyEq.out_AT29 #b0)))
(assert (=> (= f.emptyEq.in0_AT29 f.emptyEq.in1_AT29) (= f.emptyEq.out_AT29 #b1)))
(assert (= (bvor en_or_sp.in0_AT29 en_or_sp.in1_AT29) en_or_sp.out_AT29))
(assert (= (bvand data_out_vld_and2.in0_AT29 data_out_vld_and2.in1_AT29) data_out_vld_and2.out_AT29))
(assert (= (bvand data_out_vld_and1.in0_AT29 data_out_vld_and1.in1_AT29) data_out_vld_and1.out_AT29))
(assert (= (bvult cnt_gt_0.in1_AT29 cnt_gt_0.in0_AT29) (= cnt_gt_0.out_AT29 #b1)))
(assert (=> (= _-_state_id_-__AT28 #b10) (= _-_state_id_-__AT29 #b10)))
(assert (=> (= _-_state_id_-__AT28 #b01) (= _-_state_id_-__AT29 #b10)))
(assert (=> (= _-_state_id_-__AT28 #b00) (= _-_state_id_-__AT29 #b01)))
(assert (= mpt.cnt.in_AT28 mpt.cnt.out_AT29))
(assert (= magic_packet.in_AT28 magic_packet.out_AT29))
(assert (= magic_packet.init_AT28 magic_packet.init_AT29))
(assert (= f.wrPtr.in_AT28 f.wrPtr.out_AT29))
(assert (= f.rdPtr.in_AT28 f.rdPtr.out_AT29))
(assert (= f.mem.array_AT29 (ite (= f.mem.wen_AT28 #b1) (store f.mem.array_AT28 f.mem.waddr_AT28 f.mem.wdata_AT28) f.mem.array_AT28)))
(assert (= en.init_AT28 en.init_AT29))
(assert (= en.in_AT28 en.out_AT29))
(push 1)

(assert (not (= self.prop_signal_AT29 #b1)))
(check-sat)

(pop 1)
(declare-fun f.fullEq_1.in0_AT30 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT30 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT30 () (_ BitVec 1))
(declare-fun self.start_AT30 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT30 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT30 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT30 () (_ BitVec 1))
(declare-fun self.prop_signal_AT30 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT30 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT30 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT30 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT30 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT30 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT30 () (_ BitVec 1))
(declare-fun mp_en.out_AT30 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT30 () (_ BitVec 1))
(declare-fun self.data_in_AT30 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT30 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT30 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT30 () (_ BitVec 1))
(declare-fun zero.out_AT30 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT30 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT30 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT30 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT30 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT30 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT30 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT30 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT30 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT30 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT30 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT30 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT30 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT30 () (_ BitVec 4))
(declare-fun mpt.one.out_AT30 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT30 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT30 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT30 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT30 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT30 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT30 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT30 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT30 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT30 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT30 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT30 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT30 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT30 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT30 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT30 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT30 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT30 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT30 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT30 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT30 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT30 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT30 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT30 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT30 () (_ BitVec 4))
(declare-fun self.clk_AT30 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT30 () (_ BitVec 1))
(declare-fun not_en.out_AT30 () (_ BitVec 1))
(declare-fun mp_en.in1_AT30 () (_ BitVec 1))
(declare-fun start_and_push.out_AT30 () (_ BitVec 1))
(declare-fun mp_en.in0_AT30 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT30 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT30 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT30 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT30 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT30 () (_ BitVec 8))
(declare-fun magic_packet.in_AT30 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT30 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT30 () (_ BitVec 1))
(declare-fun f.zero.out_AT30 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT30 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT30 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT30 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT30 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT30 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT30 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT30 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT30 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT30 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT30 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT30 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT30 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT30 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT30 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT30 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT30 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT30 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT30 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT30 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT30 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT30 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT30 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT30 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT30 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT30 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT30 () (_ BitVec 4))
(declare-fun f.one.out_AT30 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT30 () (_ BitVec 4))
(declare-fun f.mem.wen_AT30 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT30 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT30 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT30 () (_ BitVec 3))
(declare-fun self.data_out_AT30 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT30 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT30 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT30 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT30 () (_ BitVec 3))
(declare-fun f.mem.clk_AT30 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT30 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT30 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT30 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT30 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT30 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT30 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT30 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT30 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT30 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT30 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT30 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT30 () (_ BitVec 1))
(declare-fun not_en.in_AT30 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT30 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT30 () (_ BitVec 1))
(declare-fun en.in_AT30 () (_ BitVec 1))
(declare-fun en.clk_AT30 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT30 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT30 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT30 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT30 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT30 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT30 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT30 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT30 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT30 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT30 () (_ BitVec 4))
(declare-fun magic_packet.out_AT30 () (_ BitVec 8))
(declare-fun magic_packet.init_AT30 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT30 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT30 () (_ BitVec 4))
(declare-fun f.mem.array_AT30 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT30 () (_ BitVec 1))
(declare-fun en.out_AT30 () (_ BitVec 1))
(declare-fun self.pop_AT30 () (_ BitVec 1))
(declare-fun self.empty_AT30 () (_ BitVec 1))
(declare-fun self.push_AT30 () (_ BitVec 1))
(declare-fun self.full_AT30 () (_ BitVec 1))
(declare-fun self.rst_AT30 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT30 () (_ BitVec 1))

(assert (=> (= self.empty_AT30 #b1) (= self.pop_AT30 #b0)))
(assert (=> (= self.full_AT30 #b1) (= self.push_AT30 #b0)))
(assert (=> (= _-_state_id_-__AT30 #b10) (and true (= self.rst_AT30 #b0))))
(assert (=> (= _-_state_id_-__AT30 #b01) (and (and (and true (= self.rst_AT30 #b1)) (= self.push_AT30 #b0)) (= self.pop_AT30 #b0))))
(assert (=> (= _-_state_id_-__AT30 #b00) (and (and (and true (= self.rst_AT30 #b1)) (= self.push_AT30 #b0)) (= self.pop_AT30 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT30 ((_ extract 3 3) f.wrPtr.out_AT30)))
(assert (= f.fullEq_1.in0_AT30 ((_ extract 3 3) f.rdPtr.out_AT30)))
(assert (= en.out_AT30 mpt.not_captured.in_AT30))
(assert (= self.start_AT30 start_and_push.in0_AT30))
(assert (= self.push_AT30 start_and_push.in1_AT30))
(assert (= self.push_AT30 mpt.ssa_cnt_and1.in1_AT30))
(assert (= self.prop_signal_AT30 prop_signal_or.out_AT30))
(assert (= self.pop_AT30 mpt.next_cnt_and1.in1_AT30))
(assert (= self.full_AT30 f.fullCalc.out_AT30))
(assert (= self.data_out_vld_AT30 data_out_vld_and2.out_AT30))
(assert (= not_data_out_vld.out_AT30 prop_signal_or.in0_AT30))
(assert (= next_magic_packet.sel_AT30 mp_en.out_AT30))
(assert (= next_magic_packet.in1_AT30 self.data_in_AT30))
(assert (= next_cnt_eq0.out_AT30 data_out_vld_and2.in1_AT30))
(assert (= next_cnt_eq0.in1_AT30 zero.out_AT30))
(assert (= mpt.ssa_cnt_gt_0.out_AT30 mpt.next_cnt_and1.in0_AT30))
(assert (= mpt.ssa_cnt_gt_0.in1_AT30 mpt.zero.out_AT30))
(assert (= mpt.ssa_cnt_and1.out_AT30 mpt.ssa_cnt_and2.in0_AT30))
(assert (= mpt.ssa_cnt.sel_AT30 mpt.ssa_cnt_and2.out_AT30))
(assert (= mpt.ssa_cnt.out_AT30 mpt.ssa_cnt_m1.in0_AT30))
(assert (= mpt.ssa_cnt.out_AT30 mpt.ssa_cnt_gt_0.in0_AT30))
(assert (= mpt.one.out_AT30 mpt.ssa_cnt_m1.in1_AT30))
(assert (= mpt.not_captured.out_AT30 mpt.ssa_cnt_and2.in1_AT30))
(assert (= mpt.next_cnt.sel_AT30 self.rst_AT30))
(assert (= mpt.next_cnt.out_AT30 next_cnt_eq0.in0_AT30))
(assert (= mpt.next_cnt.in1_AT30 mpt.zero.out_AT30))
(assert (= mpt.decr_mux.sel_AT30 mpt.next_cnt_and1.out_AT30))
(assert (= mpt.decr_mux.out_AT30 mpt.next_cnt.in0_AT30))
(assert (= mpt.decr_mux.in1_AT30 mpt.ssa_cnt_m1.out_AT30))
(assert (= mpt.decr_mux.in0_AT30 mpt.ssa_cnt.out_AT30))
(assert (= mpt.cnt_p1.out_AT30 mpt.ssa_cnt.in1_AT30))
(assert (= mpt.cnt_p1.in1_AT30 mpt.one.out_AT30))
(assert (= mpt.cnt_lt_depth.out_AT30 mpt.ssa_cnt_and1.in0_AT30))
(assert (= mpt.cnt_lt_depth.in1_AT30 mpt.depth.out_AT30))
(assert (= mpt.cnt.out_AT30 mpt.ssa_cnt.in0_AT30))
(assert (= mpt.cnt.out_AT30 mpt.cnt_p1.in0_AT30))
(assert (= mpt.cnt.out_AT30 mpt.cnt_lt_depth.in0_AT30))
(assert (= mpt.cnt.in_AT30 mpt.next_cnt.out_AT30))
(assert (= mpt.cnt.clk_AT30 self.clk_AT30))
(assert (= mp_en.in1_AT30 not_en.out_AT30))
(assert (= mp_en.in0_AT30 start_and_push.out_AT30))
(assert (= magic_packet_eq.out_AT30 prop_signal_or.in1_AT30))
(assert (= magic_packet.out_AT30 next_magic_packet.in0_AT30))
(assert (= magic_packet.out_AT30 magic_packet_eq.in0_AT30))
(assert (= magic_packet.in_AT30 next_magic_packet.out_AT30))
(assert (= magic_packet.clk_AT30 self.clk_AT30))
(assert (= f.wrPtrRst.sel_AT30 self.rst_AT30))
(assert (= f.wrPtrRst.in1_AT30 f.zero.out_AT30))
(assert (= f.wrPtrEn.sel_AT30 self.push_AT30))
(assert (= f.wrPtrEn.out_AT30 f.wrPtrRst.in0_AT30))
(assert (= f.wrPtrEn.in1_AT30 f.wrPtrp1.out_AT30))
(assert (= f.wrPtr.out_AT30 f.wrPtrp1.in1_AT30))
(assert (= f.wrPtr.out_AT30 f.wrPtrSlice.in_AT30))
(assert (= f.wrPtr.out_AT30 f.wrPtrEn.in0_AT30))
(assert (= f.wrPtr.in_AT30 f.wrPtrRst.out_AT30))
(assert (= f.wrPtr.clk_AT30 self.clk_AT30))
(assert (= f.rdPtrRst.sel_AT30 self.rst_AT30))
(assert (= f.rdPtrRst.in1_AT30 f.zero.out_AT30))
(assert (= f.rdPtrEn.sel_AT30 self.pop_AT30))
(assert (= f.rdPtrEn.out_AT30 f.rdPtrRst.in0_AT30))
(assert (= f.rdPtrEn.in1_AT30 f.rdPtrp1.out_AT30))
(assert (= f.rdPtr.out_AT30 f.rdPtrp1.in1_AT30))
(assert (= f.rdPtr.out_AT30 f.rdPtrSlice.in_AT30))
(assert (= f.rdPtr.out_AT30 f.rdPtrEn.in0_AT30))
(assert (= f.rdPtr.in_AT30 f.rdPtrRst.out_AT30))
(assert (= f.rdPtr.clk_AT30 self.clk_AT30))
(assert (= f.one.out_AT30 f.wrPtrp1.in0_AT30))
(assert (= f.one.out_AT30 f.rdPtrp1.in0_AT30))
(assert (= f.mem.wen_AT30 self.push_AT30))
(assert (= f.mem.wdata_AT30 self.data_in_AT30))
(assert (= f.mem.waddr_AT30 f.wrPtrSlice.out_AT30))
(assert (= f.mem.rdata_AT30 self.data_out_AT30))
(assert (= f.mem.rdata_AT30 magic_packet_eq.in1_AT30))
(assert (= f.mem.raddr_AT30 f.rdPtrSlice.out_AT30))
(assert (= f.mem.clk_AT30 self.clk_AT30))
(assert (= f.fullEq_2.out_AT30 f.fullCalc.in1_AT30))
(assert (= f.fullEq_2.in1_AT30 f.wrPtrSlice.out_AT30))
(assert (= f.fullEq_2.in0_AT30 f.rdPtrSlice.out_AT30))
(assert (= f.fullEq_1.out_AT30 f.notfullEq_1.in_AT30))
(assert (= f.fullCalc.in0_AT30 f.notfullEq_1.out_AT30))
(assert (= f.emptyEq.out_AT30 self.empty_AT30))
(assert (= f.emptyEq.in1_AT30 f.wrPtr.out_AT30))
(assert (= f.emptyEq.in0_AT30 f.rdPtr.out_AT30))
(assert (= en_or_sp.in1_AT30 start_and_push.out_AT30))
(assert (= en.out_AT30 not_en.in_AT30))
(assert (= en.out_AT30 en_or_sp.in0_AT30))
(assert (= en.in_AT30 en_or_sp.out_AT30))
(assert (= en.clk_AT30 self.clk_AT30))
(assert (= data_out_vld_and2.out_AT30 not_data_out_vld.in_AT30))
(assert (= data_out_vld_and1.out_AT30 data_out_vld_and2.in0_AT30))
(assert (= data_out_vld_and1.in0_AT30 en.out_AT30))
(assert (= cnt_gt_0.out_AT30 data_out_vld_and1.in1_AT30))
(assert (= cnt_gt_0.in1_AT30 zero.out_AT30))
(assert (= cnt_gt_0.in0_AT30 mpt.cnt.out_AT30))
(assert (= self.clk_AT30 #b0))
(assert (= zero.out_AT30 #b0000))
(assert (= (bvand start_and_push.in0_AT30 start_and_push.in1_AT30) start_and_push.out_AT30))
(assert (= (bvor prop_signal_or.in0_AT30 prop_signal_or.in1_AT30) prop_signal_or.out_AT30))
(assert (= (bvnot not_en.in_AT30) not_en.out_AT30))
(assert (= (bvnot not_data_out_vld.in_AT30) not_data_out_vld.out_AT30))
(assert (=> (= next_magic_packet.sel_AT30 #b1) (= next_magic_packet.in1_AT30 next_magic_packet.out_AT30)))
(assert (=> (= next_magic_packet.sel_AT30 #b0) (= next_magic_packet.in0_AT30 next_magic_packet.out_AT30)))
(assert (=> (not (= next_cnt_eq0.in0_AT30 next_cnt_eq0.in1_AT30)) (= next_cnt_eq0.out_AT30 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT30 next_cnt_eq0.in1_AT30) (= next_cnt_eq0.out_AT30 #b1)))
(assert (= mpt.zero.out_AT30 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT30 mpt.ssa_cnt_m1.in1_AT30) mpt.ssa_cnt_m1.out_AT30))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT30 mpt.ssa_cnt_gt_0.in0_AT30) (= mpt.ssa_cnt_gt_0.out_AT30 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT30 mpt.ssa_cnt_and2.in1_AT30) mpt.ssa_cnt_and2.out_AT30))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT30 mpt.ssa_cnt_and1.in1_AT30) mpt.ssa_cnt_and1.out_AT30))
(assert (=> (= mpt.ssa_cnt.sel_AT30 #b1) (= mpt.ssa_cnt.in1_AT30 mpt.ssa_cnt.out_AT30)))
(assert (=> (= mpt.ssa_cnt.sel_AT30 #b0) (= mpt.ssa_cnt.in0_AT30 mpt.ssa_cnt.out_AT30)))
(assert (= mpt.one.out_AT30 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT30) mpt.not_captured.out_AT30))
(assert (= (bvand mpt.next_cnt_and1.in0_AT30 mpt.next_cnt_and1.in1_AT30) mpt.next_cnt_and1.out_AT30))
(assert (=> (= mpt.next_cnt.sel_AT30 #b1) (= mpt.next_cnt.in1_AT30 mpt.next_cnt.out_AT30)))
(assert (=> (= mpt.next_cnt.sel_AT30 #b0) (= mpt.next_cnt.in0_AT30 mpt.next_cnt.out_AT30)))
(assert (= mpt.depth.out_AT30 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT30 #b1) (= mpt.decr_mux.in1_AT30 mpt.decr_mux.out_AT30)))
(assert (=> (= mpt.decr_mux.sel_AT30 #b0) (= mpt.decr_mux.in0_AT30 mpt.decr_mux.out_AT30)))
(assert (= (bvadd mpt.cnt_p1.in0_AT30 mpt.cnt_p1.in1_AT30) mpt.cnt_p1.out_AT30))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT30 mpt.cnt_lt_depth.in1_AT30) (= mpt.cnt_lt_depth.out_AT30 #b1)))
(assert (= (bvand mp_en.in0_AT30 mp_en.in1_AT30) mp_en.out_AT30))
(assert (=> (not (= magic_packet_eq.in0_AT30 magic_packet_eq.in1_AT30)) (= magic_packet_eq.out_AT30 #b0)))
(assert (=> (= magic_packet_eq.in0_AT30 magic_packet_eq.in1_AT30) (= magic_packet_eq.out_AT30 #b1)))
(assert (= f.zero.out_AT30 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT30 f.wrPtrp1.in1_AT30) f.wrPtrp1.out_AT30))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT30) f.wrPtrSlice.out_AT30))
(assert (=> (= f.wrPtrRst.sel_AT30 #b1) (= f.wrPtrRst.in1_AT30 f.wrPtrRst.out_AT30)))
(assert (=> (= f.wrPtrRst.sel_AT30 #b0) (= f.wrPtrRst.in0_AT30 f.wrPtrRst.out_AT30)))
(assert (=> (= f.wrPtrEn.sel_AT30 #b1) (= f.wrPtrEn.in1_AT30 f.wrPtrEn.out_AT30)))
(assert (=> (= f.wrPtrEn.sel_AT30 #b0) (= f.wrPtrEn.in0_AT30 f.wrPtrEn.out_AT30)))
(assert (= (bvadd f.rdPtrp1.in0_AT30 f.rdPtrp1.in1_AT30) f.rdPtrp1.out_AT30))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT30) f.rdPtrSlice.out_AT30))
(assert (=> (= f.rdPtrRst.sel_AT30 #b1) (= f.rdPtrRst.in1_AT30 f.rdPtrRst.out_AT30)))
(assert (=> (= f.rdPtrRst.sel_AT30 #b0) (= f.rdPtrRst.in0_AT30 f.rdPtrRst.out_AT30)))
(assert (=> (= f.rdPtrEn.sel_AT30 #b1) (= f.rdPtrEn.in1_AT30 f.rdPtrEn.out_AT30)))
(assert (=> (= f.rdPtrEn.sel_AT30 #b0) (= f.rdPtrEn.in0_AT30 f.rdPtrEn.out_AT30)))
(assert (= f.one.out_AT30 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT30) f.notfullEq_1.out_AT30))
(assert (= f.mem.rdata_AT30 (select f.mem.array_AT30 f.mem.raddr_AT30)))
(assert (=> (not (= f.fullEq_2.in0_AT30 f.fullEq_2.in1_AT30)) (= f.fullEq_2.out_AT30 #b0)))
(assert (=> (= f.fullEq_2.in0_AT30 f.fullEq_2.in1_AT30) (= f.fullEq_2.out_AT30 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT30 f.fullEq_1.in1_AT30)) (= f.fullEq_1.out_AT30 #b0)))
(assert (=> (= f.fullEq_1.in0_AT30 f.fullEq_1.in1_AT30) (= f.fullEq_1.out_AT30 #b1)))
(assert (= (bvand f.fullCalc.in0_AT30 f.fullCalc.in1_AT30) f.fullCalc.out_AT30))
(assert (=> (not (= f.emptyEq.in0_AT30 f.emptyEq.in1_AT30)) (= f.emptyEq.out_AT30 #b0)))
(assert (=> (= f.emptyEq.in0_AT30 f.emptyEq.in1_AT30) (= f.emptyEq.out_AT30 #b1)))
(assert (= (bvor en_or_sp.in0_AT30 en_or_sp.in1_AT30) en_or_sp.out_AT30))
(assert (= (bvand data_out_vld_and2.in0_AT30 data_out_vld_and2.in1_AT30) data_out_vld_and2.out_AT30))
(assert (= (bvand data_out_vld_and1.in0_AT30 data_out_vld_and1.in1_AT30) data_out_vld_and1.out_AT30))
(assert (= (bvult cnt_gt_0.in1_AT30 cnt_gt_0.in0_AT30) (= cnt_gt_0.out_AT30 #b1)))
(assert (=> (= _-_state_id_-__AT29 #b10) (= _-_state_id_-__AT30 #b10)))
(assert (=> (= _-_state_id_-__AT29 #b01) (= _-_state_id_-__AT30 #b10)))
(assert (=> (= _-_state_id_-__AT29 #b00) (= _-_state_id_-__AT30 #b01)))
(assert (= mpt.cnt.in_AT29 mpt.cnt.out_AT30))
(assert (= magic_packet.in_AT29 magic_packet.out_AT30))
(assert (= magic_packet.init_AT29 magic_packet.init_AT30))
(assert (= f.wrPtr.in_AT29 f.wrPtr.out_AT30))
(assert (= f.rdPtr.in_AT29 f.rdPtr.out_AT30))
(assert (= f.mem.array_AT30 (ite (= f.mem.wen_AT29 #b1) (store f.mem.array_AT29 f.mem.waddr_AT29 f.mem.wdata_AT29) f.mem.array_AT29)))
(assert (= en.init_AT29 en.init_AT30))
(assert (= en.in_AT29 en.out_AT30))
(push 1)

(assert (not (= self.prop_signal_AT30 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT31 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT31 () (_ BitVec 4))
(declare-fun magic_packet.out_AT31 () (_ BitVec 8))
(declare-fun magic_packet.init_AT31 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT31 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT31 () (_ BitVec 4))
(declare-fun f.mem.array_AT31 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun en.init_AT31 () (_ BitVec 1))
(declare-fun en.out_AT31 () (_ BitVec 1))
(declare-fun self.pop_AT31 () (_ BitVec 1))
(declare-fun self.empty_AT31 () (_ BitVec 1))
(declare-fun self.push_AT31 () (_ BitVec 1))
(declare-fun self.full_AT31 () (_ BitVec 1))
(declare-fun self.rst_AT31 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT31 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT31 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT31 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT31 () (_ BitVec 1))
(declare-fun self.start_AT31 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT31 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT31 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT31 () (_ BitVec 1))
(declare-fun self.prop_signal_AT31 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT31 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT31 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT31 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT31 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT31 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT31 () (_ BitVec 1))
(declare-fun mp_en.out_AT31 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT31 () (_ BitVec 1))
(declare-fun self.data_in_AT31 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT31 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT31 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT31 () (_ BitVec 1))
(declare-fun zero.out_AT31 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT31 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT31 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT31 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT31 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT31 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT31 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT31 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT31 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT31 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT31 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT31 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT31 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT31 () (_ BitVec 4))
(declare-fun mpt.one.out_AT31 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT31 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT31 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT31 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT31 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT31 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT31 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT31 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT31 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT31 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT31 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT31 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT31 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT31 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT31 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT31 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT31 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT31 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT31 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT31 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT31 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT31 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT31 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT31 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT31 () (_ BitVec 4))
(declare-fun self.clk_AT31 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT31 () (_ BitVec 1))
(declare-fun not_en.out_AT31 () (_ BitVec 1))
(declare-fun mp_en.in1_AT31 () (_ BitVec 1))
(declare-fun start_and_push.out_AT31 () (_ BitVec 1))
(declare-fun mp_en.in0_AT31 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT31 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT31 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT31 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT31 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT31 () (_ BitVec 8))
(declare-fun magic_packet.in_AT31 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT31 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT31 () (_ BitVec 1))
(declare-fun f.zero.out_AT31 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT31 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT31 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT31 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT31 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT31 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT31 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT31 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT31 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT31 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT31 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT31 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT31 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT31 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT31 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT31 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT31 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT31 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT31 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT31 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT31 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT31 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT31 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT31 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT31 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT31 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT31 () (_ BitVec 4))
(declare-fun f.one.out_AT31 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT31 () (_ BitVec 4))
(declare-fun f.mem.wen_AT31 () (_ BitVec 1))
(declare-fun f.mem.wdata_AT31 () (_ BitVec 8))
(declare-fun f.wrPtrSlice.out_AT31 () (_ BitVec 3))
(declare-fun f.mem.waddr_AT31 () (_ BitVec 3))
(declare-fun self.data_out_AT31 () (_ BitVec 8))
(declare-fun f.mem.rdata_AT31 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT31 () (_ BitVec 8))
(declare-fun f.rdPtrSlice.out_AT31 () (_ BitVec 3))
(declare-fun f.mem.raddr_AT31 () (_ BitVec 3))
(declare-fun f.mem.clk_AT31 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT31 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT31 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT31 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT31 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT31 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT31 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT31 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT31 () (_ BitVec 1))
(declare-fun f.emptyEq.out_AT31 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT31 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT31 () (_ BitVec 4))
(declare-fun en_or_sp.in1_AT31 () (_ BitVec 1))
(declare-fun not_en.in_AT31 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT31 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT31 () (_ BitVec 1))
(declare-fun en.in_AT31 () (_ BitVec 1))
(declare-fun en.clk_AT31 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT31 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT31 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT31 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT31 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT31 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT31 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT31 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT31 () (_ BitVec 4))

(assert (=> (= self.empty_AT31 #b1) (= self.pop_AT31 #b0)))
(assert (=> (= self.full_AT31 #b1) (= self.push_AT31 #b0)))
(assert (=> (= _-_state_id_-__AT31 #b10) (and true (= self.rst_AT31 #b0))))
(assert (=> (= _-_state_id_-__AT31 #b01) (and (and (and true (= self.rst_AT31 #b1)) (= self.push_AT31 #b0)) (= self.pop_AT31 #b0))))
(assert (=> (= _-_state_id_-__AT31 #b00) (and (and (and true (= self.rst_AT31 #b1)) (= self.push_AT31 #b0)) (= self.pop_AT31 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT31 ((_ extract 3 3) f.wrPtr.out_AT31)))
(assert (= f.fullEq_1.in0_AT31 ((_ extract 3 3) f.rdPtr.out_AT31)))
(assert (= en.out_AT31 mpt.not_captured.in_AT31))
(assert (= self.start_AT31 start_and_push.in0_AT31))
(assert (= self.push_AT31 start_and_push.in1_AT31))
(assert (= self.push_AT31 mpt.ssa_cnt_and1.in1_AT31))
(assert (= self.prop_signal_AT31 prop_signal_or.out_AT31))
(assert (= self.pop_AT31 mpt.next_cnt_and1.in1_AT31))
(assert (= self.full_AT31 f.fullCalc.out_AT31))
(assert (= self.data_out_vld_AT31 data_out_vld_and2.out_AT31))
(assert (= not_data_out_vld.out_AT31 prop_signal_or.in0_AT31))
(assert (= next_magic_packet.sel_AT31 mp_en.out_AT31))
(assert (= next_magic_packet.in1_AT31 self.data_in_AT31))
(assert (= next_cnt_eq0.out_AT31 data_out_vld_and2.in1_AT31))
(assert (= next_cnt_eq0.in1_AT31 zero.out_AT31))
(assert (= mpt.ssa_cnt_gt_0.out_AT31 mpt.next_cnt_and1.in0_AT31))
(assert (= mpt.ssa_cnt_gt_0.in1_AT31 mpt.zero.out_AT31))
(assert (= mpt.ssa_cnt_and1.out_AT31 mpt.ssa_cnt_and2.in0_AT31))
(assert (= mpt.ssa_cnt.sel_AT31 mpt.ssa_cnt_and2.out_AT31))
(assert (= mpt.ssa_cnt.out_AT31 mpt.ssa_cnt_m1.in0_AT31))
(assert (= mpt.ssa_cnt.out_AT31 mpt.ssa_cnt_gt_0.in0_AT31))
(assert (= mpt.one.out_AT31 mpt.ssa_cnt_m1.in1_AT31))
(assert (= mpt.not_captured.out_AT31 mpt.ssa_cnt_and2.in1_AT31))
(assert (= mpt.next_cnt.sel_AT31 self.rst_AT31))
(assert (= mpt.next_cnt.out_AT31 next_cnt_eq0.in0_AT31))
(assert (= mpt.next_cnt.in1_AT31 mpt.zero.out_AT31))
(assert (= mpt.decr_mux.sel_AT31 mpt.next_cnt_and1.out_AT31))
(assert (= mpt.decr_mux.out_AT31 mpt.next_cnt.in0_AT31))
(assert (= mpt.decr_mux.in1_AT31 mpt.ssa_cnt_m1.out_AT31))
(assert (= mpt.decr_mux.in0_AT31 mpt.ssa_cnt.out_AT31))
(assert (= mpt.cnt_p1.out_AT31 mpt.ssa_cnt.in1_AT31))
(assert (= mpt.cnt_p1.in1_AT31 mpt.one.out_AT31))
(assert (= mpt.cnt_lt_depth.out_AT31 mpt.ssa_cnt_and1.in0_AT31))
(assert (= mpt.cnt_lt_depth.in1_AT31 mpt.depth.out_AT31))
(assert (= mpt.cnt.out_AT31 mpt.ssa_cnt.in0_AT31))
(assert (= mpt.cnt.out_AT31 mpt.cnt_p1.in0_AT31))
(assert (= mpt.cnt.out_AT31 mpt.cnt_lt_depth.in0_AT31))
(assert (= mpt.cnt.in_AT31 mpt.next_cnt.out_AT31))
(assert (= mpt.cnt.clk_AT31 self.clk_AT31))
(assert (= mp_en.in1_AT31 not_en.out_AT31))
(assert (= mp_en.in0_AT31 start_and_push.out_AT31))
(assert (= magic_packet_eq.out_AT31 prop_signal_or.in1_AT31))
(assert (= magic_packet.out_AT31 next_magic_packet.in0_AT31))
(assert (= magic_packet.out_AT31 magic_packet_eq.in0_AT31))
(assert (= magic_packet.in_AT31 next_magic_packet.out_AT31))
(assert (= magic_packet.clk_AT31 self.clk_AT31))
(assert (= f.wrPtrRst.sel_AT31 self.rst_AT31))
(assert (= f.wrPtrRst.in1_AT31 f.zero.out_AT31))
(assert (= f.wrPtrEn.sel_AT31 self.push_AT31))
(assert (= f.wrPtrEn.out_AT31 f.wrPtrRst.in0_AT31))
(assert (= f.wrPtrEn.in1_AT31 f.wrPtrp1.out_AT31))
(assert (= f.wrPtr.out_AT31 f.wrPtrp1.in1_AT31))
(assert (= f.wrPtr.out_AT31 f.wrPtrSlice.in_AT31))
(assert (= f.wrPtr.out_AT31 f.wrPtrEn.in0_AT31))
(assert (= f.wrPtr.in_AT31 f.wrPtrRst.out_AT31))
(assert (= f.wrPtr.clk_AT31 self.clk_AT31))
(assert (= f.rdPtrRst.sel_AT31 self.rst_AT31))
(assert (= f.rdPtrRst.in1_AT31 f.zero.out_AT31))
(assert (= f.rdPtrEn.sel_AT31 self.pop_AT31))
(assert (= f.rdPtrEn.out_AT31 f.rdPtrRst.in0_AT31))
(assert (= f.rdPtrEn.in1_AT31 f.rdPtrp1.out_AT31))
(assert (= f.rdPtr.out_AT31 f.rdPtrp1.in1_AT31))
(assert (= f.rdPtr.out_AT31 f.rdPtrSlice.in_AT31))
(assert (= f.rdPtr.out_AT31 f.rdPtrEn.in0_AT31))
(assert (= f.rdPtr.in_AT31 f.rdPtrRst.out_AT31))
(assert (= f.rdPtr.clk_AT31 self.clk_AT31))
(assert (= f.one.out_AT31 f.wrPtrp1.in0_AT31))
(assert (= f.one.out_AT31 f.rdPtrp1.in0_AT31))
(assert (= f.mem.wen_AT31 self.push_AT31))
(assert (= f.mem.wdata_AT31 self.data_in_AT31))
(assert (= f.mem.waddr_AT31 f.wrPtrSlice.out_AT31))
(assert (= f.mem.rdata_AT31 self.data_out_AT31))
(assert (= f.mem.rdata_AT31 magic_packet_eq.in1_AT31))
(assert (= f.mem.raddr_AT31 f.rdPtrSlice.out_AT31))
(assert (= f.mem.clk_AT31 self.clk_AT31))
(assert (= f.fullEq_2.out_AT31 f.fullCalc.in1_AT31))
(assert (= f.fullEq_2.in1_AT31 f.wrPtrSlice.out_AT31))
(assert (= f.fullEq_2.in0_AT31 f.rdPtrSlice.out_AT31))
(assert (= f.fullEq_1.out_AT31 f.notfullEq_1.in_AT31))
(assert (= f.fullCalc.in0_AT31 f.notfullEq_1.out_AT31))
(assert (= f.emptyEq.out_AT31 self.empty_AT31))
(assert (= f.emptyEq.in1_AT31 f.wrPtr.out_AT31))
(assert (= f.emptyEq.in0_AT31 f.rdPtr.out_AT31))
(assert (= en_or_sp.in1_AT31 start_and_push.out_AT31))
(assert (= en.out_AT31 not_en.in_AT31))
(assert (= en.out_AT31 en_or_sp.in0_AT31))
(assert (= en.in_AT31 en_or_sp.out_AT31))
(assert (= en.clk_AT31 self.clk_AT31))
(assert (= data_out_vld_and2.out_AT31 not_data_out_vld.in_AT31))
(assert (= data_out_vld_and1.out_AT31 data_out_vld_and2.in0_AT31))
(assert (= data_out_vld_and1.in0_AT31 en.out_AT31))
(assert (= cnt_gt_0.out_AT31 data_out_vld_and1.in1_AT31))
(assert (= cnt_gt_0.in1_AT31 zero.out_AT31))
(assert (= cnt_gt_0.in0_AT31 mpt.cnt.out_AT31))
(assert (= self.clk_AT31 #b0))
(assert (= zero.out_AT31 #b0000))
(assert (= (bvand start_and_push.in0_AT31 start_and_push.in1_AT31) start_and_push.out_AT31))
(assert (= (bvor prop_signal_or.in0_AT31 prop_signal_or.in1_AT31) prop_signal_or.out_AT31))
(assert (= (bvnot not_en.in_AT31) not_en.out_AT31))
(assert (= (bvnot not_data_out_vld.in_AT31) not_data_out_vld.out_AT31))
(assert (=> (= next_magic_packet.sel_AT31 #b1) (= next_magic_packet.in1_AT31 next_magic_packet.out_AT31)))
(assert (=> (= next_magic_packet.sel_AT31 #b0) (= next_magic_packet.in0_AT31 next_magic_packet.out_AT31)))
(assert (=> (not (= next_cnt_eq0.in0_AT31 next_cnt_eq0.in1_AT31)) (= next_cnt_eq0.out_AT31 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT31 next_cnt_eq0.in1_AT31) (= next_cnt_eq0.out_AT31 #b1)))
(assert (= mpt.zero.out_AT31 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT31 mpt.ssa_cnt_m1.in1_AT31) mpt.ssa_cnt_m1.out_AT31))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT31 mpt.ssa_cnt_gt_0.in0_AT31) (= mpt.ssa_cnt_gt_0.out_AT31 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT31 mpt.ssa_cnt_and2.in1_AT31) mpt.ssa_cnt_and2.out_AT31))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT31 mpt.ssa_cnt_and1.in1_AT31) mpt.ssa_cnt_and1.out_AT31))
(assert (=> (= mpt.ssa_cnt.sel_AT31 #b1) (= mpt.ssa_cnt.in1_AT31 mpt.ssa_cnt.out_AT31)))
(assert (=> (= mpt.ssa_cnt.sel_AT31 #b0) (= mpt.ssa_cnt.in0_AT31 mpt.ssa_cnt.out_AT31)))
(assert (= mpt.one.out_AT31 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT31) mpt.not_captured.out_AT31))
(assert (= (bvand mpt.next_cnt_and1.in0_AT31 mpt.next_cnt_and1.in1_AT31) mpt.next_cnt_and1.out_AT31))
(assert (=> (= mpt.next_cnt.sel_AT31 #b1) (= mpt.next_cnt.in1_AT31 mpt.next_cnt.out_AT31)))
(assert (=> (= mpt.next_cnt.sel_AT31 #b0) (= mpt.next_cnt.in0_AT31 mpt.next_cnt.out_AT31)))
(assert (= mpt.depth.out_AT31 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT31 #b1) (= mpt.decr_mux.in1_AT31 mpt.decr_mux.out_AT31)))
(assert (=> (= mpt.decr_mux.sel_AT31 #b0) (= mpt.decr_mux.in0_AT31 mpt.decr_mux.out_AT31)))
(assert (= (bvadd mpt.cnt_p1.in0_AT31 mpt.cnt_p1.in1_AT31) mpt.cnt_p1.out_AT31))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT31 mpt.cnt_lt_depth.in1_AT31) (= mpt.cnt_lt_depth.out_AT31 #b1)))
(assert (= (bvand mp_en.in0_AT31 mp_en.in1_AT31) mp_en.out_AT31))
(assert (=> (not (= magic_packet_eq.in0_AT31 magic_packet_eq.in1_AT31)) (= magic_packet_eq.out_AT31 #b0)))
(assert (=> (= magic_packet_eq.in0_AT31 magic_packet_eq.in1_AT31) (= magic_packet_eq.out_AT31 #b1)))
(assert (= f.zero.out_AT31 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT31 f.wrPtrp1.in1_AT31) f.wrPtrp1.out_AT31))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT31) f.wrPtrSlice.out_AT31))
(assert (=> (= f.wrPtrRst.sel_AT31 #b1) (= f.wrPtrRst.in1_AT31 f.wrPtrRst.out_AT31)))
(assert (=> (= f.wrPtrRst.sel_AT31 #b0) (= f.wrPtrRst.in0_AT31 f.wrPtrRst.out_AT31)))
(assert (=> (= f.wrPtrEn.sel_AT31 #b1) (= f.wrPtrEn.in1_AT31 f.wrPtrEn.out_AT31)))
(assert (=> (= f.wrPtrEn.sel_AT31 #b0) (= f.wrPtrEn.in0_AT31 f.wrPtrEn.out_AT31)))
(assert (= (bvadd f.rdPtrp1.in0_AT31 f.rdPtrp1.in1_AT31) f.rdPtrp1.out_AT31))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT31) f.rdPtrSlice.out_AT31))
(assert (=> (= f.rdPtrRst.sel_AT31 #b1) (= f.rdPtrRst.in1_AT31 f.rdPtrRst.out_AT31)))
(assert (=> (= f.rdPtrRst.sel_AT31 #b0) (= f.rdPtrRst.in0_AT31 f.rdPtrRst.out_AT31)))
(assert (=> (= f.rdPtrEn.sel_AT31 #b1) (= f.rdPtrEn.in1_AT31 f.rdPtrEn.out_AT31)))
(assert (=> (= f.rdPtrEn.sel_AT31 #b0) (= f.rdPtrEn.in0_AT31 f.rdPtrEn.out_AT31)))
(assert (= f.one.out_AT31 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT31) f.notfullEq_1.out_AT31))
(assert (= f.mem.rdata_AT31 (select f.mem.array_AT31 f.mem.raddr_AT31)))
(assert (=> (not (= f.fullEq_2.in0_AT31 f.fullEq_2.in1_AT31)) (= f.fullEq_2.out_AT31 #b0)))
(assert (=> (= f.fullEq_2.in0_AT31 f.fullEq_2.in1_AT31) (= f.fullEq_2.out_AT31 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT31 f.fullEq_1.in1_AT31)) (= f.fullEq_1.out_AT31 #b0)))
(assert (=> (= f.fullEq_1.in0_AT31 f.fullEq_1.in1_AT31) (= f.fullEq_1.out_AT31 #b1)))
(assert (= (bvand f.fullCalc.in0_AT31 f.fullCalc.in1_AT31) f.fullCalc.out_AT31))
(assert (=> (not (= f.emptyEq.in0_AT31 f.emptyEq.in1_AT31)) (= f.emptyEq.out_AT31 #b0)))
(assert (=> (= f.emptyEq.in0_AT31 f.emptyEq.in1_AT31) (= f.emptyEq.out_AT31 #b1)))
(assert (= (bvor en_or_sp.in0_AT31 en_or_sp.in1_AT31) en_or_sp.out_AT31))
(assert (= (bvand data_out_vld_and2.in0_AT31 data_out_vld_and2.in1_AT31) data_out_vld_and2.out_AT31))
(assert (= (bvand data_out_vld_and1.in0_AT31 data_out_vld_and1.in1_AT31) data_out_vld_and1.out_AT31))
(assert (= (bvult cnt_gt_0.in1_AT31 cnt_gt_0.in0_AT31) (= cnt_gt_0.out_AT31 #b1)))
(assert (=> (= _-_state_id_-__AT30 #b10) (= _-_state_id_-__AT31 #b10)))
(assert (=> (= _-_state_id_-__AT30 #b01) (= _-_state_id_-__AT31 #b10)))
(assert (=> (= _-_state_id_-__AT30 #b00) (= _-_state_id_-__AT31 #b01)))
(assert (= mpt.cnt.in_AT30 mpt.cnt.out_AT31))
(assert (= magic_packet.in_AT30 magic_packet.out_AT31))
(assert (= magic_packet.init_AT30 magic_packet.init_AT31))
(assert (= f.wrPtr.in_AT30 f.wrPtr.out_AT31))
(assert (= f.rdPtr.in_AT30 f.rdPtr.out_AT31))
(assert (= f.mem.array_AT31 (ite (= f.mem.wen_AT30 #b1) (store f.mem.array_AT30 f.mem.waddr_AT30 f.mem.wdata_AT30) f.mem.array_AT30)))
(assert (= en.init_AT30 en.init_AT31))
(assert (= en.in_AT30 en.out_AT31))
