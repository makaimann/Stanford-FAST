(set-logic QF_ABV)
(declare-fun self.pop_AT0 () (_ BitVec 1))
(declare-fun self.empty_AT0 () (_ BitVec 1))
(declare-fun self.push_AT0 () (_ BitVec 1))
(declare-fun self.full_AT0 () (_ BitVec 1))
(declare-fun self.rst_AT0 () (_ BitVec 1))
(declare-fun _-_state_id_-__AT0 () (_ BitVec 2))
(declare-fun f.wrPtr.out_AT0 () (_ BitVec 4))
(declare-fun f.fullEq_1.in1_AT0 () (_ BitVec 1))
(declare-fun f.rdPtr.out_AT0 () (_ BitVec 4))
(declare-fun f.fullEq_1.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT0 () (_ BitVec 1))
(declare-fun en.out_AT0 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT0 () (_ BitVec 1))
(declare-fun self.start_AT0 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT0 () (_ BitVec 1))
(declare-fun f.entryEn7.in0_AT0 () (_ BitVec 1))
(declare-fun f.entryEn6.in0_AT0 () (_ BitVec 1))
(declare-fun f.entryEn5.in0_AT0 () (_ BitVec 1))
(declare-fun f.entryEn4.in0_AT0 () (_ BitVec 1))
(declare-fun f.entryEn3.in0_AT0 () (_ BitVec 1))
(declare-fun f.entryEn2.in0_AT0 () (_ BitVec 1))
(declare-fun f.entryEn1.in0_AT0 () (_ BitVec 1))
(declare-fun f.entryEn0.in0_AT0 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT0 () (_ BitVec 1))
(declare-fun self.prop_signal_AT0 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT0 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT0 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT0 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT0 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT0 () (_ BitVec 1))
(declare-fun mp_en.out_AT0 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT0 () (_ BitVec 1))
(declare-fun self.data_in_AT0 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT0 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT0 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT0 () (_ BitVec 1))
(declare-fun zero.out_AT0 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT0 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.one.out_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT0 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT0 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT0 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT0 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT0 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT0 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT0 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT0 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt.out_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT0 () (_ BitVec 4))
(declare-fun self.clk_AT0 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT0 () (_ BitVec 1))
(declare-fun not_en.out_AT0 () (_ BitVec 1))
(declare-fun mp_en.in1_AT0 () (_ BitVec 1))
(declare-fun start_and_push.out_AT0 () (_ BitVec 1))
(declare-fun mp_en.in0_AT0 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT0 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT0 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT0 () (_ BitVec 8))
(declare-fun magic_packet.out_AT0 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT0 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT0 () (_ BitVec 8))
(declare-fun magic_packet.in_AT0 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT0 () (_ BitVec 1))
(declare-fun f.zero.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT0 () (_ BitVec 4))
(declare-fun f.entryEn7.in1_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq7.out_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrSlice.out_AT0 () (_ BitVec 3))
(declare-fun f.wrPtrEq7.in0_AT0 () (_ BitVec 3))
(declare-fun f.entryEn6.in1_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq6.out_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq6.in0_AT0 () (_ BitVec 3))
(declare-fun f.entryEn5.in1_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq5.out_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq5.in0_AT0 () (_ BitVec 3))
(declare-fun f.entryEn4.in1_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq4.out_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq4.in0_AT0 () (_ BitVec 3))
(declare-fun f.entryEn3.in1_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq3.out_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq3.in0_AT0 () (_ BitVec 3))
(declare-fun f.entryEn2.in1_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq2.out_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq2.in0_AT0 () (_ BitVec 3))
(declare-fun f.entryEn1.in1_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq1.out_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq1.in0_AT0 () (_ BitVec 3))
(declare-fun f.entryEn0.in1_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq0.out_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEq0.in0_AT0 () (_ BitVec 3))
(declare-fun f.wrPtrEn.sel_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT0 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_1.in1_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_7.out_AT0 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_7.concat_1.in0_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrSlice.out_AT0 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_7.in0_AT0 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_6.concat_1.in1_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_6.out_AT0 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_6.concat_1.in0_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_6.in0_AT0 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_5.concat_1.in1_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_5.out_AT0 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_5.concat_1.in0_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_5.in0_AT0 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_4.concat_1.in1_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_4.out_AT0 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_4.concat_1.in0_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_4.in0_AT0 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_3.concat_1.in1_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_3.out_AT0 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_3.concat_1.in0_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_3.in0_AT0 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_2.concat_1.in1_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_2.out_AT0 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_2.concat_1.in0_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_2.in0_AT0 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_1.concat_1.in1_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_1.out_AT0 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_1.concat_1.in0_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_1.in0_AT0 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_0.concat_1.in1_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_0.out_AT0 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_0.concat_1.in0_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_0.in0_AT0 () (_ BitVec 3))
(declare-fun f.rdPtrEn.sel_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT0 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT0 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT0 () (_ BitVec 4))
(declare-fun f.one.out_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT0 () (_ BitVec 4))
(declare-fun f.fullCalc.in1_AT0 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT0 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT0 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT0 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT0 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT0 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT0 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT0 () (_ BitVec 1))
(declare-fun f.entry7.reg0.clk_AT0 () (_ BitVec 1))
(declare-fun f.entryEn7.out_AT0 () (_ BitVec 1))
(declare-fun f.entry7.enMux.sel_AT0 () (_ BitVec 1))
(declare-fun f.entry7.reg0.in_AT0 () (_ BitVec 8))
(declare-fun f.entry7.enMux.out_AT0 () (_ BitVec 8))
(declare-fun f.entry7.enMux.in1_AT0 () (_ BitVec 8))
(declare-fun f.entry7.reg0.out_AT0 () (_ BitVec 8))
(declare-fun f.entry7.enMux.in0_AT0 () (_ BitVec 8))
(declare-fun f.entry6.reg0.clk_AT0 () (_ BitVec 1))
(declare-fun f.entryEn6.out_AT0 () (_ BitVec 1))
(declare-fun f.entry6.enMux.sel_AT0 () (_ BitVec 1))
(declare-fun f.entry6.reg0.in_AT0 () (_ BitVec 8))
(declare-fun f.entry6.enMux.out_AT0 () (_ BitVec 8))
(declare-fun f.entry6.enMux.in1_AT0 () (_ BitVec 8))
(declare-fun f.entry6.reg0.out_AT0 () (_ BitVec 8))
(declare-fun f.entry6.enMux.in0_AT0 () (_ BitVec 8))
(declare-fun f.entry5.reg0.clk_AT0 () (_ BitVec 1))
(declare-fun f.entryEn5.out_AT0 () (_ BitVec 1))
(declare-fun f.entry5.enMux.sel_AT0 () (_ BitVec 1))
(declare-fun f.entry5.reg0.in_AT0 () (_ BitVec 8))
(declare-fun f.entry5.enMux.out_AT0 () (_ BitVec 8))
(declare-fun f.entry5.enMux.in1_AT0 () (_ BitVec 8))
(declare-fun f.entry5.reg0.out_AT0 () (_ BitVec 8))
(declare-fun f.entry5.enMux.in0_AT0 () (_ BitVec 8))
(declare-fun f.entry4.reg0.clk_AT0 () (_ BitVec 1))
(declare-fun f.entryEn4.out_AT0 () (_ BitVec 1))
(declare-fun f.entry4.enMux.sel_AT0 () (_ BitVec 1))
(declare-fun f.entry4.reg0.in_AT0 () (_ BitVec 8))
(declare-fun f.entry4.enMux.out_AT0 () (_ BitVec 8))
(declare-fun f.entry4.enMux.in1_AT0 () (_ BitVec 8))
(declare-fun f.entry4.reg0.out_AT0 () (_ BitVec 8))
(declare-fun f.entry4.enMux.in0_AT0 () (_ BitVec 8))
(declare-fun f.entry3.reg0.clk_AT0 () (_ BitVec 1))
(declare-fun f.entryEn3.out_AT0 () (_ BitVec 1))
(declare-fun f.entry3.enMux.sel_AT0 () (_ BitVec 1))
(declare-fun f.entry3.reg0.in_AT0 () (_ BitVec 8))
(declare-fun f.entry3.enMux.out_AT0 () (_ BitVec 8))
(declare-fun f.entry3.enMux.in1_AT0 () (_ BitVec 8))
(declare-fun f.entry3.reg0.out_AT0 () (_ BitVec 8))
(declare-fun f.entry3.enMux.in0_AT0 () (_ BitVec 8))
(declare-fun f.entry2.reg0.clk_AT0 () (_ BitVec 1))
(declare-fun f.entryEn2.out_AT0 () (_ BitVec 1))
(declare-fun f.entry2.enMux.sel_AT0 () (_ BitVec 1))
(declare-fun f.entry2.reg0.in_AT0 () (_ BitVec 8))
(declare-fun f.entry2.enMux.out_AT0 () (_ BitVec 8))
(declare-fun f.entry2.enMux.in1_AT0 () (_ BitVec 8))
(declare-fun f.entry2.reg0.out_AT0 () (_ BitVec 8))
(declare-fun f.entry2.enMux.in0_AT0 () (_ BitVec 8))
(declare-fun f.entry1.reg0.clk_AT0 () (_ BitVec 1))
(declare-fun f.entryEn1.out_AT0 () (_ BitVec 1))
(declare-fun f.entry1.enMux.sel_AT0 () (_ BitVec 1))
(declare-fun f.entry1.reg0.in_AT0 () (_ BitVec 8))
(declare-fun f.entry1.enMux.out_AT0 () (_ BitVec 8))
(declare-fun f.entry1.enMux.in1_AT0 () (_ BitVec 8))
(declare-fun f.entry1.reg0.out_AT0 () (_ BitVec 8))
(declare-fun f.entry1.enMux.in0_AT0 () (_ BitVec 8))
(declare-fun f.entry0.reg0.clk_AT0 () (_ BitVec 1))
(declare-fun f.entryEn0.out_AT0 () (_ BitVec 1))
(declare-fun f.entry0.enMux.sel_AT0 () (_ BitVec 1))
(declare-fun f.entry0.reg0.in_AT0 () (_ BitVec 8))
(declare-fun f.entry0.enMux.out_AT0 () (_ BitVec 8))
(declare-fun f.entry0.enMux.in1_AT0 () (_ BitVec 8))
(declare-fun f.entry0.reg0.out_AT0 () (_ BitVec 8))
(declare-fun f.entry0.enMux.in0_AT0 () (_ BitVec 8))
(declare-fun f.emptyEq.out_AT0 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT0 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_4.in1_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_2.out_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_4.in0_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_2.in1_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_7.concat_1.out_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_7.concat_2.in0_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_4.in1_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_2.out_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_4.in0_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_2.in1_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_1.out_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_2.in0_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_4.in1_AT0 () (_ BitVec 4))
(declare-fun magic_packet.init_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_5.concat_2.out_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_4.in0_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_2.in1_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_1.out_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_2.in0_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_4.in1_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_2.out_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_4.in0_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_2.in1_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_1.out_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_2.in0_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_4.in1_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_2.out_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_4.in0_AT0 () (_ BitVec 4))
(declare-fun en.init_AT0 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_3.concat_2.in1_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_1.out_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_2.in0_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_4.in1_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_2.out_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_4.in0_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_2.in1_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_1.out_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_2.in0_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_4.in1_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_2.out_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_4.in0_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_2.in1_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_1.out_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_2.in0_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_4.in1_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_2.out_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_4.in0_AT0 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_2.in1_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_1.out_AT0 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_2.in0_AT0 () (_ BitVec 2))
(declare-fun self.data_out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.out_AT0 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_7.concat_4.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_6.concat_4.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_5.concat_4.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_4.concat_4.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_3.concat_4.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_2.concat_4.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_1.concat_4.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.in0_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.in1_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_0.concat_4.out_AT0 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.in0_AT0 () (_ BitVec 8))
(declare-fun f.wrPtrEq7.in1_AT0 () (_ BitVec 3))
(declare-fun f.const_7.out_AT0 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_7.in1_AT0 () (_ BitVec 3))
(declare-fun f.wrPtrEq6.in1_AT0 () (_ BitVec 3))
(declare-fun f.const_6.out_AT0 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_6.in1_AT0 () (_ BitVec 3))
(declare-fun f.wrPtrEq5.in1_AT0 () (_ BitVec 3))
(declare-fun f.const_5.out_AT0 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_5.in1_AT0 () (_ BitVec 3))
(declare-fun f.wrPtrEq4.in1_AT0 () (_ BitVec 3))
(declare-fun f.const_4.out_AT0 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_4.in1_AT0 () (_ BitVec 3))
(declare-fun f.wrPtrEq3.in1_AT0 () (_ BitVec 3))
(declare-fun f.const_3.out_AT0 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_3.in1_AT0 () (_ BitVec 3))
(declare-fun f.wrPtrEq2.in1_AT0 () (_ BitVec 3))
(declare-fun f.const_2.out_AT0 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_2.in1_AT0 () (_ BitVec 3))
(declare-fun f.wrPtrEq1.in1_AT0 () (_ BitVec 3))
(declare-fun f.const_1.out_AT0 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_1.in1_AT0 () (_ BitVec 3))
(declare-fun f.wrPtrEq0.in1_AT0 () (_ BitVec 3))
(declare-fun f.const_0.out_AT0 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_0.in1_AT0 () (_ BitVec 3))
(declare-fun en_or_sp.in1_AT0 () (_ BitVec 1))
(declare-fun not_en.in_AT0 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT0 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT0 () (_ BitVec 1))
(declare-fun en.in_AT0 () (_ BitVec 1))
(declare-fun en.clk_AT0 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT0 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT0 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT0 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT0 () (_ BitVec 4))

(assert (=> (= self.empty_AT0 #b1) (= self.pop_AT0 #b0)))
(assert (=> (= self.full_AT0 #b1) (= self.push_AT0 #b0)))
(assert (=> (= _-_state_id_-__AT0 #b10) (and true (= self.rst_AT0 #b0))))
(assert (=> (= _-_state_id_-__AT0 #b01) (and (and (and true (= self.rst_AT0 #b1)) (= self.push_AT0 #b0)) (= self.pop_AT0 #b0))))
(assert (=> (= _-_state_id_-__AT0 #b00) (and (and (and true (= self.rst_AT0 #b1)) (= self.push_AT0 #b0)) (= self.pop_AT0 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT0 ((_ extract 3 3) f.wrPtr.out_AT0)))
(assert (= f.fullEq_1.in0_AT0 ((_ extract 3 3) f.rdPtr.out_AT0)))
(assert (= en.out_AT0 mpt.not_captured.in_AT0))
(assert (= self.start_AT0 start_and_push.in0_AT0))
(assert (= self.push_AT0 start_and_push.in1_AT0))
(assert (= self.push_AT0 mpt.ssa_cnt_and1.in1_AT0))
(assert (= self.push_AT0 f.entryEn7.in0_AT0))
(assert (= self.push_AT0 f.entryEn6.in0_AT0))
(assert (= self.push_AT0 f.entryEn5.in0_AT0))
(assert (= self.push_AT0 f.entryEn4.in0_AT0))
(assert (= self.push_AT0 f.entryEn3.in0_AT0))
(assert (= self.push_AT0 f.entryEn2.in0_AT0))
(assert (= self.push_AT0 f.entryEn1.in0_AT0))
(assert (= self.push_AT0 f.entryEn0.in0_AT0))
(assert (= self.prop_signal_AT0 prop_signal_or.out_AT0))
(assert (= self.pop_AT0 mpt.next_cnt_and1.in1_AT0))
(assert (= self.full_AT0 f.fullCalc.out_AT0))
(assert (= self.data_out_vld_AT0 data_out_vld_and2.out_AT0))
(assert (= not_data_out_vld.out_AT0 prop_signal_or.in0_AT0))
(assert (= next_magic_packet.sel_AT0 mp_en.out_AT0))
(assert (= next_magic_packet.in1_AT0 self.data_in_AT0))
(assert (= next_cnt_eq0.out_AT0 data_out_vld_and2.in1_AT0))
(assert (= next_cnt_eq0.in1_AT0 zero.out_AT0))
(assert (= mpt.ssa_cnt_gt_0.out_AT0 mpt.next_cnt_and1.in0_AT0))
(assert (= mpt.ssa_cnt_gt_0.in1_AT0 mpt.zero.out_AT0))
(assert (= mpt.ssa_cnt_and1.out_AT0 mpt.ssa_cnt_and2.in0_AT0))
(assert (= mpt.ssa_cnt.sel_AT0 mpt.ssa_cnt_and2.out_AT0))
(assert (= mpt.ssa_cnt.out_AT0 mpt.ssa_cnt_m1.in0_AT0))
(assert (= mpt.ssa_cnt.out_AT0 mpt.ssa_cnt_gt_0.in0_AT0))
(assert (= mpt.one.out_AT0 mpt.ssa_cnt_m1.in1_AT0))
(assert (= mpt.not_captured.out_AT0 mpt.ssa_cnt_and2.in1_AT0))
(assert (= mpt.next_cnt.sel_AT0 self.rst_AT0))
(assert (= mpt.next_cnt.out_AT0 next_cnt_eq0.in0_AT0))
(assert (= mpt.next_cnt.in1_AT0 mpt.zero.out_AT0))
(assert (= mpt.decr_mux.sel_AT0 mpt.next_cnt_and1.out_AT0))
(assert (= mpt.decr_mux.out_AT0 mpt.next_cnt.in0_AT0))
(assert (= mpt.decr_mux.in1_AT0 mpt.ssa_cnt_m1.out_AT0))
(assert (= mpt.decr_mux.in0_AT0 mpt.ssa_cnt.out_AT0))
(assert (= mpt.cnt_p1.out_AT0 mpt.ssa_cnt.in1_AT0))
(assert (= mpt.cnt_p1.in1_AT0 mpt.one.out_AT0))
(assert (= mpt.cnt_lt_depth.out_AT0 mpt.ssa_cnt_and1.in0_AT0))
(assert (= mpt.cnt_lt_depth.in1_AT0 mpt.depth.out_AT0))
(assert (= mpt.cnt.out_AT0 mpt.ssa_cnt.in0_AT0))
(assert (= mpt.cnt.out_AT0 mpt.cnt_p1.in0_AT0))
(assert (= mpt.cnt.out_AT0 mpt.cnt_lt_depth.in0_AT0))
(assert (= mpt.cnt.in_AT0 mpt.next_cnt.out_AT0))
(assert (= mpt.cnt.clk_AT0 self.clk_AT0))
(assert (= mp_en.in1_AT0 not_en.out_AT0))
(assert (= mp_en.in0_AT0 start_and_push.out_AT0))
(assert (= magic_packet_eq.out_AT0 prop_signal_or.in1_AT0))
(assert (= magic_packet.out_AT0 next_magic_packet.in0_AT0))
(assert (= magic_packet.out_AT0 magic_packet_eq.in0_AT0))
(assert (= magic_packet.in_AT0 next_magic_packet.out_AT0))
(assert (= magic_packet.clk_AT0 self.clk_AT0))
(assert (= f.wrPtrRst.sel_AT0 self.rst_AT0))
(assert (= f.wrPtrRst.in1_AT0 f.zero.out_AT0))
(assert (= f.wrPtrEq7.out_AT0 f.entryEn7.in1_AT0))
(assert (= f.wrPtrEq7.in0_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.wrPtrEq6.out_AT0 f.entryEn6.in1_AT0))
(assert (= f.wrPtrEq6.in0_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.wrPtrEq5.out_AT0 f.entryEn5.in1_AT0))
(assert (= f.wrPtrEq5.in0_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.wrPtrEq4.out_AT0 f.entryEn4.in1_AT0))
(assert (= f.wrPtrEq4.in0_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.wrPtrEq3.out_AT0 f.entryEn3.in1_AT0))
(assert (= f.wrPtrEq3.in0_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.wrPtrEq2.out_AT0 f.entryEn2.in1_AT0))
(assert (= f.wrPtrEq2.in0_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.wrPtrEq1.out_AT0 f.entryEn1.in1_AT0))
(assert (= f.wrPtrEq1.in0_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.wrPtrEq0.out_AT0 f.entryEn0.in1_AT0))
(assert (= f.wrPtrEq0.in0_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.wrPtrEn.sel_AT0 self.push_AT0))
(assert (= f.wrPtrEn.out_AT0 f.wrPtrRst.in0_AT0))
(assert (= f.wrPtrEn.in1_AT0 f.wrPtrp1.out_AT0))
(assert (= f.wrPtr.out_AT0 f.wrPtrp1.in1_AT0))
(assert (= f.wrPtr.out_AT0 f.wrPtrSlice.in_AT0))
(assert (= f.wrPtr.out_AT0 f.wrPtrEn.in0_AT0))
(assert (= f.wrPtr.in_AT0 f.wrPtrRst.out_AT0))
(assert (= f.wrPtr.clk_AT0 self.clk_AT0))
(assert (= f.rdPtrRst.sel_AT0 self.rst_AT0))
(assert (= f.rdPtrRst.in1_AT0 f.zero.out_AT0))
(assert (= f.rdPtrEq_eq_7.out_AT0 f.data_out_mux.repl_7.concat_1.in1_AT0))
(assert (= f.rdPtrEq_eq_7.out_AT0 f.data_out_mux.repl_7.concat_1.in0_AT0))
(assert (= f.rdPtrEq_eq_7.in0_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.rdPtrEq_eq_6.out_AT0 f.data_out_mux.repl_6.concat_1.in1_AT0))
(assert (= f.rdPtrEq_eq_6.out_AT0 f.data_out_mux.repl_6.concat_1.in0_AT0))
(assert (= f.rdPtrEq_eq_6.in0_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.rdPtrEq_eq_5.out_AT0 f.data_out_mux.repl_5.concat_1.in1_AT0))
(assert (= f.rdPtrEq_eq_5.out_AT0 f.data_out_mux.repl_5.concat_1.in0_AT0))
(assert (= f.rdPtrEq_eq_5.in0_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.rdPtrEq_eq_4.out_AT0 f.data_out_mux.repl_4.concat_1.in1_AT0))
(assert (= f.rdPtrEq_eq_4.out_AT0 f.data_out_mux.repl_4.concat_1.in0_AT0))
(assert (= f.rdPtrEq_eq_4.in0_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.rdPtrEq_eq_3.out_AT0 f.data_out_mux.repl_3.concat_1.in1_AT0))
(assert (= f.rdPtrEq_eq_3.out_AT0 f.data_out_mux.repl_3.concat_1.in0_AT0))
(assert (= f.rdPtrEq_eq_3.in0_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.rdPtrEq_eq_2.out_AT0 f.data_out_mux.repl_2.concat_1.in1_AT0))
(assert (= f.rdPtrEq_eq_2.out_AT0 f.data_out_mux.repl_2.concat_1.in0_AT0))
(assert (= f.rdPtrEq_eq_2.in0_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.rdPtrEq_eq_1.out_AT0 f.data_out_mux.repl_1.concat_1.in1_AT0))
(assert (= f.rdPtrEq_eq_1.out_AT0 f.data_out_mux.repl_1.concat_1.in0_AT0))
(assert (= f.rdPtrEq_eq_1.in0_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.rdPtrEq_eq_0.out_AT0 f.data_out_mux.repl_0.concat_1.in1_AT0))
(assert (= f.rdPtrEq_eq_0.out_AT0 f.data_out_mux.repl_0.concat_1.in0_AT0))
(assert (= f.rdPtrEq_eq_0.in0_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.rdPtrEn.sel_AT0 self.pop_AT0))
(assert (= f.rdPtrEn.out_AT0 f.rdPtrRst.in0_AT0))
(assert (= f.rdPtrEn.in1_AT0 f.rdPtrp1.out_AT0))
(assert (= f.rdPtr.out_AT0 f.rdPtrp1.in1_AT0))
(assert (= f.rdPtr.out_AT0 f.rdPtrSlice.in_AT0))
(assert (= f.rdPtr.out_AT0 f.rdPtrEn.in0_AT0))
(assert (= f.rdPtr.in_AT0 f.rdPtrRst.out_AT0))
(assert (= f.rdPtr.clk_AT0 self.clk_AT0))
(assert (= f.one.out_AT0 f.wrPtrp1.in0_AT0))
(assert (= f.one.out_AT0 f.rdPtrp1.in0_AT0))
(assert (= f.fullEq_2.out_AT0 f.fullCalc.in1_AT0))
(assert (= f.fullEq_2.in1_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.fullEq_2.in0_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.fullEq_1.out_AT0 f.notfullEq_1.in_AT0))
(assert (= f.fullCalc.in0_AT0 f.notfullEq_1.out_AT0))
(assert (= f.entry7.reg0.clk_AT0 self.clk_AT0))
(assert (= f.entry7.enMux.sel_AT0 f.entryEn7.out_AT0))
(assert (= f.entry7.enMux.out_AT0 f.entry7.reg0.in_AT0))
(assert (= f.entry7.enMux.in1_AT0 self.data_in_AT0))
(assert (= f.entry7.enMux.in0_AT0 f.entry7.reg0.out_AT0))
(assert (= f.entry6.reg0.clk_AT0 self.clk_AT0))
(assert (= f.entry6.enMux.sel_AT0 f.entryEn6.out_AT0))
(assert (= f.entry6.enMux.out_AT0 f.entry6.reg0.in_AT0))
(assert (= f.entry6.enMux.in1_AT0 self.data_in_AT0))
(assert (= f.entry6.enMux.in0_AT0 f.entry6.reg0.out_AT0))
(assert (= f.entry5.reg0.clk_AT0 self.clk_AT0))
(assert (= f.entry5.enMux.sel_AT0 f.entryEn5.out_AT0))
(assert (= f.entry5.enMux.out_AT0 f.entry5.reg0.in_AT0))
(assert (= f.entry5.enMux.in1_AT0 self.data_in_AT0))
(assert (= f.entry5.enMux.in0_AT0 f.entry5.reg0.out_AT0))
(assert (= f.entry4.reg0.clk_AT0 self.clk_AT0))
(assert (= f.entry4.enMux.sel_AT0 f.entryEn4.out_AT0))
(assert (= f.entry4.enMux.out_AT0 f.entry4.reg0.in_AT0))
(assert (= f.entry4.enMux.in1_AT0 self.data_in_AT0))
(assert (= f.entry4.enMux.in0_AT0 f.entry4.reg0.out_AT0))
(assert (= f.entry3.reg0.clk_AT0 self.clk_AT0))
(assert (= f.entry3.enMux.sel_AT0 f.entryEn3.out_AT0))
(assert (= f.entry3.enMux.out_AT0 f.entry3.reg0.in_AT0))
(assert (= f.entry3.enMux.in1_AT0 self.data_in_AT0))
(assert (= f.entry3.enMux.in0_AT0 f.entry3.reg0.out_AT0))
(assert (= f.entry2.reg0.clk_AT0 self.clk_AT0))
(assert (= f.entry2.enMux.sel_AT0 f.entryEn2.out_AT0))
(assert (= f.entry2.enMux.out_AT0 f.entry2.reg0.in_AT0))
(assert (= f.entry2.enMux.in1_AT0 self.data_in_AT0))
(assert (= f.entry2.enMux.in0_AT0 f.entry2.reg0.out_AT0))
(assert (= f.entry1.reg0.clk_AT0 self.clk_AT0))
(assert (= f.entry1.enMux.sel_AT0 f.entryEn1.out_AT0))
(assert (= f.entry1.enMux.out_AT0 f.entry1.reg0.in_AT0))
(assert (= f.entry1.enMux.in1_AT0 self.data_in_AT0))
(assert (= f.entry1.enMux.in0_AT0 f.entry1.reg0.out_AT0))
(assert (= f.entry0.reg0.clk_AT0 self.clk_AT0))
(assert (= f.entry0.enMux.sel_AT0 f.entryEn0.out_AT0))
(assert (= f.entry0.enMux.out_AT0 f.entry0.reg0.in_AT0))
(assert (= f.entry0.enMux.in1_AT0 self.data_in_AT0))
(assert (= f.entry0.enMux.in0_AT0 f.entry0.reg0.out_AT0))
(assert (= f.emptyEq.out_AT0 self.empty_AT0))
(assert (= f.emptyEq.in1_AT0 f.wrPtr.out_AT0))
(assert (= f.emptyEq.in0_AT0 f.rdPtr.out_AT0))
(assert (= f.data_out_mux.repl_7.concat_2.out_AT0 f.data_out_mux.repl_7.concat_4.in1_AT0))
(assert (= f.data_out_mux.repl_7.concat_2.out_AT0 f.data_out_mux.repl_7.concat_4.in0_AT0))
(assert (= f.data_out_mux.repl_7.concat_1.out_AT0 f.data_out_mux.repl_7.concat_2.in1_AT0))
(assert (= f.data_out_mux.repl_7.concat_1.out_AT0 f.data_out_mux.repl_7.concat_2.in0_AT0))
(assert (= f.data_out_mux.repl_6.concat_2.out_AT0 f.data_out_mux.repl_6.concat_4.in1_AT0))
(assert (= f.data_out_mux.repl_6.concat_2.out_AT0 f.data_out_mux.repl_6.concat_4.in0_AT0))
(assert (= f.data_out_mux.repl_6.concat_1.out_AT0 f.data_out_mux.repl_6.concat_2.in1_AT0))
(assert (= f.data_out_mux.repl_6.concat_1.out_AT0 f.data_out_mux.repl_6.concat_2.in0_AT0))
(assert (= f.data_out_mux.repl_5.concat_2.out_AT0 f.data_out_mux.repl_5.concat_4.in1_AT0))
(assert (= f.data_out_mux.repl_5.concat_2.out_AT0 f.data_out_mux.repl_5.concat_4.in0_AT0))
(assert (= f.data_out_mux.repl_5.concat_1.out_AT0 f.data_out_mux.repl_5.concat_2.in1_AT0))
(assert (= f.data_out_mux.repl_5.concat_1.out_AT0 f.data_out_mux.repl_5.concat_2.in0_AT0))
(assert (= f.data_out_mux.repl_4.concat_2.out_AT0 f.data_out_mux.repl_4.concat_4.in1_AT0))
(assert (= f.data_out_mux.repl_4.concat_2.out_AT0 f.data_out_mux.repl_4.concat_4.in0_AT0))
(assert (= f.data_out_mux.repl_4.concat_1.out_AT0 f.data_out_mux.repl_4.concat_2.in1_AT0))
(assert (= f.data_out_mux.repl_4.concat_1.out_AT0 f.data_out_mux.repl_4.concat_2.in0_AT0))
(assert (= f.data_out_mux.repl_3.concat_2.out_AT0 f.data_out_mux.repl_3.concat_4.in1_AT0))
(assert (= f.data_out_mux.repl_3.concat_2.out_AT0 f.data_out_mux.repl_3.concat_4.in0_AT0))
(assert (= f.data_out_mux.repl_3.concat_1.out_AT0 f.data_out_mux.repl_3.concat_2.in1_AT0))
(assert (= f.data_out_mux.repl_3.concat_1.out_AT0 f.data_out_mux.repl_3.concat_2.in0_AT0))
(assert (= f.data_out_mux.repl_2.concat_2.out_AT0 f.data_out_mux.repl_2.concat_4.in1_AT0))
(assert (= f.data_out_mux.repl_2.concat_2.out_AT0 f.data_out_mux.repl_2.concat_4.in0_AT0))
(assert (= f.data_out_mux.repl_2.concat_1.out_AT0 f.data_out_mux.repl_2.concat_2.in1_AT0))
(assert (= f.data_out_mux.repl_2.concat_1.out_AT0 f.data_out_mux.repl_2.concat_2.in0_AT0))
(assert (= f.data_out_mux.repl_1.concat_2.out_AT0 f.data_out_mux.repl_1.concat_4.in1_AT0))
(assert (= f.data_out_mux.repl_1.concat_2.out_AT0 f.data_out_mux.repl_1.concat_4.in0_AT0))
(assert (= f.data_out_mux.repl_1.concat_1.out_AT0 f.data_out_mux.repl_1.concat_2.in1_AT0))
(assert (= f.data_out_mux.repl_1.concat_1.out_AT0 f.data_out_mux.repl_1.concat_2.in0_AT0))
(assert (= f.data_out_mux.repl_0.concat_2.out_AT0 f.data_out_mux.repl_0.concat_4.in1_AT0))
(assert (= f.data_out_mux.repl_0.concat_2.out_AT0 f.data_out_mux.repl_0.concat_4.in0_AT0))
(assert (= f.data_out_mux.repl_0.concat_1.out_AT0 f.data_out_mux.repl_0.concat_2.in1_AT0))
(assert (= f.data_out_mux.repl_0.concat_1.out_AT0 f.data_out_mux.repl_0.concat_2.in0_AT0))
(assert (= f.data_out_mux.or_chain_7.out_AT0 self.data_out_AT0))
(assert (= f.data_out_mux.or_chain_7.out_AT0 magic_packet_eq.in1_AT0))
(assert (= f.data_out_mux.or_chain_6.out_AT0 f.data_out_mux.or_chain_7.in0_AT0))
(assert (= f.data_out_mux.or_chain_5.out_AT0 f.data_out_mux.or_chain_6.in0_AT0))
(assert (= f.data_out_mux.or_chain_4.out_AT0 f.data_out_mux.or_chain_5.in0_AT0))
(assert (= f.data_out_mux.or_chain_3.out_AT0 f.data_out_mux.or_chain_4.in0_AT0))
(assert (= f.data_out_mux.or_chain_2.out_AT0 f.data_out_mux.or_chain_3.in0_AT0))
(assert (= f.data_out_mux.or_chain_1.out_AT0 f.data_out_mux.or_chain_2.in0_AT0))
(assert (= f.data_out_mux.and_7.out_AT0 f.data_out_mux.or_chain_7.in1_AT0))
(assert (= f.data_out_mux.and_7.in1_AT0 f.entry7.reg0.out_AT0))
(assert (= f.data_out_mux.and_7.in0_AT0 f.data_out_mux.repl_7.concat_4.out_AT0))
(assert (= f.data_out_mux.and_6.out_AT0 f.data_out_mux.or_chain_6.in1_AT0))
(assert (= f.data_out_mux.and_6.in1_AT0 f.entry6.reg0.out_AT0))
(assert (= f.data_out_mux.and_6.in0_AT0 f.data_out_mux.repl_6.concat_4.out_AT0))
(assert (= f.data_out_mux.and_5.out_AT0 f.data_out_mux.or_chain_5.in1_AT0))
(assert (= f.data_out_mux.and_5.in1_AT0 f.entry5.reg0.out_AT0))
(assert (= f.data_out_mux.and_5.in0_AT0 f.data_out_mux.repl_5.concat_4.out_AT0))
(assert (= f.data_out_mux.and_4.out_AT0 f.data_out_mux.or_chain_4.in1_AT0))
(assert (= f.data_out_mux.and_4.in1_AT0 f.entry4.reg0.out_AT0))
(assert (= f.data_out_mux.and_4.in0_AT0 f.data_out_mux.repl_4.concat_4.out_AT0))
(assert (= f.data_out_mux.and_3.out_AT0 f.data_out_mux.or_chain_3.in1_AT0))
(assert (= f.data_out_mux.and_3.in1_AT0 f.entry3.reg0.out_AT0))
(assert (= f.data_out_mux.and_3.in0_AT0 f.data_out_mux.repl_3.concat_4.out_AT0))
(assert (= f.data_out_mux.and_2.out_AT0 f.data_out_mux.or_chain_2.in1_AT0))
(assert (= f.data_out_mux.and_2.in1_AT0 f.entry2.reg0.out_AT0))
(assert (= f.data_out_mux.and_2.in0_AT0 f.data_out_mux.repl_2.concat_4.out_AT0))
(assert (= f.data_out_mux.and_1.out_AT0 f.data_out_mux.or_chain_1.in1_AT0))
(assert (= f.data_out_mux.and_1.in1_AT0 f.entry1.reg0.out_AT0))
(assert (= f.data_out_mux.and_1.in0_AT0 f.data_out_mux.repl_1.concat_4.out_AT0))
(assert (= f.data_out_mux.and_0.out_AT0 f.data_out_mux.or_chain_1.in0_AT0))
(assert (= f.data_out_mux.and_0.in1_AT0 f.entry0.reg0.out_AT0))
(assert (= f.data_out_mux.and_0.in0_AT0 f.data_out_mux.repl_0.concat_4.out_AT0))
(assert (= f.const_7.out_AT0 f.wrPtrEq7.in1_AT0))
(assert (= f.const_7.out_AT0 f.rdPtrEq_eq_7.in1_AT0))
(assert (= f.const_6.out_AT0 f.wrPtrEq6.in1_AT0))
(assert (= f.const_6.out_AT0 f.rdPtrEq_eq_6.in1_AT0))
(assert (= f.const_5.out_AT0 f.wrPtrEq5.in1_AT0))
(assert (= f.const_5.out_AT0 f.rdPtrEq_eq_5.in1_AT0))
(assert (= f.const_4.out_AT0 f.wrPtrEq4.in1_AT0))
(assert (= f.const_4.out_AT0 f.rdPtrEq_eq_4.in1_AT0))
(assert (= f.const_3.out_AT0 f.wrPtrEq3.in1_AT0))
(assert (= f.const_3.out_AT0 f.rdPtrEq_eq_3.in1_AT0))
(assert (= f.const_2.out_AT0 f.wrPtrEq2.in1_AT0))
(assert (= f.const_2.out_AT0 f.rdPtrEq_eq_2.in1_AT0))
(assert (= f.const_1.out_AT0 f.wrPtrEq1.in1_AT0))
(assert (= f.const_1.out_AT0 f.rdPtrEq_eq_1.in1_AT0))
(assert (= f.const_0.out_AT0 f.wrPtrEq0.in1_AT0))
(assert (= f.const_0.out_AT0 f.rdPtrEq_eq_0.in1_AT0))
(assert (= en_or_sp.in1_AT0 start_and_push.out_AT0))
(assert (= en.out_AT0 not_en.in_AT0))
(assert (= en.out_AT0 en_or_sp.in0_AT0))
(assert (= en.in_AT0 en_or_sp.out_AT0))
(assert (= en.clk_AT0 self.clk_AT0))
(assert (= data_out_vld_and2.out_AT0 not_data_out_vld.in_AT0))
(assert (= data_out_vld_and1.out_AT0 data_out_vld_and2.in0_AT0))
(assert (= data_out_vld_and1.in0_AT0 en.out_AT0))
(assert (= cnt_gt_0.out_AT0 data_out_vld_and1.in1_AT0))
(assert (= cnt_gt_0.in1_AT0 zero.out_AT0))
(assert (= cnt_gt_0.in0_AT0 mpt.cnt.out_AT0))
(assert (= self.clk_AT0 #b0))
(assert (= zero.out_AT0 #b0000))
(assert (= (bvand start_and_push.in0_AT0 start_and_push.in1_AT0) start_and_push.out_AT0))
(assert (= (bvor prop_signal_or.in0_AT0 prop_signal_or.in1_AT0) prop_signal_or.out_AT0))
(assert (= (bvnot not_en.in_AT0) not_en.out_AT0))
(assert (= (bvnot not_data_out_vld.in_AT0) not_data_out_vld.out_AT0))
(assert (=> (= next_magic_packet.sel_AT0 #b1) (= next_magic_packet.in1_AT0 next_magic_packet.out_AT0)))
(assert (=> (= next_magic_packet.sel_AT0 #b0) (= next_magic_packet.in0_AT0 next_magic_packet.out_AT0)))
(assert (=> (not (= next_cnt_eq0.in0_AT0 next_cnt_eq0.in1_AT0)) (= next_cnt_eq0.out_AT0 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT0 next_cnt_eq0.in1_AT0) (= next_cnt_eq0.out_AT0 #b1)))
(assert (= mpt.zero.out_AT0 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT0 mpt.ssa_cnt_m1.in1_AT0) mpt.ssa_cnt_m1.out_AT0))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT0 mpt.ssa_cnt_gt_0.in0_AT0) (= mpt.ssa_cnt_gt_0.out_AT0 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT0 mpt.ssa_cnt_and2.in1_AT0) mpt.ssa_cnt_and2.out_AT0))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT0 mpt.ssa_cnt_and1.in1_AT0) mpt.ssa_cnt_and1.out_AT0))
(assert (=> (= mpt.ssa_cnt.sel_AT0 #b1) (= mpt.ssa_cnt.in1_AT0 mpt.ssa_cnt.out_AT0)))
(assert (=> (= mpt.ssa_cnt.sel_AT0 #b0) (= mpt.ssa_cnt.in0_AT0 mpt.ssa_cnt.out_AT0)))
(assert (= mpt.one.out_AT0 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT0) mpt.not_captured.out_AT0))
(assert (= (bvand mpt.next_cnt_and1.in0_AT0 mpt.next_cnt_and1.in1_AT0) mpt.next_cnt_and1.out_AT0))
(assert (=> (= mpt.next_cnt.sel_AT0 #b1) (= mpt.next_cnt.in1_AT0 mpt.next_cnt.out_AT0)))
(assert (=> (= mpt.next_cnt.sel_AT0 #b0) (= mpt.next_cnt.in0_AT0 mpt.next_cnt.out_AT0)))
(assert (= mpt.depth.out_AT0 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT0 #b1) (= mpt.decr_mux.in1_AT0 mpt.decr_mux.out_AT0)))
(assert (=> (= mpt.decr_mux.sel_AT0 #b0) (= mpt.decr_mux.in0_AT0 mpt.decr_mux.out_AT0)))
(assert (= (bvadd mpt.cnt_p1.in0_AT0 mpt.cnt_p1.in1_AT0) mpt.cnt_p1.out_AT0))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT0 mpt.cnt_lt_depth.in1_AT0) (= mpt.cnt_lt_depth.out_AT0 #b1)))
(assert (= (bvand mp_en.in0_AT0 mp_en.in1_AT0) mp_en.out_AT0))
(assert (=> (not (= magic_packet_eq.in0_AT0 magic_packet_eq.in1_AT0)) (= magic_packet_eq.out_AT0 #b0)))
(assert (=> (= magic_packet_eq.in0_AT0 magic_packet_eq.in1_AT0) (= magic_packet_eq.out_AT0 #b1)))
(assert (= f.zero.out_AT0 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT0 f.wrPtrp1.in1_AT0) f.wrPtrp1.out_AT0))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT0) f.wrPtrSlice.out_AT0))
(assert (=> (= f.wrPtrRst.sel_AT0 #b1) (= f.wrPtrRst.in1_AT0 f.wrPtrRst.out_AT0)))
(assert (=> (= f.wrPtrRst.sel_AT0 #b0) (= f.wrPtrRst.in0_AT0 f.wrPtrRst.out_AT0)))
(assert (=> (not (= f.wrPtrEq7.in0_AT0 f.wrPtrEq7.in1_AT0)) (= f.wrPtrEq7.out_AT0 #b0)))
(assert (=> (= f.wrPtrEq7.in0_AT0 f.wrPtrEq7.in1_AT0) (= f.wrPtrEq7.out_AT0 #b1)))
(assert (=> (not (= f.wrPtrEq6.in0_AT0 f.wrPtrEq6.in1_AT0)) (= f.wrPtrEq6.out_AT0 #b0)))
(assert (=> (= f.wrPtrEq6.in0_AT0 f.wrPtrEq6.in1_AT0) (= f.wrPtrEq6.out_AT0 #b1)))
(assert (=> (not (= f.wrPtrEq5.in0_AT0 f.wrPtrEq5.in1_AT0)) (= f.wrPtrEq5.out_AT0 #b0)))
(assert (=> (= f.wrPtrEq5.in0_AT0 f.wrPtrEq5.in1_AT0) (= f.wrPtrEq5.out_AT0 #b1)))
(assert (=> (not (= f.wrPtrEq4.in0_AT0 f.wrPtrEq4.in1_AT0)) (= f.wrPtrEq4.out_AT0 #b0)))
(assert (=> (= f.wrPtrEq4.in0_AT0 f.wrPtrEq4.in1_AT0) (= f.wrPtrEq4.out_AT0 #b1)))
(assert (=> (not (= f.wrPtrEq3.in0_AT0 f.wrPtrEq3.in1_AT0)) (= f.wrPtrEq3.out_AT0 #b0)))
(assert (=> (= f.wrPtrEq3.in0_AT0 f.wrPtrEq3.in1_AT0) (= f.wrPtrEq3.out_AT0 #b1)))
(assert (=> (not (= f.wrPtrEq2.in0_AT0 f.wrPtrEq2.in1_AT0)) (= f.wrPtrEq2.out_AT0 #b0)))
(assert (=> (= f.wrPtrEq2.in0_AT0 f.wrPtrEq2.in1_AT0) (= f.wrPtrEq2.out_AT0 #b1)))
(assert (=> (not (= f.wrPtrEq1.in0_AT0 f.wrPtrEq1.in1_AT0)) (= f.wrPtrEq1.out_AT0 #b0)))
(assert (=> (= f.wrPtrEq1.in0_AT0 f.wrPtrEq1.in1_AT0) (= f.wrPtrEq1.out_AT0 #b1)))
(assert (=> (not (= f.wrPtrEq0.in0_AT0 f.wrPtrEq0.in1_AT0)) (= f.wrPtrEq0.out_AT0 #b0)))
(assert (=> (= f.wrPtrEq0.in0_AT0 f.wrPtrEq0.in1_AT0) (= f.wrPtrEq0.out_AT0 #b1)))
(assert (=> (= f.wrPtrEn.sel_AT0 #b1) (= f.wrPtrEn.in1_AT0 f.wrPtrEn.out_AT0)))
(assert (=> (= f.wrPtrEn.sel_AT0 #b0) (= f.wrPtrEn.in0_AT0 f.wrPtrEn.out_AT0)))
(assert (= (bvadd f.rdPtrp1.in0_AT0 f.rdPtrp1.in1_AT0) f.rdPtrp1.out_AT0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT0) f.rdPtrSlice.out_AT0))
(assert (=> (= f.rdPtrRst.sel_AT0 #b1) (= f.rdPtrRst.in1_AT0 f.rdPtrRst.out_AT0)))
(assert (=> (= f.rdPtrRst.sel_AT0 #b0) (= f.rdPtrRst.in0_AT0 f.rdPtrRst.out_AT0)))
(assert (=> (not (= f.rdPtrEq_eq_7.in0_AT0 f.rdPtrEq_eq_7.in1_AT0)) (= f.rdPtrEq_eq_7.out_AT0 #b0)))
(assert (=> (= f.rdPtrEq_eq_7.in0_AT0 f.rdPtrEq_eq_7.in1_AT0) (= f.rdPtrEq_eq_7.out_AT0 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_6.in0_AT0 f.rdPtrEq_eq_6.in1_AT0)) (= f.rdPtrEq_eq_6.out_AT0 #b0)))
(assert (=> (= f.rdPtrEq_eq_6.in0_AT0 f.rdPtrEq_eq_6.in1_AT0) (= f.rdPtrEq_eq_6.out_AT0 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_5.in0_AT0 f.rdPtrEq_eq_5.in1_AT0)) (= f.rdPtrEq_eq_5.out_AT0 #b0)))
(assert (=> (= f.rdPtrEq_eq_5.in0_AT0 f.rdPtrEq_eq_5.in1_AT0) (= f.rdPtrEq_eq_5.out_AT0 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_4.in0_AT0 f.rdPtrEq_eq_4.in1_AT0)) (= f.rdPtrEq_eq_4.out_AT0 #b0)))
(assert (=> (= f.rdPtrEq_eq_4.in0_AT0 f.rdPtrEq_eq_4.in1_AT0) (= f.rdPtrEq_eq_4.out_AT0 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_3.in0_AT0 f.rdPtrEq_eq_3.in1_AT0)) (= f.rdPtrEq_eq_3.out_AT0 #b0)))
(assert (=> (= f.rdPtrEq_eq_3.in0_AT0 f.rdPtrEq_eq_3.in1_AT0) (= f.rdPtrEq_eq_3.out_AT0 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_2.in0_AT0 f.rdPtrEq_eq_2.in1_AT0)) (= f.rdPtrEq_eq_2.out_AT0 #b0)))
(assert (=> (= f.rdPtrEq_eq_2.in0_AT0 f.rdPtrEq_eq_2.in1_AT0) (= f.rdPtrEq_eq_2.out_AT0 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_1.in0_AT0 f.rdPtrEq_eq_1.in1_AT0)) (= f.rdPtrEq_eq_1.out_AT0 #b0)))
(assert (=> (= f.rdPtrEq_eq_1.in0_AT0 f.rdPtrEq_eq_1.in1_AT0) (= f.rdPtrEq_eq_1.out_AT0 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_0.in0_AT0 f.rdPtrEq_eq_0.in1_AT0)) (= f.rdPtrEq_eq_0.out_AT0 #b0)))
(assert (=> (= f.rdPtrEq_eq_0.in0_AT0 f.rdPtrEq_eq_0.in1_AT0) (= f.rdPtrEq_eq_0.out_AT0 #b1)))
(assert (=> (= f.rdPtrEn.sel_AT0 #b1) (= f.rdPtrEn.in1_AT0 f.rdPtrEn.out_AT0)))
(assert (=> (= f.rdPtrEn.sel_AT0 #b0) (= f.rdPtrEn.in0_AT0 f.rdPtrEn.out_AT0)))
(assert (= f.one.out_AT0 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT0) f.notfullEq_1.out_AT0))
(assert (=> (not (= f.fullEq_2.in0_AT0 f.fullEq_2.in1_AT0)) (= f.fullEq_2.out_AT0 #b0)))
(assert (=> (= f.fullEq_2.in0_AT0 f.fullEq_2.in1_AT0) (= f.fullEq_2.out_AT0 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT0 f.fullEq_1.in1_AT0)) (= f.fullEq_1.out_AT0 #b0)))
(assert (=> (= f.fullEq_1.in0_AT0 f.fullEq_1.in1_AT0) (= f.fullEq_1.out_AT0 #b1)))
(assert (= (bvand f.fullCalc.in0_AT0 f.fullCalc.in1_AT0) f.fullCalc.out_AT0))
(assert (= (bvand f.entryEn7.in0_AT0 f.entryEn7.in1_AT0) f.entryEn7.out_AT0))
(assert (= (bvand f.entryEn6.in0_AT0 f.entryEn6.in1_AT0) f.entryEn6.out_AT0))
(assert (= (bvand f.entryEn5.in0_AT0 f.entryEn5.in1_AT0) f.entryEn5.out_AT0))
(assert (= (bvand f.entryEn4.in0_AT0 f.entryEn4.in1_AT0) f.entryEn4.out_AT0))
(assert (= (bvand f.entryEn3.in0_AT0 f.entryEn3.in1_AT0) f.entryEn3.out_AT0))
(assert (= (bvand f.entryEn2.in0_AT0 f.entryEn2.in1_AT0) f.entryEn2.out_AT0))
(assert (= (bvand f.entryEn1.in0_AT0 f.entryEn1.in1_AT0) f.entryEn1.out_AT0))
(assert (= (bvand f.entryEn0.in0_AT0 f.entryEn0.in1_AT0) f.entryEn0.out_AT0))
(assert (=> (= f.entry7.enMux.sel_AT0 #b1) (= f.entry7.enMux.in1_AT0 f.entry7.enMux.out_AT0)))
(assert (=> (= f.entry7.enMux.sel_AT0 #b0) (= f.entry7.enMux.in0_AT0 f.entry7.enMux.out_AT0)))
(assert (=> (= f.entry6.enMux.sel_AT0 #b1) (= f.entry6.enMux.in1_AT0 f.entry6.enMux.out_AT0)))
(assert (=> (= f.entry6.enMux.sel_AT0 #b0) (= f.entry6.enMux.in0_AT0 f.entry6.enMux.out_AT0)))
(assert (=> (= f.entry5.enMux.sel_AT0 #b1) (= f.entry5.enMux.in1_AT0 f.entry5.enMux.out_AT0)))
(assert (=> (= f.entry5.enMux.sel_AT0 #b0) (= f.entry5.enMux.in0_AT0 f.entry5.enMux.out_AT0)))
(assert (=> (= f.entry4.enMux.sel_AT0 #b1) (= f.entry4.enMux.in1_AT0 f.entry4.enMux.out_AT0)))
(assert (=> (= f.entry4.enMux.sel_AT0 #b0) (= f.entry4.enMux.in0_AT0 f.entry4.enMux.out_AT0)))
(assert (=> (= f.entry3.enMux.sel_AT0 #b1) (= f.entry3.enMux.in1_AT0 f.entry3.enMux.out_AT0)))
(assert (=> (= f.entry3.enMux.sel_AT0 #b0) (= f.entry3.enMux.in0_AT0 f.entry3.enMux.out_AT0)))
(assert (=> (= f.entry2.enMux.sel_AT0 #b1) (= f.entry2.enMux.in1_AT0 f.entry2.enMux.out_AT0)))
(assert (=> (= f.entry2.enMux.sel_AT0 #b0) (= f.entry2.enMux.in0_AT0 f.entry2.enMux.out_AT0)))
(assert (=> (= f.entry1.enMux.sel_AT0 #b1) (= f.entry1.enMux.in1_AT0 f.entry1.enMux.out_AT0)))
(assert (=> (= f.entry1.enMux.sel_AT0 #b0) (= f.entry1.enMux.in0_AT0 f.entry1.enMux.out_AT0)))
(assert (=> (= f.entry0.enMux.sel_AT0 #b1) (= f.entry0.enMux.in1_AT0 f.entry0.enMux.out_AT0)))
(assert (=> (= f.entry0.enMux.sel_AT0 #b0) (= f.entry0.enMux.in0_AT0 f.entry0.enMux.out_AT0)))
(assert (=> (not (= f.emptyEq.in0_AT0 f.emptyEq.in1_AT0)) (= f.emptyEq.out_AT0 #b0)))
(assert (=> (= f.emptyEq.in0_AT0 f.emptyEq.in1_AT0) (= f.emptyEq.out_AT0 #b1)))
(assert (= (concat f.data_out_mux.repl_7.concat_4.in0_AT0 f.data_out_mux.repl_7.concat_4.in1_AT0) f.data_out_mux.repl_7.concat_4.out_AT0))
(assert (= (concat f.data_out_mux.repl_7.concat_2.in0_AT0 f.data_out_mux.repl_7.concat_2.in1_AT0) f.data_out_mux.repl_7.concat_2.out_AT0))
(assert (= (concat f.data_out_mux.repl_7.concat_1.in0_AT0 f.data_out_mux.repl_7.concat_1.in1_AT0) f.data_out_mux.repl_7.concat_1.out_AT0))
(assert (= (concat f.data_out_mux.repl_6.concat_4.in0_AT0 f.data_out_mux.repl_6.concat_4.in1_AT0) f.data_out_mux.repl_6.concat_4.out_AT0))
(assert (= (concat f.data_out_mux.repl_6.concat_2.in0_AT0 f.data_out_mux.repl_6.concat_2.in1_AT0) f.data_out_mux.repl_6.concat_2.out_AT0))
(assert (= (concat f.data_out_mux.repl_6.concat_1.in0_AT0 f.data_out_mux.repl_6.concat_1.in1_AT0) f.data_out_mux.repl_6.concat_1.out_AT0))
(assert (= (concat f.data_out_mux.repl_5.concat_4.in0_AT0 f.data_out_mux.repl_5.concat_4.in1_AT0) f.data_out_mux.repl_5.concat_4.out_AT0))
(assert (= (concat f.data_out_mux.repl_5.concat_2.in0_AT0 f.data_out_mux.repl_5.concat_2.in1_AT0) f.data_out_mux.repl_5.concat_2.out_AT0))
(assert (= (concat f.data_out_mux.repl_5.concat_1.in0_AT0 f.data_out_mux.repl_5.concat_1.in1_AT0) f.data_out_mux.repl_5.concat_1.out_AT0))
(assert (= (concat f.data_out_mux.repl_4.concat_4.in0_AT0 f.data_out_mux.repl_4.concat_4.in1_AT0) f.data_out_mux.repl_4.concat_4.out_AT0))
(assert (= (concat f.data_out_mux.repl_4.concat_2.in0_AT0 f.data_out_mux.repl_4.concat_2.in1_AT0) f.data_out_mux.repl_4.concat_2.out_AT0))
(assert (= (concat f.data_out_mux.repl_4.concat_1.in0_AT0 f.data_out_mux.repl_4.concat_1.in1_AT0) f.data_out_mux.repl_4.concat_1.out_AT0))
(assert (= (concat f.data_out_mux.repl_3.concat_4.in0_AT0 f.data_out_mux.repl_3.concat_4.in1_AT0) f.data_out_mux.repl_3.concat_4.out_AT0))
(assert (= (concat f.data_out_mux.repl_3.concat_2.in0_AT0 f.data_out_mux.repl_3.concat_2.in1_AT0) f.data_out_mux.repl_3.concat_2.out_AT0))
(assert (= (concat f.data_out_mux.repl_3.concat_1.in0_AT0 f.data_out_mux.repl_3.concat_1.in1_AT0) f.data_out_mux.repl_3.concat_1.out_AT0))
(assert (= (concat f.data_out_mux.repl_2.concat_4.in0_AT0 f.data_out_mux.repl_2.concat_4.in1_AT0) f.data_out_mux.repl_2.concat_4.out_AT0))
(assert (= (concat f.data_out_mux.repl_2.concat_2.in0_AT0 f.data_out_mux.repl_2.concat_2.in1_AT0) f.data_out_mux.repl_2.concat_2.out_AT0))
(assert (= (concat f.data_out_mux.repl_2.concat_1.in0_AT0 f.data_out_mux.repl_2.concat_1.in1_AT0) f.data_out_mux.repl_2.concat_1.out_AT0))
(assert (= (concat f.data_out_mux.repl_1.concat_4.in0_AT0 f.data_out_mux.repl_1.concat_4.in1_AT0) f.data_out_mux.repl_1.concat_4.out_AT0))
(assert (= (concat f.data_out_mux.repl_1.concat_2.in0_AT0 f.data_out_mux.repl_1.concat_2.in1_AT0) f.data_out_mux.repl_1.concat_2.out_AT0))
(assert (= (concat f.data_out_mux.repl_1.concat_1.in0_AT0 f.data_out_mux.repl_1.concat_1.in1_AT0) f.data_out_mux.repl_1.concat_1.out_AT0))
(assert (= (concat f.data_out_mux.repl_0.concat_4.in0_AT0 f.data_out_mux.repl_0.concat_4.in1_AT0) f.data_out_mux.repl_0.concat_4.out_AT0))
(assert (= (concat f.data_out_mux.repl_0.concat_2.in0_AT0 f.data_out_mux.repl_0.concat_2.in1_AT0) f.data_out_mux.repl_0.concat_2.out_AT0))
(assert (= (concat f.data_out_mux.repl_0.concat_1.in0_AT0 f.data_out_mux.repl_0.concat_1.in1_AT0) f.data_out_mux.repl_0.concat_1.out_AT0))
(assert (= (bvor f.data_out_mux.or_chain_7.in0_AT0 f.data_out_mux.or_chain_7.in1_AT0) f.data_out_mux.or_chain_7.out_AT0))
(assert (= (bvor f.data_out_mux.or_chain_6.in0_AT0 f.data_out_mux.or_chain_6.in1_AT0) f.data_out_mux.or_chain_6.out_AT0))
(assert (= (bvor f.data_out_mux.or_chain_5.in0_AT0 f.data_out_mux.or_chain_5.in1_AT0) f.data_out_mux.or_chain_5.out_AT0))
(assert (= (bvor f.data_out_mux.or_chain_4.in0_AT0 f.data_out_mux.or_chain_4.in1_AT0) f.data_out_mux.or_chain_4.out_AT0))
(assert (= (bvor f.data_out_mux.or_chain_3.in0_AT0 f.data_out_mux.or_chain_3.in1_AT0) f.data_out_mux.or_chain_3.out_AT0))
(assert (= (bvor f.data_out_mux.or_chain_2.in0_AT0 f.data_out_mux.or_chain_2.in1_AT0) f.data_out_mux.or_chain_2.out_AT0))
(assert (= (bvor f.data_out_mux.or_chain_1.in0_AT0 f.data_out_mux.or_chain_1.in1_AT0) f.data_out_mux.or_chain_1.out_AT0))
(assert (= (bvand f.data_out_mux.and_7.in0_AT0 f.data_out_mux.and_7.in1_AT0) f.data_out_mux.and_7.out_AT0))
(assert (= (bvand f.data_out_mux.and_6.in0_AT0 f.data_out_mux.and_6.in1_AT0) f.data_out_mux.and_6.out_AT0))
(assert (= (bvand f.data_out_mux.and_5.in0_AT0 f.data_out_mux.and_5.in1_AT0) f.data_out_mux.and_5.out_AT0))
(assert (= (bvand f.data_out_mux.and_4.in0_AT0 f.data_out_mux.and_4.in1_AT0) f.data_out_mux.and_4.out_AT0))
(assert (= (bvand f.data_out_mux.and_3.in0_AT0 f.data_out_mux.and_3.in1_AT0) f.data_out_mux.and_3.out_AT0))
(assert (= (bvand f.data_out_mux.and_2.in0_AT0 f.data_out_mux.and_2.in1_AT0) f.data_out_mux.and_2.out_AT0))
(assert (= (bvand f.data_out_mux.and_1.in0_AT0 f.data_out_mux.and_1.in1_AT0) f.data_out_mux.and_1.out_AT0))
(assert (= (bvand f.data_out_mux.and_0.in0_AT0 f.data_out_mux.and_0.in1_AT0) f.data_out_mux.and_0.out_AT0))
(assert (= f.const_7.out_AT0 #b111))
(assert (= f.const_6.out_AT0 #b110))
(assert (= f.const_5.out_AT0 #b101))
(assert (= f.const_4.out_AT0 #b100))
(assert (= f.const_3.out_AT0 #b011))
(assert (= f.const_2.out_AT0 #b010))
(assert (= f.const_1.out_AT0 #b001))
(assert (= f.const_0.out_AT0 #b000))
(assert (= (bvor en_or_sp.in0_AT0 en_or_sp.in1_AT0) en_or_sp.out_AT0))
(assert (= (bvand data_out_vld_and2.in0_AT0 data_out_vld_and2.in1_AT0) data_out_vld_and2.out_AT0))
(assert (= (bvand data_out_vld_and1.in0_AT0 data_out_vld_and1.in1_AT0) data_out_vld_and1.out_AT0))
(assert (= (bvult cnt_gt_0.in1_AT0 cnt_gt_0.in0_AT0) (= cnt_gt_0.out_AT0 #b1)))
(assert (= _-_state_id_-__AT0 #b00))
(assert (= self.pop_AT0 #b0))
(assert (= self.push_AT0 #b0))
(assert (= self.rst_AT0 #b1))
(assert (= mpt.cnt.out_AT0 #b0000))
(assert (= magic_packet.out_AT0 magic_packet.init_AT0))
(assert (= f.wrPtr.out_AT0 #b0000))
(assert (= f.rdPtr.out_AT0 #b0000))
(assert (= f.entry7.reg0.out_AT0 #b00000000))
(assert (= f.entry6.reg0.out_AT0 #b00000000))
(assert (= f.entry5.reg0.out_AT0 #b00000000))
(assert (= f.entry4.reg0.out_AT0 #b00000000))
(assert (= f.entry3.reg0.out_AT0 #b00000000))
(assert (= f.entry2.reg0.out_AT0 #b00000000))
(assert (= f.entry1.reg0.out_AT0 #b00000000))
(assert (= f.entry0.reg0.out_AT0 #b00000000))
(assert (= en.out_AT0 en.init_AT0))
(push 1)

(assert (not (= self.prop_signal_AT0 #b1)))
(check-sat)

(pop 1)
(declare-fun f.wrPtrRst.in0_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT1 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_1.in1_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_7.out_AT1 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_7.concat_1.in0_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrSlice.out_AT1 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_7.in0_AT1 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_6.concat_1.in1_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_6.out_AT1 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_6.concat_1.in0_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_6.in0_AT1 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_5.concat_1.in1_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_5.out_AT1 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_5.concat_1.in0_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_5.in0_AT1 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_4.concat_1.in1_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_4.out_AT1 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_4.concat_1.in0_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_4.in0_AT1 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_3.concat_1.in1_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_3.out_AT1 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_3.concat_1.in0_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_3.in0_AT1 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_2.concat_1.in1_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_2.out_AT1 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_2.concat_1.in0_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_2.in0_AT1 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_1.concat_1.in1_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_1.out_AT1 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_1.concat_1.in0_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_1.in0_AT1 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_0.concat_1.in1_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_0.out_AT1 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_0.concat_1.in0_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_0.in0_AT1 () (_ BitVec 3))
(declare-fun f.rdPtrEn.sel_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT1 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT1 () (_ BitVec 4))
(declare-fun f.one.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT1 () (_ BitVec 4))
(declare-fun f.fullCalc.in1_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT1 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT1 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT1 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT1 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT1 () (_ BitVec 1))
(declare-fun f.entry7.reg0.clk_AT1 () (_ BitVec 1))
(declare-fun f.entryEn7.out_AT1 () (_ BitVec 1))
(declare-fun f.entry7.enMux.sel_AT1 () (_ BitVec 1))
(declare-fun f.entry7.reg0.in_AT1 () (_ BitVec 8))
(declare-fun f.entry7.enMux.out_AT1 () (_ BitVec 8))
(declare-fun f.entry7.enMux.in1_AT1 () (_ BitVec 8))
(declare-fun f.entry7.enMux.in0_AT1 () (_ BitVec 8))
(declare-fun f.entry6.reg0.clk_AT1 () (_ BitVec 1))
(declare-fun f.entryEn6.out_AT1 () (_ BitVec 1))
(declare-fun f.entry6.enMux.sel_AT1 () (_ BitVec 1))
(declare-fun f.entry6.reg0.in_AT1 () (_ BitVec 8))
(declare-fun f.entry6.enMux.out_AT1 () (_ BitVec 8))
(declare-fun f.entry6.enMux.in1_AT1 () (_ BitVec 8))
(declare-fun f.entry6.enMux.in0_AT1 () (_ BitVec 8))
(declare-fun f.entry5.reg0.clk_AT1 () (_ BitVec 1))
(declare-fun f.entryEn5.out_AT1 () (_ BitVec 1))
(declare-fun f.entry5.enMux.sel_AT1 () (_ BitVec 1))
(declare-fun f.entry5.reg0.in_AT1 () (_ BitVec 8))
(declare-fun f.entry5.enMux.out_AT1 () (_ BitVec 8))
(declare-fun f.entry5.enMux.in1_AT1 () (_ BitVec 8))
(declare-fun f.entry5.enMux.in0_AT1 () (_ BitVec 8))
(declare-fun f.entry4.reg0.clk_AT1 () (_ BitVec 1))
(declare-fun f.entryEn4.out_AT1 () (_ BitVec 1))
(declare-fun f.entry4.enMux.sel_AT1 () (_ BitVec 1))
(declare-fun f.entry4.reg0.in_AT1 () (_ BitVec 8))
(declare-fun f.entry4.enMux.out_AT1 () (_ BitVec 8))
(declare-fun f.entry4.enMux.in1_AT1 () (_ BitVec 8))
(declare-fun f.entry4.enMux.in0_AT1 () (_ BitVec 8))
(declare-fun f.entry3.reg0.clk_AT1 () (_ BitVec 1))
(declare-fun f.entryEn3.out_AT1 () (_ BitVec 1))
(declare-fun f.entry3.enMux.sel_AT1 () (_ BitVec 1))
(declare-fun f.entry3.reg0.in_AT1 () (_ BitVec 8))
(declare-fun f.entry3.enMux.out_AT1 () (_ BitVec 8))
(declare-fun f.entry3.enMux.in1_AT1 () (_ BitVec 8))
(declare-fun f.entry3.enMux.in0_AT1 () (_ BitVec 8))
(declare-fun f.entry2.reg0.clk_AT1 () (_ BitVec 1))
(declare-fun f.entryEn2.out_AT1 () (_ BitVec 1))
(declare-fun f.entry2.enMux.sel_AT1 () (_ BitVec 1))
(declare-fun f.entry2.reg0.in_AT1 () (_ BitVec 8))
(declare-fun f.entry2.enMux.out_AT1 () (_ BitVec 8))
(declare-fun f.entry2.enMux.in1_AT1 () (_ BitVec 8))
(declare-fun f.entry2.enMux.in0_AT1 () (_ BitVec 8))
(declare-fun f.entry1.reg0.clk_AT1 () (_ BitVec 1))
(declare-fun f.entryEn1.out_AT1 () (_ BitVec 1))
(declare-fun f.entry1.enMux.sel_AT1 () (_ BitVec 1))
(declare-fun f.entry1.reg0.in_AT1 () (_ BitVec 8))
(declare-fun f.entry1.enMux.out_AT1 () (_ BitVec 8))
(declare-fun f.entry1.enMux.in1_AT1 () (_ BitVec 8))
(declare-fun f.entry1.enMux.in0_AT1 () (_ BitVec 8))
(declare-fun f.entry0.reg0.clk_AT1 () (_ BitVec 1))
(declare-fun f.entryEn0.out_AT1 () (_ BitVec 1))
(declare-fun f.entry0.enMux.sel_AT1 () (_ BitVec 1))
(declare-fun f.entry0.reg0.in_AT1 () (_ BitVec 8))
(declare-fun f.entry0.enMux.out_AT1 () (_ BitVec 8))
(declare-fun f.entry0.enMux.in1_AT1 () (_ BitVec 8))
(declare-fun f.entry0.enMux.in0_AT1 () (_ BitVec 8))
(declare-fun f.emptyEq.out_AT1 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT1 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_4.in1_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_2.out_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_4.in0_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_2.in1_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_7.concat_1.out_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_7.concat_2.in0_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_4.in1_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_2.out_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_4.in0_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_2.in1_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_1.out_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_2.in0_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_4.in1_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_2.out_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_4.in0_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_2.in1_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_1.out_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_2.in0_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_4.in1_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_2.out_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_4.in0_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_2.in1_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_1.out_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_2.in0_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_4.in1_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_2.out_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_4.in0_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_2.in1_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_1.out_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_2.in0_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_4.in1_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_2.out_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_4.in0_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_2.in1_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_1.out_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_2.in0_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_4.in1_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_2.out_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_4.in0_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_2.in1_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_1.out_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_2.in0_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_4.in1_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_2.out_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_4.in0_AT1 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_2.in1_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_1.out_AT1 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_2.in0_AT1 () (_ BitVec 2))
(declare-fun self.data_out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.out_AT1 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_7.concat_4.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_6.concat_4.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_5.concat_4.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_4.concat_4.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_3.concat_4.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_2.concat_4.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_1.concat_4.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.in0_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.in1_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_0.concat_4.out_AT1 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.in0_AT1 () (_ BitVec 8))
(declare-fun f.wrPtrEq7.in1_AT1 () (_ BitVec 3))
(declare-fun f.const_7.out_AT1 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_7.in1_AT1 () (_ BitVec 3))
(declare-fun f.wrPtrEq6.in1_AT1 () (_ BitVec 3))
(declare-fun f.const_6.out_AT1 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_6.in1_AT1 () (_ BitVec 3))
(declare-fun f.wrPtrEq5.in1_AT1 () (_ BitVec 3))
(declare-fun f.const_5.out_AT1 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_5.in1_AT1 () (_ BitVec 3))
(declare-fun f.wrPtrEq4.in1_AT1 () (_ BitVec 3))
(declare-fun f.const_4.out_AT1 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_4.in1_AT1 () (_ BitVec 3))
(declare-fun f.wrPtrEq3.in1_AT1 () (_ BitVec 3))
(declare-fun f.const_3.out_AT1 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_3.in1_AT1 () (_ BitVec 3))
(declare-fun f.wrPtrEq2.in1_AT1 () (_ BitVec 3))
(declare-fun f.const_2.out_AT1 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_2.in1_AT1 () (_ BitVec 3))
(declare-fun f.wrPtrEq1.in1_AT1 () (_ BitVec 3))
(declare-fun f.const_1.out_AT1 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_1.in1_AT1 () (_ BitVec 3))
(declare-fun f.wrPtrEq0.in1_AT1 () (_ BitVec 3))
(declare-fun f.const_0.out_AT1 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_0.in1_AT1 () (_ BitVec 3))
(declare-fun en_or_sp.in1_AT1 () (_ BitVec 1))
(declare-fun not_en.in_AT1 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT1 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT1 () (_ BitVec 1))
(declare-fun en.in_AT1 () (_ BitVec 1))
(declare-fun en.clk_AT1 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT1 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT1 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT1 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT1 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT1 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT1 () (_ BitVec 4))
(declare-fun magic_packet.out_AT1 () (_ BitVec 8))
(declare-fun magic_packet.init_AT1 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT1 () (_ BitVec 4))
(declare-fun f.entry7.reg0.out_AT1 () (_ BitVec 8))
(declare-fun f.entry6.reg0.out_AT1 () (_ BitVec 8))
(declare-fun f.entry5.reg0.out_AT1 () (_ BitVec 8))
(declare-fun f.entry4.reg0.out_AT1 () (_ BitVec 8))
(declare-fun f.entry3.reg0.out_AT1 () (_ BitVec 8))
(declare-fun f.entry2.reg0.out_AT1 () (_ BitVec 8))
(declare-fun f.entry1.reg0.out_AT1 () (_ BitVec 8))
(declare-fun f.entry0.reg0.out_AT1 () (_ BitVec 8))
(declare-fun en.init_AT1 () (_ BitVec 1))
(declare-fun en.out_AT1 () (_ BitVec 1))
(declare-fun self.pop_AT1 () (_ BitVec 1))
(declare-fun self.empty_AT1 () (_ BitVec 1))
(declare-fun self.push_AT1 () (_ BitVec 1))
(declare-fun self.full_AT1 () (_ BitVec 1))
(declare-fun self.rst_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT1 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT1 () (_ BitVec 1))
(declare-fun self.start_AT1 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT1 () (_ BitVec 1))
(declare-fun f.entryEn7.in0_AT1 () (_ BitVec 1))
(declare-fun f.entryEn6.in0_AT1 () (_ BitVec 1))
(declare-fun f.entryEn5.in0_AT1 () (_ BitVec 1))
(declare-fun f.entryEn4.in0_AT1 () (_ BitVec 1))
(declare-fun f.entryEn3.in0_AT1 () (_ BitVec 1))
(declare-fun f.entryEn2.in0_AT1 () (_ BitVec 1))
(declare-fun f.entryEn1.in0_AT1 () (_ BitVec 1))
(declare-fun f.entryEn0.in0_AT1 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT1 () (_ BitVec 1))
(declare-fun self.prop_signal_AT1 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT1 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT1 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT1 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT1 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT1 () (_ BitVec 1))
(declare-fun mp_en.out_AT1 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT1 () (_ BitVec 1))
(declare-fun self.data_in_AT1 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT1 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT1 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT1 () (_ BitVec 1))
(declare-fun zero.out_AT1 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT1 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.one.out_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT1 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT1 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT1 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT1 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT1 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT1 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT1 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT1 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT1 () (_ BitVec 4))
(declare-fun self.clk_AT1 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT1 () (_ BitVec 1))
(declare-fun not_en.out_AT1 () (_ BitVec 1))
(declare-fun mp_en.in1_AT1 () (_ BitVec 1))
(declare-fun start_and_push.out_AT1 () (_ BitVec 1))
(declare-fun mp_en.in0_AT1 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT1 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT1 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT1 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT1 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT1 () (_ BitVec 8))
(declare-fun magic_packet.in_AT1 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT1 () (_ BitVec 1))
(declare-fun f.zero.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT1 () (_ BitVec 4))
(declare-fun f.entryEn7.in1_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq7.out_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrSlice.out_AT1 () (_ BitVec 3))
(declare-fun f.wrPtrEq7.in0_AT1 () (_ BitVec 3))
(declare-fun f.entryEn6.in1_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq6.out_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq6.in0_AT1 () (_ BitVec 3))
(declare-fun f.entryEn5.in1_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq5.out_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq5.in0_AT1 () (_ BitVec 3))
(declare-fun f.entryEn4.in1_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq4.out_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq4.in0_AT1 () (_ BitVec 3))
(declare-fun f.entryEn3.in1_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq3.out_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq3.in0_AT1 () (_ BitVec 3))
(declare-fun f.entryEn2.in1_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq2.out_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq2.in0_AT1 () (_ BitVec 3))
(declare-fun f.entryEn1.in1_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq1.out_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq1.in0_AT1 () (_ BitVec 3))
(declare-fun f.entryEn0.in1_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq0.out_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEq0.in0_AT1 () (_ BitVec 3))
(declare-fun f.wrPtrEn.sel_AT1 () (_ BitVec 1))

(assert (=> (= self.empty_AT1 #b1) (= self.pop_AT1 #b0)))
(assert (=> (= self.full_AT1 #b1) (= self.push_AT1 #b0)))
(assert (=> (= _-_state_id_-__AT1 #b10) (and true (= self.rst_AT1 #b0))))
(assert (=> (= _-_state_id_-__AT1 #b01) (and (and (and true (= self.rst_AT1 #b1)) (= self.push_AT1 #b0)) (= self.pop_AT1 #b0))))
(assert (=> (= _-_state_id_-__AT1 #b00) (and (and (and true (= self.rst_AT1 #b1)) (= self.push_AT1 #b0)) (= self.pop_AT1 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT1 ((_ extract 3 3) f.wrPtr.out_AT1)))
(assert (= f.fullEq_1.in0_AT1 ((_ extract 3 3) f.rdPtr.out_AT1)))
(assert (= en.out_AT1 mpt.not_captured.in_AT1))
(assert (= self.start_AT1 start_and_push.in0_AT1))
(assert (= self.push_AT1 start_and_push.in1_AT1))
(assert (= self.push_AT1 mpt.ssa_cnt_and1.in1_AT1))
(assert (= self.push_AT1 f.entryEn7.in0_AT1))
(assert (= self.push_AT1 f.entryEn6.in0_AT1))
(assert (= self.push_AT1 f.entryEn5.in0_AT1))
(assert (= self.push_AT1 f.entryEn4.in0_AT1))
(assert (= self.push_AT1 f.entryEn3.in0_AT1))
(assert (= self.push_AT1 f.entryEn2.in0_AT1))
(assert (= self.push_AT1 f.entryEn1.in0_AT1))
(assert (= self.push_AT1 f.entryEn0.in0_AT1))
(assert (= self.prop_signal_AT1 prop_signal_or.out_AT1))
(assert (= self.pop_AT1 mpt.next_cnt_and1.in1_AT1))
(assert (= self.full_AT1 f.fullCalc.out_AT1))
(assert (= self.data_out_vld_AT1 data_out_vld_and2.out_AT1))
(assert (= not_data_out_vld.out_AT1 prop_signal_or.in0_AT1))
(assert (= next_magic_packet.sel_AT1 mp_en.out_AT1))
(assert (= next_magic_packet.in1_AT1 self.data_in_AT1))
(assert (= next_cnt_eq0.out_AT1 data_out_vld_and2.in1_AT1))
(assert (= next_cnt_eq0.in1_AT1 zero.out_AT1))
(assert (= mpt.ssa_cnt_gt_0.out_AT1 mpt.next_cnt_and1.in0_AT1))
(assert (= mpt.ssa_cnt_gt_0.in1_AT1 mpt.zero.out_AT1))
(assert (= mpt.ssa_cnt_and1.out_AT1 mpt.ssa_cnt_and2.in0_AT1))
(assert (= mpt.ssa_cnt.sel_AT1 mpt.ssa_cnt_and2.out_AT1))
(assert (= mpt.ssa_cnt.out_AT1 mpt.ssa_cnt_m1.in0_AT1))
(assert (= mpt.ssa_cnt.out_AT1 mpt.ssa_cnt_gt_0.in0_AT1))
(assert (= mpt.one.out_AT1 mpt.ssa_cnt_m1.in1_AT1))
(assert (= mpt.not_captured.out_AT1 mpt.ssa_cnt_and2.in1_AT1))
(assert (= mpt.next_cnt.sel_AT1 self.rst_AT1))
(assert (= mpt.next_cnt.out_AT1 next_cnt_eq0.in0_AT1))
(assert (= mpt.next_cnt.in1_AT1 mpt.zero.out_AT1))
(assert (= mpt.decr_mux.sel_AT1 mpt.next_cnt_and1.out_AT1))
(assert (= mpt.decr_mux.out_AT1 mpt.next_cnt.in0_AT1))
(assert (= mpt.decr_mux.in1_AT1 mpt.ssa_cnt_m1.out_AT1))
(assert (= mpt.decr_mux.in0_AT1 mpt.ssa_cnt.out_AT1))
(assert (= mpt.cnt_p1.out_AT1 mpt.ssa_cnt.in1_AT1))
(assert (= mpt.cnt_p1.in1_AT1 mpt.one.out_AT1))
(assert (= mpt.cnt_lt_depth.out_AT1 mpt.ssa_cnt_and1.in0_AT1))
(assert (= mpt.cnt_lt_depth.in1_AT1 mpt.depth.out_AT1))
(assert (= mpt.cnt.out_AT1 mpt.ssa_cnt.in0_AT1))
(assert (= mpt.cnt.out_AT1 mpt.cnt_p1.in0_AT1))
(assert (= mpt.cnt.out_AT1 mpt.cnt_lt_depth.in0_AT1))
(assert (= mpt.cnt.in_AT1 mpt.next_cnt.out_AT1))
(assert (= mpt.cnt.clk_AT1 self.clk_AT1))
(assert (= mp_en.in1_AT1 not_en.out_AT1))
(assert (= mp_en.in0_AT1 start_and_push.out_AT1))
(assert (= magic_packet_eq.out_AT1 prop_signal_or.in1_AT1))
(assert (= magic_packet.out_AT1 next_magic_packet.in0_AT1))
(assert (= magic_packet.out_AT1 magic_packet_eq.in0_AT1))
(assert (= magic_packet.in_AT1 next_magic_packet.out_AT1))
(assert (= magic_packet.clk_AT1 self.clk_AT1))
(assert (= f.wrPtrRst.sel_AT1 self.rst_AT1))
(assert (= f.wrPtrRst.in1_AT1 f.zero.out_AT1))
(assert (= f.wrPtrEq7.out_AT1 f.entryEn7.in1_AT1))
(assert (= f.wrPtrEq7.in0_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.wrPtrEq6.out_AT1 f.entryEn6.in1_AT1))
(assert (= f.wrPtrEq6.in0_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.wrPtrEq5.out_AT1 f.entryEn5.in1_AT1))
(assert (= f.wrPtrEq5.in0_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.wrPtrEq4.out_AT1 f.entryEn4.in1_AT1))
(assert (= f.wrPtrEq4.in0_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.wrPtrEq3.out_AT1 f.entryEn3.in1_AT1))
(assert (= f.wrPtrEq3.in0_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.wrPtrEq2.out_AT1 f.entryEn2.in1_AT1))
(assert (= f.wrPtrEq2.in0_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.wrPtrEq1.out_AT1 f.entryEn1.in1_AT1))
(assert (= f.wrPtrEq1.in0_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.wrPtrEq0.out_AT1 f.entryEn0.in1_AT1))
(assert (= f.wrPtrEq0.in0_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.wrPtrEn.sel_AT1 self.push_AT1))
(assert (= f.wrPtrEn.out_AT1 f.wrPtrRst.in0_AT1))
(assert (= f.wrPtrEn.in1_AT1 f.wrPtrp1.out_AT1))
(assert (= f.wrPtr.out_AT1 f.wrPtrp1.in1_AT1))
(assert (= f.wrPtr.out_AT1 f.wrPtrSlice.in_AT1))
(assert (= f.wrPtr.out_AT1 f.wrPtrEn.in0_AT1))
(assert (= f.wrPtr.in_AT1 f.wrPtrRst.out_AT1))
(assert (= f.wrPtr.clk_AT1 self.clk_AT1))
(assert (= f.rdPtrRst.sel_AT1 self.rst_AT1))
(assert (= f.rdPtrRst.in1_AT1 f.zero.out_AT1))
(assert (= f.rdPtrEq_eq_7.out_AT1 f.data_out_mux.repl_7.concat_1.in1_AT1))
(assert (= f.rdPtrEq_eq_7.out_AT1 f.data_out_mux.repl_7.concat_1.in0_AT1))
(assert (= f.rdPtrEq_eq_7.in0_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.rdPtrEq_eq_6.out_AT1 f.data_out_mux.repl_6.concat_1.in1_AT1))
(assert (= f.rdPtrEq_eq_6.out_AT1 f.data_out_mux.repl_6.concat_1.in0_AT1))
(assert (= f.rdPtrEq_eq_6.in0_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.rdPtrEq_eq_5.out_AT1 f.data_out_mux.repl_5.concat_1.in1_AT1))
(assert (= f.rdPtrEq_eq_5.out_AT1 f.data_out_mux.repl_5.concat_1.in0_AT1))
(assert (= f.rdPtrEq_eq_5.in0_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.rdPtrEq_eq_4.out_AT1 f.data_out_mux.repl_4.concat_1.in1_AT1))
(assert (= f.rdPtrEq_eq_4.out_AT1 f.data_out_mux.repl_4.concat_1.in0_AT1))
(assert (= f.rdPtrEq_eq_4.in0_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.rdPtrEq_eq_3.out_AT1 f.data_out_mux.repl_3.concat_1.in1_AT1))
(assert (= f.rdPtrEq_eq_3.out_AT1 f.data_out_mux.repl_3.concat_1.in0_AT1))
(assert (= f.rdPtrEq_eq_3.in0_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.rdPtrEq_eq_2.out_AT1 f.data_out_mux.repl_2.concat_1.in1_AT1))
(assert (= f.rdPtrEq_eq_2.out_AT1 f.data_out_mux.repl_2.concat_1.in0_AT1))
(assert (= f.rdPtrEq_eq_2.in0_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.rdPtrEq_eq_1.out_AT1 f.data_out_mux.repl_1.concat_1.in1_AT1))
(assert (= f.rdPtrEq_eq_1.out_AT1 f.data_out_mux.repl_1.concat_1.in0_AT1))
(assert (= f.rdPtrEq_eq_1.in0_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.rdPtrEq_eq_0.out_AT1 f.data_out_mux.repl_0.concat_1.in1_AT1))
(assert (= f.rdPtrEq_eq_0.out_AT1 f.data_out_mux.repl_0.concat_1.in0_AT1))
(assert (= f.rdPtrEq_eq_0.in0_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.rdPtrEn.sel_AT1 self.pop_AT1))
(assert (= f.rdPtrEn.out_AT1 f.rdPtrRst.in0_AT1))
(assert (= f.rdPtrEn.in1_AT1 f.rdPtrp1.out_AT1))
(assert (= f.rdPtr.out_AT1 f.rdPtrp1.in1_AT1))
(assert (= f.rdPtr.out_AT1 f.rdPtrSlice.in_AT1))
(assert (= f.rdPtr.out_AT1 f.rdPtrEn.in0_AT1))
(assert (= f.rdPtr.in_AT1 f.rdPtrRst.out_AT1))
(assert (= f.rdPtr.clk_AT1 self.clk_AT1))
(assert (= f.one.out_AT1 f.wrPtrp1.in0_AT1))
(assert (= f.one.out_AT1 f.rdPtrp1.in0_AT1))
(assert (= f.fullEq_2.out_AT1 f.fullCalc.in1_AT1))
(assert (= f.fullEq_2.in1_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.fullEq_2.in0_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.fullEq_1.out_AT1 f.notfullEq_1.in_AT1))
(assert (= f.fullCalc.in0_AT1 f.notfullEq_1.out_AT1))
(assert (= f.entry7.reg0.clk_AT1 self.clk_AT1))
(assert (= f.entry7.enMux.sel_AT1 f.entryEn7.out_AT1))
(assert (= f.entry7.enMux.out_AT1 f.entry7.reg0.in_AT1))
(assert (= f.entry7.enMux.in1_AT1 self.data_in_AT1))
(assert (= f.entry7.enMux.in0_AT1 f.entry7.reg0.out_AT1))
(assert (= f.entry6.reg0.clk_AT1 self.clk_AT1))
(assert (= f.entry6.enMux.sel_AT1 f.entryEn6.out_AT1))
(assert (= f.entry6.enMux.out_AT1 f.entry6.reg0.in_AT1))
(assert (= f.entry6.enMux.in1_AT1 self.data_in_AT1))
(assert (= f.entry6.enMux.in0_AT1 f.entry6.reg0.out_AT1))
(assert (= f.entry5.reg0.clk_AT1 self.clk_AT1))
(assert (= f.entry5.enMux.sel_AT1 f.entryEn5.out_AT1))
(assert (= f.entry5.enMux.out_AT1 f.entry5.reg0.in_AT1))
(assert (= f.entry5.enMux.in1_AT1 self.data_in_AT1))
(assert (= f.entry5.enMux.in0_AT1 f.entry5.reg0.out_AT1))
(assert (= f.entry4.reg0.clk_AT1 self.clk_AT1))
(assert (= f.entry4.enMux.sel_AT1 f.entryEn4.out_AT1))
(assert (= f.entry4.enMux.out_AT1 f.entry4.reg0.in_AT1))
(assert (= f.entry4.enMux.in1_AT1 self.data_in_AT1))
(assert (= f.entry4.enMux.in0_AT1 f.entry4.reg0.out_AT1))
(assert (= f.entry3.reg0.clk_AT1 self.clk_AT1))
(assert (= f.entry3.enMux.sel_AT1 f.entryEn3.out_AT1))
(assert (= f.entry3.enMux.out_AT1 f.entry3.reg0.in_AT1))
(assert (= f.entry3.enMux.in1_AT1 self.data_in_AT1))
(assert (= f.entry3.enMux.in0_AT1 f.entry3.reg0.out_AT1))
(assert (= f.entry2.reg0.clk_AT1 self.clk_AT1))
(assert (= f.entry2.enMux.sel_AT1 f.entryEn2.out_AT1))
(assert (= f.entry2.enMux.out_AT1 f.entry2.reg0.in_AT1))
(assert (= f.entry2.enMux.in1_AT1 self.data_in_AT1))
(assert (= f.entry2.enMux.in0_AT1 f.entry2.reg0.out_AT1))
(assert (= f.entry1.reg0.clk_AT1 self.clk_AT1))
(assert (= f.entry1.enMux.sel_AT1 f.entryEn1.out_AT1))
(assert (= f.entry1.enMux.out_AT1 f.entry1.reg0.in_AT1))
(assert (= f.entry1.enMux.in1_AT1 self.data_in_AT1))
(assert (= f.entry1.enMux.in0_AT1 f.entry1.reg0.out_AT1))
(assert (= f.entry0.reg0.clk_AT1 self.clk_AT1))
(assert (= f.entry0.enMux.sel_AT1 f.entryEn0.out_AT1))
(assert (= f.entry0.enMux.out_AT1 f.entry0.reg0.in_AT1))
(assert (= f.entry0.enMux.in1_AT1 self.data_in_AT1))
(assert (= f.entry0.enMux.in0_AT1 f.entry0.reg0.out_AT1))
(assert (= f.emptyEq.out_AT1 self.empty_AT1))
(assert (= f.emptyEq.in1_AT1 f.wrPtr.out_AT1))
(assert (= f.emptyEq.in0_AT1 f.rdPtr.out_AT1))
(assert (= f.data_out_mux.repl_7.concat_2.out_AT1 f.data_out_mux.repl_7.concat_4.in1_AT1))
(assert (= f.data_out_mux.repl_7.concat_2.out_AT1 f.data_out_mux.repl_7.concat_4.in0_AT1))
(assert (= f.data_out_mux.repl_7.concat_1.out_AT1 f.data_out_mux.repl_7.concat_2.in1_AT1))
(assert (= f.data_out_mux.repl_7.concat_1.out_AT1 f.data_out_mux.repl_7.concat_2.in0_AT1))
(assert (= f.data_out_mux.repl_6.concat_2.out_AT1 f.data_out_mux.repl_6.concat_4.in1_AT1))
(assert (= f.data_out_mux.repl_6.concat_2.out_AT1 f.data_out_mux.repl_6.concat_4.in0_AT1))
(assert (= f.data_out_mux.repl_6.concat_1.out_AT1 f.data_out_mux.repl_6.concat_2.in1_AT1))
(assert (= f.data_out_mux.repl_6.concat_1.out_AT1 f.data_out_mux.repl_6.concat_2.in0_AT1))
(assert (= f.data_out_mux.repl_5.concat_2.out_AT1 f.data_out_mux.repl_5.concat_4.in1_AT1))
(assert (= f.data_out_mux.repl_5.concat_2.out_AT1 f.data_out_mux.repl_5.concat_4.in0_AT1))
(assert (= f.data_out_mux.repl_5.concat_1.out_AT1 f.data_out_mux.repl_5.concat_2.in1_AT1))
(assert (= f.data_out_mux.repl_5.concat_1.out_AT1 f.data_out_mux.repl_5.concat_2.in0_AT1))
(assert (= f.data_out_mux.repl_4.concat_2.out_AT1 f.data_out_mux.repl_4.concat_4.in1_AT1))
(assert (= f.data_out_mux.repl_4.concat_2.out_AT1 f.data_out_mux.repl_4.concat_4.in0_AT1))
(assert (= f.data_out_mux.repl_4.concat_1.out_AT1 f.data_out_mux.repl_4.concat_2.in1_AT1))
(assert (= f.data_out_mux.repl_4.concat_1.out_AT1 f.data_out_mux.repl_4.concat_2.in0_AT1))
(assert (= f.data_out_mux.repl_3.concat_2.out_AT1 f.data_out_mux.repl_3.concat_4.in1_AT1))
(assert (= f.data_out_mux.repl_3.concat_2.out_AT1 f.data_out_mux.repl_3.concat_4.in0_AT1))
(assert (= f.data_out_mux.repl_3.concat_1.out_AT1 f.data_out_mux.repl_3.concat_2.in1_AT1))
(assert (= f.data_out_mux.repl_3.concat_1.out_AT1 f.data_out_mux.repl_3.concat_2.in0_AT1))
(assert (= f.data_out_mux.repl_2.concat_2.out_AT1 f.data_out_mux.repl_2.concat_4.in1_AT1))
(assert (= f.data_out_mux.repl_2.concat_2.out_AT1 f.data_out_mux.repl_2.concat_4.in0_AT1))
(assert (= f.data_out_mux.repl_2.concat_1.out_AT1 f.data_out_mux.repl_2.concat_2.in1_AT1))
(assert (= f.data_out_mux.repl_2.concat_1.out_AT1 f.data_out_mux.repl_2.concat_2.in0_AT1))
(assert (= f.data_out_mux.repl_1.concat_2.out_AT1 f.data_out_mux.repl_1.concat_4.in1_AT1))
(assert (= f.data_out_mux.repl_1.concat_2.out_AT1 f.data_out_mux.repl_1.concat_4.in0_AT1))
(assert (= f.data_out_mux.repl_1.concat_1.out_AT1 f.data_out_mux.repl_1.concat_2.in1_AT1))
(assert (= f.data_out_mux.repl_1.concat_1.out_AT1 f.data_out_mux.repl_1.concat_2.in0_AT1))
(assert (= f.data_out_mux.repl_0.concat_2.out_AT1 f.data_out_mux.repl_0.concat_4.in1_AT1))
(assert (= f.data_out_mux.repl_0.concat_2.out_AT1 f.data_out_mux.repl_0.concat_4.in0_AT1))
(assert (= f.data_out_mux.repl_0.concat_1.out_AT1 f.data_out_mux.repl_0.concat_2.in1_AT1))
(assert (= f.data_out_mux.repl_0.concat_1.out_AT1 f.data_out_mux.repl_0.concat_2.in0_AT1))
(assert (= f.data_out_mux.or_chain_7.out_AT1 self.data_out_AT1))
(assert (= f.data_out_mux.or_chain_7.out_AT1 magic_packet_eq.in1_AT1))
(assert (= f.data_out_mux.or_chain_6.out_AT1 f.data_out_mux.or_chain_7.in0_AT1))
(assert (= f.data_out_mux.or_chain_5.out_AT1 f.data_out_mux.or_chain_6.in0_AT1))
(assert (= f.data_out_mux.or_chain_4.out_AT1 f.data_out_mux.or_chain_5.in0_AT1))
(assert (= f.data_out_mux.or_chain_3.out_AT1 f.data_out_mux.or_chain_4.in0_AT1))
(assert (= f.data_out_mux.or_chain_2.out_AT1 f.data_out_mux.or_chain_3.in0_AT1))
(assert (= f.data_out_mux.or_chain_1.out_AT1 f.data_out_mux.or_chain_2.in0_AT1))
(assert (= f.data_out_mux.and_7.out_AT1 f.data_out_mux.or_chain_7.in1_AT1))
(assert (= f.data_out_mux.and_7.in1_AT1 f.entry7.reg0.out_AT1))
(assert (= f.data_out_mux.and_7.in0_AT1 f.data_out_mux.repl_7.concat_4.out_AT1))
(assert (= f.data_out_mux.and_6.out_AT1 f.data_out_mux.or_chain_6.in1_AT1))
(assert (= f.data_out_mux.and_6.in1_AT1 f.entry6.reg0.out_AT1))
(assert (= f.data_out_mux.and_6.in0_AT1 f.data_out_mux.repl_6.concat_4.out_AT1))
(assert (= f.data_out_mux.and_5.out_AT1 f.data_out_mux.or_chain_5.in1_AT1))
(assert (= f.data_out_mux.and_5.in1_AT1 f.entry5.reg0.out_AT1))
(assert (= f.data_out_mux.and_5.in0_AT1 f.data_out_mux.repl_5.concat_4.out_AT1))
(assert (= f.data_out_mux.and_4.out_AT1 f.data_out_mux.or_chain_4.in1_AT1))
(assert (= f.data_out_mux.and_4.in1_AT1 f.entry4.reg0.out_AT1))
(assert (= f.data_out_mux.and_4.in0_AT1 f.data_out_mux.repl_4.concat_4.out_AT1))
(assert (= f.data_out_mux.and_3.out_AT1 f.data_out_mux.or_chain_3.in1_AT1))
(assert (= f.data_out_mux.and_3.in1_AT1 f.entry3.reg0.out_AT1))
(assert (= f.data_out_mux.and_3.in0_AT1 f.data_out_mux.repl_3.concat_4.out_AT1))
(assert (= f.data_out_mux.and_2.out_AT1 f.data_out_mux.or_chain_2.in1_AT1))
(assert (= f.data_out_mux.and_2.in1_AT1 f.entry2.reg0.out_AT1))
(assert (= f.data_out_mux.and_2.in0_AT1 f.data_out_mux.repl_2.concat_4.out_AT1))
(assert (= f.data_out_mux.and_1.out_AT1 f.data_out_mux.or_chain_1.in1_AT1))
(assert (= f.data_out_mux.and_1.in1_AT1 f.entry1.reg0.out_AT1))
(assert (= f.data_out_mux.and_1.in0_AT1 f.data_out_mux.repl_1.concat_4.out_AT1))
(assert (= f.data_out_mux.and_0.out_AT1 f.data_out_mux.or_chain_1.in0_AT1))
(assert (= f.data_out_mux.and_0.in1_AT1 f.entry0.reg0.out_AT1))
(assert (= f.data_out_mux.and_0.in0_AT1 f.data_out_mux.repl_0.concat_4.out_AT1))
(assert (= f.const_7.out_AT1 f.wrPtrEq7.in1_AT1))
(assert (= f.const_7.out_AT1 f.rdPtrEq_eq_7.in1_AT1))
(assert (= f.const_6.out_AT1 f.wrPtrEq6.in1_AT1))
(assert (= f.const_6.out_AT1 f.rdPtrEq_eq_6.in1_AT1))
(assert (= f.const_5.out_AT1 f.wrPtrEq5.in1_AT1))
(assert (= f.const_5.out_AT1 f.rdPtrEq_eq_5.in1_AT1))
(assert (= f.const_4.out_AT1 f.wrPtrEq4.in1_AT1))
(assert (= f.const_4.out_AT1 f.rdPtrEq_eq_4.in1_AT1))
(assert (= f.const_3.out_AT1 f.wrPtrEq3.in1_AT1))
(assert (= f.const_3.out_AT1 f.rdPtrEq_eq_3.in1_AT1))
(assert (= f.const_2.out_AT1 f.wrPtrEq2.in1_AT1))
(assert (= f.const_2.out_AT1 f.rdPtrEq_eq_2.in1_AT1))
(assert (= f.const_1.out_AT1 f.wrPtrEq1.in1_AT1))
(assert (= f.const_1.out_AT1 f.rdPtrEq_eq_1.in1_AT1))
(assert (= f.const_0.out_AT1 f.wrPtrEq0.in1_AT1))
(assert (= f.const_0.out_AT1 f.rdPtrEq_eq_0.in1_AT1))
(assert (= en_or_sp.in1_AT1 start_and_push.out_AT1))
(assert (= en.out_AT1 not_en.in_AT1))
(assert (= en.out_AT1 en_or_sp.in0_AT1))
(assert (= en.in_AT1 en_or_sp.out_AT1))
(assert (= en.clk_AT1 self.clk_AT1))
(assert (= data_out_vld_and2.out_AT1 not_data_out_vld.in_AT1))
(assert (= data_out_vld_and1.out_AT1 data_out_vld_and2.in0_AT1))
(assert (= data_out_vld_and1.in0_AT1 en.out_AT1))
(assert (= cnt_gt_0.out_AT1 data_out_vld_and1.in1_AT1))
(assert (= cnt_gt_0.in1_AT1 zero.out_AT1))
(assert (= cnt_gt_0.in0_AT1 mpt.cnt.out_AT1))
(assert (= self.clk_AT1 #b0))
(assert (= zero.out_AT1 #b0000))
(assert (= (bvand start_and_push.in0_AT1 start_and_push.in1_AT1) start_and_push.out_AT1))
(assert (= (bvor prop_signal_or.in0_AT1 prop_signal_or.in1_AT1) prop_signal_or.out_AT1))
(assert (= (bvnot not_en.in_AT1) not_en.out_AT1))
(assert (= (bvnot not_data_out_vld.in_AT1) not_data_out_vld.out_AT1))
(assert (=> (= next_magic_packet.sel_AT1 #b1) (= next_magic_packet.in1_AT1 next_magic_packet.out_AT1)))
(assert (=> (= next_magic_packet.sel_AT1 #b0) (= next_magic_packet.in0_AT1 next_magic_packet.out_AT1)))
(assert (=> (not (= next_cnt_eq0.in0_AT1 next_cnt_eq0.in1_AT1)) (= next_cnt_eq0.out_AT1 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT1 next_cnt_eq0.in1_AT1) (= next_cnt_eq0.out_AT1 #b1)))
(assert (= mpt.zero.out_AT1 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT1 mpt.ssa_cnt_m1.in1_AT1) mpt.ssa_cnt_m1.out_AT1))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT1 mpt.ssa_cnt_gt_0.in0_AT1) (= mpt.ssa_cnt_gt_0.out_AT1 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT1 mpt.ssa_cnt_and2.in1_AT1) mpt.ssa_cnt_and2.out_AT1))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT1 mpt.ssa_cnt_and1.in1_AT1) mpt.ssa_cnt_and1.out_AT1))
(assert (=> (= mpt.ssa_cnt.sel_AT1 #b1) (= mpt.ssa_cnt.in1_AT1 mpt.ssa_cnt.out_AT1)))
(assert (=> (= mpt.ssa_cnt.sel_AT1 #b0) (= mpt.ssa_cnt.in0_AT1 mpt.ssa_cnt.out_AT1)))
(assert (= mpt.one.out_AT1 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT1) mpt.not_captured.out_AT1))
(assert (= (bvand mpt.next_cnt_and1.in0_AT1 mpt.next_cnt_and1.in1_AT1) mpt.next_cnt_and1.out_AT1))
(assert (=> (= mpt.next_cnt.sel_AT1 #b1) (= mpt.next_cnt.in1_AT1 mpt.next_cnt.out_AT1)))
(assert (=> (= mpt.next_cnt.sel_AT1 #b0) (= mpt.next_cnt.in0_AT1 mpt.next_cnt.out_AT1)))
(assert (= mpt.depth.out_AT1 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT1 #b1) (= mpt.decr_mux.in1_AT1 mpt.decr_mux.out_AT1)))
(assert (=> (= mpt.decr_mux.sel_AT1 #b0) (= mpt.decr_mux.in0_AT1 mpt.decr_mux.out_AT1)))
(assert (= (bvadd mpt.cnt_p1.in0_AT1 mpt.cnt_p1.in1_AT1) mpt.cnt_p1.out_AT1))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT1 mpt.cnt_lt_depth.in1_AT1) (= mpt.cnt_lt_depth.out_AT1 #b1)))
(assert (= (bvand mp_en.in0_AT1 mp_en.in1_AT1) mp_en.out_AT1))
(assert (=> (not (= magic_packet_eq.in0_AT1 magic_packet_eq.in1_AT1)) (= magic_packet_eq.out_AT1 #b0)))
(assert (=> (= magic_packet_eq.in0_AT1 magic_packet_eq.in1_AT1) (= magic_packet_eq.out_AT1 #b1)))
(assert (= f.zero.out_AT1 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT1 f.wrPtrp1.in1_AT1) f.wrPtrp1.out_AT1))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT1) f.wrPtrSlice.out_AT1))
(assert (=> (= f.wrPtrRst.sel_AT1 #b1) (= f.wrPtrRst.in1_AT1 f.wrPtrRst.out_AT1)))
(assert (=> (= f.wrPtrRst.sel_AT1 #b0) (= f.wrPtrRst.in0_AT1 f.wrPtrRst.out_AT1)))
(assert (=> (not (= f.wrPtrEq7.in0_AT1 f.wrPtrEq7.in1_AT1)) (= f.wrPtrEq7.out_AT1 #b0)))
(assert (=> (= f.wrPtrEq7.in0_AT1 f.wrPtrEq7.in1_AT1) (= f.wrPtrEq7.out_AT1 #b1)))
(assert (=> (not (= f.wrPtrEq6.in0_AT1 f.wrPtrEq6.in1_AT1)) (= f.wrPtrEq6.out_AT1 #b0)))
(assert (=> (= f.wrPtrEq6.in0_AT1 f.wrPtrEq6.in1_AT1) (= f.wrPtrEq6.out_AT1 #b1)))
(assert (=> (not (= f.wrPtrEq5.in0_AT1 f.wrPtrEq5.in1_AT1)) (= f.wrPtrEq5.out_AT1 #b0)))
(assert (=> (= f.wrPtrEq5.in0_AT1 f.wrPtrEq5.in1_AT1) (= f.wrPtrEq5.out_AT1 #b1)))
(assert (=> (not (= f.wrPtrEq4.in0_AT1 f.wrPtrEq4.in1_AT1)) (= f.wrPtrEq4.out_AT1 #b0)))
(assert (=> (= f.wrPtrEq4.in0_AT1 f.wrPtrEq4.in1_AT1) (= f.wrPtrEq4.out_AT1 #b1)))
(assert (=> (not (= f.wrPtrEq3.in0_AT1 f.wrPtrEq3.in1_AT1)) (= f.wrPtrEq3.out_AT1 #b0)))
(assert (=> (= f.wrPtrEq3.in0_AT1 f.wrPtrEq3.in1_AT1) (= f.wrPtrEq3.out_AT1 #b1)))
(assert (=> (not (= f.wrPtrEq2.in0_AT1 f.wrPtrEq2.in1_AT1)) (= f.wrPtrEq2.out_AT1 #b0)))
(assert (=> (= f.wrPtrEq2.in0_AT1 f.wrPtrEq2.in1_AT1) (= f.wrPtrEq2.out_AT1 #b1)))
(assert (=> (not (= f.wrPtrEq1.in0_AT1 f.wrPtrEq1.in1_AT1)) (= f.wrPtrEq1.out_AT1 #b0)))
(assert (=> (= f.wrPtrEq1.in0_AT1 f.wrPtrEq1.in1_AT1) (= f.wrPtrEq1.out_AT1 #b1)))
(assert (=> (not (= f.wrPtrEq0.in0_AT1 f.wrPtrEq0.in1_AT1)) (= f.wrPtrEq0.out_AT1 #b0)))
(assert (=> (= f.wrPtrEq0.in0_AT1 f.wrPtrEq0.in1_AT1) (= f.wrPtrEq0.out_AT1 #b1)))
(assert (=> (= f.wrPtrEn.sel_AT1 #b1) (= f.wrPtrEn.in1_AT1 f.wrPtrEn.out_AT1)))
(assert (=> (= f.wrPtrEn.sel_AT1 #b0) (= f.wrPtrEn.in0_AT1 f.wrPtrEn.out_AT1)))
(assert (= (bvadd f.rdPtrp1.in0_AT1 f.rdPtrp1.in1_AT1) f.rdPtrp1.out_AT1))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT1) f.rdPtrSlice.out_AT1))
(assert (=> (= f.rdPtrRst.sel_AT1 #b1) (= f.rdPtrRst.in1_AT1 f.rdPtrRst.out_AT1)))
(assert (=> (= f.rdPtrRst.sel_AT1 #b0) (= f.rdPtrRst.in0_AT1 f.rdPtrRst.out_AT1)))
(assert (=> (not (= f.rdPtrEq_eq_7.in0_AT1 f.rdPtrEq_eq_7.in1_AT1)) (= f.rdPtrEq_eq_7.out_AT1 #b0)))
(assert (=> (= f.rdPtrEq_eq_7.in0_AT1 f.rdPtrEq_eq_7.in1_AT1) (= f.rdPtrEq_eq_7.out_AT1 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_6.in0_AT1 f.rdPtrEq_eq_6.in1_AT1)) (= f.rdPtrEq_eq_6.out_AT1 #b0)))
(assert (=> (= f.rdPtrEq_eq_6.in0_AT1 f.rdPtrEq_eq_6.in1_AT1) (= f.rdPtrEq_eq_6.out_AT1 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_5.in0_AT1 f.rdPtrEq_eq_5.in1_AT1)) (= f.rdPtrEq_eq_5.out_AT1 #b0)))
(assert (=> (= f.rdPtrEq_eq_5.in0_AT1 f.rdPtrEq_eq_5.in1_AT1) (= f.rdPtrEq_eq_5.out_AT1 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_4.in0_AT1 f.rdPtrEq_eq_4.in1_AT1)) (= f.rdPtrEq_eq_4.out_AT1 #b0)))
(assert (=> (= f.rdPtrEq_eq_4.in0_AT1 f.rdPtrEq_eq_4.in1_AT1) (= f.rdPtrEq_eq_4.out_AT1 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_3.in0_AT1 f.rdPtrEq_eq_3.in1_AT1)) (= f.rdPtrEq_eq_3.out_AT1 #b0)))
(assert (=> (= f.rdPtrEq_eq_3.in0_AT1 f.rdPtrEq_eq_3.in1_AT1) (= f.rdPtrEq_eq_3.out_AT1 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_2.in0_AT1 f.rdPtrEq_eq_2.in1_AT1)) (= f.rdPtrEq_eq_2.out_AT1 #b0)))
(assert (=> (= f.rdPtrEq_eq_2.in0_AT1 f.rdPtrEq_eq_2.in1_AT1) (= f.rdPtrEq_eq_2.out_AT1 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_1.in0_AT1 f.rdPtrEq_eq_1.in1_AT1)) (= f.rdPtrEq_eq_1.out_AT1 #b0)))
(assert (=> (= f.rdPtrEq_eq_1.in0_AT1 f.rdPtrEq_eq_1.in1_AT1) (= f.rdPtrEq_eq_1.out_AT1 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_0.in0_AT1 f.rdPtrEq_eq_0.in1_AT1)) (= f.rdPtrEq_eq_0.out_AT1 #b0)))
(assert (=> (= f.rdPtrEq_eq_0.in0_AT1 f.rdPtrEq_eq_0.in1_AT1) (= f.rdPtrEq_eq_0.out_AT1 #b1)))
(assert (=> (= f.rdPtrEn.sel_AT1 #b1) (= f.rdPtrEn.in1_AT1 f.rdPtrEn.out_AT1)))
(assert (=> (= f.rdPtrEn.sel_AT1 #b0) (= f.rdPtrEn.in0_AT1 f.rdPtrEn.out_AT1)))
(assert (= f.one.out_AT1 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT1) f.notfullEq_1.out_AT1))
(assert (=> (not (= f.fullEq_2.in0_AT1 f.fullEq_2.in1_AT1)) (= f.fullEq_2.out_AT1 #b0)))
(assert (=> (= f.fullEq_2.in0_AT1 f.fullEq_2.in1_AT1) (= f.fullEq_2.out_AT1 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT1 f.fullEq_1.in1_AT1)) (= f.fullEq_1.out_AT1 #b0)))
(assert (=> (= f.fullEq_1.in0_AT1 f.fullEq_1.in1_AT1) (= f.fullEq_1.out_AT1 #b1)))
(assert (= (bvand f.fullCalc.in0_AT1 f.fullCalc.in1_AT1) f.fullCalc.out_AT1))
(assert (= (bvand f.entryEn7.in0_AT1 f.entryEn7.in1_AT1) f.entryEn7.out_AT1))
(assert (= (bvand f.entryEn6.in0_AT1 f.entryEn6.in1_AT1) f.entryEn6.out_AT1))
(assert (= (bvand f.entryEn5.in0_AT1 f.entryEn5.in1_AT1) f.entryEn5.out_AT1))
(assert (= (bvand f.entryEn4.in0_AT1 f.entryEn4.in1_AT1) f.entryEn4.out_AT1))
(assert (= (bvand f.entryEn3.in0_AT1 f.entryEn3.in1_AT1) f.entryEn3.out_AT1))
(assert (= (bvand f.entryEn2.in0_AT1 f.entryEn2.in1_AT1) f.entryEn2.out_AT1))
(assert (= (bvand f.entryEn1.in0_AT1 f.entryEn1.in1_AT1) f.entryEn1.out_AT1))
(assert (= (bvand f.entryEn0.in0_AT1 f.entryEn0.in1_AT1) f.entryEn0.out_AT1))
(assert (=> (= f.entry7.enMux.sel_AT1 #b1) (= f.entry7.enMux.in1_AT1 f.entry7.enMux.out_AT1)))
(assert (=> (= f.entry7.enMux.sel_AT1 #b0) (= f.entry7.enMux.in0_AT1 f.entry7.enMux.out_AT1)))
(assert (=> (= f.entry6.enMux.sel_AT1 #b1) (= f.entry6.enMux.in1_AT1 f.entry6.enMux.out_AT1)))
(assert (=> (= f.entry6.enMux.sel_AT1 #b0) (= f.entry6.enMux.in0_AT1 f.entry6.enMux.out_AT1)))
(assert (=> (= f.entry5.enMux.sel_AT1 #b1) (= f.entry5.enMux.in1_AT1 f.entry5.enMux.out_AT1)))
(assert (=> (= f.entry5.enMux.sel_AT1 #b0) (= f.entry5.enMux.in0_AT1 f.entry5.enMux.out_AT1)))
(assert (=> (= f.entry4.enMux.sel_AT1 #b1) (= f.entry4.enMux.in1_AT1 f.entry4.enMux.out_AT1)))
(assert (=> (= f.entry4.enMux.sel_AT1 #b0) (= f.entry4.enMux.in0_AT1 f.entry4.enMux.out_AT1)))
(assert (=> (= f.entry3.enMux.sel_AT1 #b1) (= f.entry3.enMux.in1_AT1 f.entry3.enMux.out_AT1)))
(assert (=> (= f.entry3.enMux.sel_AT1 #b0) (= f.entry3.enMux.in0_AT1 f.entry3.enMux.out_AT1)))
(assert (=> (= f.entry2.enMux.sel_AT1 #b1) (= f.entry2.enMux.in1_AT1 f.entry2.enMux.out_AT1)))
(assert (=> (= f.entry2.enMux.sel_AT1 #b0) (= f.entry2.enMux.in0_AT1 f.entry2.enMux.out_AT1)))
(assert (=> (= f.entry1.enMux.sel_AT1 #b1) (= f.entry1.enMux.in1_AT1 f.entry1.enMux.out_AT1)))
(assert (=> (= f.entry1.enMux.sel_AT1 #b0) (= f.entry1.enMux.in0_AT1 f.entry1.enMux.out_AT1)))
(assert (=> (= f.entry0.enMux.sel_AT1 #b1) (= f.entry0.enMux.in1_AT1 f.entry0.enMux.out_AT1)))
(assert (=> (= f.entry0.enMux.sel_AT1 #b0) (= f.entry0.enMux.in0_AT1 f.entry0.enMux.out_AT1)))
(assert (=> (not (= f.emptyEq.in0_AT1 f.emptyEq.in1_AT1)) (= f.emptyEq.out_AT1 #b0)))
(assert (=> (= f.emptyEq.in0_AT1 f.emptyEq.in1_AT1) (= f.emptyEq.out_AT1 #b1)))
(assert (= (concat f.data_out_mux.repl_7.concat_4.in0_AT1 f.data_out_mux.repl_7.concat_4.in1_AT1) f.data_out_mux.repl_7.concat_4.out_AT1))
(assert (= (concat f.data_out_mux.repl_7.concat_2.in0_AT1 f.data_out_mux.repl_7.concat_2.in1_AT1) f.data_out_mux.repl_7.concat_2.out_AT1))
(assert (= (concat f.data_out_mux.repl_7.concat_1.in0_AT1 f.data_out_mux.repl_7.concat_1.in1_AT1) f.data_out_mux.repl_7.concat_1.out_AT1))
(assert (= (concat f.data_out_mux.repl_6.concat_4.in0_AT1 f.data_out_mux.repl_6.concat_4.in1_AT1) f.data_out_mux.repl_6.concat_4.out_AT1))
(assert (= (concat f.data_out_mux.repl_6.concat_2.in0_AT1 f.data_out_mux.repl_6.concat_2.in1_AT1) f.data_out_mux.repl_6.concat_2.out_AT1))
(assert (= (concat f.data_out_mux.repl_6.concat_1.in0_AT1 f.data_out_mux.repl_6.concat_1.in1_AT1) f.data_out_mux.repl_6.concat_1.out_AT1))
(assert (= (concat f.data_out_mux.repl_5.concat_4.in0_AT1 f.data_out_mux.repl_5.concat_4.in1_AT1) f.data_out_mux.repl_5.concat_4.out_AT1))
(assert (= (concat f.data_out_mux.repl_5.concat_2.in0_AT1 f.data_out_mux.repl_5.concat_2.in1_AT1) f.data_out_mux.repl_5.concat_2.out_AT1))
(assert (= (concat f.data_out_mux.repl_5.concat_1.in0_AT1 f.data_out_mux.repl_5.concat_1.in1_AT1) f.data_out_mux.repl_5.concat_1.out_AT1))
(assert (= (concat f.data_out_mux.repl_4.concat_4.in0_AT1 f.data_out_mux.repl_4.concat_4.in1_AT1) f.data_out_mux.repl_4.concat_4.out_AT1))
(assert (= (concat f.data_out_mux.repl_4.concat_2.in0_AT1 f.data_out_mux.repl_4.concat_2.in1_AT1) f.data_out_mux.repl_4.concat_2.out_AT1))
(assert (= (concat f.data_out_mux.repl_4.concat_1.in0_AT1 f.data_out_mux.repl_4.concat_1.in1_AT1) f.data_out_mux.repl_4.concat_1.out_AT1))
(assert (= (concat f.data_out_mux.repl_3.concat_4.in0_AT1 f.data_out_mux.repl_3.concat_4.in1_AT1) f.data_out_mux.repl_3.concat_4.out_AT1))
(assert (= (concat f.data_out_mux.repl_3.concat_2.in0_AT1 f.data_out_mux.repl_3.concat_2.in1_AT1) f.data_out_mux.repl_3.concat_2.out_AT1))
(assert (= (concat f.data_out_mux.repl_3.concat_1.in0_AT1 f.data_out_mux.repl_3.concat_1.in1_AT1) f.data_out_mux.repl_3.concat_1.out_AT1))
(assert (= (concat f.data_out_mux.repl_2.concat_4.in0_AT1 f.data_out_mux.repl_2.concat_4.in1_AT1) f.data_out_mux.repl_2.concat_4.out_AT1))
(assert (= (concat f.data_out_mux.repl_2.concat_2.in0_AT1 f.data_out_mux.repl_2.concat_2.in1_AT1) f.data_out_mux.repl_2.concat_2.out_AT1))
(assert (= (concat f.data_out_mux.repl_2.concat_1.in0_AT1 f.data_out_mux.repl_2.concat_1.in1_AT1) f.data_out_mux.repl_2.concat_1.out_AT1))
(assert (= (concat f.data_out_mux.repl_1.concat_4.in0_AT1 f.data_out_mux.repl_1.concat_4.in1_AT1) f.data_out_mux.repl_1.concat_4.out_AT1))
(assert (= (concat f.data_out_mux.repl_1.concat_2.in0_AT1 f.data_out_mux.repl_1.concat_2.in1_AT1) f.data_out_mux.repl_1.concat_2.out_AT1))
(assert (= (concat f.data_out_mux.repl_1.concat_1.in0_AT1 f.data_out_mux.repl_1.concat_1.in1_AT1) f.data_out_mux.repl_1.concat_1.out_AT1))
(assert (= (concat f.data_out_mux.repl_0.concat_4.in0_AT1 f.data_out_mux.repl_0.concat_4.in1_AT1) f.data_out_mux.repl_0.concat_4.out_AT1))
(assert (= (concat f.data_out_mux.repl_0.concat_2.in0_AT1 f.data_out_mux.repl_0.concat_2.in1_AT1) f.data_out_mux.repl_0.concat_2.out_AT1))
(assert (= (concat f.data_out_mux.repl_0.concat_1.in0_AT1 f.data_out_mux.repl_0.concat_1.in1_AT1) f.data_out_mux.repl_0.concat_1.out_AT1))
(assert (= (bvor f.data_out_mux.or_chain_7.in0_AT1 f.data_out_mux.or_chain_7.in1_AT1) f.data_out_mux.or_chain_7.out_AT1))
(assert (= (bvor f.data_out_mux.or_chain_6.in0_AT1 f.data_out_mux.or_chain_6.in1_AT1) f.data_out_mux.or_chain_6.out_AT1))
(assert (= (bvor f.data_out_mux.or_chain_5.in0_AT1 f.data_out_mux.or_chain_5.in1_AT1) f.data_out_mux.or_chain_5.out_AT1))
(assert (= (bvor f.data_out_mux.or_chain_4.in0_AT1 f.data_out_mux.or_chain_4.in1_AT1) f.data_out_mux.or_chain_4.out_AT1))
(assert (= (bvor f.data_out_mux.or_chain_3.in0_AT1 f.data_out_mux.or_chain_3.in1_AT1) f.data_out_mux.or_chain_3.out_AT1))
(assert (= (bvor f.data_out_mux.or_chain_2.in0_AT1 f.data_out_mux.or_chain_2.in1_AT1) f.data_out_mux.or_chain_2.out_AT1))
(assert (= (bvor f.data_out_mux.or_chain_1.in0_AT1 f.data_out_mux.or_chain_1.in1_AT1) f.data_out_mux.or_chain_1.out_AT1))
(assert (= (bvand f.data_out_mux.and_7.in0_AT1 f.data_out_mux.and_7.in1_AT1) f.data_out_mux.and_7.out_AT1))
(assert (= (bvand f.data_out_mux.and_6.in0_AT1 f.data_out_mux.and_6.in1_AT1) f.data_out_mux.and_6.out_AT1))
(assert (= (bvand f.data_out_mux.and_5.in0_AT1 f.data_out_mux.and_5.in1_AT1) f.data_out_mux.and_5.out_AT1))
(assert (= (bvand f.data_out_mux.and_4.in0_AT1 f.data_out_mux.and_4.in1_AT1) f.data_out_mux.and_4.out_AT1))
(assert (= (bvand f.data_out_mux.and_3.in0_AT1 f.data_out_mux.and_3.in1_AT1) f.data_out_mux.and_3.out_AT1))
(assert (= (bvand f.data_out_mux.and_2.in0_AT1 f.data_out_mux.and_2.in1_AT1) f.data_out_mux.and_2.out_AT1))
(assert (= (bvand f.data_out_mux.and_1.in0_AT1 f.data_out_mux.and_1.in1_AT1) f.data_out_mux.and_1.out_AT1))
(assert (= (bvand f.data_out_mux.and_0.in0_AT1 f.data_out_mux.and_0.in1_AT1) f.data_out_mux.and_0.out_AT1))
(assert (= f.const_7.out_AT1 #b111))
(assert (= f.const_6.out_AT1 #b110))
(assert (= f.const_5.out_AT1 #b101))
(assert (= f.const_4.out_AT1 #b100))
(assert (= f.const_3.out_AT1 #b011))
(assert (= f.const_2.out_AT1 #b010))
(assert (= f.const_1.out_AT1 #b001))
(assert (= f.const_0.out_AT1 #b000))
(assert (= (bvor en_or_sp.in0_AT1 en_or_sp.in1_AT1) en_or_sp.out_AT1))
(assert (= (bvand data_out_vld_and2.in0_AT1 data_out_vld_and2.in1_AT1) data_out_vld_and2.out_AT1))
(assert (= (bvand data_out_vld_and1.in0_AT1 data_out_vld_and1.in1_AT1) data_out_vld_and1.out_AT1))
(assert (= (bvult cnt_gt_0.in1_AT1 cnt_gt_0.in0_AT1) (= cnt_gt_0.out_AT1 #b1)))
(assert (=> (= _-_state_id_-__AT0 #b10) (= _-_state_id_-__AT1 #b10)))
(assert (=> (= _-_state_id_-__AT0 #b01) (= _-_state_id_-__AT1 #b10)))
(assert (=> (= _-_state_id_-__AT0 #b00) (= _-_state_id_-__AT1 #b01)))
(assert (= mpt.cnt.in_AT0 mpt.cnt.out_AT1))
(assert (= magic_packet.in_AT0 magic_packet.out_AT1))
(assert (= magic_packet.init_AT0 magic_packet.init_AT1))
(assert (= f.wrPtr.in_AT0 f.wrPtr.out_AT1))
(assert (= f.rdPtr.in_AT0 f.rdPtr.out_AT1))
(assert (= f.entry7.reg0.in_AT0 f.entry7.reg0.out_AT1))
(assert (= f.entry6.reg0.in_AT0 f.entry6.reg0.out_AT1))
(assert (= f.entry5.reg0.in_AT0 f.entry5.reg0.out_AT1))
(assert (= f.entry4.reg0.in_AT0 f.entry4.reg0.out_AT1))
(assert (= f.entry3.reg0.in_AT0 f.entry3.reg0.out_AT1))
(assert (= f.entry2.reg0.in_AT0 f.entry2.reg0.out_AT1))
(assert (= f.entry1.reg0.in_AT0 f.entry1.reg0.out_AT1))
(assert (= f.entry0.reg0.in_AT0 f.entry0.reg0.out_AT1))
(assert (= en.init_AT0 en.init_AT1))
(assert (= en.in_AT0 en.out_AT1))
(push 1)

(assert (not (= self.prop_signal_AT1 #b1)))
(check-sat)

(pop 1)
(declare-fun f.rdPtrEq_eq_4.in1_AT2 () (_ BitVec 3))
(declare-fun f.wrPtrEq3.in1_AT2 () (_ BitVec 3))
(declare-fun f.const_3.out_AT2 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_3.in1_AT2 () (_ BitVec 3))
(declare-fun f.wrPtrEq2.in1_AT2 () (_ BitVec 3))
(declare-fun f.const_2.out_AT2 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_2.in1_AT2 () (_ BitVec 3))
(declare-fun f.wrPtrEq1.in1_AT2 () (_ BitVec 3))
(declare-fun f.const_1.out_AT2 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_1.in1_AT2 () (_ BitVec 3))
(declare-fun f.wrPtrEq0.in1_AT2 () (_ BitVec 3))
(declare-fun f.const_0.out_AT2 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_0.in1_AT2 () (_ BitVec 3))
(declare-fun en_or_sp.in1_AT2 () (_ BitVec 1))
(declare-fun not_en.in_AT2 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT2 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT2 () (_ BitVec 1))
(declare-fun en.in_AT2 () (_ BitVec 1))
(declare-fun en.clk_AT2 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT2 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT2 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT2 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT2 () (_ BitVec 4))
(declare-fun _-_state_id_-__AT2 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT2 () (_ BitVec 4))
(declare-fun magic_packet.out_AT2 () (_ BitVec 8))
(declare-fun magic_packet.init_AT2 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT2 () (_ BitVec 4))
(declare-fun f.entry7.reg0.out_AT2 () (_ BitVec 8))
(declare-fun f.entry6.reg0.out_AT2 () (_ BitVec 8))
(declare-fun f.entry5.reg0.out_AT2 () (_ BitVec 8))
(declare-fun f.entry4.reg0.out_AT2 () (_ BitVec 8))
(declare-fun f.entry3.reg0.out_AT2 () (_ BitVec 8))
(declare-fun f.entry2.reg0.out_AT2 () (_ BitVec 8))
(declare-fun f.entry1.reg0.out_AT2 () (_ BitVec 8))
(declare-fun f.entry0.reg0.out_AT2 () (_ BitVec 8))
(declare-fun en.init_AT2 () (_ BitVec 1))
(declare-fun en.out_AT2 () (_ BitVec 1))
(declare-fun self.pop_AT2 () (_ BitVec 1))
(declare-fun self.empty_AT2 () (_ BitVec 1))
(declare-fun self.push_AT2 () (_ BitVec 1))
(declare-fun self.full_AT2 () (_ BitVec 1))
(declare-fun self.rst_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT2 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT2 () (_ BitVec 1))
(declare-fun self.start_AT2 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT2 () (_ BitVec 1))
(declare-fun f.entryEn7.in0_AT2 () (_ BitVec 1))
(declare-fun f.entryEn6.in0_AT2 () (_ BitVec 1))
(declare-fun f.entryEn5.in0_AT2 () (_ BitVec 1))
(declare-fun f.entryEn4.in0_AT2 () (_ BitVec 1))
(declare-fun f.entryEn3.in0_AT2 () (_ BitVec 1))
(declare-fun f.entryEn2.in0_AT2 () (_ BitVec 1))
(declare-fun f.entryEn1.in0_AT2 () (_ BitVec 1))
(declare-fun f.entryEn0.in0_AT2 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT2 () (_ BitVec 1))
(declare-fun self.prop_signal_AT2 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT2 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT2 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT2 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT2 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT2 () (_ BitVec 1))
(declare-fun mp_en.out_AT2 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT2 () (_ BitVec 1))
(declare-fun self.data_in_AT2 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT2 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT2 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT2 () (_ BitVec 1))
(declare-fun zero.out_AT2 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT2 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.one.out_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT2 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT2 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT2 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT2 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT2 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT2 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT2 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT2 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT2 () (_ BitVec 4))
(declare-fun self.clk_AT2 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT2 () (_ BitVec 1))
(declare-fun not_en.out_AT2 () (_ BitVec 1))
(declare-fun mp_en.in1_AT2 () (_ BitVec 1))
(declare-fun start_and_push.out_AT2 () (_ BitVec 1))
(declare-fun mp_en.in0_AT2 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT2 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT2 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT2 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT2 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT2 () (_ BitVec 8))
(declare-fun magic_packet.in_AT2 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT2 () (_ BitVec 1))
(declare-fun f.zero.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT2 () (_ BitVec 4))
(declare-fun f.entryEn7.in1_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq7.out_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrSlice.out_AT2 () (_ BitVec 3))
(declare-fun f.wrPtrEq7.in0_AT2 () (_ BitVec 3))
(declare-fun f.entryEn6.in1_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq6.out_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq6.in0_AT2 () (_ BitVec 3))
(declare-fun f.entryEn5.in1_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq5.out_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq5.in0_AT2 () (_ BitVec 3))
(declare-fun f.entryEn4.in1_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq4.out_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq4.in0_AT2 () (_ BitVec 3))
(declare-fun f.entryEn3.in1_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq3.out_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq3.in0_AT2 () (_ BitVec 3))
(declare-fun f.entryEn2.in1_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq2.out_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq2.in0_AT2 () (_ BitVec 3))
(declare-fun f.entryEn1.in1_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq1.out_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq1.in0_AT2 () (_ BitVec 3))
(declare-fun f.entryEn0.in1_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq0.out_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEq0.in0_AT2 () (_ BitVec 3))
(declare-fun f.wrPtrEn.sel_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT2 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_1.in1_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_7.out_AT2 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_7.concat_1.in0_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrSlice.out_AT2 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_7.in0_AT2 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_6.concat_1.in1_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_6.out_AT2 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_6.concat_1.in0_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_6.in0_AT2 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_5.concat_1.in1_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_5.out_AT2 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_5.concat_1.in0_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_5.in0_AT2 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_4.concat_1.in1_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_4.out_AT2 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_4.concat_1.in0_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_4.in0_AT2 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_3.concat_1.in1_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_3.out_AT2 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_3.concat_1.in0_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_3.in0_AT2 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_2.concat_1.in1_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_2.out_AT2 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_2.concat_1.in0_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_2.in0_AT2 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_1.concat_1.in1_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_1.out_AT2 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_1.concat_1.in0_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_1.in0_AT2 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_0.concat_1.in1_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_0.out_AT2 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_0.concat_1.in0_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_0.in0_AT2 () (_ BitVec 3))
(declare-fun f.rdPtrEn.sel_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT2 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT2 () (_ BitVec 4))
(declare-fun f.one.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT2 () (_ BitVec 4))
(declare-fun f.fullCalc.in1_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT2 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT2 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT2 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT2 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT2 () (_ BitVec 1))
(declare-fun f.entry7.reg0.clk_AT2 () (_ BitVec 1))
(declare-fun f.entryEn7.out_AT2 () (_ BitVec 1))
(declare-fun f.entry7.enMux.sel_AT2 () (_ BitVec 1))
(declare-fun f.entry7.reg0.in_AT2 () (_ BitVec 8))
(declare-fun f.entry7.enMux.out_AT2 () (_ BitVec 8))
(declare-fun f.entry7.enMux.in1_AT2 () (_ BitVec 8))
(declare-fun f.entry7.enMux.in0_AT2 () (_ BitVec 8))
(declare-fun f.entry6.reg0.clk_AT2 () (_ BitVec 1))
(declare-fun f.entryEn6.out_AT2 () (_ BitVec 1))
(declare-fun f.entry6.enMux.sel_AT2 () (_ BitVec 1))
(declare-fun f.entry6.reg0.in_AT2 () (_ BitVec 8))
(declare-fun f.entry6.enMux.out_AT2 () (_ BitVec 8))
(declare-fun f.entry6.enMux.in1_AT2 () (_ BitVec 8))
(declare-fun f.entry6.enMux.in0_AT2 () (_ BitVec 8))
(declare-fun f.entry5.reg0.clk_AT2 () (_ BitVec 1))
(declare-fun f.entryEn5.out_AT2 () (_ BitVec 1))
(declare-fun f.entry5.enMux.sel_AT2 () (_ BitVec 1))
(declare-fun f.entry5.reg0.in_AT2 () (_ BitVec 8))
(declare-fun f.entry5.enMux.out_AT2 () (_ BitVec 8))
(declare-fun f.entry5.enMux.in1_AT2 () (_ BitVec 8))
(declare-fun f.entry5.enMux.in0_AT2 () (_ BitVec 8))
(declare-fun f.entry4.reg0.clk_AT2 () (_ BitVec 1))
(declare-fun f.entryEn4.out_AT2 () (_ BitVec 1))
(declare-fun f.entry4.enMux.sel_AT2 () (_ BitVec 1))
(declare-fun f.entry4.reg0.in_AT2 () (_ BitVec 8))
(declare-fun f.entry4.enMux.out_AT2 () (_ BitVec 8))
(declare-fun f.entry4.enMux.in1_AT2 () (_ BitVec 8))
(declare-fun f.entry4.enMux.in0_AT2 () (_ BitVec 8))
(declare-fun f.entry3.reg0.clk_AT2 () (_ BitVec 1))
(declare-fun f.entryEn3.out_AT2 () (_ BitVec 1))
(declare-fun f.entry3.enMux.sel_AT2 () (_ BitVec 1))
(declare-fun f.entry3.reg0.in_AT2 () (_ BitVec 8))
(declare-fun f.entry3.enMux.out_AT2 () (_ BitVec 8))
(declare-fun f.entry3.enMux.in1_AT2 () (_ BitVec 8))
(declare-fun f.entry3.enMux.in0_AT2 () (_ BitVec 8))
(declare-fun f.entry2.reg0.clk_AT2 () (_ BitVec 1))
(declare-fun f.entryEn2.out_AT2 () (_ BitVec 1))
(declare-fun f.entry2.enMux.sel_AT2 () (_ BitVec 1))
(declare-fun f.entry2.reg0.in_AT2 () (_ BitVec 8))
(declare-fun f.entry2.enMux.out_AT2 () (_ BitVec 8))
(declare-fun f.entry2.enMux.in1_AT2 () (_ BitVec 8))
(declare-fun f.entry2.enMux.in0_AT2 () (_ BitVec 8))
(declare-fun f.entry1.reg0.clk_AT2 () (_ BitVec 1))
(declare-fun f.entryEn1.out_AT2 () (_ BitVec 1))
(declare-fun f.entry1.enMux.sel_AT2 () (_ BitVec 1))
(declare-fun f.entry1.reg0.in_AT2 () (_ BitVec 8))
(declare-fun f.entry1.enMux.out_AT2 () (_ BitVec 8))
(declare-fun f.entry1.enMux.in1_AT2 () (_ BitVec 8))
(declare-fun f.entry1.enMux.in0_AT2 () (_ BitVec 8))
(declare-fun f.entry0.reg0.clk_AT2 () (_ BitVec 1))
(declare-fun f.entryEn0.out_AT2 () (_ BitVec 1))
(declare-fun f.entry0.enMux.sel_AT2 () (_ BitVec 1))
(declare-fun f.entry0.reg0.in_AT2 () (_ BitVec 8))
(declare-fun f.entry0.enMux.out_AT2 () (_ BitVec 8))
(declare-fun f.entry0.enMux.in1_AT2 () (_ BitVec 8))
(declare-fun f.entry0.enMux.in0_AT2 () (_ BitVec 8))
(declare-fun f.emptyEq.out_AT2 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT2 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_4.in1_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_2.out_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_4.in0_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_2.in1_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_7.concat_1.out_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_7.concat_2.in0_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_4.in1_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_2.out_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_4.in0_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_2.in1_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_1.out_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_2.in0_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_4.in1_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_2.out_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_4.in0_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_2.in1_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_1.out_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_2.in0_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_4.in1_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_2.out_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_4.in0_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_2.in1_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_1.out_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_2.in0_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_4.in1_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_2.out_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_4.in0_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_2.in1_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_1.out_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_2.in0_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_4.in1_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_2.out_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_4.in0_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_2.in1_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_1.out_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_2.in0_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_4.in1_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_2.out_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_4.in0_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_2.in1_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_1.out_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_2.in0_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_4.in1_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_2.out_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_4.in0_AT2 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_2.in1_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_1.out_AT2 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_2.in0_AT2 () (_ BitVec 2))
(declare-fun self.data_out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.out_AT2 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_7.concat_4.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_6.concat_4.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_5.concat_4.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_4.concat_4.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_3.concat_4.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_2.concat_4.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_1.concat_4.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.in0_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.in1_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_0.concat_4.out_AT2 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.in0_AT2 () (_ BitVec 8))
(declare-fun f.wrPtrEq7.in1_AT2 () (_ BitVec 3))
(declare-fun f.const_7.out_AT2 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_7.in1_AT2 () (_ BitVec 3))
(declare-fun f.wrPtrEq6.in1_AT2 () (_ BitVec 3))
(declare-fun f.const_6.out_AT2 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_6.in1_AT2 () (_ BitVec 3))
(declare-fun f.wrPtrEq5.in1_AT2 () (_ BitVec 3))
(declare-fun f.const_5.out_AT2 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_5.in1_AT2 () (_ BitVec 3))
(declare-fun f.wrPtrEq4.in1_AT2 () (_ BitVec 3))
(declare-fun f.const_4.out_AT2 () (_ BitVec 3))

(assert (=> (= self.empty_AT2 #b1) (= self.pop_AT2 #b0)))
(assert (=> (= self.full_AT2 #b1) (= self.push_AT2 #b0)))
(assert (=> (= _-_state_id_-__AT2 #b10) (and true (= self.rst_AT2 #b0))))
(assert (=> (= _-_state_id_-__AT2 #b01) (and (and (and true (= self.rst_AT2 #b1)) (= self.push_AT2 #b0)) (= self.pop_AT2 #b0))))
(assert (=> (= _-_state_id_-__AT2 #b00) (and (and (and true (= self.rst_AT2 #b1)) (= self.push_AT2 #b0)) (= self.pop_AT2 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT2 ((_ extract 3 3) f.wrPtr.out_AT2)))
(assert (= f.fullEq_1.in0_AT2 ((_ extract 3 3) f.rdPtr.out_AT2)))
(assert (= en.out_AT2 mpt.not_captured.in_AT2))
(assert (= self.start_AT2 start_and_push.in0_AT2))
(assert (= self.push_AT2 start_and_push.in1_AT2))
(assert (= self.push_AT2 mpt.ssa_cnt_and1.in1_AT2))
(assert (= self.push_AT2 f.entryEn7.in0_AT2))
(assert (= self.push_AT2 f.entryEn6.in0_AT2))
(assert (= self.push_AT2 f.entryEn5.in0_AT2))
(assert (= self.push_AT2 f.entryEn4.in0_AT2))
(assert (= self.push_AT2 f.entryEn3.in0_AT2))
(assert (= self.push_AT2 f.entryEn2.in0_AT2))
(assert (= self.push_AT2 f.entryEn1.in0_AT2))
(assert (= self.push_AT2 f.entryEn0.in0_AT2))
(assert (= self.prop_signal_AT2 prop_signal_or.out_AT2))
(assert (= self.pop_AT2 mpt.next_cnt_and1.in1_AT2))
(assert (= self.full_AT2 f.fullCalc.out_AT2))
(assert (= self.data_out_vld_AT2 data_out_vld_and2.out_AT2))
(assert (= not_data_out_vld.out_AT2 prop_signal_or.in0_AT2))
(assert (= next_magic_packet.sel_AT2 mp_en.out_AT2))
(assert (= next_magic_packet.in1_AT2 self.data_in_AT2))
(assert (= next_cnt_eq0.out_AT2 data_out_vld_and2.in1_AT2))
(assert (= next_cnt_eq0.in1_AT2 zero.out_AT2))
(assert (= mpt.ssa_cnt_gt_0.out_AT2 mpt.next_cnt_and1.in0_AT2))
(assert (= mpt.ssa_cnt_gt_0.in1_AT2 mpt.zero.out_AT2))
(assert (= mpt.ssa_cnt_and1.out_AT2 mpt.ssa_cnt_and2.in0_AT2))
(assert (= mpt.ssa_cnt.sel_AT2 mpt.ssa_cnt_and2.out_AT2))
(assert (= mpt.ssa_cnt.out_AT2 mpt.ssa_cnt_m1.in0_AT2))
(assert (= mpt.ssa_cnt.out_AT2 mpt.ssa_cnt_gt_0.in0_AT2))
(assert (= mpt.one.out_AT2 mpt.ssa_cnt_m1.in1_AT2))
(assert (= mpt.not_captured.out_AT2 mpt.ssa_cnt_and2.in1_AT2))
(assert (= mpt.next_cnt.sel_AT2 self.rst_AT2))
(assert (= mpt.next_cnt.out_AT2 next_cnt_eq0.in0_AT2))
(assert (= mpt.next_cnt.in1_AT2 mpt.zero.out_AT2))
(assert (= mpt.decr_mux.sel_AT2 mpt.next_cnt_and1.out_AT2))
(assert (= mpt.decr_mux.out_AT2 mpt.next_cnt.in0_AT2))
(assert (= mpt.decr_mux.in1_AT2 mpt.ssa_cnt_m1.out_AT2))
(assert (= mpt.decr_mux.in0_AT2 mpt.ssa_cnt.out_AT2))
(assert (= mpt.cnt_p1.out_AT2 mpt.ssa_cnt.in1_AT2))
(assert (= mpt.cnt_p1.in1_AT2 mpt.one.out_AT2))
(assert (= mpt.cnt_lt_depth.out_AT2 mpt.ssa_cnt_and1.in0_AT2))
(assert (= mpt.cnt_lt_depth.in1_AT2 mpt.depth.out_AT2))
(assert (= mpt.cnt.out_AT2 mpt.ssa_cnt.in0_AT2))
(assert (= mpt.cnt.out_AT2 mpt.cnt_p1.in0_AT2))
(assert (= mpt.cnt.out_AT2 mpt.cnt_lt_depth.in0_AT2))
(assert (= mpt.cnt.in_AT2 mpt.next_cnt.out_AT2))
(assert (= mpt.cnt.clk_AT2 self.clk_AT2))
(assert (= mp_en.in1_AT2 not_en.out_AT2))
(assert (= mp_en.in0_AT2 start_and_push.out_AT2))
(assert (= magic_packet_eq.out_AT2 prop_signal_or.in1_AT2))
(assert (= magic_packet.out_AT2 next_magic_packet.in0_AT2))
(assert (= magic_packet.out_AT2 magic_packet_eq.in0_AT2))
(assert (= magic_packet.in_AT2 next_magic_packet.out_AT2))
(assert (= magic_packet.clk_AT2 self.clk_AT2))
(assert (= f.wrPtrRst.sel_AT2 self.rst_AT2))
(assert (= f.wrPtrRst.in1_AT2 f.zero.out_AT2))
(assert (= f.wrPtrEq7.out_AT2 f.entryEn7.in1_AT2))
(assert (= f.wrPtrEq7.in0_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.wrPtrEq6.out_AT2 f.entryEn6.in1_AT2))
(assert (= f.wrPtrEq6.in0_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.wrPtrEq5.out_AT2 f.entryEn5.in1_AT2))
(assert (= f.wrPtrEq5.in0_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.wrPtrEq4.out_AT2 f.entryEn4.in1_AT2))
(assert (= f.wrPtrEq4.in0_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.wrPtrEq3.out_AT2 f.entryEn3.in1_AT2))
(assert (= f.wrPtrEq3.in0_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.wrPtrEq2.out_AT2 f.entryEn2.in1_AT2))
(assert (= f.wrPtrEq2.in0_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.wrPtrEq1.out_AT2 f.entryEn1.in1_AT2))
(assert (= f.wrPtrEq1.in0_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.wrPtrEq0.out_AT2 f.entryEn0.in1_AT2))
(assert (= f.wrPtrEq0.in0_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.wrPtrEn.sel_AT2 self.push_AT2))
(assert (= f.wrPtrEn.out_AT2 f.wrPtrRst.in0_AT2))
(assert (= f.wrPtrEn.in1_AT2 f.wrPtrp1.out_AT2))
(assert (= f.wrPtr.out_AT2 f.wrPtrp1.in1_AT2))
(assert (= f.wrPtr.out_AT2 f.wrPtrSlice.in_AT2))
(assert (= f.wrPtr.out_AT2 f.wrPtrEn.in0_AT2))
(assert (= f.wrPtr.in_AT2 f.wrPtrRst.out_AT2))
(assert (= f.wrPtr.clk_AT2 self.clk_AT2))
(assert (= f.rdPtrRst.sel_AT2 self.rst_AT2))
(assert (= f.rdPtrRst.in1_AT2 f.zero.out_AT2))
(assert (= f.rdPtrEq_eq_7.out_AT2 f.data_out_mux.repl_7.concat_1.in1_AT2))
(assert (= f.rdPtrEq_eq_7.out_AT2 f.data_out_mux.repl_7.concat_1.in0_AT2))
(assert (= f.rdPtrEq_eq_7.in0_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.rdPtrEq_eq_6.out_AT2 f.data_out_mux.repl_6.concat_1.in1_AT2))
(assert (= f.rdPtrEq_eq_6.out_AT2 f.data_out_mux.repl_6.concat_1.in0_AT2))
(assert (= f.rdPtrEq_eq_6.in0_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.rdPtrEq_eq_5.out_AT2 f.data_out_mux.repl_5.concat_1.in1_AT2))
(assert (= f.rdPtrEq_eq_5.out_AT2 f.data_out_mux.repl_5.concat_1.in0_AT2))
(assert (= f.rdPtrEq_eq_5.in0_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.rdPtrEq_eq_4.out_AT2 f.data_out_mux.repl_4.concat_1.in1_AT2))
(assert (= f.rdPtrEq_eq_4.out_AT2 f.data_out_mux.repl_4.concat_1.in0_AT2))
(assert (= f.rdPtrEq_eq_4.in0_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.rdPtrEq_eq_3.out_AT2 f.data_out_mux.repl_3.concat_1.in1_AT2))
(assert (= f.rdPtrEq_eq_3.out_AT2 f.data_out_mux.repl_3.concat_1.in0_AT2))
(assert (= f.rdPtrEq_eq_3.in0_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.rdPtrEq_eq_2.out_AT2 f.data_out_mux.repl_2.concat_1.in1_AT2))
(assert (= f.rdPtrEq_eq_2.out_AT2 f.data_out_mux.repl_2.concat_1.in0_AT2))
(assert (= f.rdPtrEq_eq_2.in0_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.rdPtrEq_eq_1.out_AT2 f.data_out_mux.repl_1.concat_1.in1_AT2))
(assert (= f.rdPtrEq_eq_1.out_AT2 f.data_out_mux.repl_1.concat_1.in0_AT2))
(assert (= f.rdPtrEq_eq_1.in0_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.rdPtrEq_eq_0.out_AT2 f.data_out_mux.repl_0.concat_1.in1_AT2))
(assert (= f.rdPtrEq_eq_0.out_AT2 f.data_out_mux.repl_0.concat_1.in0_AT2))
(assert (= f.rdPtrEq_eq_0.in0_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.rdPtrEn.sel_AT2 self.pop_AT2))
(assert (= f.rdPtrEn.out_AT2 f.rdPtrRst.in0_AT2))
(assert (= f.rdPtrEn.in1_AT2 f.rdPtrp1.out_AT2))
(assert (= f.rdPtr.out_AT2 f.rdPtrp1.in1_AT2))
(assert (= f.rdPtr.out_AT2 f.rdPtrSlice.in_AT2))
(assert (= f.rdPtr.out_AT2 f.rdPtrEn.in0_AT2))
(assert (= f.rdPtr.in_AT2 f.rdPtrRst.out_AT2))
(assert (= f.rdPtr.clk_AT2 self.clk_AT2))
(assert (= f.one.out_AT2 f.wrPtrp1.in0_AT2))
(assert (= f.one.out_AT2 f.rdPtrp1.in0_AT2))
(assert (= f.fullEq_2.out_AT2 f.fullCalc.in1_AT2))
(assert (= f.fullEq_2.in1_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.fullEq_2.in0_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.fullEq_1.out_AT2 f.notfullEq_1.in_AT2))
(assert (= f.fullCalc.in0_AT2 f.notfullEq_1.out_AT2))
(assert (= f.entry7.reg0.clk_AT2 self.clk_AT2))
(assert (= f.entry7.enMux.sel_AT2 f.entryEn7.out_AT2))
(assert (= f.entry7.enMux.out_AT2 f.entry7.reg0.in_AT2))
(assert (= f.entry7.enMux.in1_AT2 self.data_in_AT2))
(assert (= f.entry7.enMux.in0_AT2 f.entry7.reg0.out_AT2))
(assert (= f.entry6.reg0.clk_AT2 self.clk_AT2))
(assert (= f.entry6.enMux.sel_AT2 f.entryEn6.out_AT2))
(assert (= f.entry6.enMux.out_AT2 f.entry6.reg0.in_AT2))
(assert (= f.entry6.enMux.in1_AT2 self.data_in_AT2))
(assert (= f.entry6.enMux.in0_AT2 f.entry6.reg0.out_AT2))
(assert (= f.entry5.reg0.clk_AT2 self.clk_AT2))
(assert (= f.entry5.enMux.sel_AT2 f.entryEn5.out_AT2))
(assert (= f.entry5.enMux.out_AT2 f.entry5.reg0.in_AT2))
(assert (= f.entry5.enMux.in1_AT2 self.data_in_AT2))
(assert (= f.entry5.enMux.in0_AT2 f.entry5.reg0.out_AT2))
(assert (= f.entry4.reg0.clk_AT2 self.clk_AT2))
(assert (= f.entry4.enMux.sel_AT2 f.entryEn4.out_AT2))
(assert (= f.entry4.enMux.out_AT2 f.entry4.reg0.in_AT2))
(assert (= f.entry4.enMux.in1_AT2 self.data_in_AT2))
(assert (= f.entry4.enMux.in0_AT2 f.entry4.reg0.out_AT2))
(assert (= f.entry3.reg0.clk_AT2 self.clk_AT2))
(assert (= f.entry3.enMux.sel_AT2 f.entryEn3.out_AT2))
(assert (= f.entry3.enMux.out_AT2 f.entry3.reg0.in_AT2))
(assert (= f.entry3.enMux.in1_AT2 self.data_in_AT2))
(assert (= f.entry3.enMux.in0_AT2 f.entry3.reg0.out_AT2))
(assert (= f.entry2.reg0.clk_AT2 self.clk_AT2))
(assert (= f.entry2.enMux.sel_AT2 f.entryEn2.out_AT2))
(assert (= f.entry2.enMux.out_AT2 f.entry2.reg0.in_AT2))
(assert (= f.entry2.enMux.in1_AT2 self.data_in_AT2))
(assert (= f.entry2.enMux.in0_AT2 f.entry2.reg0.out_AT2))
(assert (= f.entry1.reg0.clk_AT2 self.clk_AT2))
(assert (= f.entry1.enMux.sel_AT2 f.entryEn1.out_AT2))
(assert (= f.entry1.enMux.out_AT2 f.entry1.reg0.in_AT2))
(assert (= f.entry1.enMux.in1_AT2 self.data_in_AT2))
(assert (= f.entry1.enMux.in0_AT2 f.entry1.reg0.out_AT2))
(assert (= f.entry0.reg0.clk_AT2 self.clk_AT2))
(assert (= f.entry0.enMux.sel_AT2 f.entryEn0.out_AT2))
(assert (= f.entry0.enMux.out_AT2 f.entry0.reg0.in_AT2))
(assert (= f.entry0.enMux.in1_AT2 self.data_in_AT2))
(assert (= f.entry0.enMux.in0_AT2 f.entry0.reg0.out_AT2))
(assert (= f.emptyEq.out_AT2 self.empty_AT2))
(assert (= f.emptyEq.in1_AT2 f.wrPtr.out_AT2))
(assert (= f.emptyEq.in0_AT2 f.rdPtr.out_AT2))
(assert (= f.data_out_mux.repl_7.concat_2.out_AT2 f.data_out_mux.repl_7.concat_4.in1_AT2))
(assert (= f.data_out_mux.repl_7.concat_2.out_AT2 f.data_out_mux.repl_7.concat_4.in0_AT2))
(assert (= f.data_out_mux.repl_7.concat_1.out_AT2 f.data_out_mux.repl_7.concat_2.in1_AT2))
(assert (= f.data_out_mux.repl_7.concat_1.out_AT2 f.data_out_mux.repl_7.concat_2.in0_AT2))
(assert (= f.data_out_mux.repl_6.concat_2.out_AT2 f.data_out_mux.repl_6.concat_4.in1_AT2))
(assert (= f.data_out_mux.repl_6.concat_2.out_AT2 f.data_out_mux.repl_6.concat_4.in0_AT2))
(assert (= f.data_out_mux.repl_6.concat_1.out_AT2 f.data_out_mux.repl_6.concat_2.in1_AT2))
(assert (= f.data_out_mux.repl_6.concat_1.out_AT2 f.data_out_mux.repl_6.concat_2.in0_AT2))
(assert (= f.data_out_mux.repl_5.concat_2.out_AT2 f.data_out_mux.repl_5.concat_4.in1_AT2))
(assert (= f.data_out_mux.repl_5.concat_2.out_AT2 f.data_out_mux.repl_5.concat_4.in0_AT2))
(assert (= f.data_out_mux.repl_5.concat_1.out_AT2 f.data_out_mux.repl_5.concat_2.in1_AT2))
(assert (= f.data_out_mux.repl_5.concat_1.out_AT2 f.data_out_mux.repl_5.concat_2.in0_AT2))
(assert (= f.data_out_mux.repl_4.concat_2.out_AT2 f.data_out_mux.repl_4.concat_4.in1_AT2))
(assert (= f.data_out_mux.repl_4.concat_2.out_AT2 f.data_out_mux.repl_4.concat_4.in0_AT2))
(assert (= f.data_out_mux.repl_4.concat_1.out_AT2 f.data_out_mux.repl_4.concat_2.in1_AT2))
(assert (= f.data_out_mux.repl_4.concat_1.out_AT2 f.data_out_mux.repl_4.concat_2.in0_AT2))
(assert (= f.data_out_mux.repl_3.concat_2.out_AT2 f.data_out_mux.repl_3.concat_4.in1_AT2))
(assert (= f.data_out_mux.repl_3.concat_2.out_AT2 f.data_out_mux.repl_3.concat_4.in0_AT2))
(assert (= f.data_out_mux.repl_3.concat_1.out_AT2 f.data_out_mux.repl_3.concat_2.in1_AT2))
(assert (= f.data_out_mux.repl_3.concat_1.out_AT2 f.data_out_mux.repl_3.concat_2.in0_AT2))
(assert (= f.data_out_mux.repl_2.concat_2.out_AT2 f.data_out_mux.repl_2.concat_4.in1_AT2))
(assert (= f.data_out_mux.repl_2.concat_2.out_AT2 f.data_out_mux.repl_2.concat_4.in0_AT2))
(assert (= f.data_out_mux.repl_2.concat_1.out_AT2 f.data_out_mux.repl_2.concat_2.in1_AT2))
(assert (= f.data_out_mux.repl_2.concat_1.out_AT2 f.data_out_mux.repl_2.concat_2.in0_AT2))
(assert (= f.data_out_mux.repl_1.concat_2.out_AT2 f.data_out_mux.repl_1.concat_4.in1_AT2))
(assert (= f.data_out_mux.repl_1.concat_2.out_AT2 f.data_out_mux.repl_1.concat_4.in0_AT2))
(assert (= f.data_out_mux.repl_1.concat_1.out_AT2 f.data_out_mux.repl_1.concat_2.in1_AT2))
(assert (= f.data_out_mux.repl_1.concat_1.out_AT2 f.data_out_mux.repl_1.concat_2.in0_AT2))
(assert (= f.data_out_mux.repl_0.concat_2.out_AT2 f.data_out_mux.repl_0.concat_4.in1_AT2))
(assert (= f.data_out_mux.repl_0.concat_2.out_AT2 f.data_out_mux.repl_0.concat_4.in0_AT2))
(assert (= f.data_out_mux.repl_0.concat_1.out_AT2 f.data_out_mux.repl_0.concat_2.in1_AT2))
(assert (= f.data_out_mux.repl_0.concat_1.out_AT2 f.data_out_mux.repl_0.concat_2.in0_AT2))
(assert (= f.data_out_mux.or_chain_7.out_AT2 self.data_out_AT2))
(assert (= f.data_out_mux.or_chain_7.out_AT2 magic_packet_eq.in1_AT2))
(assert (= f.data_out_mux.or_chain_6.out_AT2 f.data_out_mux.or_chain_7.in0_AT2))
(assert (= f.data_out_mux.or_chain_5.out_AT2 f.data_out_mux.or_chain_6.in0_AT2))
(assert (= f.data_out_mux.or_chain_4.out_AT2 f.data_out_mux.or_chain_5.in0_AT2))
(assert (= f.data_out_mux.or_chain_3.out_AT2 f.data_out_mux.or_chain_4.in0_AT2))
(assert (= f.data_out_mux.or_chain_2.out_AT2 f.data_out_mux.or_chain_3.in0_AT2))
(assert (= f.data_out_mux.or_chain_1.out_AT2 f.data_out_mux.or_chain_2.in0_AT2))
(assert (= f.data_out_mux.and_7.out_AT2 f.data_out_mux.or_chain_7.in1_AT2))
(assert (= f.data_out_mux.and_7.in1_AT2 f.entry7.reg0.out_AT2))
(assert (= f.data_out_mux.and_7.in0_AT2 f.data_out_mux.repl_7.concat_4.out_AT2))
(assert (= f.data_out_mux.and_6.out_AT2 f.data_out_mux.or_chain_6.in1_AT2))
(assert (= f.data_out_mux.and_6.in1_AT2 f.entry6.reg0.out_AT2))
(assert (= f.data_out_mux.and_6.in0_AT2 f.data_out_mux.repl_6.concat_4.out_AT2))
(assert (= f.data_out_mux.and_5.out_AT2 f.data_out_mux.or_chain_5.in1_AT2))
(assert (= f.data_out_mux.and_5.in1_AT2 f.entry5.reg0.out_AT2))
(assert (= f.data_out_mux.and_5.in0_AT2 f.data_out_mux.repl_5.concat_4.out_AT2))
(assert (= f.data_out_mux.and_4.out_AT2 f.data_out_mux.or_chain_4.in1_AT2))
(assert (= f.data_out_mux.and_4.in1_AT2 f.entry4.reg0.out_AT2))
(assert (= f.data_out_mux.and_4.in0_AT2 f.data_out_mux.repl_4.concat_4.out_AT2))
(assert (= f.data_out_mux.and_3.out_AT2 f.data_out_mux.or_chain_3.in1_AT2))
(assert (= f.data_out_mux.and_3.in1_AT2 f.entry3.reg0.out_AT2))
(assert (= f.data_out_mux.and_3.in0_AT2 f.data_out_mux.repl_3.concat_4.out_AT2))
(assert (= f.data_out_mux.and_2.out_AT2 f.data_out_mux.or_chain_2.in1_AT2))
(assert (= f.data_out_mux.and_2.in1_AT2 f.entry2.reg0.out_AT2))
(assert (= f.data_out_mux.and_2.in0_AT2 f.data_out_mux.repl_2.concat_4.out_AT2))
(assert (= f.data_out_mux.and_1.out_AT2 f.data_out_mux.or_chain_1.in1_AT2))
(assert (= f.data_out_mux.and_1.in1_AT2 f.entry1.reg0.out_AT2))
(assert (= f.data_out_mux.and_1.in0_AT2 f.data_out_mux.repl_1.concat_4.out_AT2))
(assert (= f.data_out_mux.and_0.out_AT2 f.data_out_mux.or_chain_1.in0_AT2))
(assert (= f.data_out_mux.and_0.in1_AT2 f.entry0.reg0.out_AT2))
(assert (= f.data_out_mux.and_0.in0_AT2 f.data_out_mux.repl_0.concat_4.out_AT2))
(assert (= f.const_7.out_AT2 f.wrPtrEq7.in1_AT2))
(assert (= f.const_7.out_AT2 f.rdPtrEq_eq_7.in1_AT2))
(assert (= f.const_6.out_AT2 f.wrPtrEq6.in1_AT2))
(assert (= f.const_6.out_AT2 f.rdPtrEq_eq_6.in1_AT2))
(assert (= f.const_5.out_AT2 f.wrPtrEq5.in1_AT2))
(assert (= f.const_5.out_AT2 f.rdPtrEq_eq_5.in1_AT2))
(assert (= f.const_4.out_AT2 f.wrPtrEq4.in1_AT2))
(assert (= f.const_4.out_AT2 f.rdPtrEq_eq_4.in1_AT2))
(assert (= f.const_3.out_AT2 f.wrPtrEq3.in1_AT2))
(assert (= f.const_3.out_AT2 f.rdPtrEq_eq_3.in1_AT2))
(assert (= f.const_2.out_AT2 f.wrPtrEq2.in1_AT2))
(assert (= f.const_2.out_AT2 f.rdPtrEq_eq_2.in1_AT2))
(assert (= f.const_1.out_AT2 f.wrPtrEq1.in1_AT2))
(assert (= f.const_1.out_AT2 f.rdPtrEq_eq_1.in1_AT2))
(assert (= f.const_0.out_AT2 f.wrPtrEq0.in1_AT2))
(assert (= f.const_0.out_AT2 f.rdPtrEq_eq_0.in1_AT2))
(assert (= en_or_sp.in1_AT2 start_and_push.out_AT2))
(assert (= en.out_AT2 not_en.in_AT2))
(assert (= en.out_AT2 en_or_sp.in0_AT2))
(assert (= en.in_AT2 en_or_sp.out_AT2))
(assert (= en.clk_AT2 self.clk_AT2))
(assert (= data_out_vld_and2.out_AT2 not_data_out_vld.in_AT2))
(assert (= data_out_vld_and1.out_AT2 data_out_vld_and2.in0_AT2))
(assert (= data_out_vld_and1.in0_AT2 en.out_AT2))
(assert (= cnt_gt_0.out_AT2 data_out_vld_and1.in1_AT2))
(assert (= cnt_gt_0.in1_AT2 zero.out_AT2))
(assert (= cnt_gt_0.in0_AT2 mpt.cnt.out_AT2))
(assert (= self.clk_AT2 #b0))
(assert (= zero.out_AT2 #b0000))
(assert (= (bvand start_and_push.in0_AT2 start_and_push.in1_AT2) start_and_push.out_AT2))
(assert (= (bvor prop_signal_or.in0_AT2 prop_signal_or.in1_AT2) prop_signal_or.out_AT2))
(assert (= (bvnot not_en.in_AT2) not_en.out_AT2))
(assert (= (bvnot not_data_out_vld.in_AT2) not_data_out_vld.out_AT2))
(assert (=> (= next_magic_packet.sel_AT2 #b1) (= next_magic_packet.in1_AT2 next_magic_packet.out_AT2)))
(assert (=> (= next_magic_packet.sel_AT2 #b0) (= next_magic_packet.in0_AT2 next_magic_packet.out_AT2)))
(assert (=> (not (= next_cnt_eq0.in0_AT2 next_cnt_eq0.in1_AT2)) (= next_cnt_eq0.out_AT2 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT2 next_cnt_eq0.in1_AT2) (= next_cnt_eq0.out_AT2 #b1)))
(assert (= mpt.zero.out_AT2 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT2 mpt.ssa_cnt_m1.in1_AT2) mpt.ssa_cnt_m1.out_AT2))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT2 mpt.ssa_cnt_gt_0.in0_AT2) (= mpt.ssa_cnt_gt_0.out_AT2 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT2 mpt.ssa_cnt_and2.in1_AT2) mpt.ssa_cnt_and2.out_AT2))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT2 mpt.ssa_cnt_and1.in1_AT2) mpt.ssa_cnt_and1.out_AT2))
(assert (=> (= mpt.ssa_cnt.sel_AT2 #b1) (= mpt.ssa_cnt.in1_AT2 mpt.ssa_cnt.out_AT2)))
(assert (=> (= mpt.ssa_cnt.sel_AT2 #b0) (= mpt.ssa_cnt.in0_AT2 mpt.ssa_cnt.out_AT2)))
(assert (= mpt.one.out_AT2 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT2) mpt.not_captured.out_AT2))
(assert (= (bvand mpt.next_cnt_and1.in0_AT2 mpt.next_cnt_and1.in1_AT2) mpt.next_cnt_and1.out_AT2))
(assert (=> (= mpt.next_cnt.sel_AT2 #b1) (= mpt.next_cnt.in1_AT2 mpt.next_cnt.out_AT2)))
(assert (=> (= mpt.next_cnt.sel_AT2 #b0) (= mpt.next_cnt.in0_AT2 mpt.next_cnt.out_AT2)))
(assert (= mpt.depth.out_AT2 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT2 #b1) (= mpt.decr_mux.in1_AT2 mpt.decr_mux.out_AT2)))
(assert (=> (= mpt.decr_mux.sel_AT2 #b0) (= mpt.decr_mux.in0_AT2 mpt.decr_mux.out_AT2)))
(assert (= (bvadd mpt.cnt_p1.in0_AT2 mpt.cnt_p1.in1_AT2) mpt.cnt_p1.out_AT2))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT2 mpt.cnt_lt_depth.in1_AT2) (= mpt.cnt_lt_depth.out_AT2 #b1)))
(assert (= (bvand mp_en.in0_AT2 mp_en.in1_AT2) mp_en.out_AT2))
(assert (=> (not (= magic_packet_eq.in0_AT2 magic_packet_eq.in1_AT2)) (= magic_packet_eq.out_AT2 #b0)))
(assert (=> (= magic_packet_eq.in0_AT2 magic_packet_eq.in1_AT2) (= magic_packet_eq.out_AT2 #b1)))
(assert (= f.zero.out_AT2 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT2 f.wrPtrp1.in1_AT2) f.wrPtrp1.out_AT2))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT2) f.wrPtrSlice.out_AT2))
(assert (=> (= f.wrPtrRst.sel_AT2 #b1) (= f.wrPtrRst.in1_AT2 f.wrPtrRst.out_AT2)))
(assert (=> (= f.wrPtrRst.sel_AT2 #b0) (= f.wrPtrRst.in0_AT2 f.wrPtrRst.out_AT2)))
(assert (=> (not (= f.wrPtrEq7.in0_AT2 f.wrPtrEq7.in1_AT2)) (= f.wrPtrEq7.out_AT2 #b0)))
(assert (=> (= f.wrPtrEq7.in0_AT2 f.wrPtrEq7.in1_AT2) (= f.wrPtrEq7.out_AT2 #b1)))
(assert (=> (not (= f.wrPtrEq6.in0_AT2 f.wrPtrEq6.in1_AT2)) (= f.wrPtrEq6.out_AT2 #b0)))
(assert (=> (= f.wrPtrEq6.in0_AT2 f.wrPtrEq6.in1_AT2) (= f.wrPtrEq6.out_AT2 #b1)))
(assert (=> (not (= f.wrPtrEq5.in0_AT2 f.wrPtrEq5.in1_AT2)) (= f.wrPtrEq5.out_AT2 #b0)))
(assert (=> (= f.wrPtrEq5.in0_AT2 f.wrPtrEq5.in1_AT2) (= f.wrPtrEq5.out_AT2 #b1)))
(assert (=> (not (= f.wrPtrEq4.in0_AT2 f.wrPtrEq4.in1_AT2)) (= f.wrPtrEq4.out_AT2 #b0)))
(assert (=> (= f.wrPtrEq4.in0_AT2 f.wrPtrEq4.in1_AT2) (= f.wrPtrEq4.out_AT2 #b1)))
(assert (=> (not (= f.wrPtrEq3.in0_AT2 f.wrPtrEq3.in1_AT2)) (= f.wrPtrEq3.out_AT2 #b0)))
(assert (=> (= f.wrPtrEq3.in0_AT2 f.wrPtrEq3.in1_AT2) (= f.wrPtrEq3.out_AT2 #b1)))
(assert (=> (not (= f.wrPtrEq2.in0_AT2 f.wrPtrEq2.in1_AT2)) (= f.wrPtrEq2.out_AT2 #b0)))
(assert (=> (= f.wrPtrEq2.in0_AT2 f.wrPtrEq2.in1_AT2) (= f.wrPtrEq2.out_AT2 #b1)))
(assert (=> (not (= f.wrPtrEq1.in0_AT2 f.wrPtrEq1.in1_AT2)) (= f.wrPtrEq1.out_AT2 #b0)))
(assert (=> (= f.wrPtrEq1.in0_AT2 f.wrPtrEq1.in1_AT2) (= f.wrPtrEq1.out_AT2 #b1)))
(assert (=> (not (= f.wrPtrEq0.in0_AT2 f.wrPtrEq0.in1_AT2)) (= f.wrPtrEq0.out_AT2 #b0)))
(assert (=> (= f.wrPtrEq0.in0_AT2 f.wrPtrEq0.in1_AT2) (= f.wrPtrEq0.out_AT2 #b1)))
(assert (=> (= f.wrPtrEn.sel_AT2 #b1) (= f.wrPtrEn.in1_AT2 f.wrPtrEn.out_AT2)))
(assert (=> (= f.wrPtrEn.sel_AT2 #b0) (= f.wrPtrEn.in0_AT2 f.wrPtrEn.out_AT2)))
(assert (= (bvadd f.rdPtrp1.in0_AT2 f.rdPtrp1.in1_AT2) f.rdPtrp1.out_AT2))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT2) f.rdPtrSlice.out_AT2))
(assert (=> (= f.rdPtrRst.sel_AT2 #b1) (= f.rdPtrRst.in1_AT2 f.rdPtrRst.out_AT2)))
(assert (=> (= f.rdPtrRst.sel_AT2 #b0) (= f.rdPtrRst.in0_AT2 f.rdPtrRst.out_AT2)))
(assert (=> (not (= f.rdPtrEq_eq_7.in0_AT2 f.rdPtrEq_eq_7.in1_AT2)) (= f.rdPtrEq_eq_7.out_AT2 #b0)))
(assert (=> (= f.rdPtrEq_eq_7.in0_AT2 f.rdPtrEq_eq_7.in1_AT2) (= f.rdPtrEq_eq_7.out_AT2 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_6.in0_AT2 f.rdPtrEq_eq_6.in1_AT2)) (= f.rdPtrEq_eq_6.out_AT2 #b0)))
(assert (=> (= f.rdPtrEq_eq_6.in0_AT2 f.rdPtrEq_eq_6.in1_AT2) (= f.rdPtrEq_eq_6.out_AT2 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_5.in0_AT2 f.rdPtrEq_eq_5.in1_AT2)) (= f.rdPtrEq_eq_5.out_AT2 #b0)))
(assert (=> (= f.rdPtrEq_eq_5.in0_AT2 f.rdPtrEq_eq_5.in1_AT2) (= f.rdPtrEq_eq_5.out_AT2 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_4.in0_AT2 f.rdPtrEq_eq_4.in1_AT2)) (= f.rdPtrEq_eq_4.out_AT2 #b0)))
(assert (=> (= f.rdPtrEq_eq_4.in0_AT2 f.rdPtrEq_eq_4.in1_AT2) (= f.rdPtrEq_eq_4.out_AT2 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_3.in0_AT2 f.rdPtrEq_eq_3.in1_AT2)) (= f.rdPtrEq_eq_3.out_AT2 #b0)))
(assert (=> (= f.rdPtrEq_eq_3.in0_AT2 f.rdPtrEq_eq_3.in1_AT2) (= f.rdPtrEq_eq_3.out_AT2 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_2.in0_AT2 f.rdPtrEq_eq_2.in1_AT2)) (= f.rdPtrEq_eq_2.out_AT2 #b0)))
(assert (=> (= f.rdPtrEq_eq_2.in0_AT2 f.rdPtrEq_eq_2.in1_AT2) (= f.rdPtrEq_eq_2.out_AT2 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_1.in0_AT2 f.rdPtrEq_eq_1.in1_AT2)) (= f.rdPtrEq_eq_1.out_AT2 #b0)))
(assert (=> (= f.rdPtrEq_eq_1.in0_AT2 f.rdPtrEq_eq_1.in1_AT2) (= f.rdPtrEq_eq_1.out_AT2 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_0.in0_AT2 f.rdPtrEq_eq_0.in1_AT2)) (= f.rdPtrEq_eq_0.out_AT2 #b0)))
(assert (=> (= f.rdPtrEq_eq_0.in0_AT2 f.rdPtrEq_eq_0.in1_AT2) (= f.rdPtrEq_eq_0.out_AT2 #b1)))
(assert (=> (= f.rdPtrEn.sel_AT2 #b1) (= f.rdPtrEn.in1_AT2 f.rdPtrEn.out_AT2)))
(assert (=> (= f.rdPtrEn.sel_AT2 #b0) (= f.rdPtrEn.in0_AT2 f.rdPtrEn.out_AT2)))
(assert (= f.one.out_AT2 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT2) f.notfullEq_1.out_AT2))
(assert (=> (not (= f.fullEq_2.in0_AT2 f.fullEq_2.in1_AT2)) (= f.fullEq_2.out_AT2 #b0)))
(assert (=> (= f.fullEq_2.in0_AT2 f.fullEq_2.in1_AT2) (= f.fullEq_2.out_AT2 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT2 f.fullEq_1.in1_AT2)) (= f.fullEq_1.out_AT2 #b0)))
(assert (=> (= f.fullEq_1.in0_AT2 f.fullEq_1.in1_AT2) (= f.fullEq_1.out_AT2 #b1)))
(assert (= (bvand f.fullCalc.in0_AT2 f.fullCalc.in1_AT2) f.fullCalc.out_AT2))
(assert (= (bvand f.entryEn7.in0_AT2 f.entryEn7.in1_AT2) f.entryEn7.out_AT2))
(assert (= (bvand f.entryEn6.in0_AT2 f.entryEn6.in1_AT2) f.entryEn6.out_AT2))
(assert (= (bvand f.entryEn5.in0_AT2 f.entryEn5.in1_AT2) f.entryEn5.out_AT2))
(assert (= (bvand f.entryEn4.in0_AT2 f.entryEn4.in1_AT2) f.entryEn4.out_AT2))
(assert (= (bvand f.entryEn3.in0_AT2 f.entryEn3.in1_AT2) f.entryEn3.out_AT2))
(assert (= (bvand f.entryEn2.in0_AT2 f.entryEn2.in1_AT2) f.entryEn2.out_AT2))
(assert (= (bvand f.entryEn1.in0_AT2 f.entryEn1.in1_AT2) f.entryEn1.out_AT2))
(assert (= (bvand f.entryEn0.in0_AT2 f.entryEn0.in1_AT2) f.entryEn0.out_AT2))
(assert (=> (= f.entry7.enMux.sel_AT2 #b1) (= f.entry7.enMux.in1_AT2 f.entry7.enMux.out_AT2)))
(assert (=> (= f.entry7.enMux.sel_AT2 #b0) (= f.entry7.enMux.in0_AT2 f.entry7.enMux.out_AT2)))
(assert (=> (= f.entry6.enMux.sel_AT2 #b1) (= f.entry6.enMux.in1_AT2 f.entry6.enMux.out_AT2)))
(assert (=> (= f.entry6.enMux.sel_AT2 #b0) (= f.entry6.enMux.in0_AT2 f.entry6.enMux.out_AT2)))
(assert (=> (= f.entry5.enMux.sel_AT2 #b1) (= f.entry5.enMux.in1_AT2 f.entry5.enMux.out_AT2)))
(assert (=> (= f.entry5.enMux.sel_AT2 #b0) (= f.entry5.enMux.in0_AT2 f.entry5.enMux.out_AT2)))
(assert (=> (= f.entry4.enMux.sel_AT2 #b1) (= f.entry4.enMux.in1_AT2 f.entry4.enMux.out_AT2)))
(assert (=> (= f.entry4.enMux.sel_AT2 #b0) (= f.entry4.enMux.in0_AT2 f.entry4.enMux.out_AT2)))
(assert (=> (= f.entry3.enMux.sel_AT2 #b1) (= f.entry3.enMux.in1_AT2 f.entry3.enMux.out_AT2)))
(assert (=> (= f.entry3.enMux.sel_AT2 #b0) (= f.entry3.enMux.in0_AT2 f.entry3.enMux.out_AT2)))
(assert (=> (= f.entry2.enMux.sel_AT2 #b1) (= f.entry2.enMux.in1_AT2 f.entry2.enMux.out_AT2)))
(assert (=> (= f.entry2.enMux.sel_AT2 #b0) (= f.entry2.enMux.in0_AT2 f.entry2.enMux.out_AT2)))
(assert (=> (= f.entry1.enMux.sel_AT2 #b1) (= f.entry1.enMux.in1_AT2 f.entry1.enMux.out_AT2)))
(assert (=> (= f.entry1.enMux.sel_AT2 #b0) (= f.entry1.enMux.in0_AT2 f.entry1.enMux.out_AT2)))
(assert (=> (= f.entry0.enMux.sel_AT2 #b1) (= f.entry0.enMux.in1_AT2 f.entry0.enMux.out_AT2)))
(assert (=> (= f.entry0.enMux.sel_AT2 #b0) (= f.entry0.enMux.in0_AT2 f.entry0.enMux.out_AT2)))
(assert (=> (not (= f.emptyEq.in0_AT2 f.emptyEq.in1_AT2)) (= f.emptyEq.out_AT2 #b0)))
(assert (=> (= f.emptyEq.in0_AT2 f.emptyEq.in1_AT2) (= f.emptyEq.out_AT2 #b1)))
(assert (= (concat f.data_out_mux.repl_7.concat_4.in0_AT2 f.data_out_mux.repl_7.concat_4.in1_AT2) f.data_out_mux.repl_7.concat_4.out_AT2))
(assert (= (concat f.data_out_mux.repl_7.concat_2.in0_AT2 f.data_out_mux.repl_7.concat_2.in1_AT2) f.data_out_mux.repl_7.concat_2.out_AT2))
(assert (= (concat f.data_out_mux.repl_7.concat_1.in0_AT2 f.data_out_mux.repl_7.concat_1.in1_AT2) f.data_out_mux.repl_7.concat_1.out_AT2))
(assert (= (concat f.data_out_mux.repl_6.concat_4.in0_AT2 f.data_out_mux.repl_6.concat_4.in1_AT2) f.data_out_mux.repl_6.concat_4.out_AT2))
(assert (= (concat f.data_out_mux.repl_6.concat_2.in0_AT2 f.data_out_mux.repl_6.concat_2.in1_AT2) f.data_out_mux.repl_6.concat_2.out_AT2))
(assert (= (concat f.data_out_mux.repl_6.concat_1.in0_AT2 f.data_out_mux.repl_6.concat_1.in1_AT2) f.data_out_mux.repl_6.concat_1.out_AT2))
(assert (= (concat f.data_out_mux.repl_5.concat_4.in0_AT2 f.data_out_mux.repl_5.concat_4.in1_AT2) f.data_out_mux.repl_5.concat_4.out_AT2))
(assert (= (concat f.data_out_mux.repl_5.concat_2.in0_AT2 f.data_out_mux.repl_5.concat_2.in1_AT2) f.data_out_mux.repl_5.concat_2.out_AT2))
(assert (= (concat f.data_out_mux.repl_5.concat_1.in0_AT2 f.data_out_mux.repl_5.concat_1.in1_AT2) f.data_out_mux.repl_5.concat_1.out_AT2))
(assert (= (concat f.data_out_mux.repl_4.concat_4.in0_AT2 f.data_out_mux.repl_4.concat_4.in1_AT2) f.data_out_mux.repl_4.concat_4.out_AT2))
(assert (= (concat f.data_out_mux.repl_4.concat_2.in0_AT2 f.data_out_mux.repl_4.concat_2.in1_AT2) f.data_out_mux.repl_4.concat_2.out_AT2))
(assert (= (concat f.data_out_mux.repl_4.concat_1.in0_AT2 f.data_out_mux.repl_4.concat_1.in1_AT2) f.data_out_mux.repl_4.concat_1.out_AT2))
(assert (= (concat f.data_out_mux.repl_3.concat_4.in0_AT2 f.data_out_mux.repl_3.concat_4.in1_AT2) f.data_out_mux.repl_3.concat_4.out_AT2))
(assert (= (concat f.data_out_mux.repl_3.concat_2.in0_AT2 f.data_out_mux.repl_3.concat_2.in1_AT2) f.data_out_mux.repl_3.concat_2.out_AT2))
(assert (= (concat f.data_out_mux.repl_3.concat_1.in0_AT2 f.data_out_mux.repl_3.concat_1.in1_AT2) f.data_out_mux.repl_3.concat_1.out_AT2))
(assert (= (concat f.data_out_mux.repl_2.concat_4.in0_AT2 f.data_out_mux.repl_2.concat_4.in1_AT2) f.data_out_mux.repl_2.concat_4.out_AT2))
(assert (= (concat f.data_out_mux.repl_2.concat_2.in0_AT2 f.data_out_mux.repl_2.concat_2.in1_AT2) f.data_out_mux.repl_2.concat_2.out_AT2))
(assert (= (concat f.data_out_mux.repl_2.concat_1.in0_AT2 f.data_out_mux.repl_2.concat_1.in1_AT2) f.data_out_mux.repl_2.concat_1.out_AT2))
(assert (= (concat f.data_out_mux.repl_1.concat_4.in0_AT2 f.data_out_mux.repl_1.concat_4.in1_AT2) f.data_out_mux.repl_1.concat_4.out_AT2))
(assert (= (concat f.data_out_mux.repl_1.concat_2.in0_AT2 f.data_out_mux.repl_1.concat_2.in1_AT2) f.data_out_mux.repl_1.concat_2.out_AT2))
(assert (= (concat f.data_out_mux.repl_1.concat_1.in0_AT2 f.data_out_mux.repl_1.concat_1.in1_AT2) f.data_out_mux.repl_1.concat_1.out_AT2))
(assert (= (concat f.data_out_mux.repl_0.concat_4.in0_AT2 f.data_out_mux.repl_0.concat_4.in1_AT2) f.data_out_mux.repl_0.concat_4.out_AT2))
(assert (= (concat f.data_out_mux.repl_0.concat_2.in0_AT2 f.data_out_mux.repl_0.concat_2.in1_AT2) f.data_out_mux.repl_0.concat_2.out_AT2))
(assert (= (concat f.data_out_mux.repl_0.concat_1.in0_AT2 f.data_out_mux.repl_0.concat_1.in1_AT2) f.data_out_mux.repl_0.concat_1.out_AT2))
(assert (= (bvor f.data_out_mux.or_chain_7.in0_AT2 f.data_out_mux.or_chain_7.in1_AT2) f.data_out_mux.or_chain_7.out_AT2))
(assert (= (bvor f.data_out_mux.or_chain_6.in0_AT2 f.data_out_mux.or_chain_6.in1_AT2) f.data_out_mux.or_chain_6.out_AT2))
(assert (= (bvor f.data_out_mux.or_chain_5.in0_AT2 f.data_out_mux.or_chain_5.in1_AT2) f.data_out_mux.or_chain_5.out_AT2))
(assert (= (bvor f.data_out_mux.or_chain_4.in0_AT2 f.data_out_mux.or_chain_4.in1_AT2) f.data_out_mux.or_chain_4.out_AT2))
(assert (= (bvor f.data_out_mux.or_chain_3.in0_AT2 f.data_out_mux.or_chain_3.in1_AT2) f.data_out_mux.or_chain_3.out_AT2))
(assert (= (bvor f.data_out_mux.or_chain_2.in0_AT2 f.data_out_mux.or_chain_2.in1_AT2) f.data_out_mux.or_chain_2.out_AT2))
(assert (= (bvor f.data_out_mux.or_chain_1.in0_AT2 f.data_out_mux.or_chain_1.in1_AT2) f.data_out_mux.or_chain_1.out_AT2))
(assert (= (bvand f.data_out_mux.and_7.in0_AT2 f.data_out_mux.and_7.in1_AT2) f.data_out_mux.and_7.out_AT2))
(assert (= (bvand f.data_out_mux.and_6.in0_AT2 f.data_out_mux.and_6.in1_AT2) f.data_out_mux.and_6.out_AT2))
(assert (= (bvand f.data_out_mux.and_5.in0_AT2 f.data_out_mux.and_5.in1_AT2) f.data_out_mux.and_5.out_AT2))
(assert (= (bvand f.data_out_mux.and_4.in0_AT2 f.data_out_mux.and_4.in1_AT2) f.data_out_mux.and_4.out_AT2))
(assert (= (bvand f.data_out_mux.and_3.in0_AT2 f.data_out_mux.and_3.in1_AT2) f.data_out_mux.and_3.out_AT2))
(assert (= (bvand f.data_out_mux.and_2.in0_AT2 f.data_out_mux.and_2.in1_AT2) f.data_out_mux.and_2.out_AT2))
(assert (= (bvand f.data_out_mux.and_1.in0_AT2 f.data_out_mux.and_1.in1_AT2) f.data_out_mux.and_1.out_AT2))
(assert (= (bvand f.data_out_mux.and_0.in0_AT2 f.data_out_mux.and_0.in1_AT2) f.data_out_mux.and_0.out_AT2))
(assert (= f.const_7.out_AT2 #b111))
(assert (= f.const_6.out_AT2 #b110))
(assert (= f.const_5.out_AT2 #b101))
(assert (= f.const_4.out_AT2 #b100))
(assert (= f.const_3.out_AT2 #b011))
(assert (= f.const_2.out_AT2 #b010))
(assert (= f.const_1.out_AT2 #b001))
(assert (= f.const_0.out_AT2 #b000))
(assert (= (bvor en_or_sp.in0_AT2 en_or_sp.in1_AT2) en_or_sp.out_AT2))
(assert (= (bvand data_out_vld_and2.in0_AT2 data_out_vld_and2.in1_AT2) data_out_vld_and2.out_AT2))
(assert (= (bvand data_out_vld_and1.in0_AT2 data_out_vld_and1.in1_AT2) data_out_vld_and1.out_AT2))
(assert (= (bvult cnt_gt_0.in1_AT2 cnt_gt_0.in0_AT2) (= cnt_gt_0.out_AT2 #b1)))
(assert (=> (= _-_state_id_-__AT1 #b10) (= _-_state_id_-__AT2 #b10)))
(assert (=> (= _-_state_id_-__AT1 #b01) (= _-_state_id_-__AT2 #b10)))
(assert (=> (= _-_state_id_-__AT1 #b00) (= _-_state_id_-__AT2 #b01)))
(assert (= mpt.cnt.in_AT1 mpt.cnt.out_AT2))
(assert (= magic_packet.in_AT1 magic_packet.out_AT2))
(assert (= magic_packet.init_AT1 magic_packet.init_AT2))
(assert (= f.wrPtr.in_AT1 f.wrPtr.out_AT2))
(assert (= f.rdPtr.in_AT1 f.rdPtr.out_AT2))
(assert (= f.entry7.reg0.in_AT1 f.entry7.reg0.out_AT2))
(assert (= f.entry6.reg0.in_AT1 f.entry6.reg0.out_AT2))
(assert (= f.entry5.reg0.in_AT1 f.entry5.reg0.out_AT2))
(assert (= f.entry4.reg0.in_AT1 f.entry4.reg0.out_AT2))
(assert (= f.entry3.reg0.in_AT1 f.entry3.reg0.out_AT2))
(assert (= f.entry2.reg0.in_AT1 f.entry2.reg0.out_AT2))
(assert (= f.entry1.reg0.in_AT1 f.entry1.reg0.out_AT2))
(assert (= f.entry0.reg0.in_AT1 f.entry0.reg0.out_AT2))
(assert (= en.init_AT1 en.init_AT2))
(assert (= en.in_AT1 en.out_AT2))
(push 1)

(assert (not (= self.prop_signal_AT2 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT3 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT3 () (_ BitVec 4))
(declare-fun magic_packet.out_AT3 () (_ BitVec 8))
(declare-fun magic_packet.init_AT3 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT3 () (_ BitVec 4))
(declare-fun f.entry7.reg0.out_AT3 () (_ BitVec 8))
(declare-fun f.entry6.reg0.out_AT3 () (_ BitVec 8))
(declare-fun f.entry5.reg0.out_AT3 () (_ BitVec 8))
(declare-fun f.entry4.reg0.out_AT3 () (_ BitVec 8))
(declare-fun f.entry3.reg0.out_AT3 () (_ BitVec 8))
(declare-fun f.entry2.reg0.out_AT3 () (_ BitVec 8))
(declare-fun f.entry1.reg0.out_AT3 () (_ BitVec 8))
(declare-fun f.entry0.reg0.out_AT3 () (_ BitVec 8))
(declare-fun en.init_AT3 () (_ BitVec 1))
(declare-fun en.out_AT3 () (_ BitVec 1))
(declare-fun self.pop_AT3 () (_ BitVec 1))
(declare-fun self.empty_AT3 () (_ BitVec 1))
(declare-fun self.push_AT3 () (_ BitVec 1))
(declare-fun self.full_AT3 () (_ BitVec 1))
(declare-fun self.rst_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT3 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT3 () (_ BitVec 1))
(declare-fun self.start_AT3 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT3 () (_ BitVec 1))
(declare-fun f.entryEn7.in0_AT3 () (_ BitVec 1))
(declare-fun f.entryEn6.in0_AT3 () (_ BitVec 1))
(declare-fun f.entryEn5.in0_AT3 () (_ BitVec 1))
(declare-fun f.entryEn4.in0_AT3 () (_ BitVec 1))
(declare-fun f.entryEn3.in0_AT3 () (_ BitVec 1))
(declare-fun f.entryEn2.in0_AT3 () (_ BitVec 1))
(declare-fun f.entryEn1.in0_AT3 () (_ BitVec 1))
(declare-fun f.entryEn0.in0_AT3 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT3 () (_ BitVec 1))
(declare-fun self.prop_signal_AT3 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT3 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT3 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT3 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT3 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT3 () (_ BitVec 1))
(declare-fun mp_en.out_AT3 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT3 () (_ BitVec 1))
(declare-fun self.data_in_AT3 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT3 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT3 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT3 () (_ BitVec 1))
(declare-fun zero.out_AT3 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT3 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.one.out_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT3 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT3 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT3 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT3 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT3 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT3 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT3 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT3 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT3 () (_ BitVec 4))
(declare-fun self.clk_AT3 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT3 () (_ BitVec 1))
(declare-fun not_en.out_AT3 () (_ BitVec 1))
(declare-fun mp_en.in1_AT3 () (_ BitVec 1))
(declare-fun start_and_push.out_AT3 () (_ BitVec 1))
(declare-fun mp_en.in0_AT3 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT3 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT3 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT3 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT3 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT3 () (_ BitVec 8))
(declare-fun magic_packet.in_AT3 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT3 () (_ BitVec 1))
(declare-fun f.zero.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT3 () (_ BitVec 4))
(declare-fun f.entryEn7.in1_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq7.out_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrSlice.out_AT3 () (_ BitVec 3))
(declare-fun f.wrPtrEq7.in0_AT3 () (_ BitVec 3))
(declare-fun f.entryEn6.in1_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq6.out_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq6.in0_AT3 () (_ BitVec 3))
(declare-fun f.entryEn5.in1_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq5.out_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq5.in0_AT3 () (_ BitVec 3))
(declare-fun f.entryEn4.in1_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq4.out_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq4.in0_AT3 () (_ BitVec 3))
(declare-fun f.entryEn3.in1_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq3.out_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq3.in0_AT3 () (_ BitVec 3))
(declare-fun f.entryEn2.in1_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq2.out_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq2.in0_AT3 () (_ BitVec 3))
(declare-fun f.entryEn1.in1_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq1.out_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq1.in0_AT3 () (_ BitVec 3))
(declare-fun f.entryEn0.in1_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq0.out_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEq0.in0_AT3 () (_ BitVec 3))
(declare-fun f.wrPtrEn.sel_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT3 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_1.in1_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_7.out_AT3 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_7.concat_1.in0_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrSlice.out_AT3 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_7.in0_AT3 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_6.concat_1.in1_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_6.out_AT3 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_6.concat_1.in0_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_6.in0_AT3 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_5.concat_1.in1_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_5.out_AT3 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_5.concat_1.in0_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_5.in0_AT3 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_4.concat_1.in1_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_4.out_AT3 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_4.concat_1.in0_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_4.in0_AT3 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_3.concat_1.in1_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_3.out_AT3 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_3.concat_1.in0_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_3.in0_AT3 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_2.concat_1.in1_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_2.out_AT3 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_2.concat_1.in0_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_2.in0_AT3 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_1.concat_1.in1_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_1.out_AT3 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_1.concat_1.in0_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_1.in0_AT3 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_0.concat_1.in1_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_0.out_AT3 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_0.concat_1.in0_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_0.in0_AT3 () (_ BitVec 3))
(declare-fun f.rdPtrEn.sel_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT3 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT3 () (_ BitVec 4))
(declare-fun f.one.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT3 () (_ BitVec 4))
(declare-fun f.fullCalc.in1_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT3 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT3 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT3 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT3 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT3 () (_ BitVec 1))
(declare-fun f.entry7.reg0.clk_AT3 () (_ BitVec 1))
(declare-fun f.entryEn7.out_AT3 () (_ BitVec 1))
(declare-fun f.entry7.enMux.sel_AT3 () (_ BitVec 1))
(declare-fun f.entry7.reg0.in_AT3 () (_ BitVec 8))
(declare-fun f.entry7.enMux.out_AT3 () (_ BitVec 8))
(declare-fun f.entry7.enMux.in1_AT3 () (_ BitVec 8))
(declare-fun f.entry7.enMux.in0_AT3 () (_ BitVec 8))
(declare-fun f.entry6.reg0.clk_AT3 () (_ BitVec 1))
(declare-fun f.entryEn6.out_AT3 () (_ BitVec 1))
(declare-fun f.entry6.enMux.sel_AT3 () (_ BitVec 1))
(declare-fun f.entry6.reg0.in_AT3 () (_ BitVec 8))
(declare-fun f.entry6.enMux.out_AT3 () (_ BitVec 8))
(declare-fun f.entry6.enMux.in1_AT3 () (_ BitVec 8))
(declare-fun f.entry6.enMux.in0_AT3 () (_ BitVec 8))
(declare-fun f.entry5.reg0.clk_AT3 () (_ BitVec 1))
(declare-fun f.entryEn5.out_AT3 () (_ BitVec 1))
(declare-fun f.entry5.enMux.sel_AT3 () (_ BitVec 1))
(declare-fun f.entry5.reg0.in_AT3 () (_ BitVec 8))
(declare-fun f.entry5.enMux.out_AT3 () (_ BitVec 8))
(declare-fun f.entry5.enMux.in1_AT3 () (_ BitVec 8))
(declare-fun f.entry5.enMux.in0_AT3 () (_ BitVec 8))
(declare-fun f.entry4.reg0.clk_AT3 () (_ BitVec 1))
(declare-fun f.entryEn4.out_AT3 () (_ BitVec 1))
(declare-fun f.entry4.enMux.sel_AT3 () (_ BitVec 1))
(declare-fun f.entry4.reg0.in_AT3 () (_ BitVec 8))
(declare-fun f.entry4.enMux.out_AT3 () (_ BitVec 8))
(declare-fun f.entry4.enMux.in1_AT3 () (_ BitVec 8))
(declare-fun f.entry4.enMux.in0_AT3 () (_ BitVec 8))
(declare-fun f.entry3.reg0.clk_AT3 () (_ BitVec 1))
(declare-fun f.entryEn3.out_AT3 () (_ BitVec 1))
(declare-fun f.entry3.enMux.sel_AT3 () (_ BitVec 1))
(declare-fun f.entry3.reg0.in_AT3 () (_ BitVec 8))
(declare-fun f.entry3.enMux.out_AT3 () (_ BitVec 8))
(declare-fun f.entry3.enMux.in1_AT3 () (_ BitVec 8))
(declare-fun f.entry3.enMux.in0_AT3 () (_ BitVec 8))
(declare-fun f.entry2.reg0.clk_AT3 () (_ BitVec 1))
(declare-fun f.entryEn2.out_AT3 () (_ BitVec 1))
(declare-fun f.entry2.enMux.sel_AT3 () (_ BitVec 1))
(declare-fun f.entry2.reg0.in_AT3 () (_ BitVec 8))
(declare-fun f.entry2.enMux.out_AT3 () (_ BitVec 8))
(declare-fun f.entry2.enMux.in1_AT3 () (_ BitVec 8))
(declare-fun f.entry2.enMux.in0_AT3 () (_ BitVec 8))
(declare-fun f.entry1.reg0.clk_AT3 () (_ BitVec 1))
(declare-fun f.entryEn1.out_AT3 () (_ BitVec 1))
(declare-fun f.entry1.enMux.sel_AT3 () (_ BitVec 1))
(declare-fun f.entry1.reg0.in_AT3 () (_ BitVec 8))
(declare-fun f.entry1.enMux.out_AT3 () (_ BitVec 8))
(declare-fun f.entry1.enMux.in1_AT3 () (_ BitVec 8))
(declare-fun f.entry1.enMux.in0_AT3 () (_ BitVec 8))
(declare-fun f.entry0.reg0.clk_AT3 () (_ BitVec 1))
(declare-fun f.entryEn0.out_AT3 () (_ BitVec 1))
(declare-fun f.entry0.enMux.sel_AT3 () (_ BitVec 1))
(declare-fun f.entry0.reg0.in_AT3 () (_ BitVec 8))
(declare-fun f.entry0.enMux.out_AT3 () (_ BitVec 8))
(declare-fun f.entry0.enMux.in1_AT3 () (_ BitVec 8))
(declare-fun f.entry0.enMux.in0_AT3 () (_ BitVec 8))
(declare-fun f.emptyEq.out_AT3 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT3 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_4.in1_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_2.out_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_4.in0_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_2.in1_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_7.concat_1.out_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_7.concat_2.in0_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_4.in1_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_2.out_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_4.in0_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_2.in1_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_1.out_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_2.in0_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_4.in1_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_2.out_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_4.in0_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_2.in1_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_1.out_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_2.in0_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_4.in1_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_2.out_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_4.in0_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_2.in1_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_1.out_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_2.in0_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_4.in1_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_2.out_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_4.in0_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_2.in1_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_1.out_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_2.in0_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_4.in1_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_2.out_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_4.in0_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_2.in1_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_1.out_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_2.in0_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_4.in1_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_2.out_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_4.in0_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_2.in1_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_1.out_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_2.in0_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_4.in1_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_2.out_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_4.in0_AT3 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_2.in1_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_1.out_AT3 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_2.in0_AT3 () (_ BitVec 2))
(declare-fun self.data_out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.out_AT3 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_7.concat_4.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_6.concat_4.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_5.concat_4.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_4.concat_4.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_3.concat_4.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_2.concat_4.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_1.concat_4.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.in0_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.in1_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_0.concat_4.out_AT3 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.in0_AT3 () (_ BitVec 8))
(declare-fun f.wrPtrEq7.in1_AT3 () (_ BitVec 3))
(declare-fun f.const_7.out_AT3 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_7.in1_AT3 () (_ BitVec 3))
(declare-fun f.wrPtrEq6.in1_AT3 () (_ BitVec 3))
(declare-fun f.const_6.out_AT3 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_6.in1_AT3 () (_ BitVec 3))
(declare-fun f.wrPtrEq5.in1_AT3 () (_ BitVec 3))
(declare-fun f.const_5.out_AT3 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_5.in1_AT3 () (_ BitVec 3))
(declare-fun f.wrPtrEq4.in1_AT3 () (_ BitVec 3))
(declare-fun f.const_4.out_AT3 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_4.in1_AT3 () (_ BitVec 3))
(declare-fun f.wrPtrEq3.in1_AT3 () (_ BitVec 3))
(declare-fun f.const_3.out_AT3 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_3.in1_AT3 () (_ BitVec 3))
(declare-fun f.wrPtrEq2.in1_AT3 () (_ BitVec 3))
(declare-fun f.const_2.out_AT3 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_2.in1_AT3 () (_ BitVec 3))
(declare-fun f.wrPtrEq1.in1_AT3 () (_ BitVec 3))
(declare-fun f.const_1.out_AT3 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_1.in1_AT3 () (_ BitVec 3))
(declare-fun f.wrPtrEq0.in1_AT3 () (_ BitVec 3))
(declare-fun f.const_0.out_AT3 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_0.in1_AT3 () (_ BitVec 3))
(declare-fun en_or_sp.in1_AT3 () (_ BitVec 1))
(declare-fun not_en.in_AT3 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT3 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT3 () (_ BitVec 1))
(declare-fun en.in_AT3 () (_ BitVec 1))
(declare-fun en.clk_AT3 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT3 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT3 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT3 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT3 () (_ BitVec 4))

(assert (=> (= self.empty_AT3 #b1) (= self.pop_AT3 #b0)))
(assert (=> (= self.full_AT3 #b1) (= self.push_AT3 #b0)))
(assert (=> (= _-_state_id_-__AT3 #b10) (and true (= self.rst_AT3 #b0))))
(assert (=> (= _-_state_id_-__AT3 #b01) (and (and (and true (= self.rst_AT3 #b1)) (= self.push_AT3 #b0)) (= self.pop_AT3 #b0))))
(assert (=> (= _-_state_id_-__AT3 #b00) (and (and (and true (= self.rst_AT3 #b1)) (= self.push_AT3 #b0)) (= self.pop_AT3 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT3 ((_ extract 3 3) f.wrPtr.out_AT3)))
(assert (= f.fullEq_1.in0_AT3 ((_ extract 3 3) f.rdPtr.out_AT3)))
(assert (= en.out_AT3 mpt.not_captured.in_AT3))
(assert (= self.start_AT3 start_and_push.in0_AT3))
(assert (= self.push_AT3 start_and_push.in1_AT3))
(assert (= self.push_AT3 mpt.ssa_cnt_and1.in1_AT3))
(assert (= self.push_AT3 f.entryEn7.in0_AT3))
(assert (= self.push_AT3 f.entryEn6.in0_AT3))
(assert (= self.push_AT3 f.entryEn5.in0_AT3))
(assert (= self.push_AT3 f.entryEn4.in0_AT3))
(assert (= self.push_AT3 f.entryEn3.in0_AT3))
(assert (= self.push_AT3 f.entryEn2.in0_AT3))
(assert (= self.push_AT3 f.entryEn1.in0_AT3))
(assert (= self.push_AT3 f.entryEn0.in0_AT3))
(assert (= self.prop_signal_AT3 prop_signal_or.out_AT3))
(assert (= self.pop_AT3 mpt.next_cnt_and1.in1_AT3))
(assert (= self.full_AT3 f.fullCalc.out_AT3))
(assert (= self.data_out_vld_AT3 data_out_vld_and2.out_AT3))
(assert (= not_data_out_vld.out_AT3 prop_signal_or.in0_AT3))
(assert (= next_magic_packet.sel_AT3 mp_en.out_AT3))
(assert (= next_magic_packet.in1_AT3 self.data_in_AT3))
(assert (= next_cnt_eq0.out_AT3 data_out_vld_and2.in1_AT3))
(assert (= next_cnt_eq0.in1_AT3 zero.out_AT3))
(assert (= mpt.ssa_cnt_gt_0.out_AT3 mpt.next_cnt_and1.in0_AT3))
(assert (= mpt.ssa_cnt_gt_0.in1_AT3 mpt.zero.out_AT3))
(assert (= mpt.ssa_cnt_and1.out_AT3 mpt.ssa_cnt_and2.in0_AT3))
(assert (= mpt.ssa_cnt.sel_AT3 mpt.ssa_cnt_and2.out_AT3))
(assert (= mpt.ssa_cnt.out_AT3 mpt.ssa_cnt_m1.in0_AT3))
(assert (= mpt.ssa_cnt.out_AT3 mpt.ssa_cnt_gt_0.in0_AT3))
(assert (= mpt.one.out_AT3 mpt.ssa_cnt_m1.in1_AT3))
(assert (= mpt.not_captured.out_AT3 mpt.ssa_cnt_and2.in1_AT3))
(assert (= mpt.next_cnt.sel_AT3 self.rst_AT3))
(assert (= mpt.next_cnt.out_AT3 next_cnt_eq0.in0_AT3))
(assert (= mpt.next_cnt.in1_AT3 mpt.zero.out_AT3))
(assert (= mpt.decr_mux.sel_AT3 mpt.next_cnt_and1.out_AT3))
(assert (= mpt.decr_mux.out_AT3 mpt.next_cnt.in0_AT3))
(assert (= mpt.decr_mux.in1_AT3 mpt.ssa_cnt_m1.out_AT3))
(assert (= mpt.decr_mux.in0_AT3 mpt.ssa_cnt.out_AT3))
(assert (= mpt.cnt_p1.out_AT3 mpt.ssa_cnt.in1_AT3))
(assert (= mpt.cnt_p1.in1_AT3 mpt.one.out_AT3))
(assert (= mpt.cnt_lt_depth.out_AT3 mpt.ssa_cnt_and1.in0_AT3))
(assert (= mpt.cnt_lt_depth.in1_AT3 mpt.depth.out_AT3))
(assert (= mpt.cnt.out_AT3 mpt.ssa_cnt.in0_AT3))
(assert (= mpt.cnt.out_AT3 mpt.cnt_p1.in0_AT3))
(assert (= mpt.cnt.out_AT3 mpt.cnt_lt_depth.in0_AT3))
(assert (= mpt.cnt.in_AT3 mpt.next_cnt.out_AT3))
(assert (= mpt.cnt.clk_AT3 self.clk_AT3))
(assert (= mp_en.in1_AT3 not_en.out_AT3))
(assert (= mp_en.in0_AT3 start_and_push.out_AT3))
(assert (= magic_packet_eq.out_AT3 prop_signal_or.in1_AT3))
(assert (= magic_packet.out_AT3 next_magic_packet.in0_AT3))
(assert (= magic_packet.out_AT3 magic_packet_eq.in0_AT3))
(assert (= magic_packet.in_AT3 next_magic_packet.out_AT3))
(assert (= magic_packet.clk_AT3 self.clk_AT3))
(assert (= f.wrPtrRst.sel_AT3 self.rst_AT3))
(assert (= f.wrPtrRst.in1_AT3 f.zero.out_AT3))
(assert (= f.wrPtrEq7.out_AT3 f.entryEn7.in1_AT3))
(assert (= f.wrPtrEq7.in0_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.wrPtrEq6.out_AT3 f.entryEn6.in1_AT3))
(assert (= f.wrPtrEq6.in0_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.wrPtrEq5.out_AT3 f.entryEn5.in1_AT3))
(assert (= f.wrPtrEq5.in0_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.wrPtrEq4.out_AT3 f.entryEn4.in1_AT3))
(assert (= f.wrPtrEq4.in0_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.wrPtrEq3.out_AT3 f.entryEn3.in1_AT3))
(assert (= f.wrPtrEq3.in0_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.wrPtrEq2.out_AT3 f.entryEn2.in1_AT3))
(assert (= f.wrPtrEq2.in0_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.wrPtrEq1.out_AT3 f.entryEn1.in1_AT3))
(assert (= f.wrPtrEq1.in0_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.wrPtrEq0.out_AT3 f.entryEn0.in1_AT3))
(assert (= f.wrPtrEq0.in0_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.wrPtrEn.sel_AT3 self.push_AT3))
(assert (= f.wrPtrEn.out_AT3 f.wrPtrRst.in0_AT3))
(assert (= f.wrPtrEn.in1_AT3 f.wrPtrp1.out_AT3))
(assert (= f.wrPtr.out_AT3 f.wrPtrp1.in1_AT3))
(assert (= f.wrPtr.out_AT3 f.wrPtrSlice.in_AT3))
(assert (= f.wrPtr.out_AT3 f.wrPtrEn.in0_AT3))
(assert (= f.wrPtr.in_AT3 f.wrPtrRst.out_AT3))
(assert (= f.wrPtr.clk_AT3 self.clk_AT3))
(assert (= f.rdPtrRst.sel_AT3 self.rst_AT3))
(assert (= f.rdPtrRst.in1_AT3 f.zero.out_AT3))
(assert (= f.rdPtrEq_eq_7.out_AT3 f.data_out_mux.repl_7.concat_1.in1_AT3))
(assert (= f.rdPtrEq_eq_7.out_AT3 f.data_out_mux.repl_7.concat_1.in0_AT3))
(assert (= f.rdPtrEq_eq_7.in0_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.rdPtrEq_eq_6.out_AT3 f.data_out_mux.repl_6.concat_1.in1_AT3))
(assert (= f.rdPtrEq_eq_6.out_AT3 f.data_out_mux.repl_6.concat_1.in0_AT3))
(assert (= f.rdPtrEq_eq_6.in0_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.rdPtrEq_eq_5.out_AT3 f.data_out_mux.repl_5.concat_1.in1_AT3))
(assert (= f.rdPtrEq_eq_5.out_AT3 f.data_out_mux.repl_5.concat_1.in0_AT3))
(assert (= f.rdPtrEq_eq_5.in0_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.rdPtrEq_eq_4.out_AT3 f.data_out_mux.repl_4.concat_1.in1_AT3))
(assert (= f.rdPtrEq_eq_4.out_AT3 f.data_out_mux.repl_4.concat_1.in0_AT3))
(assert (= f.rdPtrEq_eq_4.in0_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.rdPtrEq_eq_3.out_AT3 f.data_out_mux.repl_3.concat_1.in1_AT3))
(assert (= f.rdPtrEq_eq_3.out_AT3 f.data_out_mux.repl_3.concat_1.in0_AT3))
(assert (= f.rdPtrEq_eq_3.in0_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.rdPtrEq_eq_2.out_AT3 f.data_out_mux.repl_2.concat_1.in1_AT3))
(assert (= f.rdPtrEq_eq_2.out_AT3 f.data_out_mux.repl_2.concat_1.in0_AT3))
(assert (= f.rdPtrEq_eq_2.in0_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.rdPtrEq_eq_1.out_AT3 f.data_out_mux.repl_1.concat_1.in1_AT3))
(assert (= f.rdPtrEq_eq_1.out_AT3 f.data_out_mux.repl_1.concat_1.in0_AT3))
(assert (= f.rdPtrEq_eq_1.in0_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.rdPtrEq_eq_0.out_AT3 f.data_out_mux.repl_0.concat_1.in1_AT3))
(assert (= f.rdPtrEq_eq_0.out_AT3 f.data_out_mux.repl_0.concat_1.in0_AT3))
(assert (= f.rdPtrEq_eq_0.in0_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.rdPtrEn.sel_AT3 self.pop_AT3))
(assert (= f.rdPtrEn.out_AT3 f.rdPtrRst.in0_AT3))
(assert (= f.rdPtrEn.in1_AT3 f.rdPtrp1.out_AT3))
(assert (= f.rdPtr.out_AT3 f.rdPtrp1.in1_AT3))
(assert (= f.rdPtr.out_AT3 f.rdPtrSlice.in_AT3))
(assert (= f.rdPtr.out_AT3 f.rdPtrEn.in0_AT3))
(assert (= f.rdPtr.in_AT3 f.rdPtrRst.out_AT3))
(assert (= f.rdPtr.clk_AT3 self.clk_AT3))
(assert (= f.one.out_AT3 f.wrPtrp1.in0_AT3))
(assert (= f.one.out_AT3 f.rdPtrp1.in0_AT3))
(assert (= f.fullEq_2.out_AT3 f.fullCalc.in1_AT3))
(assert (= f.fullEq_2.in1_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.fullEq_2.in0_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.fullEq_1.out_AT3 f.notfullEq_1.in_AT3))
(assert (= f.fullCalc.in0_AT3 f.notfullEq_1.out_AT3))
(assert (= f.entry7.reg0.clk_AT3 self.clk_AT3))
(assert (= f.entry7.enMux.sel_AT3 f.entryEn7.out_AT3))
(assert (= f.entry7.enMux.out_AT3 f.entry7.reg0.in_AT3))
(assert (= f.entry7.enMux.in1_AT3 self.data_in_AT3))
(assert (= f.entry7.enMux.in0_AT3 f.entry7.reg0.out_AT3))
(assert (= f.entry6.reg0.clk_AT3 self.clk_AT3))
(assert (= f.entry6.enMux.sel_AT3 f.entryEn6.out_AT3))
(assert (= f.entry6.enMux.out_AT3 f.entry6.reg0.in_AT3))
(assert (= f.entry6.enMux.in1_AT3 self.data_in_AT3))
(assert (= f.entry6.enMux.in0_AT3 f.entry6.reg0.out_AT3))
(assert (= f.entry5.reg0.clk_AT3 self.clk_AT3))
(assert (= f.entry5.enMux.sel_AT3 f.entryEn5.out_AT3))
(assert (= f.entry5.enMux.out_AT3 f.entry5.reg0.in_AT3))
(assert (= f.entry5.enMux.in1_AT3 self.data_in_AT3))
(assert (= f.entry5.enMux.in0_AT3 f.entry5.reg0.out_AT3))
(assert (= f.entry4.reg0.clk_AT3 self.clk_AT3))
(assert (= f.entry4.enMux.sel_AT3 f.entryEn4.out_AT3))
(assert (= f.entry4.enMux.out_AT3 f.entry4.reg0.in_AT3))
(assert (= f.entry4.enMux.in1_AT3 self.data_in_AT3))
(assert (= f.entry4.enMux.in0_AT3 f.entry4.reg0.out_AT3))
(assert (= f.entry3.reg0.clk_AT3 self.clk_AT3))
(assert (= f.entry3.enMux.sel_AT3 f.entryEn3.out_AT3))
(assert (= f.entry3.enMux.out_AT3 f.entry3.reg0.in_AT3))
(assert (= f.entry3.enMux.in1_AT3 self.data_in_AT3))
(assert (= f.entry3.enMux.in0_AT3 f.entry3.reg0.out_AT3))
(assert (= f.entry2.reg0.clk_AT3 self.clk_AT3))
(assert (= f.entry2.enMux.sel_AT3 f.entryEn2.out_AT3))
(assert (= f.entry2.enMux.out_AT3 f.entry2.reg0.in_AT3))
(assert (= f.entry2.enMux.in1_AT3 self.data_in_AT3))
(assert (= f.entry2.enMux.in0_AT3 f.entry2.reg0.out_AT3))
(assert (= f.entry1.reg0.clk_AT3 self.clk_AT3))
(assert (= f.entry1.enMux.sel_AT3 f.entryEn1.out_AT3))
(assert (= f.entry1.enMux.out_AT3 f.entry1.reg0.in_AT3))
(assert (= f.entry1.enMux.in1_AT3 self.data_in_AT3))
(assert (= f.entry1.enMux.in0_AT3 f.entry1.reg0.out_AT3))
(assert (= f.entry0.reg0.clk_AT3 self.clk_AT3))
(assert (= f.entry0.enMux.sel_AT3 f.entryEn0.out_AT3))
(assert (= f.entry0.enMux.out_AT3 f.entry0.reg0.in_AT3))
(assert (= f.entry0.enMux.in1_AT3 self.data_in_AT3))
(assert (= f.entry0.enMux.in0_AT3 f.entry0.reg0.out_AT3))
(assert (= f.emptyEq.out_AT3 self.empty_AT3))
(assert (= f.emptyEq.in1_AT3 f.wrPtr.out_AT3))
(assert (= f.emptyEq.in0_AT3 f.rdPtr.out_AT3))
(assert (= f.data_out_mux.repl_7.concat_2.out_AT3 f.data_out_mux.repl_7.concat_4.in1_AT3))
(assert (= f.data_out_mux.repl_7.concat_2.out_AT3 f.data_out_mux.repl_7.concat_4.in0_AT3))
(assert (= f.data_out_mux.repl_7.concat_1.out_AT3 f.data_out_mux.repl_7.concat_2.in1_AT3))
(assert (= f.data_out_mux.repl_7.concat_1.out_AT3 f.data_out_mux.repl_7.concat_2.in0_AT3))
(assert (= f.data_out_mux.repl_6.concat_2.out_AT3 f.data_out_mux.repl_6.concat_4.in1_AT3))
(assert (= f.data_out_mux.repl_6.concat_2.out_AT3 f.data_out_mux.repl_6.concat_4.in0_AT3))
(assert (= f.data_out_mux.repl_6.concat_1.out_AT3 f.data_out_mux.repl_6.concat_2.in1_AT3))
(assert (= f.data_out_mux.repl_6.concat_1.out_AT3 f.data_out_mux.repl_6.concat_2.in0_AT3))
(assert (= f.data_out_mux.repl_5.concat_2.out_AT3 f.data_out_mux.repl_5.concat_4.in1_AT3))
(assert (= f.data_out_mux.repl_5.concat_2.out_AT3 f.data_out_mux.repl_5.concat_4.in0_AT3))
(assert (= f.data_out_mux.repl_5.concat_1.out_AT3 f.data_out_mux.repl_5.concat_2.in1_AT3))
(assert (= f.data_out_mux.repl_5.concat_1.out_AT3 f.data_out_mux.repl_5.concat_2.in0_AT3))
(assert (= f.data_out_mux.repl_4.concat_2.out_AT3 f.data_out_mux.repl_4.concat_4.in1_AT3))
(assert (= f.data_out_mux.repl_4.concat_2.out_AT3 f.data_out_mux.repl_4.concat_4.in0_AT3))
(assert (= f.data_out_mux.repl_4.concat_1.out_AT3 f.data_out_mux.repl_4.concat_2.in1_AT3))
(assert (= f.data_out_mux.repl_4.concat_1.out_AT3 f.data_out_mux.repl_4.concat_2.in0_AT3))
(assert (= f.data_out_mux.repl_3.concat_2.out_AT3 f.data_out_mux.repl_3.concat_4.in1_AT3))
(assert (= f.data_out_mux.repl_3.concat_2.out_AT3 f.data_out_mux.repl_3.concat_4.in0_AT3))
(assert (= f.data_out_mux.repl_3.concat_1.out_AT3 f.data_out_mux.repl_3.concat_2.in1_AT3))
(assert (= f.data_out_mux.repl_3.concat_1.out_AT3 f.data_out_mux.repl_3.concat_2.in0_AT3))
(assert (= f.data_out_mux.repl_2.concat_2.out_AT3 f.data_out_mux.repl_2.concat_4.in1_AT3))
(assert (= f.data_out_mux.repl_2.concat_2.out_AT3 f.data_out_mux.repl_2.concat_4.in0_AT3))
(assert (= f.data_out_mux.repl_2.concat_1.out_AT3 f.data_out_mux.repl_2.concat_2.in1_AT3))
(assert (= f.data_out_mux.repl_2.concat_1.out_AT3 f.data_out_mux.repl_2.concat_2.in0_AT3))
(assert (= f.data_out_mux.repl_1.concat_2.out_AT3 f.data_out_mux.repl_1.concat_4.in1_AT3))
(assert (= f.data_out_mux.repl_1.concat_2.out_AT3 f.data_out_mux.repl_1.concat_4.in0_AT3))
(assert (= f.data_out_mux.repl_1.concat_1.out_AT3 f.data_out_mux.repl_1.concat_2.in1_AT3))
(assert (= f.data_out_mux.repl_1.concat_1.out_AT3 f.data_out_mux.repl_1.concat_2.in0_AT3))
(assert (= f.data_out_mux.repl_0.concat_2.out_AT3 f.data_out_mux.repl_0.concat_4.in1_AT3))
(assert (= f.data_out_mux.repl_0.concat_2.out_AT3 f.data_out_mux.repl_0.concat_4.in0_AT3))
(assert (= f.data_out_mux.repl_0.concat_1.out_AT3 f.data_out_mux.repl_0.concat_2.in1_AT3))
(assert (= f.data_out_mux.repl_0.concat_1.out_AT3 f.data_out_mux.repl_0.concat_2.in0_AT3))
(assert (= f.data_out_mux.or_chain_7.out_AT3 self.data_out_AT3))
(assert (= f.data_out_mux.or_chain_7.out_AT3 magic_packet_eq.in1_AT3))
(assert (= f.data_out_mux.or_chain_6.out_AT3 f.data_out_mux.or_chain_7.in0_AT3))
(assert (= f.data_out_mux.or_chain_5.out_AT3 f.data_out_mux.or_chain_6.in0_AT3))
(assert (= f.data_out_mux.or_chain_4.out_AT3 f.data_out_mux.or_chain_5.in0_AT3))
(assert (= f.data_out_mux.or_chain_3.out_AT3 f.data_out_mux.or_chain_4.in0_AT3))
(assert (= f.data_out_mux.or_chain_2.out_AT3 f.data_out_mux.or_chain_3.in0_AT3))
(assert (= f.data_out_mux.or_chain_1.out_AT3 f.data_out_mux.or_chain_2.in0_AT3))
(assert (= f.data_out_mux.and_7.out_AT3 f.data_out_mux.or_chain_7.in1_AT3))
(assert (= f.data_out_mux.and_7.in1_AT3 f.entry7.reg0.out_AT3))
(assert (= f.data_out_mux.and_7.in0_AT3 f.data_out_mux.repl_7.concat_4.out_AT3))
(assert (= f.data_out_mux.and_6.out_AT3 f.data_out_mux.or_chain_6.in1_AT3))
(assert (= f.data_out_mux.and_6.in1_AT3 f.entry6.reg0.out_AT3))
(assert (= f.data_out_mux.and_6.in0_AT3 f.data_out_mux.repl_6.concat_4.out_AT3))
(assert (= f.data_out_mux.and_5.out_AT3 f.data_out_mux.or_chain_5.in1_AT3))
(assert (= f.data_out_mux.and_5.in1_AT3 f.entry5.reg0.out_AT3))
(assert (= f.data_out_mux.and_5.in0_AT3 f.data_out_mux.repl_5.concat_4.out_AT3))
(assert (= f.data_out_mux.and_4.out_AT3 f.data_out_mux.or_chain_4.in1_AT3))
(assert (= f.data_out_mux.and_4.in1_AT3 f.entry4.reg0.out_AT3))
(assert (= f.data_out_mux.and_4.in0_AT3 f.data_out_mux.repl_4.concat_4.out_AT3))
(assert (= f.data_out_mux.and_3.out_AT3 f.data_out_mux.or_chain_3.in1_AT3))
(assert (= f.data_out_mux.and_3.in1_AT3 f.entry3.reg0.out_AT3))
(assert (= f.data_out_mux.and_3.in0_AT3 f.data_out_mux.repl_3.concat_4.out_AT3))
(assert (= f.data_out_mux.and_2.out_AT3 f.data_out_mux.or_chain_2.in1_AT3))
(assert (= f.data_out_mux.and_2.in1_AT3 f.entry2.reg0.out_AT3))
(assert (= f.data_out_mux.and_2.in0_AT3 f.data_out_mux.repl_2.concat_4.out_AT3))
(assert (= f.data_out_mux.and_1.out_AT3 f.data_out_mux.or_chain_1.in1_AT3))
(assert (= f.data_out_mux.and_1.in1_AT3 f.entry1.reg0.out_AT3))
(assert (= f.data_out_mux.and_1.in0_AT3 f.data_out_mux.repl_1.concat_4.out_AT3))
(assert (= f.data_out_mux.and_0.out_AT3 f.data_out_mux.or_chain_1.in0_AT3))
(assert (= f.data_out_mux.and_0.in1_AT3 f.entry0.reg0.out_AT3))
(assert (= f.data_out_mux.and_0.in0_AT3 f.data_out_mux.repl_0.concat_4.out_AT3))
(assert (= f.const_7.out_AT3 f.wrPtrEq7.in1_AT3))
(assert (= f.const_7.out_AT3 f.rdPtrEq_eq_7.in1_AT3))
(assert (= f.const_6.out_AT3 f.wrPtrEq6.in1_AT3))
(assert (= f.const_6.out_AT3 f.rdPtrEq_eq_6.in1_AT3))
(assert (= f.const_5.out_AT3 f.wrPtrEq5.in1_AT3))
(assert (= f.const_5.out_AT3 f.rdPtrEq_eq_5.in1_AT3))
(assert (= f.const_4.out_AT3 f.wrPtrEq4.in1_AT3))
(assert (= f.const_4.out_AT3 f.rdPtrEq_eq_4.in1_AT3))
(assert (= f.const_3.out_AT3 f.wrPtrEq3.in1_AT3))
(assert (= f.const_3.out_AT3 f.rdPtrEq_eq_3.in1_AT3))
(assert (= f.const_2.out_AT3 f.wrPtrEq2.in1_AT3))
(assert (= f.const_2.out_AT3 f.rdPtrEq_eq_2.in1_AT3))
(assert (= f.const_1.out_AT3 f.wrPtrEq1.in1_AT3))
(assert (= f.const_1.out_AT3 f.rdPtrEq_eq_1.in1_AT3))
(assert (= f.const_0.out_AT3 f.wrPtrEq0.in1_AT3))
(assert (= f.const_0.out_AT3 f.rdPtrEq_eq_0.in1_AT3))
(assert (= en_or_sp.in1_AT3 start_and_push.out_AT3))
(assert (= en.out_AT3 not_en.in_AT3))
(assert (= en.out_AT3 en_or_sp.in0_AT3))
(assert (= en.in_AT3 en_or_sp.out_AT3))
(assert (= en.clk_AT3 self.clk_AT3))
(assert (= data_out_vld_and2.out_AT3 not_data_out_vld.in_AT3))
(assert (= data_out_vld_and1.out_AT3 data_out_vld_and2.in0_AT3))
(assert (= data_out_vld_and1.in0_AT3 en.out_AT3))
(assert (= cnt_gt_0.out_AT3 data_out_vld_and1.in1_AT3))
(assert (= cnt_gt_0.in1_AT3 zero.out_AT3))
(assert (= cnt_gt_0.in0_AT3 mpt.cnt.out_AT3))
(assert (= self.clk_AT3 #b0))
(assert (= zero.out_AT3 #b0000))
(assert (= (bvand start_and_push.in0_AT3 start_and_push.in1_AT3) start_and_push.out_AT3))
(assert (= (bvor prop_signal_or.in0_AT3 prop_signal_or.in1_AT3) prop_signal_or.out_AT3))
(assert (= (bvnot not_en.in_AT3) not_en.out_AT3))
(assert (= (bvnot not_data_out_vld.in_AT3) not_data_out_vld.out_AT3))
(assert (=> (= next_magic_packet.sel_AT3 #b1) (= next_magic_packet.in1_AT3 next_magic_packet.out_AT3)))
(assert (=> (= next_magic_packet.sel_AT3 #b0) (= next_magic_packet.in0_AT3 next_magic_packet.out_AT3)))
(assert (=> (not (= next_cnt_eq0.in0_AT3 next_cnt_eq0.in1_AT3)) (= next_cnt_eq0.out_AT3 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT3 next_cnt_eq0.in1_AT3) (= next_cnt_eq0.out_AT3 #b1)))
(assert (= mpt.zero.out_AT3 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT3 mpt.ssa_cnt_m1.in1_AT3) mpt.ssa_cnt_m1.out_AT3))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT3 mpt.ssa_cnt_gt_0.in0_AT3) (= mpt.ssa_cnt_gt_0.out_AT3 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT3 mpt.ssa_cnt_and2.in1_AT3) mpt.ssa_cnt_and2.out_AT3))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT3 mpt.ssa_cnt_and1.in1_AT3) mpt.ssa_cnt_and1.out_AT3))
(assert (=> (= mpt.ssa_cnt.sel_AT3 #b1) (= mpt.ssa_cnt.in1_AT3 mpt.ssa_cnt.out_AT3)))
(assert (=> (= mpt.ssa_cnt.sel_AT3 #b0) (= mpt.ssa_cnt.in0_AT3 mpt.ssa_cnt.out_AT3)))
(assert (= mpt.one.out_AT3 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT3) mpt.not_captured.out_AT3))
(assert (= (bvand mpt.next_cnt_and1.in0_AT3 mpt.next_cnt_and1.in1_AT3) mpt.next_cnt_and1.out_AT3))
(assert (=> (= mpt.next_cnt.sel_AT3 #b1) (= mpt.next_cnt.in1_AT3 mpt.next_cnt.out_AT3)))
(assert (=> (= mpt.next_cnt.sel_AT3 #b0) (= mpt.next_cnt.in0_AT3 mpt.next_cnt.out_AT3)))
(assert (= mpt.depth.out_AT3 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT3 #b1) (= mpt.decr_mux.in1_AT3 mpt.decr_mux.out_AT3)))
(assert (=> (= mpt.decr_mux.sel_AT3 #b0) (= mpt.decr_mux.in0_AT3 mpt.decr_mux.out_AT3)))
(assert (= (bvadd mpt.cnt_p1.in0_AT3 mpt.cnt_p1.in1_AT3) mpt.cnt_p1.out_AT3))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT3 mpt.cnt_lt_depth.in1_AT3) (= mpt.cnt_lt_depth.out_AT3 #b1)))
(assert (= (bvand mp_en.in0_AT3 mp_en.in1_AT3) mp_en.out_AT3))
(assert (=> (not (= magic_packet_eq.in0_AT3 magic_packet_eq.in1_AT3)) (= magic_packet_eq.out_AT3 #b0)))
(assert (=> (= magic_packet_eq.in0_AT3 magic_packet_eq.in1_AT3) (= magic_packet_eq.out_AT3 #b1)))
(assert (= f.zero.out_AT3 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT3 f.wrPtrp1.in1_AT3) f.wrPtrp1.out_AT3))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT3) f.wrPtrSlice.out_AT3))
(assert (=> (= f.wrPtrRst.sel_AT3 #b1) (= f.wrPtrRst.in1_AT3 f.wrPtrRst.out_AT3)))
(assert (=> (= f.wrPtrRst.sel_AT3 #b0) (= f.wrPtrRst.in0_AT3 f.wrPtrRst.out_AT3)))
(assert (=> (not (= f.wrPtrEq7.in0_AT3 f.wrPtrEq7.in1_AT3)) (= f.wrPtrEq7.out_AT3 #b0)))
(assert (=> (= f.wrPtrEq7.in0_AT3 f.wrPtrEq7.in1_AT3) (= f.wrPtrEq7.out_AT3 #b1)))
(assert (=> (not (= f.wrPtrEq6.in0_AT3 f.wrPtrEq6.in1_AT3)) (= f.wrPtrEq6.out_AT3 #b0)))
(assert (=> (= f.wrPtrEq6.in0_AT3 f.wrPtrEq6.in1_AT3) (= f.wrPtrEq6.out_AT3 #b1)))
(assert (=> (not (= f.wrPtrEq5.in0_AT3 f.wrPtrEq5.in1_AT3)) (= f.wrPtrEq5.out_AT3 #b0)))
(assert (=> (= f.wrPtrEq5.in0_AT3 f.wrPtrEq5.in1_AT3) (= f.wrPtrEq5.out_AT3 #b1)))
(assert (=> (not (= f.wrPtrEq4.in0_AT3 f.wrPtrEq4.in1_AT3)) (= f.wrPtrEq4.out_AT3 #b0)))
(assert (=> (= f.wrPtrEq4.in0_AT3 f.wrPtrEq4.in1_AT3) (= f.wrPtrEq4.out_AT3 #b1)))
(assert (=> (not (= f.wrPtrEq3.in0_AT3 f.wrPtrEq3.in1_AT3)) (= f.wrPtrEq3.out_AT3 #b0)))
(assert (=> (= f.wrPtrEq3.in0_AT3 f.wrPtrEq3.in1_AT3) (= f.wrPtrEq3.out_AT3 #b1)))
(assert (=> (not (= f.wrPtrEq2.in0_AT3 f.wrPtrEq2.in1_AT3)) (= f.wrPtrEq2.out_AT3 #b0)))
(assert (=> (= f.wrPtrEq2.in0_AT3 f.wrPtrEq2.in1_AT3) (= f.wrPtrEq2.out_AT3 #b1)))
(assert (=> (not (= f.wrPtrEq1.in0_AT3 f.wrPtrEq1.in1_AT3)) (= f.wrPtrEq1.out_AT3 #b0)))
(assert (=> (= f.wrPtrEq1.in0_AT3 f.wrPtrEq1.in1_AT3) (= f.wrPtrEq1.out_AT3 #b1)))
(assert (=> (not (= f.wrPtrEq0.in0_AT3 f.wrPtrEq0.in1_AT3)) (= f.wrPtrEq0.out_AT3 #b0)))
(assert (=> (= f.wrPtrEq0.in0_AT3 f.wrPtrEq0.in1_AT3) (= f.wrPtrEq0.out_AT3 #b1)))
(assert (=> (= f.wrPtrEn.sel_AT3 #b1) (= f.wrPtrEn.in1_AT3 f.wrPtrEn.out_AT3)))
(assert (=> (= f.wrPtrEn.sel_AT3 #b0) (= f.wrPtrEn.in0_AT3 f.wrPtrEn.out_AT3)))
(assert (= (bvadd f.rdPtrp1.in0_AT3 f.rdPtrp1.in1_AT3) f.rdPtrp1.out_AT3))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT3) f.rdPtrSlice.out_AT3))
(assert (=> (= f.rdPtrRst.sel_AT3 #b1) (= f.rdPtrRst.in1_AT3 f.rdPtrRst.out_AT3)))
(assert (=> (= f.rdPtrRst.sel_AT3 #b0) (= f.rdPtrRst.in0_AT3 f.rdPtrRst.out_AT3)))
(assert (=> (not (= f.rdPtrEq_eq_7.in0_AT3 f.rdPtrEq_eq_7.in1_AT3)) (= f.rdPtrEq_eq_7.out_AT3 #b0)))
(assert (=> (= f.rdPtrEq_eq_7.in0_AT3 f.rdPtrEq_eq_7.in1_AT3) (= f.rdPtrEq_eq_7.out_AT3 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_6.in0_AT3 f.rdPtrEq_eq_6.in1_AT3)) (= f.rdPtrEq_eq_6.out_AT3 #b0)))
(assert (=> (= f.rdPtrEq_eq_6.in0_AT3 f.rdPtrEq_eq_6.in1_AT3) (= f.rdPtrEq_eq_6.out_AT3 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_5.in0_AT3 f.rdPtrEq_eq_5.in1_AT3)) (= f.rdPtrEq_eq_5.out_AT3 #b0)))
(assert (=> (= f.rdPtrEq_eq_5.in0_AT3 f.rdPtrEq_eq_5.in1_AT3) (= f.rdPtrEq_eq_5.out_AT3 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_4.in0_AT3 f.rdPtrEq_eq_4.in1_AT3)) (= f.rdPtrEq_eq_4.out_AT3 #b0)))
(assert (=> (= f.rdPtrEq_eq_4.in0_AT3 f.rdPtrEq_eq_4.in1_AT3) (= f.rdPtrEq_eq_4.out_AT3 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_3.in0_AT3 f.rdPtrEq_eq_3.in1_AT3)) (= f.rdPtrEq_eq_3.out_AT3 #b0)))
(assert (=> (= f.rdPtrEq_eq_3.in0_AT3 f.rdPtrEq_eq_3.in1_AT3) (= f.rdPtrEq_eq_3.out_AT3 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_2.in0_AT3 f.rdPtrEq_eq_2.in1_AT3)) (= f.rdPtrEq_eq_2.out_AT3 #b0)))
(assert (=> (= f.rdPtrEq_eq_2.in0_AT3 f.rdPtrEq_eq_2.in1_AT3) (= f.rdPtrEq_eq_2.out_AT3 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_1.in0_AT3 f.rdPtrEq_eq_1.in1_AT3)) (= f.rdPtrEq_eq_1.out_AT3 #b0)))
(assert (=> (= f.rdPtrEq_eq_1.in0_AT3 f.rdPtrEq_eq_1.in1_AT3) (= f.rdPtrEq_eq_1.out_AT3 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_0.in0_AT3 f.rdPtrEq_eq_0.in1_AT3)) (= f.rdPtrEq_eq_0.out_AT3 #b0)))
(assert (=> (= f.rdPtrEq_eq_0.in0_AT3 f.rdPtrEq_eq_0.in1_AT3) (= f.rdPtrEq_eq_0.out_AT3 #b1)))
(assert (=> (= f.rdPtrEn.sel_AT3 #b1) (= f.rdPtrEn.in1_AT3 f.rdPtrEn.out_AT3)))
(assert (=> (= f.rdPtrEn.sel_AT3 #b0) (= f.rdPtrEn.in0_AT3 f.rdPtrEn.out_AT3)))
(assert (= f.one.out_AT3 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT3) f.notfullEq_1.out_AT3))
(assert (=> (not (= f.fullEq_2.in0_AT3 f.fullEq_2.in1_AT3)) (= f.fullEq_2.out_AT3 #b0)))
(assert (=> (= f.fullEq_2.in0_AT3 f.fullEq_2.in1_AT3) (= f.fullEq_2.out_AT3 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT3 f.fullEq_1.in1_AT3)) (= f.fullEq_1.out_AT3 #b0)))
(assert (=> (= f.fullEq_1.in0_AT3 f.fullEq_1.in1_AT3) (= f.fullEq_1.out_AT3 #b1)))
(assert (= (bvand f.fullCalc.in0_AT3 f.fullCalc.in1_AT3) f.fullCalc.out_AT3))
(assert (= (bvand f.entryEn7.in0_AT3 f.entryEn7.in1_AT3) f.entryEn7.out_AT3))
(assert (= (bvand f.entryEn6.in0_AT3 f.entryEn6.in1_AT3) f.entryEn6.out_AT3))
(assert (= (bvand f.entryEn5.in0_AT3 f.entryEn5.in1_AT3) f.entryEn5.out_AT3))
(assert (= (bvand f.entryEn4.in0_AT3 f.entryEn4.in1_AT3) f.entryEn4.out_AT3))
(assert (= (bvand f.entryEn3.in0_AT3 f.entryEn3.in1_AT3) f.entryEn3.out_AT3))
(assert (= (bvand f.entryEn2.in0_AT3 f.entryEn2.in1_AT3) f.entryEn2.out_AT3))
(assert (= (bvand f.entryEn1.in0_AT3 f.entryEn1.in1_AT3) f.entryEn1.out_AT3))
(assert (= (bvand f.entryEn0.in0_AT3 f.entryEn0.in1_AT3) f.entryEn0.out_AT3))
(assert (=> (= f.entry7.enMux.sel_AT3 #b1) (= f.entry7.enMux.in1_AT3 f.entry7.enMux.out_AT3)))
(assert (=> (= f.entry7.enMux.sel_AT3 #b0) (= f.entry7.enMux.in0_AT3 f.entry7.enMux.out_AT3)))
(assert (=> (= f.entry6.enMux.sel_AT3 #b1) (= f.entry6.enMux.in1_AT3 f.entry6.enMux.out_AT3)))
(assert (=> (= f.entry6.enMux.sel_AT3 #b0) (= f.entry6.enMux.in0_AT3 f.entry6.enMux.out_AT3)))
(assert (=> (= f.entry5.enMux.sel_AT3 #b1) (= f.entry5.enMux.in1_AT3 f.entry5.enMux.out_AT3)))
(assert (=> (= f.entry5.enMux.sel_AT3 #b0) (= f.entry5.enMux.in0_AT3 f.entry5.enMux.out_AT3)))
(assert (=> (= f.entry4.enMux.sel_AT3 #b1) (= f.entry4.enMux.in1_AT3 f.entry4.enMux.out_AT3)))
(assert (=> (= f.entry4.enMux.sel_AT3 #b0) (= f.entry4.enMux.in0_AT3 f.entry4.enMux.out_AT3)))
(assert (=> (= f.entry3.enMux.sel_AT3 #b1) (= f.entry3.enMux.in1_AT3 f.entry3.enMux.out_AT3)))
(assert (=> (= f.entry3.enMux.sel_AT3 #b0) (= f.entry3.enMux.in0_AT3 f.entry3.enMux.out_AT3)))
(assert (=> (= f.entry2.enMux.sel_AT3 #b1) (= f.entry2.enMux.in1_AT3 f.entry2.enMux.out_AT3)))
(assert (=> (= f.entry2.enMux.sel_AT3 #b0) (= f.entry2.enMux.in0_AT3 f.entry2.enMux.out_AT3)))
(assert (=> (= f.entry1.enMux.sel_AT3 #b1) (= f.entry1.enMux.in1_AT3 f.entry1.enMux.out_AT3)))
(assert (=> (= f.entry1.enMux.sel_AT3 #b0) (= f.entry1.enMux.in0_AT3 f.entry1.enMux.out_AT3)))
(assert (=> (= f.entry0.enMux.sel_AT3 #b1) (= f.entry0.enMux.in1_AT3 f.entry0.enMux.out_AT3)))
(assert (=> (= f.entry0.enMux.sel_AT3 #b0) (= f.entry0.enMux.in0_AT3 f.entry0.enMux.out_AT3)))
(assert (=> (not (= f.emptyEq.in0_AT3 f.emptyEq.in1_AT3)) (= f.emptyEq.out_AT3 #b0)))
(assert (=> (= f.emptyEq.in0_AT3 f.emptyEq.in1_AT3) (= f.emptyEq.out_AT3 #b1)))
(assert (= (concat f.data_out_mux.repl_7.concat_4.in0_AT3 f.data_out_mux.repl_7.concat_4.in1_AT3) f.data_out_mux.repl_7.concat_4.out_AT3))
(assert (= (concat f.data_out_mux.repl_7.concat_2.in0_AT3 f.data_out_mux.repl_7.concat_2.in1_AT3) f.data_out_mux.repl_7.concat_2.out_AT3))
(assert (= (concat f.data_out_mux.repl_7.concat_1.in0_AT3 f.data_out_mux.repl_7.concat_1.in1_AT3) f.data_out_mux.repl_7.concat_1.out_AT3))
(assert (= (concat f.data_out_mux.repl_6.concat_4.in0_AT3 f.data_out_mux.repl_6.concat_4.in1_AT3) f.data_out_mux.repl_6.concat_4.out_AT3))
(assert (= (concat f.data_out_mux.repl_6.concat_2.in0_AT3 f.data_out_mux.repl_6.concat_2.in1_AT3) f.data_out_mux.repl_6.concat_2.out_AT3))
(assert (= (concat f.data_out_mux.repl_6.concat_1.in0_AT3 f.data_out_mux.repl_6.concat_1.in1_AT3) f.data_out_mux.repl_6.concat_1.out_AT3))
(assert (= (concat f.data_out_mux.repl_5.concat_4.in0_AT3 f.data_out_mux.repl_5.concat_4.in1_AT3) f.data_out_mux.repl_5.concat_4.out_AT3))
(assert (= (concat f.data_out_mux.repl_5.concat_2.in0_AT3 f.data_out_mux.repl_5.concat_2.in1_AT3) f.data_out_mux.repl_5.concat_2.out_AT3))
(assert (= (concat f.data_out_mux.repl_5.concat_1.in0_AT3 f.data_out_mux.repl_5.concat_1.in1_AT3) f.data_out_mux.repl_5.concat_1.out_AT3))
(assert (= (concat f.data_out_mux.repl_4.concat_4.in0_AT3 f.data_out_mux.repl_4.concat_4.in1_AT3) f.data_out_mux.repl_4.concat_4.out_AT3))
(assert (= (concat f.data_out_mux.repl_4.concat_2.in0_AT3 f.data_out_mux.repl_4.concat_2.in1_AT3) f.data_out_mux.repl_4.concat_2.out_AT3))
(assert (= (concat f.data_out_mux.repl_4.concat_1.in0_AT3 f.data_out_mux.repl_4.concat_1.in1_AT3) f.data_out_mux.repl_4.concat_1.out_AT3))
(assert (= (concat f.data_out_mux.repl_3.concat_4.in0_AT3 f.data_out_mux.repl_3.concat_4.in1_AT3) f.data_out_mux.repl_3.concat_4.out_AT3))
(assert (= (concat f.data_out_mux.repl_3.concat_2.in0_AT3 f.data_out_mux.repl_3.concat_2.in1_AT3) f.data_out_mux.repl_3.concat_2.out_AT3))
(assert (= (concat f.data_out_mux.repl_3.concat_1.in0_AT3 f.data_out_mux.repl_3.concat_1.in1_AT3) f.data_out_mux.repl_3.concat_1.out_AT3))
(assert (= (concat f.data_out_mux.repl_2.concat_4.in0_AT3 f.data_out_mux.repl_2.concat_4.in1_AT3) f.data_out_mux.repl_2.concat_4.out_AT3))
(assert (= (concat f.data_out_mux.repl_2.concat_2.in0_AT3 f.data_out_mux.repl_2.concat_2.in1_AT3) f.data_out_mux.repl_2.concat_2.out_AT3))
(assert (= (concat f.data_out_mux.repl_2.concat_1.in0_AT3 f.data_out_mux.repl_2.concat_1.in1_AT3) f.data_out_mux.repl_2.concat_1.out_AT3))
(assert (= (concat f.data_out_mux.repl_1.concat_4.in0_AT3 f.data_out_mux.repl_1.concat_4.in1_AT3) f.data_out_mux.repl_1.concat_4.out_AT3))
(assert (= (concat f.data_out_mux.repl_1.concat_2.in0_AT3 f.data_out_mux.repl_1.concat_2.in1_AT3) f.data_out_mux.repl_1.concat_2.out_AT3))
(assert (= (concat f.data_out_mux.repl_1.concat_1.in0_AT3 f.data_out_mux.repl_1.concat_1.in1_AT3) f.data_out_mux.repl_1.concat_1.out_AT3))
(assert (= (concat f.data_out_mux.repl_0.concat_4.in0_AT3 f.data_out_mux.repl_0.concat_4.in1_AT3) f.data_out_mux.repl_0.concat_4.out_AT3))
(assert (= (concat f.data_out_mux.repl_0.concat_2.in0_AT3 f.data_out_mux.repl_0.concat_2.in1_AT3) f.data_out_mux.repl_0.concat_2.out_AT3))
(assert (= (concat f.data_out_mux.repl_0.concat_1.in0_AT3 f.data_out_mux.repl_0.concat_1.in1_AT3) f.data_out_mux.repl_0.concat_1.out_AT3))
(assert (= (bvor f.data_out_mux.or_chain_7.in0_AT3 f.data_out_mux.or_chain_7.in1_AT3) f.data_out_mux.or_chain_7.out_AT3))
(assert (= (bvor f.data_out_mux.or_chain_6.in0_AT3 f.data_out_mux.or_chain_6.in1_AT3) f.data_out_mux.or_chain_6.out_AT3))
(assert (= (bvor f.data_out_mux.or_chain_5.in0_AT3 f.data_out_mux.or_chain_5.in1_AT3) f.data_out_mux.or_chain_5.out_AT3))
(assert (= (bvor f.data_out_mux.or_chain_4.in0_AT3 f.data_out_mux.or_chain_4.in1_AT3) f.data_out_mux.or_chain_4.out_AT3))
(assert (= (bvor f.data_out_mux.or_chain_3.in0_AT3 f.data_out_mux.or_chain_3.in1_AT3) f.data_out_mux.or_chain_3.out_AT3))
(assert (= (bvor f.data_out_mux.or_chain_2.in0_AT3 f.data_out_mux.or_chain_2.in1_AT3) f.data_out_mux.or_chain_2.out_AT3))
(assert (= (bvor f.data_out_mux.or_chain_1.in0_AT3 f.data_out_mux.or_chain_1.in1_AT3) f.data_out_mux.or_chain_1.out_AT3))
(assert (= (bvand f.data_out_mux.and_7.in0_AT3 f.data_out_mux.and_7.in1_AT3) f.data_out_mux.and_7.out_AT3))
(assert (= (bvand f.data_out_mux.and_6.in0_AT3 f.data_out_mux.and_6.in1_AT3) f.data_out_mux.and_6.out_AT3))
(assert (= (bvand f.data_out_mux.and_5.in0_AT3 f.data_out_mux.and_5.in1_AT3) f.data_out_mux.and_5.out_AT3))
(assert (= (bvand f.data_out_mux.and_4.in0_AT3 f.data_out_mux.and_4.in1_AT3) f.data_out_mux.and_4.out_AT3))
(assert (= (bvand f.data_out_mux.and_3.in0_AT3 f.data_out_mux.and_3.in1_AT3) f.data_out_mux.and_3.out_AT3))
(assert (= (bvand f.data_out_mux.and_2.in0_AT3 f.data_out_mux.and_2.in1_AT3) f.data_out_mux.and_2.out_AT3))
(assert (= (bvand f.data_out_mux.and_1.in0_AT3 f.data_out_mux.and_1.in1_AT3) f.data_out_mux.and_1.out_AT3))
(assert (= (bvand f.data_out_mux.and_0.in0_AT3 f.data_out_mux.and_0.in1_AT3) f.data_out_mux.and_0.out_AT3))
(assert (= f.const_7.out_AT3 #b111))
(assert (= f.const_6.out_AT3 #b110))
(assert (= f.const_5.out_AT3 #b101))
(assert (= f.const_4.out_AT3 #b100))
(assert (= f.const_3.out_AT3 #b011))
(assert (= f.const_2.out_AT3 #b010))
(assert (= f.const_1.out_AT3 #b001))
(assert (= f.const_0.out_AT3 #b000))
(assert (= (bvor en_or_sp.in0_AT3 en_or_sp.in1_AT3) en_or_sp.out_AT3))
(assert (= (bvand data_out_vld_and2.in0_AT3 data_out_vld_and2.in1_AT3) data_out_vld_and2.out_AT3))
(assert (= (bvand data_out_vld_and1.in0_AT3 data_out_vld_and1.in1_AT3) data_out_vld_and1.out_AT3))
(assert (= (bvult cnt_gt_0.in1_AT3 cnt_gt_0.in0_AT3) (= cnt_gt_0.out_AT3 #b1)))
(assert (=> (= _-_state_id_-__AT2 #b10) (= _-_state_id_-__AT3 #b10)))
(assert (=> (= _-_state_id_-__AT2 #b01) (= _-_state_id_-__AT3 #b10)))
(assert (=> (= _-_state_id_-__AT2 #b00) (= _-_state_id_-__AT3 #b01)))
(assert (= mpt.cnt.in_AT2 mpt.cnt.out_AT3))
(assert (= magic_packet.in_AT2 magic_packet.out_AT3))
(assert (= magic_packet.init_AT2 magic_packet.init_AT3))
(assert (= f.wrPtr.in_AT2 f.wrPtr.out_AT3))
(assert (= f.rdPtr.in_AT2 f.rdPtr.out_AT3))
(assert (= f.entry7.reg0.in_AT2 f.entry7.reg0.out_AT3))
(assert (= f.entry6.reg0.in_AT2 f.entry6.reg0.out_AT3))
(assert (= f.entry5.reg0.in_AT2 f.entry5.reg0.out_AT3))
(assert (= f.entry4.reg0.in_AT2 f.entry4.reg0.out_AT3))
(assert (= f.entry3.reg0.in_AT2 f.entry3.reg0.out_AT3))
(assert (= f.entry2.reg0.in_AT2 f.entry2.reg0.out_AT3))
(assert (= f.entry1.reg0.in_AT2 f.entry1.reg0.out_AT3))
(assert (= f.entry0.reg0.in_AT2 f.entry0.reg0.out_AT3))
(assert (= en.init_AT2 en.init_AT3))
(assert (= en.in_AT2 en.out_AT3))
(push 1)

(assert (not (= self.prop_signal_AT3 #b1)))
(check-sat)

(pop 1)
(declare-fun _-_state_id_-__AT4 () (_ BitVec 2))
(declare-fun mpt.cnt.out_AT4 () (_ BitVec 4))
(declare-fun magic_packet.out_AT4 () (_ BitVec 8))
(declare-fun magic_packet.init_AT4 () (_ BitVec 8))
(declare-fun f.wrPtr.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT4 () (_ BitVec 4))
(declare-fun f.entry7.reg0.out_AT4 () (_ BitVec 8))
(declare-fun f.entry6.reg0.out_AT4 () (_ BitVec 8))
(declare-fun f.entry5.reg0.out_AT4 () (_ BitVec 8))
(declare-fun f.entry4.reg0.out_AT4 () (_ BitVec 8))
(declare-fun f.entry3.reg0.out_AT4 () (_ BitVec 8))
(declare-fun f.entry2.reg0.out_AT4 () (_ BitVec 8))
(declare-fun f.entry1.reg0.out_AT4 () (_ BitVec 8))
(declare-fun f.entry0.reg0.out_AT4 () (_ BitVec 8))
(declare-fun en.init_AT4 () (_ BitVec 1))
(declare-fun en.out_AT4 () (_ BitVec 1))
(declare-fun self.pop_AT4 () (_ BitVec 1))
(declare-fun self.empty_AT4 () (_ BitVec 1))
(declare-fun self.push_AT4 () (_ BitVec 1))
(declare-fun self.full_AT4 () (_ BitVec 1))
(declare-fun self.rst_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT4 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT4 () (_ BitVec 1))
(declare-fun self.start_AT4 () (_ BitVec 1))
(declare-fun start_and_push.in1_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT4 () (_ BitVec 1))
(declare-fun f.entryEn7.in0_AT4 () (_ BitVec 1))
(declare-fun f.entryEn6.in0_AT4 () (_ BitVec 1))
(declare-fun f.entryEn5.in0_AT4 () (_ BitVec 1))
(declare-fun f.entryEn4.in0_AT4 () (_ BitVec 1))
(declare-fun f.entryEn3.in0_AT4 () (_ BitVec 1))
(declare-fun f.entryEn2.in0_AT4 () (_ BitVec 1))
(declare-fun f.entryEn1.in0_AT4 () (_ BitVec 1))
(declare-fun f.entryEn0.in0_AT4 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT4 () (_ BitVec 1))
(declare-fun self.prop_signal_AT4 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT4 () (_ BitVec 1))
(declare-fun f.fullCalc.out_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and2.out_AT4 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT4 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT4 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT4 () (_ BitVec 1))
(declare-fun mp_en.out_AT4 () (_ BitVec 1))
(declare-fun next_magic_packet.sel_AT4 () (_ BitVec 1))
(declare-fun self.data_in_AT4 () (_ BitVec 8))
(declare-fun next_magic_packet.in1_AT4 () (_ BitVec 8))
(declare-fun data_out_vld_and2.in1_AT4 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT4 () (_ BitVec 1))
(declare-fun zero.out_AT4 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT4 () (_ BitVec 1))
(declare-fun mpt.zero.out_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.sel_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.out_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.one.out_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and2.in1_AT4 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT4 () (_ BitVec 1))
(declare-fun mpt.next_cnt.sel_AT4 () (_ BitVec 1))
(declare-fun next_cnt_eq0.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.next_cnt.out_AT4 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT4 () (_ BitVec 1))
(declare-fun mpt.decr_mux.sel_AT4 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.decr_mux.out_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.out_AT4 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_and1.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT4 () (_ BitVec 1))
(declare-fun mpt.depth.out_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT4 () (_ BitVec 4))
(declare-fun self.clk_AT4 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT4 () (_ BitVec 1))
(declare-fun not_en.out_AT4 () (_ BitVec 1))
(declare-fun mp_en.in1_AT4 () (_ BitVec 1))
(declare-fun start_and_push.out_AT4 () (_ BitVec 1))
(declare-fun mp_en.in0_AT4 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT4 () (_ BitVec 1))
(declare-fun magic_packet_eq.out_AT4 () (_ BitVec 1))
(declare-fun next_magic_packet.in0_AT4 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT4 () (_ BitVec 8))
(declare-fun next_magic_packet.out_AT4 () (_ BitVec 8))
(declare-fun magic_packet.in_AT4 () (_ BitVec 8))
(declare-fun magic_packet.clk_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrRst.sel_AT4 () (_ BitVec 1))
(declare-fun f.zero.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT4 () (_ BitVec 4))
(declare-fun f.entryEn7.in1_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq7.out_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrSlice.out_AT4 () (_ BitVec 3))
(declare-fun f.wrPtrEq7.in0_AT4 () (_ BitVec 3))
(declare-fun f.entryEn6.in1_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq6.out_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq6.in0_AT4 () (_ BitVec 3))
(declare-fun f.entryEn5.in1_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq5.out_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq5.in0_AT4 () (_ BitVec 3))
(declare-fun f.entryEn4.in1_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq4.out_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq4.in0_AT4 () (_ BitVec 3))
(declare-fun f.entryEn3.in1_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq3.out_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq3.in0_AT4 () (_ BitVec 3))
(declare-fun f.entryEn2.in1_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq2.out_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq2.in0_AT4 () (_ BitVec 3))
(declare-fun f.entryEn1.in1_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq1.out_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq1.in0_AT4 () (_ BitVec 3))
(declare-fun f.entryEn0.in1_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq0.out_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEq0.in0_AT4 () (_ BitVec 3))
(declare-fun f.wrPtrEn.sel_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrRst.in0_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrEn.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in1_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.in_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrRst.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtr.in_AT4 () (_ BitVec 4))
(declare-fun f.wrPtr.clk_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrRst.sel_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_1.in1_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_7.out_AT4 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_7.concat_1.in0_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrSlice.out_AT4 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_7.in0_AT4 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_6.concat_1.in1_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_6.out_AT4 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_6.concat_1.in0_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_6.in0_AT4 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_5.concat_1.in1_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_5.out_AT4 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_5.concat_1.in0_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_5.in0_AT4 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_4.concat_1.in1_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_4.out_AT4 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_4.concat_1.in0_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_4.in0_AT4 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_3.concat_1.in1_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_3.out_AT4 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_3.concat_1.in0_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_3.in0_AT4 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_2.concat_1.in1_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_2.out_AT4 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_2.concat_1.in0_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_2.in0_AT4 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_1.concat_1.in1_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_1.out_AT4 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_1.concat_1.in0_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_1.in0_AT4 () (_ BitVec 3))
(declare-fun f.data_out_mux.repl_0.concat_1.in1_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_0.out_AT4 () (_ BitVec 1))
(declare-fun f.data_out_mux.repl_0.concat_1.in0_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEq_eq_0.in0_AT4 () (_ BitVec 3))
(declare-fun f.rdPtrEn.sel_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in0_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrEn.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrp1.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT4 () (_ BitVec 4))
(declare-fun f.rdPtr.clk_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrp1.in0_AT4 () (_ BitVec 4))
(declare-fun f.one.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT4 () (_ BitVec 4))
(declare-fun f.fullCalc.in1_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_2.out_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT4 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT4 () (_ BitVec 3))
(declare-fun f.notfullEq_1.in_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT4 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT4 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT4 () (_ BitVec 1))
(declare-fun f.entry7.reg0.clk_AT4 () (_ BitVec 1))
(declare-fun f.entryEn7.out_AT4 () (_ BitVec 1))
(declare-fun f.entry7.enMux.sel_AT4 () (_ BitVec 1))
(declare-fun f.entry7.reg0.in_AT4 () (_ BitVec 8))
(declare-fun f.entry7.enMux.out_AT4 () (_ BitVec 8))
(declare-fun f.entry7.enMux.in1_AT4 () (_ BitVec 8))
(declare-fun f.entry7.enMux.in0_AT4 () (_ BitVec 8))
(declare-fun f.entry6.reg0.clk_AT4 () (_ BitVec 1))
(declare-fun f.entryEn6.out_AT4 () (_ BitVec 1))
(declare-fun f.entry6.enMux.sel_AT4 () (_ BitVec 1))
(declare-fun f.entry6.reg0.in_AT4 () (_ BitVec 8))
(declare-fun f.entry6.enMux.out_AT4 () (_ BitVec 8))
(declare-fun f.entry6.enMux.in1_AT4 () (_ BitVec 8))
(declare-fun f.entry6.enMux.in0_AT4 () (_ BitVec 8))
(declare-fun f.entry5.reg0.clk_AT4 () (_ BitVec 1))
(declare-fun f.entryEn5.out_AT4 () (_ BitVec 1))
(declare-fun f.entry5.enMux.sel_AT4 () (_ BitVec 1))
(declare-fun f.entry5.reg0.in_AT4 () (_ BitVec 8))
(declare-fun f.entry5.enMux.out_AT4 () (_ BitVec 8))
(declare-fun f.entry5.enMux.in1_AT4 () (_ BitVec 8))
(declare-fun f.entry5.enMux.in0_AT4 () (_ BitVec 8))
(declare-fun f.entry4.reg0.clk_AT4 () (_ BitVec 1))
(declare-fun f.entryEn4.out_AT4 () (_ BitVec 1))
(declare-fun f.entry4.enMux.sel_AT4 () (_ BitVec 1))
(declare-fun f.entry4.reg0.in_AT4 () (_ BitVec 8))
(declare-fun f.entry4.enMux.out_AT4 () (_ BitVec 8))
(declare-fun f.entry4.enMux.in1_AT4 () (_ BitVec 8))
(declare-fun f.entry4.enMux.in0_AT4 () (_ BitVec 8))
(declare-fun f.entry3.reg0.clk_AT4 () (_ BitVec 1))
(declare-fun f.entryEn3.out_AT4 () (_ BitVec 1))
(declare-fun f.entry3.enMux.sel_AT4 () (_ BitVec 1))
(declare-fun f.entry3.reg0.in_AT4 () (_ BitVec 8))
(declare-fun f.entry3.enMux.out_AT4 () (_ BitVec 8))
(declare-fun f.entry3.enMux.in1_AT4 () (_ BitVec 8))
(declare-fun f.entry3.enMux.in0_AT4 () (_ BitVec 8))
(declare-fun f.entry2.reg0.clk_AT4 () (_ BitVec 1))
(declare-fun f.entryEn2.out_AT4 () (_ BitVec 1))
(declare-fun f.entry2.enMux.sel_AT4 () (_ BitVec 1))
(declare-fun f.entry2.reg0.in_AT4 () (_ BitVec 8))
(declare-fun f.entry2.enMux.out_AT4 () (_ BitVec 8))
(declare-fun f.entry2.enMux.in1_AT4 () (_ BitVec 8))
(declare-fun f.entry2.enMux.in0_AT4 () (_ BitVec 8))
(declare-fun f.entry1.reg0.clk_AT4 () (_ BitVec 1))
(declare-fun f.entryEn1.out_AT4 () (_ BitVec 1))
(declare-fun f.entry1.enMux.sel_AT4 () (_ BitVec 1))
(declare-fun f.entry1.reg0.in_AT4 () (_ BitVec 8))
(declare-fun f.entry1.enMux.out_AT4 () (_ BitVec 8))
(declare-fun f.entry1.enMux.in1_AT4 () (_ BitVec 8))
(declare-fun f.entry1.enMux.in0_AT4 () (_ BitVec 8))
(declare-fun f.entry0.reg0.clk_AT4 () (_ BitVec 1))
(declare-fun f.entryEn0.out_AT4 () (_ BitVec 1))
(declare-fun f.entry0.enMux.sel_AT4 () (_ BitVec 1))
(declare-fun f.entry0.reg0.in_AT4 () (_ BitVec 8))
(declare-fun f.entry0.enMux.out_AT4 () (_ BitVec 8))
(declare-fun f.entry0.enMux.in1_AT4 () (_ BitVec 8))
(declare-fun f.entry0.enMux.in0_AT4 () (_ BitVec 8))
(declare-fun f.emptyEq.out_AT4 () (_ BitVec 1))
(declare-fun f.emptyEq.in1_AT4 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_4.in1_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_2.out_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_4.in0_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_7.concat_2.in1_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_7.concat_1.out_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_7.concat_2.in0_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_4.in1_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_2.out_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_4.in0_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_6.concat_2.in1_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_1.out_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_6.concat_2.in0_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_4.in1_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_2.out_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_4.in0_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_5.concat_2.in1_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_1.out_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_5.concat_2.in0_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_4.in1_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_2.out_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_4.in0_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_4.concat_2.in1_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_1.out_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_4.concat_2.in0_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_4.in1_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_2.out_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_4.in0_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_3.concat_2.in1_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_1.out_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_3.concat_2.in0_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_4.in1_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_2.out_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_4.in0_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_2.concat_2.in1_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_1.out_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_2.concat_2.in0_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_4.in1_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_2.out_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_4.in0_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_1.concat_2.in1_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_1.out_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_1.concat_2.in0_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_4.in1_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_2.out_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_4.in0_AT4 () (_ BitVec 4))
(declare-fun f.data_out_mux.repl_0.concat_2.in1_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_1.out_AT4 () (_ BitVec 2))
(declare-fun f.data_out_mux.repl_0.concat_2.in0_AT4 () (_ BitVec 2))
(declare-fun self.data_out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.out_AT4 () (_ BitVec 8))
(declare-fun magic_packet_eq.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_7.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_7.concat_4.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_7.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_6.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_6.concat_4.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_6.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_5.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_5.concat_4.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_5.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_4.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_4.concat_4.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_4.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_3.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_3.concat_4.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_3.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_2.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_2.concat_4.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_2.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_1.concat_4.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_1.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.or_chain_1.in0_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.in1_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.repl_0.concat_4.out_AT4 () (_ BitVec 8))
(declare-fun f.data_out_mux.and_0.in0_AT4 () (_ BitVec 8))
(declare-fun f.wrPtrEq7.in1_AT4 () (_ BitVec 3))
(declare-fun f.const_7.out_AT4 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_7.in1_AT4 () (_ BitVec 3))
(declare-fun f.wrPtrEq6.in1_AT4 () (_ BitVec 3))
(declare-fun f.const_6.out_AT4 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_6.in1_AT4 () (_ BitVec 3))
(declare-fun f.wrPtrEq5.in1_AT4 () (_ BitVec 3))
(declare-fun f.const_5.out_AT4 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_5.in1_AT4 () (_ BitVec 3))
(declare-fun f.wrPtrEq4.in1_AT4 () (_ BitVec 3))
(declare-fun f.const_4.out_AT4 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_4.in1_AT4 () (_ BitVec 3))
(declare-fun f.wrPtrEq3.in1_AT4 () (_ BitVec 3))
(declare-fun f.const_3.out_AT4 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_3.in1_AT4 () (_ BitVec 3))
(declare-fun f.wrPtrEq2.in1_AT4 () (_ BitVec 3))
(declare-fun f.const_2.out_AT4 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_2.in1_AT4 () (_ BitVec 3))
(declare-fun f.wrPtrEq1.in1_AT4 () (_ BitVec 3))
(declare-fun f.const_1.out_AT4 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_1.in1_AT4 () (_ BitVec 3))
(declare-fun f.wrPtrEq0.in1_AT4 () (_ BitVec 3))
(declare-fun f.const_0.out_AT4 () (_ BitVec 3))
(declare-fun f.rdPtrEq_eq_0.in1_AT4 () (_ BitVec 3))
(declare-fun en_or_sp.in1_AT4 () (_ BitVec 1))
(declare-fun not_en.in_AT4 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT4 () (_ BitVec 1))
(declare-fun en_or_sp.out_AT4 () (_ BitVec 1))
(declare-fun en.in_AT4 () (_ BitVec 1))
(declare-fun en.clk_AT4 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and1.out_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT4 () (_ BitVec 1))
(declare-fun cnt_gt_0.out_AT4 () (_ BitVec 1))
(declare-fun cnt_gt_0.in1_AT4 () (_ BitVec 4))
(declare-fun cnt_gt_0.in0_AT4 () (_ BitVec 4))

(assert (=> (= self.empty_AT4 #b1) (= self.pop_AT4 #b0)))
(assert (=> (= self.full_AT4 #b1) (= self.push_AT4 #b0)))
(assert (=> (= _-_state_id_-__AT4 #b10) (and true (= self.rst_AT4 #b0))))
(assert (=> (= _-_state_id_-__AT4 #b01) (and (and (and true (= self.rst_AT4 #b1)) (= self.push_AT4 #b0)) (= self.pop_AT4 #b0))))
(assert (=> (= _-_state_id_-__AT4 #b00) (and (and (and true (= self.rst_AT4 #b1)) (= self.push_AT4 #b0)) (= self.pop_AT4 #b0))))
(assert true)
(assert (= f.fullEq_1.in1_AT4 ((_ extract 3 3) f.wrPtr.out_AT4)))
(assert (= f.fullEq_1.in0_AT4 ((_ extract 3 3) f.rdPtr.out_AT4)))
(assert (= en.out_AT4 mpt.not_captured.in_AT4))
(assert (= self.start_AT4 start_and_push.in0_AT4))
(assert (= self.push_AT4 start_and_push.in1_AT4))
(assert (= self.push_AT4 mpt.ssa_cnt_and1.in1_AT4))
(assert (= self.push_AT4 f.entryEn7.in0_AT4))
(assert (= self.push_AT4 f.entryEn6.in0_AT4))
(assert (= self.push_AT4 f.entryEn5.in0_AT4))
(assert (= self.push_AT4 f.entryEn4.in0_AT4))
(assert (= self.push_AT4 f.entryEn3.in0_AT4))
(assert (= self.push_AT4 f.entryEn2.in0_AT4))
(assert (= self.push_AT4 f.entryEn1.in0_AT4))
(assert (= self.push_AT4 f.entryEn0.in0_AT4))
(assert (= self.prop_signal_AT4 prop_signal_or.out_AT4))
(assert (= self.pop_AT4 mpt.next_cnt_and1.in1_AT4))
(assert (= self.full_AT4 f.fullCalc.out_AT4))
(assert (= self.data_out_vld_AT4 data_out_vld_and2.out_AT4))
(assert (= not_data_out_vld.out_AT4 prop_signal_or.in0_AT4))
(assert (= next_magic_packet.sel_AT4 mp_en.out_AT4))
(assert (= next_magic_packet.in1_AT4 self.data_in_AT4))
(assert (= next_cnt_eq0.out_AT4 data_out_vld_and2.in1_AT4))
(assert (= next_cnt_eq0.in1_AT4 zero.out_AT4))
(assert (= mpt.ssa_cnt_gt_0.out_AT4 mpt.next_cnt_and1.in0_AT4))
(assert (= mpt.ssa_cnt_gt_0.in1_AT4 mpt.zero.out_AT4))
(assert (= mpt.ssa_cnt_and1.out_AT4 mpt.ssa_cnt_and2.in0_AT4))
(assert (= mpt.ssa_cnt.sel_AT4 mpt.ssa_cnt_and2.out_AT4))
(assert (= mpt.ssa_cnt.out_AT4 mpt.ssa_cnt_m1.in0_AT4))
(assert (= mpt.ssa_cnt.out_AT4 mpt.ssa_cnt_gt_0.in0_AT4))
(assert (= mpt.one.out_AT4 mpt.ssa_cnt_m1.in1_AT4))
(assert (= mpt.not_captured.out_AT4 mpt.ssa_cnt_and2.in1_AT4))
(assert (= mpt.next_cnt.sel_AT4 self.rst_AT4))
(assert (= mpt.next_cnt.out_AT4 next_cnt_eq0.in0_AT4))
(assert (= mpt.next_cnt.in1_AT4 mpt.zero.out_AT4))
(assert (= mpt.decr_mux.sel_AT4 mpt.next_cnt_and1.out_AT4))
(assert (= mpt.decr_mux.out_AT4 mpt.next_cnt.in0_AT4))
(assert (= mpt.decr_mux.in1_AT4 mpt.ssa_cnt_m1.out_AT4))
(assert (= mpt.decr_mux.in0_AT4 mpt.ssa_cnt.out_AT4))
(assert (= mpt.cnt_p1.out_AT4 mpt.ssa_cnt.in1_AT4))
(assert (= mpt.cnt_p1.in1_AT4 mpt.one.out_AT4))
(assert (= mpt.cnt_lt_depth.out_AT4 mpt.ssa_cnt_and1.in0_AT4))
(assert (= mpt.cnt_lt_depth.in1_AT4 mpt.depth.out_AT4))
(assert (= mpt.cnt.out_AT4 mpt.ssa_cnt.in0_AT4))
(assert (= mpt.cnt.out_AT4 mpt.cnt_p1.in0_AT4))
(assert (= mpt.cnt.out_AT4 mpt.cnt_lt_depth.in0_AT4))
(assert (= mpt.cnt.in_AT4 mpt.next_cnt.out_AT4))
(assert (= mpt.cnt.clk_AT4 self.clk_AT4))
(assert (= mp_en.in1_AT4 not_en.out_AT4))
(assert (= mp_en.in0_AT4 start_and_push.out_AT4))
(assert (= magic_packet_eq.out_AT4 prop_signal_or.in1_AT4))
(assert (= magic_packet.out_AT4 next_magic_packet.in0_AT4))
(assert (= magic_packet.out_AT4 magic_packet_eq.in0_AT4))
(assert (= magic_packet.in_AT4 next_magic_packet.out_AT4))
(assert (= magic_packet.clk_AT4 self.clk_AT4))
(assert (= f.wrPtrRst.sel_AT4 self.rst_AT4))
(assert (= f.wrPtrRst.in1_AT4 f.zero.out_AT4))
(assert (= f.wrPtrEq7.out_AT4 f.entryEn7.in1_AT4))
(assert (= f.wrPtrEq7.in0_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.wrPtrEq6.out_AT4 f.entryEn6.in1_AT4))
(assert (= f.wrPtrEq6.in0_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.wrPtrEq5.out_AT4 f.entryEn5.in1_AT4))
(assert (= f.wrPtrEq5.in0_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.wrPtrEq4.out_AT4 f.entryEn4.in1_AT4))
(assert (= f.wrPtrEq4.in0_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.wrPtrEq3.out_AT4 f.entryEn3.in1_AT4))
(assert (= f.wrPtrEq3.in0_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.wrPtrEq2.out_AT4 f.entryEn2.in1_AT4))
(assert (= f.wrPtrEq2.in0_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.wrPtrEq1.out_AT4 f.entryEn1.in1_AT4))
(assert (= f.wrPtrEq1.in0_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.wrPtrEq0.out_AT4 f.entryEn0.in1_AT4))
(assert (= f.wrPtrEq0.in0_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.wrPtrEn.sel_AT4 self.push_AT4))
(assert (= f.wrPtrEn.out_AT4 f.wrPtrRst.in0_AT4))
(assert (= f.wrPtrEn.in1_AT4 f.wrPtrp1.out_AT4))
(assert (= f.wrPtr.out_AT4 f.wrPtrp1.in1_AT4))
(assert (= f.wrPtr.out_AT4 f.wrPtrSlice.in_AT4))
(assert (= f.wrPtr.out_AT4 f.wrPtrEn.in0_AT4))
(assert (= f.wrPtr.in_AT4 f.wrPtrRst.out_AT4))
(assert (= f.wrPtr.clk_AT4 self.clk_AT4))
(assert (= f.rdPtrRst.sel_AT4 self.rst_AT4))
(assert (= f.rdPtrRst.in1_AT4 f.zero.out_AT4))
(assert (= f.rdPtrEq_eq_7.out_AT4 f.data_out_mux.repl_7.concat_1.in1_AT4))
(assert (= f.rdPtrEq_eq_7.out_AT4 f.data_out_mux.repl_7.concat_1.in0_AT4))
(assert (= f.rdPtrEq_eq_7.in0_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.rdPtrEq_eq_6.out_AT4 f.data_out_mux.repl_6.concat_1.in1_AT4))
(assert (= f.rdPtrEq_eq_6.out_AT4 f.data_out_mux.repl_6.concat_1.in0_AT4))
(assert (= f.rdPtrEq_eq_6.in0_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.rdPtrEq_eq_5.out_AT4 f.data_out_mux.repl_5.concat_1.in1_AT4))
(assert (= f.rdPtrEq_eq_5.out_AT4 f.data_out_mux.repl_5.concat_1.in0_AT4))
(assert (= f.rdPtrEq_eq_5.in0_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.rdPtrEq_eq_4.out_AT4 f.data_out_mux.repl_4.concat_1.in1_AT4))
(assert (= f.rdPtrEq_eq_4.out_AT4 f.data_out_mux.repl_4.concat_1.in0_AT4))
(assert (= f.rdPtrEq_eq_4.in0_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.rdPtrEq_eq_3.out_AT4 f.data_out_mux.repl_3.concat_1.in1_AT4))
(assert (= f.rdPtrEq_eq_3.out_AT4 f.data_out_mux.repl_3.concat_1.in0_AT4))
(assert (= f.rdPtrEq_eq_3.in0_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.rdPtrEq_eq_2.out_AT4 f.data_out_mux.repl_2.concat_1.in1_AT4))
(assert (= f.rdPtrEq_eq_2.out_AT4 f.data_out_mux.repl_2.concat_1.in0_AT4))
(assert (= f.rdPtrEq_eq_2.in0_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.rdPtrEq_eq_1.out_AT4 f.data_out_mux.repl_1.concat_1.in1_AT4))
(assert (= f.rdPtrEq_eq_1.out_AT4 f.data_out_mux.repl_1.concat_1.in0_AT4))
(assert (= f.rdPtrEq_eq_1.in0_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.rdPtrEq_eq_0.out_AT4 f.data_out_mux.repl_0.concat_1.in1_AT4))
(assert (= f.rdPtrEq_eq_0.out_AT4 f.data_out_mux.repl_0.concat_1.in0_AT4))
(assert (= f.rdPtrEq_eq_0.in0_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.rdPtrEn.sel_AT4 self.pop_AT4))
(assert (= f.rdPtrEn.out_AT4 f.rdPtrRst.in0_AT4))
(assert (= f.rdPtrEn.in1_AT4 f.rdPtrp1.out_AT4))
(assert (= f.rdPtr.out_AT4 f.rdPtrp1.in1_AT4))
(assert (= f.rdPtr.out_AT4 f.rdPtrSlice.in_AT4))
(assert (= f.rdPtr.out_AT4 f.rdPtrEn.in0_AT4))
(assert (= f.rdPtr.in_AT4 f.rdPtrRst.out_AT4))
(assert (= f.rdPtr.clk_AT4 self.clk_AT4))
(assert (= f.one.out_AT4 f.wrPtrp1.in0_AT4))
(assert (= f.one.out_AT4 f.rdPtrp1.in0_AT4))
(assert (= f.fullEq_2.out_AT4 f.fullCalc.in1_AT4))
(assert (= f.fullEq_2.in1_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.fullEq_2.in0_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.fullEq_1.out_AT4 f.notfullEq_1.in_AT4))
(assert (= f.fullCalc.in0_AT4 f.notfullEq_1.out_AT4))
(assert (= f.entry7.reg0.clk_AT4 self.clk_AT4))
(assert (= f.entry7.enMux.sel_AT4 f.entryEn7.out_AT4))
(assert (= f.entry7.enMux.out_AT4 f.entry7.reg0.in_AT4))
(assert (= f.entry7.enMux.in1_AT4 self.data_in_AT4))
(assert (= f.entry7.enMux.in0_AT4 f.entry7.reg0.out_AT4))
(assert (= f.entry6.reg0.clk_AT4 self.clk_AT4))
(assert (= f.entry6.enMux.sel_AT4 f.entryEn6.out_AT4))
(assert (= f.entry6.enMux.out_AT4 f.entry6.reg0.in_AT4))
(assert (= f.entry6.enMux.in1_AT4 self.data_in_AT4))
(assert (= f.entry6.enMux.in0_AT4 f.entry6.reg0.out_AT4))
(assert (= f.entry5.reg0.clk_AT4 self.clk_AT4))
(assert (= f.entry5.enMux.sel_AT4 f.entryEn5.out_AT4))
(assert (= f.entry5.enMux.out_AT4 f.entry5.reg0.in_AT4))
(assert (= f.entry5.enMux.in1_AT4 self.data_in_AT4))
(assert (= f.entry5.enMux.in0_AT4 f.entry5.reg0.out_AT4))
(assert (= f.entry4.reg0.clk_AT4 self.clk_AT4))
(assert (= f.entry4.enMux.sel_AT4 f.entryEn4.out_AT4))
(assert (= f.entry4.enMux.out_AT4 f.entry4.reg0.in_AT4))
(assert (= f.entry4.enMux.in1_AT4 self.data_in_AT4))
(assert (= f.entry4.enMux.in0_AT4 f.entry4.reg0.out_AT4))
(assert (= f.entry3.reg0.clk_AT4 self.clk_AT4))
(assert (= f.entry3.enMux.sel_AT4 f.entryEn3.out_AT4))
(assert (= f.entry3.enMux.out_AT4 f.entry3.reg0.in_AT4))
(assert (= f.entry3.enMux.in1_AT4 self.data_in_AT4))
(assert (= f.entry3.enMux.in0_AT4 f.entry3.reg0.out_AT4))
(assert (= f.entry2.reg0.clk_AT4 self.clk_AT4))
(assert (= f.entry2.enMux.sel_AT4 f.entryEn2.out_AT4))
(assert (= f.entry2.enMux.out_AT4 f.entry2.reg0.in_AT4))
(assert (= f.entry2.enMux.in1_AT4 self.data_in_AT4))
(assert (= f.entry2.enMux.in0_AT4 f.entry2.reg0.out_AT4))
(assert (= f.entry1.reg0.clk_AT4 self.clk_AT4))
(assert (= f.entry1.enMux.sel_AT4 f.entryEn1.out_AT4))
(assert (= f.entry1.enMux.out_AT4 f.entry1.reg0.in_AT4))
(assert (= f.entry1.enMux.in1_AT4 self.data_in_AT4))
(assert (= f.entry1.enMux.in0_AT4 f.entry1.reg0.out_AT4))
(assert (= f.entry0.reg0.clk_AT4 self.clk_AT4))
(assert (= f.entry0.enMux.sel_AT4 f.entryEn0.out_AT4))
(assert (= f.entry0.enMux.out_AT4 f.entry0.reg0.in_AT4))
(assert (= f.entry0.enMux.in1_AT4 self.data_in_AT4))
(assert (= f.entry0.enMux.in0_AT4 f.entry0.reg0.out_AT4))
(assert (= f.emptyEq.out_AT4 self.empty_AT4))
(assert (= f.emptyEq.in1_AT4 f.wrPtr.out_AT4))
(assert (= f.emptyEq.in0_AT4 f.rdPtr.out_AT4))
(assert (= f.data_out_mux.repl_7.concat_2.out_AT4 f.data_out_mux.repl_7.concat_4.in1_AT4))
(assert (= f.data_out_mux.repl_7.concat_2.out_AT4 f.data_out_mux.repl_7.concat_4.in0_AT4))
(assert (= f.data_out_mux.repl_7.concat_1.out_AT4 f.data_out_mux.repl_7.concat_2.in1_AT4))
(assert (= f.data_out_mux.repl_7.concat_1.out_AT4 f.data_out_mux.repl_7.concat_2.in0_AT4))
(assert (= f.data_out_mux.repl_6.concat_2.out_AT4 f.data_out_mux.repl_6.concat_4.in1_AT4))
(assert (= f.data_out_mux.repl_6.concat_2.out_AT4 f.data_out_mux.repl_6.concat_4.in0_AT4))
(assert (= f.data_out_mux.repl_6.concat_1.out_AT4 f.data_out_mux.repl_6.concat_2.in1_AT4))
(assert (= f.data_out_mux.repl_6.concat_1.out_AT4 f.data_out_mux.repl_6.concat_2.in0_AT4))
(assert (= f.data_out_mux.repl_5.concat_2.out_AT4 f.data_out_mux.repl_5.concat_4.in1_AT4))
(assert (= f.data_out_mux.repl_5.concat_2.out_AT4 f.data_out_mux.repl_5.concat_4.in0_AT4))
(assert (= f.data_out_mux.repl_5.concat_1.out_AT4 f.data_out_mux.repl_5.concat_2.in1_AT4))
(assert (= f.data_out_mux.repl_5.concat_1.out_AT4 f.data_out_mux.repl_5.concat_2.in0_AT4))
(assert (= f.data_out_mux.repl_4.concat_2.out_AT4 f.data_out_mux.repl_4.concat_4.in1_AT4))
(assert (= f.data_out_mux.repl_4.concat_2.out_AT4 f.data_out_mux.repl_4.concat_4.in0_AT4))
(assert (= f.data_out_mux.repl_4.concat_1.out_AT4 f.data_out_mux.repl_4.concat_2.in1_AT4))
(assert (= f.data_out_mux.repl_4.concat_1.out_AT4 f.data_out_mux.repl_4.concat_2.in0_AT4))
(assert (= f.data_out_mux.repl_3.concat_2.out_AT4 f.data_out_mux.repl_3.concat_4.in1_AT4))
(assert (= f.data_out_mux.repl_3.concat_2.out_AT4 f.data_out_mux.repl_3.concat_4.in0_AT4))
(assert (= f.data_out_mux.repl_3.concat_1.out_AT4 f.data_out_mux.repl_3.concat_2.in1_AT4))
(assert (= f.data_out_mux.repl_3.concat_1.out_AT4 f.data_out_mux.repl_3.concat_2.in0_AT4))
(assert (= f.data_out_mux.repl_2.concat_2.out_AT4 f.data_out_mux.repl_2.concat_4.in1_AT4))
(assert (= f.data_out_mux.repl_2.concat_2.out_AT4 f.data_out_mux.repl_2.concat_4.in0_AT4))
(assert (= f.data_out_mux.repl_2.concat_1.out_AT4 f.data_out_mux.repl_2.concat_2.in1_AT4))
(assert (= f.data_out_mux.repl_2.concat_1.out_AT4 f.data_out_mux.repl_2.concat_2.in0_AT4))
(assert (= f.data_out_mux.repl_1.concat_2.out_AT4 f.data_out_mux.repl_1.concat_4.in1_AT4))
(assert (= f.data_out_mux.repl_1.concat_2.out_AT4 f.data_out_mux.repl_1.concat_4.in0_AT4))
(assert (= f.data_out_mux.repl_1.concat_1.out_AT4 f.data_out_mux.repl_1.concat_2.in1_AT4))
(assert (= f.data_out_mux.repl_1.concat_1.out_AT4 f.data_out_mux.repl_1.concat_2.in0_AT4))
(assert (= f.data_out_mux.repl_0.concat_2.out_AT4 f.data_out_mux.repl_0.concat_4.in1_AT4))
(assert (= f.data_out_mux.repl_0.concat_2.out_AT4 f.data_out_mux.repl_0.concat_4.in0_AT4))
(assert (= f.data_out_mux.repl_0.concat_1.out_AT4 f.data_out_mux.repl_0.concat_2.in1_AT4))
(assert (= f.data_out_mux.repl_0.concat_1.out_AT4 f.data_out_mux.repl_0.concat_2.in0_AT4))
(assert (= f.data_out_mux.or_chain_7.out_AT4 self.data_out_AT4))
(assert (= f.data_out_mux.or_chain_7.out_AT4 magic_packet_eq.in1_AT4))
(assert (= f.data_out_mux.or_chain_6.out_AT4 f.data_out_mux.or_chain_7.in0_AT4))
(assert (= f.data_out_mux.or_chain_5.out_AT4 f.data_out_mux.or_chain_6.in0_AT4))
(assert (= f.data_out_mux.or_chain_4.out_AT4 f.data_out_mux.or_chain_5.in0_AT4))
(assert (= f.data_out_mux.or_chain_3.out_AT4 f.data_out_mux.or_chain_4.in0_AT4))
(assert (= f.data_out_mux.or_chain_2.out_AT4 f.data_out_mux.or_chain_3.in0_AT4))
(assert (= f.data_out_mux.or_chain_1.out_AT4 f.data_out_mux.or_chain_2.in0_AT4))
(assert (= f.data_out_mux.and_7.out_AT4 f.data_out_mux.or_chain_7.in1_AT4))
(assert (= f.data_out_mux.and_7.in1_AT4 f.entry7.reg0.out_AT4))
(assert (= f.data_out_mux.and_7.in0_AT4 f.data_out_mux.repl_7.concat_4.out_AT4))
(assert (= f.data_out_mux.and_6.out_AT4 f.data_out_mux.or_chain_6.in1_AT4))
(assert (= f.data_out_mux.and_6.in1_AT4 f.entry6.reg0.out_AT4))
(assert (= f.data_out_mux.and_6.in0_AT4 f.data_out_mux.repl_6.concat_4.out_AT4))
(assert (= f.data_out_mux.and_5.out_AT4 f.data_out_mux.or_chain_5.in1_AT4))
(assert (= f.data_out_mux.and_5.in1_AT4 f.entry5.reg0.out_AT4))
(assert (= f.data_out_mux.and_5.in0_AT4 f.data_out_mux.repl_5.concat_4.out_AT4))
(assert (= f.data_out_mux.and_4.out_AT4 f.data_out_mux.or_chain_4.in1_AT4))
(assert (= f.data_out_mux.and_4.in1_AT4 f.entry4.reg0.out_AT4))
(assert (= f.data_out_mux.and_4.in0_AT4 f.data_out_mux.repl_4.concat_4.out_AT4))
(assert (= f.data_out_mux.and_3.out_AT4 f.data_out_mux.or_chain_3.in1_AT4))
(assert (= f.data_out_mux.and_3.in1_AT4 f.entry3.reg0.out_AT4))
(assert (= f.data_out_mux.and_3.in0_AT4 f.data_out_mux.repl_3.concat_4.out_AT4))
(assert (= f.data_out_mux.and_2.out_AT4 f.data_out_mux.or_chain_2.in1_AT4))
(assert (= f.data_out_mux.and_2.in1_AT4 f.entry2.reg0.out_AT4))
(assert (= f.data_out_mux.and_2.in0_AT4 f.data_out_mux.repl_2.concat_4.out_AT4))
(assert (= f.data_out_mux.and_1.out_AT4 f.data_out_mux.or_chain_1.in1_AT4))
(assert (= f.data_out_mux.and_1.in1_AT4 f.entry1.reg0.out_AT4))
(assert (= f.data_out_mux.and_1.in0_AT4 f.data_out_mux.repl_1.concat_4.out_AT4))
(assert (= f.data_out_mux.and_0.out_AT4 f.data_out_mux.or_chain_1.in0_AT4))
(assert (= f.data_out_mux.and_0.in1_AT4 f.entry0.reg0.out_AT4))
(assert (= f.data_out_mux.and_0.in0_AT4 f.data_out_mux.repl_0.concat_4.out_AT4))
(assert (= f.const_7.out_AT4 f.wrPtrEq7.in1_AT4))
(assert (= f.const_7.out_AT4 f.rdPtrEq_eq_7.in1_AT4))
(assert (= f.const_6.out_AT4 f.wrPtrEq6.in1_AT4))
(assert (= f.const_6.out_AT4 f.rdPtrEq_eq_6.in1_AT4))
(assert (= f.const_5.out_AT4 f.wrPtrEq5.in1_AT4))
(assert (= f.const_5.out_AT4 f.rdPtrEq_eq_5.in1_AT4))
(assert (= f.const_4.out_AT4 f.wrPtrEq4.in1_AT4))
(assert (= f.const_4.out_AT4 f.rdPtrEq_eq_4.in1_AT4))
(assert (= f.const_3.out_AT4 f.wrPtrEq3.in1_AT4))
(assert (= f.const_3.out_AT4 f.rdPtrEq_eq_3.in1_AT4))
(assert (= f.const_2.out_AT4 f.wrPtrEq2.in1_AT4))
(assert (= f.const_2.out_AT4 f.rdPtrEq_eq_2.in1_AT4))
(assert (= f.const_1.out_AT4 f.wrPtrEq1.in1_AT4))
(assert (= f.const_1.out_AT4 f.rdPtrEq_eq_1.in1_AT4))
(assert (= f.const_0.out_AT4 f.wrPtrEq0.in1_AT4))
(assert (= f.const_0.out_AT4 f.rdPtrEq_eq_0.in1_AT4))
(assert (= en_or_sp.in1_AT4 start_and_push.out_AT4))
(assert (= en.out_AT4 not_en.in_AT4))
(assert (= en.out_AT4 en_or_sp.in0_AT4))
(assert (= en.in_AT4 en_or_sp.out_AT4))
(assert (= en.clk_AT4 self.clk_AT4))
(assert (= data_out_vld_and2.out_AT4 not_data_out_vld.in_AT4))
(assert (= data_out_vld_and1.out_AT4 data_out_vld_and2.in0_AT4))
(assert (= data_out_vld_and1.in0_AT4 en.out_AT4))
(assert (= cnt_gt_0.out_AT4 data_out_vld_and1.in1_AT4))
(assert (= cnt_gt_0.in1_AT4 zero.out_AT4))
(assert (= cnt_gt_0.in0_AT4 mpt.cnt.out_AT4))
(assert (= self.clk_AT4 #b0))
(assert (= zero.out_AT4 #b0000))
(assert (= (bvand start_and_push.in0_AT4 start_and_push.in1_AT4) start_and_push.out_AT4))
(assert (= (bvor prop_signal_or.in0_AT4 prop_signal_or.in1_AT4) prop_signal_or.out_AT4))
(assert (= (bvnot not_en.in_AT4) not_en.out_AT4))
(assert (= (bvnot not_data_out_vld.in_AT4) not_data_out_vld.out_AT4))
(assert (=> (= next_magic_packet.sel_AT4 #b1) (= next_magic_packet.in1_AT4 next_magic_packet.out_AT4)))
(assert (=> (= next_magic_packet.sel_AT4 #b0) (= next_magic_packet.in0_AT4 next_magic_packet.out_AT4)))
(assert (=> (not (= next_cnt_eq0.in0_AT4 next_cnt_eq0.in1_AT4)) (= next_cnt_eq0.out_AT4 #b0)))
(assert (=> (= next_cnt_eq0.in0_AT4 next_cnt_eq0.in1_AT4) (= next_cnt_eq0.out_AT4 #b1)))
(assert (= mpt.zero.out_AT4 #b0000))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT4 mpt.ssa_cnt_m1.in1_AT4) mpt.ssa_cnt_m1.out_AT4))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT4 mpt.ssa_cnt_gt_0.in0_AT4) (= mpt.ssa_cnt_gt_0.out_AT4 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT4 mpt.ssa_cnt_and2.in1_AT4) mpt.ssa_cnt_and2.out_AT4))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT4 mpt.ssa_cnt_and1.in1_AT4) mpt.ssa_cnt_and1.out_AT4))
(assert (=> (= mpt.ssa_cnt.sel_AT4 #b1) (= mpt.ssa_cnt.in1_AT4 mpt.ssa_cnt.out_AT4)))
(assert (=> (= mpt.ssa_cnt.sel_AT4 #b0) (= mpt.ssa_cnt.in0_AT4 mpt.ssa_cnt.out_AT4)))
(assert (= mpt.one.out_AT4 #b0001))
(assert (= (bvnot mpt.not_captured.in_AT4) mpt.not_captured.out_AT4))
(assert (= (bvand mpt.next_cnt_and1.in0_AT4 mpt.next_cnt_and1.in1_AT4) mpt.next_cnt_and1.out_AT4))
(assert (=> (= mpt.next_cnt.sel_AT4 #b1) (= mpt.next_cnt.in1_AT4 mpt.next_cnt.out_AT4)))
(assert (=> (= mpt.next_cnt.sel_AT4 #b0) (= mpt.next_cnt.in0_AT4 mpt.next_cnt.out_AT4)))
(assert (= mpt.depth.out_AT4 #b1000))
(assert (=> (= mpt.decr_mux.sel_AT4 #b1) (= mpt.decr_mux.in1_AT4 mpt.decr_mux.out_AT4)))
(assert (=> (= mpt.decr_mux.sel_AT4 #b0) (= mpt.decr_mux.in0_AT4 mpt.decr_mux.out_AT4)))
(assert (= (bvadd mpt.cnt_p1.in0_AT4 mpt.cnt_p1.in1_AT4) mpt.cnt_p1.out_AT4))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT4 mpt.cnt_lt_depth.in1_AT4) (= mpt.cnt_lt_depth.out_AT4 #b1)))
(assert (= (bvand mp_en.in0_AT4 mp_en.in1_AT4) mp_en.out_AT4))
(assert (=> (not (= magic_packet_eq.in0_AT4 magic_packet_eq.in1_AT4)) (= magic_packet_eq.out_AT4 #b0)))
(assert (=> (= magic_packet_eq.in0_AT4 magic_packet_eq.in1_AT4) (= magic_packet_eq.out_AT4 #b1)))
(assert (= f.zero.out_AT4 #b0000))
(assert (= (bvadd f.wrPtrp1.in0_AT4 f.wrPtrp1.in1_AT4) f.wrPtrp1.out_AT4))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT4) f.wrPtrSlice.out_AT4))
(assert (=> (= f.wrPtrRst.sel_AT4 #b1) (= f.wrPtrRst.in1_AT4 f.wrPtrRst.out_AT4)))
(assert (=> (= f.wrPtrRst.sel_AT4 #b0) (= f.wrPtrRst.in0_AT4 f.wrPtrRst.out_AT4)))
(assert (=> (not (= f.wrPtrEq7.in0_AT4 f.wrPtrEq7.in1_AT4)) (= f.wrPtrEq7.out_AT4 #b0)))
(assert (=> (= f.wrPtrEq7.in0_AT4 f.wrPtrEq7.in1_AT4) (= f.wrPtrEq7.out_AT4 #b1)))
(assert (=> (not (= f.wrPtrEq6.in0_AT4 f.wrPtrEq6.in1_AT4)) (= f.wrPtrEq6.out_AT4 #b0)))
(assert (=> (= f.wrPtrEq6.in0_AT4 f.wrPtrEq6.in1_AT4) (= f.wrPtrEq6.out_AT4 #b1)))
(assert (=> (not (= f.wrPtrEq5.in0_AT4 f.wrPtrEq5.in1_AT4)) (= f.wrPtrEq5.out_AT4 #b0)))
(assert (=> (= f.wrPtrEq5.in0_AT4 f.wrPtrEq5.in1_AT4) (= f.wrPtrEq5.out_AT4 #b1)))
(assert (=> (not (= f.wrPtrEq4.in0_AT4 f.wrPtrEq4.in1_AT4)) (= f.wrPtrEq4.out_AT4 #b0)))
(assert (=> (= f.wrPtrEq4.in0_AT4 f.wrPtrEq4.in1_AT4) (= f.wrPtrEq4.out_AT4 #b1)))
(assert (=> (not (= f.wrPtrEq3.in0_AT4 f.wrPtrEq3.in1_AT4)) (= f.wrPtrEq3.out_AT4 #b0)))
(assert (=> (= f.wrPtrEq3.in0_AT4 f.wrPtrEq3.in1_AT4) (= f.wrPtrEq3.out_AT4 #b1)))
(assert (=> (not (= f.wrPtrEq2.in0_AT4 f.wrPtrEq2.in1_AT4)) (= f.wrPtrEq2.out_AT4 #b0)))
(assert (=> (= f.wrPtrEq2.in0_AT4 f.wrPtrEq2.in1_AT4) (= f.wrPtrEq2.out_AT4 #b1)))
(assert (=> (not (= f.wrPtrEq1.in0_AT4 f.wrPtrEq1.in1_AT4)) (= f.wrPtrEq1.out_AT4 #b0)))
(assert (=> (= f.wrPtrEq1.in0_AT4 f.wrPtrEq1.in1_AT4) (= f.wrPtrEq1.out_AT4 #b1)))
(assert (=> (not (= f.wrPtrEq0.in0_AT4 f.wrPtrEq0.in1_AT4)) (= f.wrPtrEq0.out_AT4 #b0)))
(assert (=> (= f.wrPtrEq0.in0_AT4 f.wrPtrEq0.in1_AT4) (= f.wrPtrEq0.out_AT4 #b1)))
(assert (=> (= f.wrPtrEn.sel_AT4 #b1) (= f.wrPtrEn.in1_AT4 f.wrPtrEn.out_AT4)))
(assert (=> (= f.wrPtrEn.sel_AT4 #b0) (= f.wrPtrEn.in0_AT4 f.wrPtrEn.out_AT4)))
(assert (= (bvadd f.rdPtrp1.in0_AT4 f.rdPtrp1.in1_AT4) f.rdPtrp1.out_AT4))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT4) f.rdPtrSlice.out_AT4))
(assert (=> (= f.rdPtrRst.sel_AT4 #b1) (= f.rdPtrRst.in1_AT4 f.rdPtrRst.out_AT4)))
(assert (=> (= f.rdPtrRst.sel_AT4 #b0) (= f.rdPtrRst.in0_AT4 f.rdPtrRst.out_AT4)))
(assert (=> (not (= f.rdPtrEq_eq_7.in0_AT4 f.rdPtrEq_eq_7.in1_AT4)) (= f.rdPtrEq_eq_7.out_AT4 #b0)))
(assert (=> (= f.rdPtrEq_eq_7.in0_AT4 f.rdPtrEq_eq_7.in1_AT4) (= f.rdPtrEq_eq_7.out_AT4 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_6.in0_AT4 f.rdPtrEq_eq_6.in1_AT4)) (= f.rdPtrEq_eq_6.out_AT4 #b0)))
(assert (=> (= f.rdPtrEq_eq_6.in0_AT4 f.rdPtrEq_eq_6.in1_AT4) (= f.rdPtrEq_eq_6.out_AT4 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_5.in0_AT4 f.rdPtrEq_eq_5.in1_AT4)) (= f.rdPtrEq_eq_5.out_AT4 #b0)))
(assert (=> (= f.rdPtrEq_eq_5.in0_AT4 f.rdPtrEq_eq_5.in1_AT4) (= f.rdPtrEq_eq_5.out_AT4 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_4.in0_AT4 f.rdPtrEq_eq_4.in1_AT4)) (= f.rdPtrEq_eq_4.out_AT4 #b0)))
(assert (=> (= f.rdPtrEq_eq_4.in0_AT4 f.rdPtrEq_eq_4.in1_AT4) (= f.rdPtrEq_eq_4.out_AT4 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_3.in0_AT4 f.rdPtrEq_eq_3.in1_AT4)) (= f.rdPtrEq_eq_3.out_AT4 #b0)))
(assert (=> (= f.rdPtrEq_eq_3.in0_AT4 f.rdPtrEq_eq_3.in1_AT4) (= f.rdPtrEq_eq_3.out_AT4 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_2.in0_AT4 f.rdPtrEq_eq_2.in1_AT4)) (= f.rdPtrEq_eq_2.out_AT4 #b0)))
(assert (=> (= f.rdPtrEq_eq_2.in0_AT4 f.rdPtrEq_eq_2.in1_AT4) (= f.rdPtrEq_eq_2.out_AT4 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_1.in0_AT4 f.rdPtrEq_eq_1.in1_AT4)) (= f.rdPtrEq_eq_1.out_AT4 #b0)))
(assert (=> (= f.rdPtrEq_eq_1.in0_AT4 f.rdPtrEq_eq_1.in1_AT4) (= f.rdPtrEq_eq_1.out_AT4 #b1)))
(assert (=> (not (= f.rdPtrEq_eq_0.in0_AT4 f.rdPtrEq_eq_0.in1_AT4)) (= f.rdPtrEq_eq_0.out_AT4 #b0)))
(assert (=> (= f.rdPtrEq_eq_0.in0_AT4 f.rdPtrEq_eq_0.in1_AT4) (= f.rdPtrEq_eq_0.out_AT4 #b1)))
(assert (=> (= f.rdPtrEn.sel_AT4 #b1) (= f.rdPtrEn.in1_AT4 f.rdPtrEn.out_AT4)))
(assert (=> (= f.rdPtrEn.sel_AT4 #b0) (= f.rdPtrEn.in0_AT4 f.rdPtrEn.out_AT4)))
(assert (= f.one.out_AT4 #b0001))
(assert (= (bvnot f.notfullEq_1.in_AT4) f.notfullEq_1.out_AT4))
(assert (=> (not (= f.fullEq_2.in0_AT4 f.fullEq_2.in1_AT4)) (= f.fullEq_2.out_AT4 #b0)))
(assert (=> (= f.fullEq_2.in0_AT4 f.fullEq_2.in1_AT4) (= f.fullEq_2.out_AT4 #b1)))
(assert (=> (not (= f.fullEq_1.in0_AT4 f.fullEq_1.in1_AT4)) (= f.fullEq_1.out_AT4 #b0)))
(assert (=> (= f.fullEq_1.in0_AT4 f.fullEq_1.in1_AT4) (= f.fullEq_1.out_AT4 #b1)))
(assert (= (bvand f.fullCalc.in0_AT4 f.fullCalc.in1_AT4) f.fullCalc.out_AT4))
(assert (= (bvand f.entryEn7.in0_AT4 f.entryEn7.in1_AT4) f.entryEn7.out_AT4))
(assert (= (bvand f.entryEn6.in0_AT4 f.entryEn6.in1_AT4) f.entryEn6.out_AT4))
(assert (= (bvand f.entryEn5.in0_AT4 f.entryEn5.in1_AT4) f.entryEn5.out_AT4))
(assert (= (bvand f.entryEn4.in0_AT4 f.entryEn4.in1_AT4) f.entryEn4.out_AT4))
(assert (= (bvand f.entryEn3.in0_AT4 f.entryEn3.in1_AT4) f.entryEn3.out_AT4))
(assert (= (bvand f.entryEn2.in0_AT4 f.entryEn2.in1_AT4) f.entryEn2.out_AT4))
(assert (= (bvand f.entryEn1.in0_AT4 f.entryEn1.in1_AT4) f.entryEn1.out_AT4))
(assert (= (bvand f.entryEn0.in0_AT4 f.entryEn0.in1_AT4) f.entryEn0.out_AT4))
(assert (=> (= f.entry7.enMux.sel_AT4 #b1) (= f.entry7.enMux.in1_AT4 f.entry7.enMux.out_AT4)))
(assert (=> (= f.entry7.enMux.sel_AT4 #b0) (= f.entry7.enMux.in0_AT4 f.entry7.enMux.out_AT4)))
(assert (=> (= f.entry6.enMux.sel_AT4 #b1) (= f.entry6.enMux.in1_AT4 f.entry6.enMux.out_AT4)))
(assert (=> (= f.entry6.enMux.sel_AT4 #b0) (= f.entry6.enMux.in0_AT4 f.entry6.enMux.out_AT4)))
(assert (=> (= f.entry5.enMux.sel_AT4 #b1) (= f.entry5.enMux.in1_AT4 f.entry5.enMux.out_AT4)))
(assert (=> (= f.entry5.enMux.sel_AT4 #b0) (= f.entry5.enMux.in0_AT4 f.entry5.enMux.out_AT4)))
(assert (=> (= f.entry4.enMux.sel_AT4 #b1) (= f.entry4.enMux.in1_AT4 f.entry4.enMux.out_AT4)))
(assert (=> (= f.entry4.enMux.sel_AT4 #b0) (= f.entry4.enMux.in0_AT4 f.entry4.enMux.out_AT4)))
(assert (=> (= f.entry3.enMux.sel_AT4 #b1) (= f.entry3.enMux.in1_AT4 f.entry3.enMux.out_AT4)))
(assert (=> (= f.entry3.enMux.sel_AT4 #b0) (= f.entry3.enMux.in0_AT4 f.entry3.enMux.out_AT4)))
(assert (=> (= f.entry2.enMux.sel_AT4 #b1) (= f.entry2.enMux.in1_AT4 f.entry2.enMux.out_AT4)))
(assert (=> (= f.entry2.enMux.sel_AT4 #b0) (= f.entry2.enMux.in0_AT4 f.entry2.enMux.out_AT4)))
(assert (=> (= f.entry1.enMux.sel_AT4 #b1) (= f.entry1.enMux.in1_AT4 f.entry1.enMux.out_AT4)))
(assert (=> (= f.entry1.enMux.sel_AT4 #b0) (= f.entry1.enMux.in0_AT4 f.entry1.enMux.out_AT4)))
(assert (=> (= f.entry0.enMux.sel_AT4 #b1) (= f.entry0.enMux.in1_AT4 f.entry0.enMux.out_AT4)))
(assert (=> (= f.entry0.enMux.sel_AT4 #b0) (= f.entry0.enMux.in0_AT4 f.entry0.enMux.out_AT4)))
(assert (=> (not (= f.emptyEq.in0_AT4 f.emptyEq.in1_AT4)) (= f.emptyEq.out_AT4 #b0)))
(assert (=> (= f.emptyEq.in0_AT4 f.emptyEq.in1_AT4) (= f.emptyEq.out_AT4 #b1)))
(assert (= (concat f.data_out_mux.repl_7.concat_4.in0_AT4 f.data_out_mux.repl_7.concat_4.in1_AT4) f.data_out_mux.repl_7.concat_4.out_AT4))
(assert (= (concat f.data_out_mux.repl_7.concat_2.in0_AT4 f.data_out_mux.repl_7.concat_2.in1_AT4) f.data_out_mux.repl_7.concat_2.out_AT4))
(assert (= (concat f.data_out_mux.repl_7.concat_1.in0_AT4 f.data_out_mux.repl_7.concat_1.in1_AT4) f.data_out_mux.repl_7.concat_1.out_AT4))
(assert (= (concat f.data_out_mux.repl_6.concat_4.in0_AT4 f.data_out_mux.repl_6.concat_4.in1_AT4) f.data_out_mux.repl_6.concat_4.out_AT4))
(assert (= (concat f.data_out_mux.repl_6.concat_2.in0_AT4 f.data_out_mux.repl_6.concat_2.in1_AT4) f.data_out_mux.repl_6.concat_2.out_AT4))
(assert (= (concat f.data_out_mux.repl_6.concat_1.in0_AT4 f.data_out_mux.repl_6.concat_1.in1_AT4) f.data_out_mux.repl_6.concat_1.out_AT4))
(assert (= (concat f.data_out_mux.repl_5.concat_4.in0_AT4 f.data_out_mux.repl_5.concat_4.in1_AT4) f.data_out_mux.repl_5.concat_4.out_AT4))
(assert (= (concat f.data_out_mux.repl_5.concat_2.in0_AT4 f.data_out_mux.repl_5.concat_2.in1_AT4) f.data_out_mux.repl_5.concat_2.out_AT4))
(assert (= (concat f.data_out_mux.repl_5.concat_1.in0_AT4 f.data_out_mux.repl_5.concat_1.in1_AT4) f.data_out_mux.repl_5.concat_1.out_AT4))
(assert (= (concat f.data_out_mux.repl_4.concat_4.in0_AT4 f.data_out_mux.repl_4.concat_4.in1_AT4) f.data_out_mux.repl_4.concat_4.out_AT4))
(assert (= (concat f.data_out_mux.repl_4.concat_2.in0_AT4 f.data_out_mux.repl_4.concat_2.in1_AT4) f.data_out_mux.repl_4.concat_2.out_AT4))
(assert (= (concat f.data_out_mux.repl_4.concat_1.in0_AT4 f.data_out_mux.repl_4.concat_1.in1_AT4) f.data_out_mux.repl_4.concat_1.out_AT4))
(assert (= (concat f.data_out_mux.repl_3.concat_4.in0_AT4 f.data_out_mux.repl_3.concat_4.in1_AT4) f.data_out_mux.repl_3.concat_4.out_AT4))
(assert (= (concat f.data_out_mux.repl_3.concat_2.in0_AT4 f.data_out_mux.repl_3.concat_2.in1_AT4) f.data_out_mux.repl_3.concat_2.out_AT4))
(assert (= (concat f.data_out_mux.repl_3.concat_1.in0_AT4 f.data_out_mux.repl_3.concat_1.in1_AT4) f.data_out_mux.repl_3.concat_1.out_AT4))
(assert (= (concat f.data_out_mux.repl_2.concat_4.in0_AT4 f.data_out_mux.repl_2.concat_4.in1_AT4) f.data_out_mux.repl_2.concat_4.out_AT4))
(assert (= (concat f.data_out_mux.repl_2.concat_2.in0_AT4 f.data_out_mux.repl_2.concat_2.in1_AT4) f.data_out_mux.repl_2.concat_2.out_AT4))
(assert (= (concat f.data_out_mux.repl_2.concat_1.in0_AT4 f.data_out_mux.repl_2.concat_1.in1_AT4) f.data_out_mux.repl_2.concat_1.out_AT4))
(assert (= (concat f.data_out_mux.repl_1.concat_4.in0_AT4 f.data_out_mux.repl_1.concat_4.in1_AT4) f.data_out_mux.repl_1.concat_4.out_AT4))
(assert (= (concat f.data_out_mux.repl_1.concat_2.in0_AT4 f.data_out_mux.repl_1.concat_2.in1_AT4) f.data_out_mux.repl_1.concat_2.out_AT4))
(assert (= (concat f.data_out_mux.repl_1.concat_1.in0_AT4 f.data_out_mux.repl_1.concat_1.in1_AT4) f.data_out_mux.repl_1.concat_1.out_AT4))
(assert (= (concat f.data_out_mux.repl_0.concat_4.in0_AT4 f.data_out_mux.repl_0.concat_4.in1_AT4) f.data_out_mux.repl_0.concat_4.out_AT4))
(assert (= (concat f.data_out_mux.repl_0.concat_2.in0_AT4 f.data_out_mux.repl_0.concat_2.in1_AT4) f.data_out_mux.repl_0.concat_2.out_AT4))
(assert (= (concat f.data_out_mux.repl_0.concat_1.in0_AT4 f.data_out_mux.repl_0.concat_1.in1_AT4) f.data_out_mux.repl_0.concat_1.out_AT4))
(assert (= (bvor f.data_out_mux.or_chain_7.in0_AT4 f.data_out_mux.or_chain_7.in1_AT4) f.data_out_mux.or_chain_7.out_AT4))
(assert (= (bvor f.data_out_mux.or_chain_6.in0_AT4 f.data_out_mux.or_chain_6.in1_AT4) f.data_out_mux.or_chain_6.out_AT4))
(assert (= (bvor f.data_out_mux.or_chain_5.in0_AT4 f.data_out_mux.or_chain_5.in1_AT4) f.data_out_mux.or_chain_5.out_AT4))
(assert (= (bvor f.data_out_mux.or_chain_4.in0_AT4 f.data_out_mux.or_chain_4.in1_AT4) f.data_out_mux.or_chain_4.out_AT4))
(assert (= (bvor f.data_out_mux.or_chain_3.in0_AT4 f.data_out_mux.or_chain_3.in1_AT4) f.data_out_mux.or_chain_3.out_AT4))
(assert (= (bvor f.data_out_mux.or_chain_2.in0_AT4 f.data_out_mux.or_chain_2.in1_AT4) f.data_out_mux.or_chain_2.out_AT4))
(assert (= (bvor f.data_out_mux.or_chain_1.in0_AT4 f.data_out_mux.or_chain_1.in1_AT4) f.data_out_mux.or_chain_1.out_AT4))
(assert (= (bvand f.data_out_mux.and_7.in0_AT4 f.data_out_mux.and_7.in1_AT4) f.data_out_mux.and_7.out_AT4))
(assert (= (bvand f.data_out_mux.and_6.in0_AT4 f.data_out_mux.and_6.in1_AT4) f.data_out_mux.and_6.out_AT4))
(assert (= (bvand f.data_out_mux.and_5.in0_AT4 f.data_out_mux.and_5.in1_AT4) f.data_out_mux.and_5.out_AT4))
(assert (= (bvand f.data_out_mux.and_4.in0_AT4 f.data_out_mux.and_4.in1_AT4) f.data_out_mux.and_4.out_AT4))
(assert (= (bvand f.data_out_mux.and_3.in0_AT4 f.data_out_mux.and_3.in1_AT4) f.data_out_mux.and_3.out_AT4))
(assert (= (bvand f.data_out_mux.and_2.in0_AT4 f.data_out_mux.and_2.in1_AT4) f.data_out_mux.and_2.out_AT4))
(assert (= (bvand f.data_out_mux.and_1.in0_AT4 f.data_out_mux.and_1.in1_AT4) f.data_out_mux.and_1.out_AT4))
(assert (= (bvand f.data_out_mux.and_0.in0_AT4 f.data_out_mux.and_0.in1_AT4) f.data_out_mux.and_0.out_AT4))
(assert (= f.const_7.out_AT4 #b111))
(assert (= f.const_6.out_AT4 #b110))
(assert (= f.const_5.out_AT4 #b101))
(assert (= f.const_4.out_AT4 #b100))
(assert (= f.const_3.out_AT4 #b011))
(assert (= f.const_2.out_AT4 #b010))
(assert (= f.const_1.out_AT4 #b001))
(assert (= f.const_0.out_AT4 #b000))
(assert (= (bvor en_or_sp.in0_AT4 en_or_sp.in1_AT4) en_or_sp.out_AT4))
(assert (= (bvand data_out_vld_and2.in0_AT4 data_out_vld_and2.in1_AT4) data_out_vld_and2.out_AT4))
(assert (= (bvand data_out_vld_and1.in0_AT4 data_out_vld_and1.in1_AT4) data_out_vld_and1.out_AT4))
(assert (= (bvult cnt_gt_0.in1_AT4 cnt_gt_0.in0_AT4) (= cnt_gt_0.out_AT4 #b1)))
(assert (=> (= _-_state_id_-__AT3 #b10) (= _-_state_id_-__AT4 #b10)))
(assert (=> (= _-_state_id_-__AT3 #b01) (= _-_state_id_-__AT4 #b10)))
(assert (=> (= _-_state_id_-__AT3 #b00) (= _-_state_id_-__AT4 #b01)))
(assert (= mpt.cnt.in_AT3 mpt.cnt.out_AT4))
(assert (= magic_packet.in_AT3 magic_packet.out_AT4))
(assert (= magic_packet.init_AT3 magic_packet.init_AT4))
(assert (= f.wrPtr.in_AT3 f.wrPtr.out_AT4))
(assert (= f.rdPtr.in_AT3 f.rdPtr.out_AT4))
(assert (= f.entry7.reg0.in_AT3 f.entry7.reg0.out_AT4))
(assert (= f.entry6.reg0.in_AT3 f.entry6.reg0.out_AT4))
(assert (= f.entry5.reg0.in_AT3 f.entry5.reg0.out_AT4))
(assert (= f.entry4.reg0.in_AT3 f.entry4.reg0.out_AT4))
(assert (= f.entry3.reg0.in_AT3 f.entry3.reg0.out_AT4))
(assert (= f.entry2.reg0.in_AT3 f.entry2.reg0.out_AT4))
(assert (= f.entry1.reg0.in_AT3 f.entry1.reg0.out_AT4))
(assert (= f.entry0.reg0.in_AT3 f.entry0.reg0.out_AT4))
(assert (= en.init_AT3 en.init_AT4))
(assert (= en.in_AT3 en.out_AT4))
