(set-logic QF_ABV)
(declare-fun f.rdPtrSlice.in_AT0 () (_ BitVec 4))
(declare-fun start_and_push.out_AT0 () (_ BitVec 1))
(declare-fun self.clk_AT0 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT0 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT0 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT0 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT0 () (_ BitVec 1))
(declare-fun f.mem.clk_AT0 () (_ BitVec 1))
(declare-fun en.in_AT0 () (_ BitVec 1))
(declare-fun en.clk_AT0 () (_ BitVec 1))
(declare-fun not_en.in_AT0 () (_ BitVec 1))
(declare-fun magic_packet.init_AT0 () (_ BitVec 8))
(declare-fun en.init_AT0 () (_ BitVec 1))
(declare-fun self.pop_AT0 () (_ BitVec 1))
(declare-fun self.empty_AT0 () (_ BitVec 1))
(declare-fun self.push_AT0 () (_ BitVec 1))
(declare-fun self.full_AT0 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT0 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT0 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT0 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT0 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT0 () (_ BitVec 8))
(declare-fun next_magic_packet.sel_AT0 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT0 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT0 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT0 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT0 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT0 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT0 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT0 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT0 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT0 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT0 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT0 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT0 () (_ BitVec 1))
(declare-fun mpt.next_cnt.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT0 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT0 () (_ BitVec 4))
(declare-fun mp_en.out_AT0 () (_ BitVec 1))
(declare-fun mp_en.in1_AT0 () (_ BitVec 1))
(declare-fun mp_en.in0_AT0 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT0 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT0 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT0 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT0 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT0 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT0 () (_ BitVec 3))
(declare-fun f.mem.array_AT0 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun f.mem.rdata_AT0 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT0 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT0 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT0 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT0 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT0 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT0 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT0 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT0 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT0 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT0 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT0 () (_ BitVec 1))
(declare-fun _-_state_id1_-__AT0 () (_ BitVec 2))
(declare-fun reset_done_AT0 () (_ BitVec 1))
(declare-fun self.rst_AT0 () (_ BitVec 1))
(declare-fun en.out_AT0 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT0 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT0 () (_ BitVec 3))
(declare-fun f.fullEq_2.out_AT0 () (_ BitVec 1))
(declare-fun f.wrPtr.out_AT0 () (_ BitVec 4))
(declare-fun f.rdPtr.out_AT0 () (_ BitVec 4))
(declare-fun mpt.not_captured.in_AT0 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT0 () (_ BitVec 1))
(declare-fun self.start_AT0 () (_ BitVec 1))
(declare-fun self.prop_signal_AT0 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT0 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT0 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT0 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT0 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT0 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT0 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT0 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in0_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT0 () (_ BitVec 4))
(declare-fun not_en.out_AT0 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT0 () (_ BitVec 1))
(declare-fun magic_packet.out_AT0 () (_ BitVec 8))
(declare-fun magic_packet.in_AT0 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT0 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT0 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT0 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT0 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT0 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT0 () (_ BitVec 1))
(declare-fun self.data_in_AT0 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT0 () (_ BitVec 8))
(declare-fun f.mem.wen_AT0 () (_ BitVec 1))
(declare-fun self.data_out_AT0 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT0 () (_ BitVec 3))
(declare-fun f.rdPtrSlice.out_AT0 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT0 () (_ BitVec 4))
(declare-fun mpt.cnt.out_AT0 () (_ BitVec 4))

(assert (=> (= self.empty_AT0 #b1) (= self.pop_AT0 #b0)))
(assert (=> (= self.full_AT0 #b1) (= self.push_AT0 #b0)))
(assert (= magic_packet_eq.out_AT0 (bvcomp magic_packet_eq.in0_AT0 magic_packet_eq.in1_AT0)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT0 mpt.ssa_cnt_m1.in1_AT0) mpt.ssa_cnt_m1.out_AT0))
(assert (= next_magic_packet.out_AT0 (ite (= next_magic_packet.sel_AT0 #b0) next_magic_packet.in0_AT0 next_magic_packet.in1_AT0)))
(assert (= (bvadd f.rdPtrp1.in0_AT0 f.rdPtrp1.in1_AT0) f.rdPtrp1.out_AT0))
(assert (= (bvadd mpt.cnt_p1.in0_AT0 mpt.cnt_p1.in1_AT0) mpt.cnt_p1.out_AT0))
(assert (= f.rdPtrEn.out_AT0 (ite (= f.rdPtrEn.sel_AT0 #b0) f.rdPtrEn.in0_AT0 f.rdPtrEn.in1_AT0)))
(assert (= (bvult cnt_gt_0.in1_AT0 cnt_gt_0.in0_AT0) (= cnt_gt_0.out_AT0 #b1)))
(assert (= (bvor en_or_sp.in0_AT0 en_or_sp.in1_AT0) en_or_sp.out_AT0))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT0 mpt.cnt_lt_depth.in1_AT0) (= mpt.cnt_lt_depth.out_AT0 #b1)))
(assert (= (bvand f.fullCalc.in0_AT0 f.fullCalc.in1_AT0) f.fullCalc.out_AT0))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT0 mpt.ssa_cnt_and1.in1_AT0) mpt.ssa_cnt_and1.out_AT0))
(assert (= mpt.next_cnt.out_AT0 (ite (= mpt.next_cnt.sel_AT0 #b0) mpt.next_cnt.in0_AT0 mpt.next_cnt.in1_AT0)))
(assert (= f.wrPtrRst.out_AT0 (ite (= f.wrPtrRst.sel_AT0 #b0) f.wrPtrRst.in0_AT0 f.wrPtrRst.in1_AT0)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT0) f.wrPtrSlice.out_AT0))
(assert (= (bvand mp_en.in0_AT0 mp_en.in1_AT0) mp_en.out_AT0))
(assert (= (bvnot f.notfullEq_1.in_AT0) f.notfullEq_1.out_AT0))
(assert (= f.fullEq_1.out_AT0 (bvcomp f.fullEq_1.in0_AT0 f.fullEq_1.in1_AT0)))
(assert (= f.mem.rdata_AT0 (select f.mem.array_AT0 f.mem.raddr_AT0)))
(assert (= (bvand data_out_vld_and2.in0_AT0 data_out_vld_and2.in1_AT0) data_out_vld_and2.out_AT0))
(assert (= (bvnot not_data_out_vld.in_AT0) not_data_out_vld.out_AT0))
(assert (= f.wrPtrEn.out_AT0 (ite (= f.wrPtrEn.sel_AT0 #b0) f.wrPtrEn.in0_AT0 f.wrPtrEn.in1_AT0)))
(assert (= mpt.ssa_cnt.out_AT0 (ite (= mpt.ssa_cnt.sel_AT0 #b0) mpt.ssa_cnt.in0_AT0 mpt.ssa_cnt.in1_AT0)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT0 f.wrPtrp1.in1_AT0) f.wrPtrp1.out_AT0))
(assert (= (bvand data_out_vld_and1.in0_AT0 data_out_vld_and1.in1_AT0) data_out_vld_and1.out_AT0))
(assert (= mpt.decr_mux.out_AT0 (ite (= mpt.decr_mux.sel_AT0 #b0) mpt.decr_mux.in0_AT0 mpt.decr_mux.in1_AT0)))
(assert (= f.emptyEq.out_AT0 (bvcomp f.emptyEq.in0_AT0 f.emptyEq.in1_AT0)))
(assert (bvule _-_state_id1_-__AT0 #b10))
(assert (=> (= _-_state_id1_-__AT0 #b10) (and (and true (= self.rst_AT0 #b0)) (= reset_done_AT0 #b1))))
(assert (=> (= _-_state_id1_-__AT0 #b01) (and (and (and (and (and true (= self.rst_AT0 #b1)) (= self.push_AT0 #b0)) (= self.pop_AT0 #b0)) (= reset_done_AT0 #b0)) (= en.out_AT0 #b0))))
(assert (=> (= _-_state_id1_-__AT0 #b00) (and (and (and (and (and true (= self.rst_AT0 #b1)) (= self.push_AT0 #b0)) (= self.pop_AT0 #b0)) (= reset_done_AT0 #b0)) (= en.out_AT0 #b0))))
(assert (= f.fullEq_2.out_AT0 (bvcomp f.fullEq_2.in0_AT0 f.fullEq_2.in1_AT0)))
(assert (= f.fullEq_1.in1_AT0 ((_ extract 3 3) f.wrPtr.out_AT0)))
(assert (= f.fullEq_1.in0_AT0 ((_ extract 3 3) f.rdPtr.out_AT0)))
(assert (= en.out_AT0 mpt.not_captured.in_AT0))
(assert (= self.start_AT0 start_and_push.in0_AT0))
(assert (= prop_signal_or.out_AT0 self.prop_signal_AT0))
(assert (= f.fullCalc.out_AT0 self.full_AT0))
(assert (= data_out_vld_and2.out_AT0 self.data_out_vld_AT0))
(assert (= mp_en.out_AT0 next_magic_packet.sel_AT0))
(assert (= data_out_vld_and2.in1_AT0 next_cnt_eq0.out_AT0))
(assert (= not_data_out_vld.out_AT0 prop_signal_or.in0_AT0))
(assert (= mpt.next_cnt_and1.in0_AT0 mpt.ssa_cnt_gt_0.out_AT0))
(assert (= mpt.ssa_cnt.sel_AT0 mpt.ssa_cnt_and2.out_AT0))
(assert (= mpt.ssa_cnt_and1.out_AT0 mpt.ssa_cnt_and2.in0_AT0))
(assert (= mpt.not_captured.out_AT0 mpt.ssa_cnt_and2.in1_AT0))
(assert (= mpt.ssa_cnt_gt_0.in1_AT0 #b0000))
(assert (= mpt.next_cnt.in1_AT0 #b0000))
(assert (= mpt.decr_mux.sel_AT0 mpt.next_cnt_and1.out_AT0))
(assert (= mpt.decr_mux.out_AT0 mpt.next_cnt.in0_AT0))
(assert (= mpt.ssa_cnt.out_AT0 mpt.ssa_cnt_m1.in0_AT0))
(assert (= mpt.ssa_cnt.out_AT0 mpt.ssa_cnt_gt_0.in0_AT0))
(assert (= mpt.decr_mux.in1_AT0 mpt.ssa_cnt_m1.out_AT0))
(assert (= mpt.decr_mux.in0_AT0 mpt.ssa_cnt.out_AT0))
(assert (= mpt.ssa_cnt_m1.in1_AT0 #b0001))
(assert (= mpt.cnt_p1.out_AT0 mpt.ssa_cnt.in1_AT0))
(assert (= mpt.cnt_p1.in1_AT0 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT0 mpt.ssa_cnt_and1.in0_AT0))
(assert (= mpt.cnt_lt_depth.in1_AT0 #b1000))
(assert (= mpt.next_cnt.out_AT0 next_cnt_eq0.in0_AT0))
(assert (= mpt.cnt.in_AT0 mpt.next_cnt.out_AT0))
(assert (= mp_en.in1_AT0 not_en.out_AT0))
(assert (= magic_packet_eq.out_AT0 prop_signal_or.in1_AT0))
(assert (= magic_packet.out_AT0 next_magic_packet.in0_AT0))
(assert (= magic_packet.out_AT0 magic_packet_eq.in0_AT0))
(assert (= magic_packet.in_AT0 next_magic_packet.out_AT0))
(assert (= f.wrPtrEn.in1_AT0 f.wrPtrp1.out_AT0))
(assert (= f.wrPtrEn.out_AT0 f.wrPtrRst.in0_AT0))
(assert (= f.wrPtr.in_AT0 f.wrPtrRst.out_AT0))
(assert (= mpt.next_cnt.sel_AT0 self.rst_AT0))
(assert (= f.wrPtrRst.sel_AT0 self.rst_AT0))
(assert (= f.wrPtrRst.in1_AT0 #b0000))
(assert (= f.rdPtrRst.sel_AT0 self.rst_AT0))
(assert (= mpt.next_cnt_and1.in1_AT0 self.pop_AT0))
(assert (= f.rdPtrRst.in1_AT0 #b0000))
(assert (= f.rdPtrEn.out_AT0 f.rdPtrRst.in0_AT0))
(assert (= f.rdPtrEn.in1_AT0 f.rdPtrp1.out_AT0))
(assert (= f.rdPtrEn.sel_AT0 self.pop_AT0))
(assert (= f.rdPtr.in_AT0 f.rdPtrRst.out_AT0))
(assert (= self.push_AT0 start_and_push.in1_AT0))
(assert (= mpt.ssa_cnt_and1.in1_AT0 self.push_AT0))
(assert (= f.wrPtrEn.sel_AT0 self.push_AT0))
(assert (= f.wrPtrp1.in0_AT0 #b0001))
(assert (= f.rdPtrp1.in0_AT0 #b0001))
(assert (= next_magic_packet.in1_AT0 self.data_in_AT0))
(assert (= f.mem.wdata_AT0 self.data_in_AT0))
(assert (= f.mem.wen_AT0 self.push_AT0))
(assert (= f.mem.rdata_AT0 self.data_out_AT0))
(assert (= f.mem.rdata_AT0 magic_packet_eq.in1_AT0))
(assert (= f.mem.waddr_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.fullCalc.in1_AT0 f.fullEq_2.out_AT0))
(assert (= f.mem.raddr_AT0 f.rdPtrSlice.out_AT0))
(assert (= f.fullEq_2.in0_AT0 f.rdPtrSlice.out_AT0))
(assert (= next_cnt_eq0.in1_AT0 #b0000))
(assert (= cnt_gt_0.in1_AT0 #b0000))
(assert (= mpt.cnt.out_AT0 mpt.cnt_p1.in0_AT0))
(assert (= mpt.cnt.out_AT0 mpt.cnt_lt_depth.in0_AT0))
(assert (= mpt.cnt.out_AT0 mpt.ssa_cnt.in0_AT0))
(assert (= cnt_gt_0.in0_AT0 mpt.cnt.out_AT0))
(assert (= cnt_gt_0.out_AT0 data_out_vld_and1.in1_AT0))
(assert (= f.fullEq_2.in1_AT0 f.wrPtrSlice.out_AT0))
(assert (= f.fullEq_1.out_AT0 f.notfullEq_1.in_AT0))
(assert (= f.fullCalc.in0_AT0 f.notfullEq_1.out_AT0))
(assert (= f.wrPtr.out_AT0 f.wrPtrSlice.in_AT0))
(assert (= f.wrPtr.out_AT0 f.wrPtrEn.in0_AT0))
(assert (= f.wrPtr.out_AT0 f.wrPtrp1.in1_AT0))
(assert (= f.emptyEq.out_AT0 self.empty_AT0))
(assert (= f.rdPtr.out_AT0 f.rdPtrp1.in1_AT0))
(assert (= f.rdPtr.out_AT0 f.rdPtrEn.in0_AT0))
(assert (= f.rdPtr.out_AT0 f.rdPtrSlice.in_AT0))
(assert (= f.emptyEq.in1_AT0 f.wrPtr.out_AT0))
(assert (= mp_en.in0_AT0 start_and_push.out_AT0))
(assert (= en_or_sp.in1_AT0 start_and_push.out_AT0))
(assert (= f.emptyEq.in0_AT0 f.rdPtr.out_AT0))
(assert (= mpt.cnt.clk_AT0 self.clk_AT0))
(assert (= magic_packet.clk_AT0 self.clk_AT0))
(assert (= f.wrPtr.clk_AT0 self.clk_AT0))
(assert (= f.rdPtr.clk_AT0 self.clk_AT0))
(assert (= f.mem.clk_AT0 self.clk_AT0))
(assert (= en.in_AT0 en_or_sp.out_AT0))
(assert (= data_out_vld_and2.out_AT0 not_data_out_vld.in_AT0))
(assert (= en.clk_AT0 self.clk_AT0))
(assert (= data_out_vld_and1.out_AT0 data_out_vld_and2.in0_AT0))
(assert (= en.out_AT0 not_en.in_AT0))
(assert (= en.out_AT0 en_or_sp.in0_AT0))
(assert (= data_out_vld_and1.in0_AT0 en.out_AT0))
(assert (= (bvor prop_signal_or.in0_AT0 prop_signal_or.in1_AT0) prop_signal_or.out_AT0))
(assert (= (bvnot not_en.in_AT0) not_en.out_AT0))
(assert (= self.clk_AT0 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT0) f.rdPtrSlice.out_AT0))
(assert (= (bvnot mpt.not_captured.in_AT0) mpt.not_captured.out_AT0))
(assert (= (bvand mpt.next_cnt_and1.in0_AT0 mpt.next_cnt_and1.in1_AT0) mpt.next_cnt_and1.out_AT0))
(assert (= (bvand start_and_push.in0_AT0 start_and_push.in1_AT0) start_and_push.out_AT0))
(assert (= next_cnt_eq0.out_AT0 (bvcomp next_cnt_eq0.in0_AT0 next_cnt_eq0.in1_AT0)))
(assert (= f.rdPtrRst.out_AT0 (ite (= f.rdPtrRst.sel_AT0 #b0) f.rdPtrRst.in0_AT0 f.rdPtrRst.in1_AT0)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT0 mpt.ssa_cnt_gt_0.in0_AT0) (= mpt.ssa_cnt_gt_0.out_AT0 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT0 mpt.ssa_cnt_and2.in1_AT0) mpt.ssa_cnt_and2.out_AT0))
(assert (= magic_packet.out_AT0 magic_packet.init_AT0))
(assert (= f.rdPtr.out_AT0 #b0000))
(assert (= _-_state_id1_-__AT0 #b00))
(assert (= en.out_AT0 #b0))
(assert (= reset_done_AT0 #b0))
(assert (= self.pop_AT0 #b0))
(assert (= self.push_AT0 #b0))
(assert (= self.rst_AT0 #b1))
(assert (= en.out_AT0 en.init_AT0))
(assert (= mpt.cnt.out_AT0 #b0000))
(assert (= f.wrPtr.out_AT0 #b0000))
(push 1)

(assert (not (=> (= reset_done_AT0 #b1) (= self.prop_signal_AT0 #b1))))
(check-sat)

(pop 1)
(declare-fun f.fullEq_2.out_AT1 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT1 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT1 () (_ BitVec 1))
(declare-fun self.start_AT1 () (_ BitVec 1))
(declare-fun self.prop_signal_AT1 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT1 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT1 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT1 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT1 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT1 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT1 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT1 () (_ BitVec 4))
(declare-fun not_en.out_AT1 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT1 () (_ BitVec 1))
(declare-fun magic_packet.in_AT1 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT1 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT1 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT1 () (_ BitVec 1))
(declare-fun self.data_in_AT1 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT1 () (_ BitVec 8))
(declare-fun f.mem.wen_AT1 () (_ BitVec 1))
(declare-fun self.data_out_AT1 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT1 () (_ BitVec 3))
(declare-fun f.rdPtrSlice.out_AT1 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT1 () (_ BitVec 4))
(declare-fun start_and_push.out_AT1 () (_ BitVec 1))
(declare-fun self.clk_AT1 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT1 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT1 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT1 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT1 () (_ BitVec 1))
(declare-fun f.mem.clk_AT1 () (_ BitVec 1))
(declare-fun en.in_AT1 () (_ BitVec 1))
(declare-fun en.clk_AT1 () (_ BitVec 1))
(declare-fun not_en.in_AT1 () (_ BitVec 1))
(declare-fun f.mem.array_AT1 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun magic_packet.init_AT1 () (_ BitVec 8))
(declare-fun magic_packet.out_AT1 () (_ BitVec 8))
(declare-fun f.rdPtr.out_AT1 () (_ BitVec 4))
(declare-fun _-_state_id1_-__AT1 () (_ BitVec 2))
(declare-fun en.out_AT1 () (_ BitVec 1))
(declare-fun en.init_AT1 () (_ BitVec 1))
(declare-fun mpt.cnt.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtr.out_AT1 () (_ BitVec 4))
(declare-fun self.pop_AT1 () (_ BitVec 1))
(declare-fun self.empty_AT1 () (_ BitVec 1))
(declare-fun self.push_AT1 () (_ BitVec 1))
(declare-fun self.full_AT1 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT1 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT1 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT1 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT1 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT1 () (_ BitVec 8))
(declare-fun next_magic_packet.sel_AT1 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT1 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT1 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT1 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT1 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT1 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT1 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT1 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT1 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT1 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT1 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT1 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT1 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT1 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT1 () (_ BitVec 1))
(declare-fun mpt.next_cnt.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT1 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT1 () (_ BitVec 4))
(declare-fun mp_en.out_AT1 () (_ BitVec 1))
(declare-fun mp_en.in1_AT1 () (_ BitVec 1))
(declare-fun mp_en.in0_AT1 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT1 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT1 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT1 () (_ BitVec 3))
(declare-fun f.mem.rdata_AT1 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT1 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT1 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT1 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT1 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT1 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT1 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT1 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT1 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT1 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT1 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT1 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT1 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT1 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT1 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT1 () (_ BitVec 1))
(declare-fun reset_done_AT1 () (_ BitVec 1))
(declare-fun self.rst_AT1 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT1 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT1 () (_ BitVec 3))

(assert (=> (= self.empty_AT1 #b1) (= self.pop_AT1 #b0)))
(assert (=> (= self.full_AT1 #b1) (= self.push_AT1 #b0)))
(assert (= magic_packet_eq.out_AT1 (bvcomp magic_packet_eq.in0_AT1 magic_packet_eq.in1_AT1)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT1 mpt.ssa_cnt_m1.in1_AT1) mpt.ssa_cnt_m1.out_AT1))
(assert (= next_magic_packet.out_AT1 (ite (= next_magic_packet.sel_AT1 #b0) next_magic_packet.in0_AT1 next_magic_packet.in1_AT1)))
(assert (= (bvadd f.rdPtrp1.in0_AT1 f.rdPtrp1.in1_AT1) f.rdPtrp1.out_AT1))
(assert (= (bvadd mpt.cnt_p1.in0_AT1 mpt.cnt_p1.in1_AT1) mpt.cnt_p1.out_AT1))
(assert (= f.rdPtrEn.out_AT1 (ite (= f.rdPtrEn.sel_AT1 #b0) f.rdPtrEn.in0_AT1 f.rdPtrEn.in1_AT1)))
(assert (= (bvult cnt_gt_0.in1_AT1 cnt_gt_0.in0_AT1) (= cnt_gt_0.out_AT1 #b1)))
(assert (= (bvor en_or_sp.in0_AT1 en_or_sp.in1_AT1) en_or_sp.out_AT1))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT1 mpt.cnt_lt_depth.in1_AT1) (= mpt.cnt_lt_depth.out_AT1 #b1)))
(assert (= (bvand f.fullCalc.in0_AT1 f.fullCalc.in1_AT1) f.fullCalc.out_AT1))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT1 mpt.ssa_cnt_and1.in1_AT1) mpt.ssa_cnt_and1.out_AT1))
(assert (= mpt.next_cnt.out_AT1 (ite (= mpt.next_cnt.sel_AT1 #b0) mpt.next_cnt.in0_AT1 mpt.next_cnt.in1_AT1)))
(assert (= f.wrPtrRst.out_AT1 (ite (= f.wrPtrRst.sel_AT1 #b0) f.wrPtrRst.in0_AT1 f.wrPtrRst.in1_AT1)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT1) f.wrPtrSlice.out_AT1))
(assert (= (bvand mp_en.in0_AT1 mp_en.in1_AT1) mp_en.out_AT1))
(assert (= (bvnot f.notfullEq_1.in_AT1) f.notfullEq_1.out_AT1))
(assert (= f.fullEq_1.out_AT1 (bvcomp f.fullEq_1.in0_AT1 f.fullEq_1.in1_AT1)))
(assert (= f.mem.rdata_AT1 (select f.mem.array_AT1 f.mem.raddr_AT1)))
(assert (= (bvand data_out_vld_and2.in0_AT1 data_out_vld_and2.in1_AT1) data_out_vld_and2.out_AT1))
(assert (= (bvnot not_data_out_vld.in_AT1) not_data_out_vld.out_AT1))
(assert (= f.wrPtrEn.out_AT1 (ite (= f.wrPtrEn.sel_AT1 #b0) f.wrPtrEn.in0_AT1 f.wrPtrEn.in1_AT1)))
(assert (= mpt.ssa_cnt.out_AT1 (ite (= mpt.ssa_cnt.sel_AT1 #b0) mpt.ssa_cnt.in0_AT1 mpt.ssa_cnt.in1_AT1)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT1 f.wrPtrp1.in1_AT1) f.wrPtrp1.out_AT1))
(assert (= (bvand data_out_vld_and1.in0_AT1 data_out_vld_and1.in1_AT1) data_out_vld_and1.out_AT1))
(assert (= mpt.decr_mux.out_AT1 (ite (= mpt.decr_mux.sel_AT1 #b0) mpt.decr_mux.in0_AT1 mpt.decr_mux.in1_AT1)))
(assert (= f.emptyEq.out_AT1 (bvcomp f.emptyEq.in0_AT1 f.emptyEq.in1_AT1)))
(assert (bvule _-_state_id1_-__AT1 #b10))
(assert (=> (= _-_state_id1_-__AT1 #b10) (and (and true (= self.rst_AT1 #b0)) (= reset_done_AT1 #b1))))
(assert (=> (= _-_state_id1_-__AT1 #b01) (and (and (and (and (and true (= self.rst_AT1 #b1)) (= self.push_AT1 #b0)) (= self.pop_AT1 #b0)) (= reset_done_AT1 #b0)) (= en.out_AT1 #b0))))
(assert (=> (= _-_state_id1_-__AT1 #b00) (and (and (and (and (and true (= self.rst_AT1 #b1)) (= self.push_AT1 #b0)) (= self.pop_AT1 #b0)) (= reset_done_AT1 #b0)) (= en.out_AT1 #b0))))
(assert (= f.fullEq_2.out_AT1 (bvcomp f.fullEq_2.in0_AT1 f.fullEq_2.in1_AT1)))
(assert (= f.fullEq_1.in1_AT1 ((_ extract 3 3) f.wrPtr.out_AT1)))
(assert (= f.fullEq_1.in0_AT1 ((_ extract 3 3) f.rdPtr.out_AT1)))
(assert (= en.out_AT1 mpt.not_captured.in_AT1))
(assert (= self.start_AT1 start_and_push.in0_AT1))
(assert (= prop_signal_or.out_AT1 self.prop_signal_AT1))
(assert (= f.fullCalc.out_AT1 self.full_AT1))
(assert (= data_out_vld_and2.out_AT1 self.data_out_vld_AT1))
(assert (= mp_en.out_AT1 next_magic_packet.sel_AT1))
(assert (= data_out_vld_and2.in1_AT1 next_cnt_eq0.out_AT1))
(assert (= not_data_out_vld.out_AT1 prop_signal_or.in0_AT1))
(assert (= mpt.next_cnt_and1.in0_AT1 mpt.ssa_cnt_gt_0.out_AT1))
(assert (= mpt.ssa_cnt.sel_AT1 mpt.ssa_cnt_and2.out_AT1))
(assert (= mpt.ssa_cnt_and1.out_AT1 mpt.ssa_cnt_and2.in0_AT1))
(assert (= mpt.not_captured.out_AT1 mpt.ssa_cnt_and2.in1_AT1))
(assert (= mpt.ssa_cnt_gt_0.in1_AT1 #b0000))
(assert (= mpt.next_cnt.in1_AT1 #b0000))
(assert (= mpt.decr_mux.sel_AT1 mpt.next_cnt_and1.out_AT1))
(assert (= mpt.decr_mux.out_AT1 mpt.next_cnt.in0_AT1))
(assert (= mpt.ssa_cnt.out_AT1 mpt.ssa_cnt_m1.in0_AT1))
(assert (= mpt.ssa_cnt.out_AT1 mpt.ssa_cnt_gt_0.in0_AT1))
(assert (= mpt.decr_mux.in1_AT1 mpt.ssa_cnt_m1.out_AT1))
(assert (= mpt.decr_mux.in0_AT1 mpt.ssa_cnt.out_AT1))
(assert (= mpt.ssa_cnt_m1.in1_AT1 #b0001))
(assert (= mpt.cnt_p1.out_AT1 mpt.ssa_cnt.in1_AT1))
(assert (= mpt.cnt_p1.in1_AT1 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT1 mpt.ssa_cnt_and1.in0_AT1))
(assert (= mpt.cnt_lt_depth.in1_AT1 #b1000))
(assert (= mpt.next_cnt.out_AT1 next_cnt_eq0.in0_AT1))
(assert (= mpt.cnt.in_AT1 mpt.next_cnt.out_AT1))
(assert (= mp_en.in1_AT1 not_en.out_AT1))
(assert (= magic_packet_eq.out_AT1 prop_signal_or.in1_AT1))
(assert (= magic_packet.out_AT1 next_magic_packet.in0_AT1))
(assert (= magic_packet.out_AT1 magic_packet_eq.in0_AT1))
(assert (= magic_packet.in_AT1 next_magic_packet.out_AT1))
(assert (= f.wrPtrEn.in1_AT1 f.wrPtrp1.out_AT1))
(assert (= f.wrPtrEn.out_AT1 f.wrPtrRst.in0_AT1))
(assert (= f.wrPtr.in_AT1 f.wrPtrRst.out_AT1))
(assert (= mpt.next_cnt.sel_AT1 self.rst_AT1))
(assert (= f.wrPtrRst.sel_AT1 self.rst_AT1))
(assert (= f.wrPtrRst.in1_AT1 #b0000))
(assert (= f.rdPtrRst.sel_AT1 self.rst_AT1))
(assert (= mpt.next_cnt_and1.in1_AT1 self.pop_AT1))
(assert (= f.rdPtrRst.in1_AT1 #b0000))
(assert (= f.rdPtrEn.out_AT1 f.rdPtrRst.in0_AT1))
(assert (= f.rdPtrEn.in1_AT1 f.rdPtrp1.out_AT1))
(assert (= f.rdPtrEn.sel_AT1 self.pop_AT1))
(assert (= f.rdPtr.in_AT1 f.rdPtrRst.out_AT1))
(assert (= self.push_AT1 start_and_push.in1_AT1))
(assert (= mpt.ssa_cnt_and1.in1_AT1 self.push_AT1))
(assert (= f.wrPtrEn.sel_AT1 self.push_AT1))
(assert (= f.wrPtrp1.in0_AT1 #b0001))
(assert (= f.rdPtrp1.in0_AT1 #b0001))
(assert (= next_magic_packet.in1_AT1 self.data_in_AT1))
(assert (= f.mem.wdata_AT1 self.data_in_AT1))
(assert (= f.mem.wen_AT1 self.push_AT1))
(assert (= f.mem.rdata_AT1 self.data_out_AT1))
(assert (= f.mem.rdata_AT1 magic_packet_eq.in1_AT1))
(assert (= f.mem.waddr_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.fullCalc.in1_AT1 f.fullEq_2.out_AT1))
(assert (= f.mem.raddr_AT1 f.rdPtrSlice.out_AT1))
(assert (= f.fullEq_2.in0_AT1 f.rdPtrSlice.out_AT1))
(assert (= next_cnt_eq0.in1_AT1 #b0000))
(assert (= cnt_gt_0.in1_AT1 #b0000))
(assert (= mpt.cnt.out_AT1 mpt.cnt_p1.in0_AT1))
(assert (= mpt.cnt.out_AT1 mpt.cnt_lt_depth.in0_AT1))
(assert (= mpt.cnt.out_AT1 mpt.ssa_cnt.in0_AT1))
(assert (= cnt_gt_0.in0_AT1 mpt.cnt.out_AT1))
(assert (= cnt_gt_0.out_AT1 data_out_vld_and1.in1_AT1))
(assert (= f.fullEq_2.in1_AT1 f.wrPtrSlice.out_AT1))
(assert (= f.fullEq_1.out_AT1 f.notfullEq_1.in_AT1))
(assert (= f.fullCalc.in0_AT1 f.notfullEq_1.out_AT1))
(assert (= f.wrPtr.out_AT1 f.wrPtrSlice.in_AT1))
(assert (= f.wrPtr.out_AT1 f.wrPtrEn.in0_AT1))
(assert (= f.wrPtr.out_AT1 f.wrPtrp1.in1_AT1))
(assert (= f.emptyEq.out_AT1 self.empty_AT1))
(assert (= f.rdPtr.out_AT1 f.rdPtrp1.in1_AT1))
(assert (= f.rdPtr.out_AT1 f.rdPtrEn.in0_AT1))
(assert (= f.rdPtr.out_AT1 f.rdPtrSlice.in_AT1))
(assert (= f.emptyEq.in1_AT1 f.wrPtr.out_AT1))
(assert (= mp_en.in0_AT1 start_and_push.out_AT1))
(assert (= en_or_sp.in1_AT1 start_and_push.out_AT1))
(assert (= f.emptyEq.in0_AT1 f.rdPtr.out_AT1))
(assert (= mpt.cnt.clk_AT1 self.clk_AT1))
(assert (= magic_packet.clk_AT1 self.clk_AT1))
(assert (= f.wrPtr.clk_AT1 self.clk_AT1))
(assert (= f.rdPtr.clk_AT1 self.clk_AT1))
(assert (= f.mem.clk_AT1 self.clk_AT1))
(assert (= en.in_AT1 en_or_sp.out_AT1))
(assert (= data_out_vld_and2.out_AT1 not_data_out_vld.in_AT1))
(assert (= en.clk_AT1 self.clk_AT1))
(assert (= data_out_vld_and1.out_AT1 data_out_vld_and2.in0_AT1))
(assert (= en.out_AT1 not_en.in_AT1))
(assert (= en.out_AT1 en_or_sp.in0_AT1))
(assert (= data_out_vld_and1.in0_AT1 en.out_AT1))
(assert (= (bvor prop_signal_or.in0_AT1 prop_signal_or.in1_AT1) prop_signal_or.out_AT1))
(assert (= (bvnot not_en.in_AT1) not_en.out_AT1))
(assert (= self.clk_AT1 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT1) f.rdPtrSlice.out_AT1))
(assert (= (bvnot mpt.not_captured.in_AT1) mpt.not_captured.out_AT1))
(assert (= (bvand mpt.next_cnt_and1.in0_AT1 mpt.next_cnt_and1.in1_AT1) mpt.next_cnt_and1.out_AT1))
(assert (= (bvand start_and_push.in0_AT1 start_and_push.in1_AT1) start_and_push.out_AT1))
(assert (= next_cnt_eq0.out_AT1 (bvcomp next_cnt_eq0.in0_AT1 next_cnt_eq0.in1_AT1)))
(assert (= f.rdPtrRst.out_AT1 (ite (= f.rdPtrRst.sel_AT1 #b0) f.rdPtrRst.in0_AT1 f.rdPtrRst.in1_AT1)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT1 mpt.ssa_cnt_gt_0.in0_AT1) (= mpt.ssa_cnt_gt_0.out_AT1 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT1 mpt.ssa_cnt_and2.in1_AT1) mpt.ssa_cnt_and2.out_AT1))
(assert (= f.mem.array_AT1 (store f.mem.array_AT0 f.mem.waddr_AT0 (ite (= f.mem.wen_AT0 #b1) f.mem.wdata_AT0 (select f.mem.array_AT0 f.mem.waddr_AT0)))))
(assert (= magic_packet.init_AT0 magic_packet.init_AT1))
(assert (= magic_packet.out_AT1 magic_packet.in_AT0))
(assert (= f.rdPtr.out_AT1 f.rdPtr.in_AT0))
(assert (=> (= _-_state_id1_-__AT0 #b10) (= _-_state_id1_-__AT1 #b10)))
(assert (=> (= _-_state_id1_-__AT0 #b01) (= _-_state_id1_-__AT1 #b10)))
(assert (=> (= _-_state_id1_-__AT0 #b00) (= _-_state_id1_-__AT1 #b01)))
(assert (= en.out_AT1 en.in_AT0))
(assert (= en.init_AT0 en.init_AT1))
(assert (= mpt.cnt.out_AT1 mpt.cnt.in_AT0))
(assert (= f.wrPtr.out_AT1 f.wrPtr.in_AT0))
(push 1)

(assert (not (=> (= reset_done_AT1 #b1) (= self.prop_signal_AT1 #b1))))
(check-sat)

(pop 1)
(declare-fun mpt.ssa_cnt.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT2 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT2 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT2 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT2 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT2 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT2 () (_ BitVec 1))
(declare-fun reset_done_AT2 () (_ BitVec 1))
(declare-fun self.rst_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT2 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT2 () (_ BitVec 3))
(declare-fun f.fullEq_2.out_AT2 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT2 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT2 () (_ BitVec 1))
(declare-fun self.start_AT2 () (_ BitVec 1))
(declare-fun self.prop_signal_AT2 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT2 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT2 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT2 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT2 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT2 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT2 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT2 () (_ BitVec 4))
(declare-fun not_en.out_AT2 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT2 () (_ BitVec 1))
(declare-fun magic_packet.in_AT2 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT2 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT2 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT2 () (_ BitVec 1))
(declare-fun self.data_in_AT2 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT2 () (_ BitVec 8))
(declare-fun f.mem.wen_AT2 () (_ BitVec 1))
(declare-fun self.data_out_AT2 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT2 () (_ BitVec 3))
(declare-fun f.rdPtrSlice.out_AT2 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT2 () (_ BitVec 4))
(declare-fun start_and_push.out_AT2 () (_ BitVec 1))
(declare-fun self.clk_AT2 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT2 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT2 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT2 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT2 () (_ BitVec 1))
(declare-fun f.mem.clk_AT2 () (_ BitVec 1))
(declare-fun en.in_AT2 () (_ BitVec 1))
(declare-fun en.clk_AT2 () (_ BitVec 1))
(declare-fun not_en.in_AT2 () (_ BitVec 1))
(declare-fun f.mem.array_AT2 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun magic_packet.init_AT2 () (_ BitVec 8))
(declare-fun magic_packet.out_AT2 () (_ BitVec 8))
(declare-fun f.rdPtr.out_AT2 () (_ BitVec 4))
(declare-fun _-_state_id1_-__AT2 () (_ BitVec 2))
(declare-fun en.out_AT2 () (_ BitVec 1))
(declare-fun en.init_AT2 () (_ BitVec 1))
(declare-fun mpt.cnt.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtr.out_AT2 () (_ BitVec 4))
(declare-fun self.pop_AT2 () (_ BitVec 1))
(declare-fun self.empty_AT2 () (_ BitVec 1))
(declare-fun self.push_AT2 () (_ BitVec 1))
(declare-fun self.full_AT2 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT2 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT2 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT2 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT2 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT2 () (_ BitVec 8))
(declare-fun next_magic_packet.sel_AT2 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT2 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT2 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT2 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT2 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT2 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT2 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT2 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT2 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT2 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT2 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT2 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT2 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT2 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT2 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT2 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT2 () (_ BitVec 1))
(declare-fun mpt.next_cnt.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT2 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT2 () (_ BitVec 4))
(declare-fun mp_en.out_AT2 () (_ BitVec 1))
(declare-fun mp_en.in1_AT2 () (_ BitVec 1))
(declare-fun mp_en.in0_AT2 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT2 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT2 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT2 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT2 () (_ BitVec 3))
(declare-fun f.mem.rdata_AT2 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT2 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT2 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT2 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT2 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT2 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT2 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT2 () (_ BitVec 1))

(assert (=> (= self.empty_AT2 #b1) (= self.pop_AT2 #b0)))
(assert (=> (= self.full_AT2 #b1) (= self.push_AT2 #b0)))
(assert (= magic_packet_eq.out_AT2 (bvcomp magic_packet_eq.in0_AT2 magic_packet_eq.in1_AT2)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT2 mpt.ssa_cnt_m1.in1_AT2) mpt.ssa_cnt_m1.out_AT2))
(assert (= next_magic_packet.out_AT2 (ite (= next_magic_packet.sel_AT2 #b0) next_magic_packet.in0_AT2 next_magic_packet.in1_AT2)))
(assert (= (bvadd f.rdPtrp1.in0_AT2 f.rdPtrp1.in1_AT2) f.rdPtrp1.out_AT2))
(assert (= (bvadd mpt.cnt_p1.in0_AT2 mpt.cnt_p1.in1_AT2) mpt.cnt_p1.out_AT2))
(assert (= f.rdPtrEn.out_AT2 (ite (= f.rdPtrEn.sel_AT2 #b0) f.rdPtrEn.in0_AT2 f.rdPtrEn.in1_AT2)))
(assert (= (bvult cnt_gt_0.in1_AT2 cnt_gt_0.in0_AT2) (= cnt_gt_0.out_AT2 #b1)))
(assert (= (bvor en_or_sp.in0_AT2 en_or_sp.in1_AT2) en_or_sp.out_AT2))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT2 mpt.cnt_lt_depth.in1_AT2) (= mpt.cnt_lt_depth.out_AT2 #b1)))
(assert (= (bvand f.fullCalc.in0_AT2 f.fullCalc.in1_AT2) f.fullCalc.out_AT2))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT2 mpt.ssa_cnt_and1.in1_AT2) mpt.ssa_cnt_and1.out_AT2))
(assert (= mpt.next_cnt.out_AT2 (ite (= mpt.next_cnt.sel_AT2 #b0) mpt.next_cnt.in0_AT2 mpt.next_cnt.in1_AT2)))
(assert (= f.wrPtrRst.out_AT2 (ite (= f.wrPtrRst.sel_AT2 #b0) f.wrPtrRst.in0_AT2 f.wrPtrRst.in1_AT2)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT2) f.wrPtrSlice.out_AT2))
(assert (= (bvand mp_en.in0_AT2 mp_en.in1_AT2) mp_en.out_AT2))
(assert (= (bvnot f.notfullEq_1.in_AT2) f.notfullEq_1.out_AT2))
(assert (= f.fullEq_1.out_AT2 (bvcomp f.fullEq_1.in0_AT2 f.fullEq_1.in1_AT2)))
(assert (= f.mem.rdata_AT2 (select f.mem.array_AT2 f.mem.raddr_AT2)))
(assert (= (bvand data_out_vld_and2.in0_AT2 data_out_vld_and2.in1_AT2) data_out_vld_and2.out_AT2))
(assert (= (bvnot not_data_out_vld.in_AT2) not_data_out_vld.out_AT2))
(assert (= f.wrPtrEn.out_AT2 (ite (= f.wrPtrEn.sel_AT2 #b0) f.wrPtrEn.in0_AT2 f.wrPtrEn.in1_AT2)))
(assert (= mpt.ssa_cnt.out_AT2 (ite (= mpt.ssa_cnt.sel_AT2 #b0) mpt.ssa_cnt.in0_AT2 mpt.ssa_cnt.in1_AT2)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT2 f.wrPtrp1.in1_AT2) f.wrPtrp1.out_AT2))
(assert (= (bvand data_out_vld_and1.in0_AT2 data_out_vld_and1.in1_AT2) data_out_vld_and1.out_AT2))
(assert (= mpt.decr_mux.out_AT2 (ite (= mpt.decr_mux.sel_AT2 #b0) mpt.decr_mux.in0_AT2 mpt.decr_mux.in1_AT2)))
(assert (= f.emptyEq.out_AT2 (bvcomp f.emptyEq.in0_AT2 f.emptyEq.in1_AT2)))
(assert (bvule _-_state_id1_-__AT2 #b10))
(assert (=> (= _-_state_id1_-__AT2 #b10) (and (and true (= self.rst_AT2 #b0)) (= reset_done_AT2 #b1))))
(assert (=> (= _-_state_id1_-__AT2 #b01) (and (and (and (and (and true (= self.rst_AT2 #b1)) (= self.push_AT2 #b0)) (= self.pop_AT2 #b0)) (= reset_done_AT2 #b0)) (= en.out_AT2 #b0))))
(assert (=> (= _-_state_id1_-__AT2 #b00) (and (and (and (and (and true (= self.rst_AT2 #b1)) (= self.push_AT2 #b0)) (= self.pop_AT2 #b0)) (= reset_done_AT2 #b0)) (= en.out_AT2 #b0))))
(assert (= f.fullEq_2.out_AT2 (bvcomp f.fullEq_2.in0_AT2 f.fullEq_2.in1_AT2)))
(assert (= f.fullEq_1.in1_AT2 ((_ extract 3 3) f.wrPtr.out_AT2)))
(assert (= f.fullEq_1.in0_AT2 ((_ extract 3 3) f.rdPtr.out_AT2)))
(assert (= en.out_AT2 mpt.not_captured.in_AT2))
(assert (= self.start_AT2 start_and_push.in0_AT2))
(assert (= prop_signal_or.out_AT2 self.prop_signal_AT2))
(assert (= f.fullCalc.out_AT2 self.full_AT2))
(assert (= data_out_vld_and2.out_AT2 self.data_out_vld_AT2))
(assert (= mp_en.out_AT2 next_magic_packet.sel_AT2))
(assert (= data_out_vld_and2.in1_AT2 next_cnt_eq0.out_AT2))
(assert (= not_data_out_vld.out_AT2 prop_signal_or.in0_AT2))
(assert (= mpt.next_cnt_and1.in0_AT2 mpt.ssa_cnt_gt_0.out_AT2))
(assert (= mpt.ssa_cnt.sel_AT2 mpt.ssa_cnt_and2.out_AT2))
(assert (= mpt.ssa_cnt_and1.out_AT2 mpt.ssa_cnt_and2.in0_AT2))
(assert (= mpt.not_captured.out_AT2 mpt.ssa_cnt_and2.in1_AT2))
(assert (= mpt.ssa_cnt_gt_0.in1_AT2 #b0000))
(assert (= mpt.next_cnt.in1_AT2 #b0000))
(assert (= mpt.decr_mux.sel_AT2 mpt.next_cnt_and1.out_AT2))
(assert (= mpt.decr_mux.out_AT2 mpt.next_cnt.in0_AT2))
(assert (= mpt.ssa_cnt.out_AT2 mpt.ssa_cnt_m1.in0_AT2))
(assert (= mpt.ssa_cnt.out_AT2 mpt.ssa_cnt_gt_0.in0_AT2))
(assert (= mpt.decr_mux.in1_AT2 mpt.ssa_cnt_m1.out_AT2))
(assert (= mpt.decr_mux.in0_AT2 mpt.ssa_cnt.out_AT2))
(assert (= mpt.ssa_cnt_m1.in1_AT2 #b0001))
(assert (= mpt.cnt_p1.out_AT2 mpt.ssa_cnt.in1_AT2))
(assert (= mpt.cnt_p1.in1_AT2 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT2 mpt.ssa_cnt_and1.in0_AT2))
(assert (= mpt.cnt_lt_depth.in1_AT2 #b1000))
(assert (= mpt.next_cnt.out_AT2 next_cnt_eq0.in0_AT2))
(assert (= mpt.cnt.in_AT2 mpt.next_cnt.out_AT2))
(assert (= mp_en.in1_AT2 not_en.out_AT2))
(assert (= magic_packet_eq.out_AT2 prop_signal_or.in1_AT2))
(assert (= magic_packet.out_AT2 next_magic_packet.in0_AT2))
(assert (= magic_packet.out_AT2 magic_packet_eq.in0_AT2))
(assert (= magic_packet.in_AT2 next_magic_packet.out_AT2))
(assert (= f.wrPtrEn.in1_AT2 f.wrPtrp1.out_AT2))
(assert (= f.wrPtrEn.out_AT2 f.wrPtrRst.in0_AT2))
(assert (= f.wrPtr.in_AT2 f.wrPtrRst.out_AT2))
(assert (= mpt.next_cnt.sel_AT2 self.rst_AT2))
(assert (= f.wrPtrRst.sel_AT2 self.rst_AT2))
(assert (= f.wrPtrRst.in1_AT2 #b0000))
(assert (= f.rdPtrRst.sel_AT2 self.rst_AT2))
(assert (= mpt.next_cnt_and1.in1_AT2 self.pop_AT2))
(assert (= f.rdPtrRst.in1_AT2 #b0000))
(assert (= f.rdPtrEn.out_AT2 f.rdPtrRst.in0_AT2))
(assert (= f.rdPtrEn.in1_AT2 f.rdPtrp1.out_AT2))
(assert (= f.rdPtrEn.sel_AT2 self.pop_AT2))
(assert (= f.rdPtr.in_AT2 f.rdPtrRst.out_AT2))
(assert (= self.push_AT2 start_and_push.in1_AT2))
(assert (= mpt.ssa_cnt_and1.in1_AT2 self.push_AT2))
(assert (= f.wrPtrEn.sel_AT2 self.push_AT2))
(assert (= f.wrPtrp1.in0_AT2 #b0001))
(assert (= f.rdPtrp1.in0_AT2 #b0001))
(assert (= next_magic_packet.in1_AT2 self.data_in_AT2))
(assert (= f.mem.wdata_AT2 self.data_in_AT2))
(assert (= f.mem.wen_AT2 self.push_AT2))
(assert (= f.mem.rdata_AT2 self.data_out_AT2))
(assert (= f.mem.rdata_AT2 magic_packet_eq.in1_AT2))
(assert (= f.mem.waddr_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.fullCalc.in1_AT2 f.fullEq_2.out_AT2))
(assert (= f.mem.raddr_AT2 f.rdPtrSlice.out_AT2))
(assert (= f.fullEq_2.in0_AT2 f.rdPtrSlice.out_AT2))
(assert (= next_cnt_eq0.in1_AT2 #b0000))
(assert (= cnt_gt_0.in1_AT2 #b0000))
(assert (= mpt.cnt.out_AT2 mpt.cnt_p1.in0_AT2))
(assert (= mpt.cnt.out_AT2 mpt.cnt_lt_depth.in0_AT2))
(assert (= mpt.cnt.out_AT2 mpt.ssa_cnt.in0_AT2))
(assert (= cnt_gt_0.in0_AT2 mpt.cnt.out_AT2))
(assert (= cnt_gt_0.out_AT2 data_out_vld_and1.in1_AT2))
(assert (= f.fullEq_2.in1_AT2 f.wrPtrSlice.out_AT2))
(assert (= f.fullEq_1.out_AT2 f.notfullEq_1.in_AT2))
(assert (= f.fullCalc.in0_AT2 f.notfullEq_1.out_AT2))
(assert (= f.wrPtr.out_AT2 f.wrPtrSlice.in_AT2))
(assert (= f.wrPtr.out_AT2 f.wrPtrEn.in0_AT2))
(assert (= f.wrPtr.out_AT2 f.wrPtrp1.in1_AT2))
(assert (= f.emptyEq.out_AT2 self.empty_AT2))
(assert (= f.rdPtr.out_AT2 f.rdPtrp1.in1_AT2))
(assert (= f.rdPtr.out_AT2 f.rdPtrEn.in0_AT2))
(assert (= f.rdPtr.out_AT2 f.rdPtrSlice.in_AT2))
(assert (= f.emptyEq.in1_AT2 f.wrPtr.out_AT2))
(assert (= mp_en.in0_AT2 start_and_push.out_AT2))
(assert (= en_or_sp.in1_AT2 start_and_push.out_AT2))
(assert (= f.emptyEq.in0_AT2 f.rdPtr.out_AT2))
(assert (= mpt.cnt.clk_AT2 self.clk_AT2))
(assert (= magic_packet.clk_AT2 self.clk_AT2))
(assert (= f.wrPtr.clk_AT2 self.clk_AT2))
(assert (= f.rdPtr.clk_AT2 self.clk_AT2))
(assert (= f.mem.clk_AT2 self.clk_AT2))
(assert (= en.in_AT2 en_or_sp.out_AT2))
(assert (= data_out_vld_and2.out_AT2 not_data_out_vld.in_AT2))
(assert (= en.clk_AT2 self.clk_AT2))
(assert (= data_out_vld_and1.out_AT2 data_out_vld_and2.in0_AT2))
(assert (= en.out_AT2 not_en.in_AT2))
(assert (= en.out_AT2 en_or_sp.in0_AT2))
(assert (= data_out_vld_and1.in0_AT2 en.out_AT2))
(assert (= (bvor prop_signal_or.in0_AT2 prop_signal_or.in1_AT2) prop_signal_or.out_AT2))
(assert (= (bvnot not_en.in_AT2) not_en.out_AT2))
(assert (= self.clk_AT2 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT2) f.rdPtrSlice.out_AT2))
(assert (= (bvnot mpt.not_captured.in_AT2) mpt.not_captured.out_AT2))
(assert (= (bvand mpt.next_cnt_and1.in0_AT2 mpt.next_cnt_and1.in1_AT2) mpt.next_cnt_and1.out_AT2))
(assert (= (bvand start_and_push.in0_AT2 start_and_push.in1_AT2) start_and_push.out_AT2))
(assert (= next_cnt_eq0.out_AT2 (bvcomp next_cnt_eq0.in0_AT2 next_cnt_eq0.in1_AT2)))
(assert (= f.rdPtrRst.out_AT2 (ite (= f.rdPtrRst.sel_AT2 #b0) f.rdPtrRst.in0_AT2 f.rdPtrRst.in1_AT2)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT2 mpt.ssa_cnt_gt_0.in0_AT2) (= mpt.ssa_cnt_gt_0.out_AT2 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT2 mpt.ssa_cnt_and2.in1_AT2) mpt.ssa_cnt_and2.out_AT2))
(assert (= f.mem.array_AT2 (store f.mem.array_AT1 f.mem.waddr_AT1 (ite (= f.mem.wen_AT1 #b1) f.mem.wdata_AT1 (select f.mem.array_AT1 f.mem.waddr_AT1)))))
(assert (= magic_packet.init_AT1 magic_packet.init_AT2))
(assert (= magic_packet.out_AT2 magic_packet.in_AT1))
(assert (= f.rdPtr.out_AT2 f.rdPtr.in_AT1))
(assert (=> (= _-_state_id1_-__AT1 #b10) (= _-_state_id1_-__AT2 #b10)))
(assert (=> (= _-_state_id1_-__AT1 #b01) (= _-_state_id1_-__AT2 #b10)))
(assert (=> (= _-_state_id1_-__AT1 #b00) (= _-_state_id1_-__AT2 #b01)))
(assert (= en.out_AT2 en.in_AT1))
(assert (= en.init_AT1 en.init_AT2))
(assert (= mpt.cnt.out_AT2 mpt.cnt.in_AT1))
(assert (= f.wrPtr.out_AT2 f.wrPtr.in_AT1))
(push 1)

(assert (not (=> (= reset_done_AT2 #b1) (= self.prop_signal_AT2 #b1))))
(check-sat)

(pop 1)
(declare-fun mpt.next_cnt.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT3 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT3 () (_ BitVec 4))
(declare-fun mp_en.out_AT3 () (_ BitVec 1))
(declare-fun mp_en.in1_AT3 () (_ BitVec 1))
(declare-fun mp_en.in0_AT3 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT3 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT3 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT3 () (_ BitVec 3))
(declare-fun f.mem.rdata_AT3 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT3 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT3 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT3 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT3 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT3 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT3 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT3 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT3 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT3 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT3 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT3 () (_ BitVec 1))
(declare-fun reset_done_AT3 () (_ BitVec 1))
(declare-fun self.rst_AT3 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT3 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT3 () (_ BitVec 3))
(declare-fun f.fullEq_2.out_AT3 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT3 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT3 () (_ BitVec 1))
(declare-fun self.start_AT3 () (_ BitVec 1))
(declare-fun self.prop_signal_AT3 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT3 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT3 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT3 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT3 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT3 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT3 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT3 () (_ BitVec 4))
(declare-fun not_en.out_AT3 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT3 () (_ BitVec 1))
(declare-fun magic_packet.in_AT3 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT3 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT3 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT3 () (_ BitVec 1))
(declare-fun self.data_in_AT3 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT3 () (_ BitVec 8))
(declare-fun f.mem.wen_AT3 () (_ BitVec 1))
(declare-fun self.data_out_AT3 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT3 () (_ BitVec 3))
(declare-fun f.rdPtrSlice.out_AT3 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT3 () (_ BitVec 4))
(declare-fun start_and_push.out_AT3 () (_ BitVec 1))
(declare-fun self.clk_AT3 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT3 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT3 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT3 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT3 () (_ BitVec 1))
(declare-fun f.mem.clk_AT3 () (_ BitVec 1))
(declare-fun en.in_AT3 () (_ BitVec 1))
(declare-fun en.clk_AT3 () (_ BitVec 1))
(declare-fun not_en.in_AT3 () (_ BitVec 1))
(declare-fun f.mem.array_AT3 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun magic_packet.init_AT3 () (_ BitVec 8))
(declare-fun magic_packet.out_AT3 () (_ BitVec 8))
(declare-fun f.rdPtr.out_AT3 () (_ BitVec 4))
(declare-fun _-_state_id1_-__AT3 () (_ BitVec 2))
(declare-fun en.out_AT3 () (_ BitVec 1))
(declare-fun en.init_AT3 () (_ BitVec 1))
(declare-fun mpt.cnt.out_AT3 () (_ BitVec 4))
(declare-fun f.wrPtr.out_AT3 () (_ BitVec 4))
(declare-fun self.pop_AT3 () (_ BitVec 1))
(declare-fun self.empty_AT3 () (_ BitVec 1))
(declare-fun self.push_AT3 () (_ BitVec 1))
(declare-fun self.full_AT3 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT3 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT3 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT3 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT3 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT3 () (_ BitVec 8))
(declare-fun next_magic_packet.sel_AT3 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT3 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT3 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT3 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT3 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT3 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT3 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT3 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT3 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT3 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT3 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT3 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT3 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT3 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT3 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT3 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT3 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT3 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT3 () (_ BitVec 1))

(assert (=> (= self.empty_AT3 #b1) (= self.pop_AT3 #b0)))
(assert (=> (= self.full_AT3 #b1) (= self.push_AT3 #b0)))
(assert (= magic_packet_eq.out_AT3 (bvcomp magic_packet_eq.in0_AT3 magic_packet_eq.in1_AT3)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT3 mpt.ssa_cnt_m1.in1_AT3) mpt.ssa_cnt_m1.out_AT3))
(assert (= next_magic_packet.out_AT3 (ite (= next_magic_packet.sel_AT3 #b0) next_magic_packet.in0_AT3 next_magic_packet.in1_AT3)))
(assert (= (bvadd f.rdPtrp1.in0_AT3 f.rdPtrp1.in1_AT3) f.rdPtrp1.out_AT3))
(assert (= (bvadd mpt.cnt_p1.in0_AT3 mpt.cnt_p1.in1_AT3) mpt.cnt_p1.out_AT3))
(assert (= f.rdPtrEn.out_AT3 (ite (= f.rdPtrEn.sel_AT3 #b0) f.rdPtrEn.in0_AT3 f.rdPtrEn.in1_AT3)))
(assert (= (bvult cnt_gt_0.in1_AT3 cnt_gt_0.in0_AT3) (= cnt_gt_0.out_AT3 #b1)))
(assert (= (bvor en_or_sp.in0_AT3 en_or_sp.in1_AT3) en_or_sp.out_AT3))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT3 mpt.cnt_lt_depth.in1_AT3) (= mpt.cnt_lt_depth.out_AT3 #b1)))
(assert (= (bvand f.fullCalc.in0_AT3 f.fullCalc.in1_AT3) f.fullCalc.out_AT3))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT3 mpt.ssa_cnt_and1.in1_AT3) mpt.ssa_cnt_and1.out_AT3))
(assert (= mpt.next_cnt.out_AT3 (ite (= mpt.next_cnt.sel_AT3 #b0) mpt.next_cnt.in0_AT3 mpt.next_cnt.in1_AT3)))
(assert (= f.wrPtrRst.out_AT3 (ite (= f.wrPtrRst.sel_AT3 #b0) f.wrPtrRst.in0_AT3 f.wrPtrRst.in1_AT3)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT3) f.wrPtrSlice.out_AT3))
(assert (= (bvand mp_en.in0_AT3 mp_en.in1_AT3) mp_en.out_AT3))
(assert (= (bvnot f.notfullEq_1.in_AT3) f.notfullEq_1.out_AT3))
(assert (= f.fullEq_1.out_AT3 (bvcomp f.fullEq_1.in0_AT3 f.fullEq_1.in1_AT3)))
(assert (= f.mem.rdata_AT3 (select f.mem.array_AT3 f.mem.raddr_AT3)))
(assert (= (bvand data_out_vld_and2.in0_AT3 data_out_vld_and2.in1_AT3) data_out_vld_and2.out_AT3))
(assert (= (bvnot not_data_out_vld.in_AT3) not_data_out_vld.out_AT3))
(assert (= f.wrPtrEn.out_AT3 (ite (= f.wrPtrEn.sel_AT3 #b0) f.wrPtrEn.in0_AT3 f.wrPtrEn.in1_AT3)))
(assert (= mpt.ssa_cnt.out_AT3 (ite (= mpt.ssa_cnt.sel_AT3 #b0) mpt.ssa_cnt.in0_AT3 mpt.ssa_cnt.in1_AT3)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT3 f.wrPtrp1.in1_AT3) f.wrPtrp1.out_AT3))
(assert (= (bvand data_out_vld_and1.in0_AT3 data_out_vld_and1.in1_AT3) data_out_vld_and1.out_AT3))
(assert (= mpt.decr_mux.out_AT3 (ite (= mpt.decr_mux.sel_AT3 #b0) mpt.decr_mux.in0_AT3 mpt.decr_mux.in1_AT3)))
(assert (= f.emptyEq.out_AT3 (bvcomp f.emptyEq.in0_AT3 f.emptyEq.in1_AT3)))
(assert (bvule _-_state_id1_-__AT3 #b10))
(assert (=> (= _-_state_id1_-__AT3 #b10) (and (and true (= self.rst_AT3 #b0)) (= reset_done_AT3 #b1))))
(assert (=> (= _-_state_id1_-__AT3 #b01) (and (and (and (and (and true (= self.rst_AT3 #b1)) (= self.push_AT3 #b0)) (= self.pop_AT3 #b0)) (= reset_done_AT3 #b0)) (= en.out_AT3 #b0))))
(assert (=> (= _-_state_id1_-__AT3 #b00) (and (and (and (and (and true (= self.rst_AT3 #b1)) (= self.push_AT3 #b0)) (= self.pop_AT3 #b0)) (= reset_done_AT3 #b0)) (= en.out_AT3 #b0))))
(assert (= f.fullEq_2.out_AT3 (bvcomp f.fullEq_2.in0_AT3 f.fullEq_2.in1_AT3)))
(assert (= f.fullEq_1.in1_AT3 ((_ extract 3 3) f.wrPtr.out_AT3)))
(assert (= f.fullEq_1.in0_AT3 ((_ extract 3 3) f.rdPtr.out_AT3)))
(assert (= en.out_AT3 mpt.not_captured.in_AT3))
(assert (= self.start_AT3 start_and_push.in0_AT3))
(assert (= prop_signal_or.out_AT3 self.prop_signal_AT3))
(assert (= f.fullCalc.out_AT3 self.full_AT3))
(assert (= data_out_vld_and2.out_AT3 self.data_out_vld_AT3))
(assert (= mp_en.out_AT3 next_magic_packet.sel_AT3))
(assert (= data_out_vld_and2.in1_AT3 next_cnt_eq0.out_AT3))
(assert (= not_data_out_vld.out_AT3 prop_signal_or.in0_AT3))
(assert (= mpt.next_cnt_and1.in0_AT3 mpt.ssa_cnt_gt_0.out_AT3))
(assert (= mpt.ssa_cnt.sel_AT3 mpt.ssa_cnt_and2.out_AT3))
(assert (= mpt.ssa_cnt_and1.out_AT3 mpt.ssa_cnt_and2.in0_AT3))
(assert (= mpt.not_captured.out_AT3 mpt.ssa_cnt_and2.in1_AT3))
(assert (= mpt.ssa_cnt_gt_0.in1_AT3 #b0000))
(assert (= mpt.next_cnt.in1_AT3 #b0000))
(assert (= mpt.decr_mux.sel_AT3 mpt.next_cnt_and1.out_AT3))
(assert (= mpt.decr_mux.out_AT3 mpt.next_cnt.in0_AT3))
(assert (= mpt.ssa_cnt.out_AT3 mpt.ssa_cnt_m1.in0_AT3))
(assert (= mpt.ssa_cnt.out_AT3 mpt.ssa_cnt_gt_0.in0_AT3))
(assert (= mpt.decr_mux.in1_AT3 mpt.ssa_cnt_m1.out_AT3))
(assert (= mpt.decr_mux.in0_AT3 mpt.ssa_cnt.out_AT3))
(assert (= mpt.ssa_cnt_m1.in1_AT3 #b0001))
(assert (= mpt.cnt_p1.out_AT3 mpt.ssa_cnt.in1_AT3))
(assert (= mpt.cnt_p1.in1_AT3 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT3 mpt.ssa_cnt_and1.in0_AT3))
(assert (= mpt.cnt_lt_depth.in1_AT3 #b1000))
(assert (= mpt.next_cnt.out_AT3 next_cnt_eq0.in0_AT3))
(assert (= mpt.cnt.in_AT3 mpt.next_cnt.out_AT3))
(assert (= mp_en.in1_AT3 not_en.out_AT3))
(assert (= magic_packet_eq.out_AT3 prop_signal_or.in1_AT3))
(assert (= magic_packet.out_AT3 next_magic_packet.in0_AT3))
(assert (= magic_packet.out_AT3 magic_packet_eq.in0_AT3))
(assert (= magic_packet.in_AT3 next_magic_packet.out_AT3))
(assert (= f.wrPtrEn.in1_AT3 f.wrPtrp1.out_AT3))
(assert (= f.wrPtrEn.out_AT3 f.wrPtrRst.in0_AT3))
(assert (= f.wrPtr.in_AT3 f.wrPtrRst.out_AT3))
(assert (= mpt.next_cnt.sel_AT3 self.rst_AT3))
(assert (= f.wrPtrRst.sel_AT3 self.rst_AT3))
(assert (= f.wrPtrRst.in1_AT3 #b0000))
(assert (= f.rdPtrRst.sel_AT3 self.rst_AT3))
(assert (= mpt.next_cnt_and1.in1_AT3 self.pop_AT3))
(assert (= f.rdPtrRst.in1_AT3 #b0000))
(assert (= f.rdPtrEn.out_AT3 f.rdPtrRst.in0_AT3))
(assert (= f.rdPtrEn.in1_AT3 f.rdPtrp1.out_AT3))
(assert (= f.rdPtrEn.sel_AT3 self.pop_AT3))
(assert (= f.rdPtr.in_AT3 f.rdPtrRst.out_AT3))
(assert (= self.push_AT3 start_and_push.in1_AT3))
(assert (= mpt.ssa_cnt_and1.in1_AT3 self.push_AT3))
(assert (= f.wrPtrEn.sel_AT3 self.push_AT3))
(assert (= f.wrPtrp1.in0_AT3 #b0001))
(assert (= f.rdPtrp1.in0_AT3 #b0001))
(assert (= next_magic_packet.in1_AT3 self.data_in_AT3))
(assert (= f.mem.wdata_AT3 self.data_in_AT3))
(assert (= f.mem.wen_AT3 self.push_AT3))
(assert (= f.mem.rdata_AT3 self.data_out_AT3))
(assert (= f.mem.rdata_AT3 magic_packet_eq.in1_AT3))
(assert (= f.mem.waddr_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.fullCalc.in1_AT3 f.fullEq_2.out_AT3))
(assert (= f.mem.raddr_AT3 f.rdPtrSlice.out_AT3))
(assert (= f.fullEq_2.in0_AT3 f.rdPtrSlice.out_AT3))
(assert (= next_cnt_eq0.in1_AT3 #b0000))
(assert (= cnt_gt_0.in1_AT3 #b0000))
(assert (= mpt.cnt.out_AT3 mpt.cnt_p1.in0_AT3))
(assert (= mpt.cnt.out_AT3 mpt.cnt_lt_depth.in0_AT3))
(assert (= mpt.cnt.out_AT3 mpt.ssa_cnt.in0_AT3))
(assert (= cnt_gt_0.in0_AT3 mpt.cnt.out_AT3))
(assert (= cnt_gt_0.out_AT3 data_out_vld_and1.in1_AT3))
(assert (= f.fullEq_2.in1_AT3 f.wrPtrSlice.out_AT3))
(assert (= f.fullEq_1.out_AT3 f.notfullEq_1.in_AT3))
(assert (= f.fullCalc.in0_AT3 f.notfullEq_1.out_AT3))
(assert (= f.wrPtr.out_AT3 f.wrPtrSlice.in_AT3))
(assert (= f.wrPtr.out_AT3 f.wrPtrEn.in0_AT3))
(assert (= f.wrPtr.out_AT3 f.wrPtrp1.in1_AT3))
(assert (= f.emptyEq.out_AT3 self.empty_AT3))
(assert (= f.rdPtr.out_AT3 f.rdPtrp1.in1_AT3))
(assert (= f.rdPtr.out_AT3 f.rdPtrEn.in0_AT3))
(assert (= f.rdPtr.out_AT3 f.rdPtrSlice.in_AT3))
(assert (= f.emptyEq.in1_AT3 f.wrPtr.out_AT3))
(assert (= mp_en.in0_AT3 start_and_push.out_AT3))
(assert (= en_or_sp.in1_AT3 start_and_push.out_AT3))
(assert (= f.emptyEq.in0_AT3 f.rdPtr.out_AT3))
(assert (= mpt.cnt.clk_AT3 self.clk_AT3))
(assert (= magic_packet.clk_AT3 self.clk_AT3))
(assert (= f.wrPtr.clk_AT3 self.clk_AT3))
(assert (= f.rdPtr.clk_AT3 self.clk_AT3))
(assert (= f.mem.clk_AT3 self.clk_AT3))
(assert (= en.in_AT3 en_or_sp.out_AT3))
(assert (= data_out_vld_and2.out_AT3 not_data_out_vld.in_AT3))
(assert (= en.clk_AT3 self.clk_AT3))
(assert (= data_out_vld_and1.out_AT3 data_out_vld_and2.in0_AT3))
(assert (= en.out_AT3 not_en.in_AT3))
(assert (= en.out_AT3 en_or_sp.in0_AT3))
(assert (= data_out_vld_and1.in0_AT3 en.out_AT3))
(assert (= (bvor prop_signal_or.in0_AT3 prop_signal_or.in1_AT3) prop_signal_or.out_AT3))
(assert (= (bvnot not_en.in_AT3) not_en.out_AT3))
(assert (= self.clk_AT3 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT3) f.rdPtrSlice.out_AT3))
(assert (= (bvnot mpt.not_captured.in_AT3) mpt.not_captured.out_AT3))
(assert (= (bvand mpt.next_cnt_and1.in0_AT3 mpt.next_cnt_and1.in1_AT3) mpt.next_cnt_and1.out_AT3))
(assert (= (bvand start_and_push.in0_AT3 start_and_push.in1_AT3) start_and_push.out_AT3))
(assert (= next_cnt_eq0.out_AT3 (bvcomp next_cnt_eq0.in0_AT3 next_cnt_eq0.in1_AT3)))
(assert (= f.rdPtrRst.out_AT3 (ite (= f.rdPtrRst.sel_AT3 #b0) f.rdPtrRst.in0_AT3 f.rdPtrRst.in1_AT3)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT3 mpt.ssa_cnt_gt_0.in0_AT3) (= mpt.ssa_cnt_gt_0.out_AT3 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT3 mpt.ssa_cnt_and2.in1_AT3) mpt.ssa_cnt_and2.out_AT3))
(assert (= f.mem.array_AT3 (store f.mem.array_AT2 f.mem.waddr_AT2 (ite (= f.mem.wen_AT2 #b1) f.mem.wdata_AT2 (select f.mem.array_AT2 f.mem.waddr_AT2)))))
(assert (= magic_packet.init_AT2 magic_packet.init_AT3))
(assert (= magic_packet.out_AT3 magic_packet.in_AT2))
(assert (= f.rdPtr.out_AT3 f.rdPtr.in_AT2))
(assert (=> (= _-_state_id1_-__AT2 #b10) (= _-_state_id1_-__AT3 #b10)))
(assert (=> (= _-_state_id1_-__AT2 #b01) (= _-_state_id1_-__AT3 #b10)))
(assert (=> (= _-_state_id1_-__AT2 #b00) (= _-_state_id1_-__AT3 #b01)))
(assert (= en.out_AT3 en.in_AT2))
(assert (= en.init_AT2 en.init_AT3))
(assert (= mpt.cnt.out_AT3 mpt.cnt.in_AT2))
(assert (= f.wrPtr.out_AT3 f.wrPtr.in_AT2))
(push 1)

(assert (not (=> (= reset_done_AT3 #b1) (= self.prop_signal_AT3 #b1))))
(check-sat)

(pop 1)
(declare-fun next_magic_packet.sel_AT4 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT4 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT4 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT4 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT4 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT4 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT4 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT4 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT4 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT4 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT4 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT4 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT4 () (_ BitVec 1))
(declare-fun mpt.next_cnt.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT4 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT4 () (_ BitVec 4))
(declare-fun mp_en.out_AT4 () (_ BitVec 1))
(declare-fun mp_en.in1_AT4 () (_ BitVec 1))
(declare-fun mp_en.in0_AT4 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT4 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT4 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT4 () (_ BitVec 3))
(declare-fun f.mem.rdata_AT4 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT4 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT4 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT4 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT4 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT4 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT4 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT4 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT4 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT4 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT4 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT4 () (_ BitVec 1))
(declare-fun reset_done_AT4 () (_ BitVec 1))
(declare-fun self.rst_AT4 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT4 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT4 () (_ BitVec 3))
(declare-fun f.fullEq_2.out_AT4 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT4 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT4 () (_ BitVec 1))
(declare-fun self.start_AT4 () (_ BitVec 1))
(declare-fun self.prop_signal_AT4 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT4 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT4 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT4 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT4 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT4 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT4 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in0_AT4 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT4 () (_ BitVec 4))
(declare-fun not_en.out_AT4 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT4 () (_ BitVec 1))
(declare-fun magic_packet.in_AT4 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT4 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT4 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT4 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT4 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT4 () (_ BitVec 1))
(declare-fun self.data_in_AT4 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT4 () (_ BitVec 8))
(declare-fun f.mem.wen_AT4 () (_ BitVec 1))
(declare-fun self.data_out_AT4 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT4 () (_ BitVec 3))
(declare-fun f.rdPtrSlice.out_AT4 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT4 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT4 () (_ BitVec 4))
(declare-fun start_and_push.out_AT4 () (_ BitVec 1))
(declare-fun self.clk_AT4 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT4 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT4 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT4 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT4 () (_ BitVec 1))
(declare-fun f.mem.clk_AT4 () (_ BitVec 1))
(declare-fun en.in_AT4 () (_ BitVec 1))
(declare-fun en.clk_AT4 () (_ BitVec 1))
(declare-fun not_en.in_AT4 () (_ BitVec 1))
(declare-fun f.mem.array_AT4 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun magic_packet.init_AT4 () (_ BitVec 8))
(declare-fun magic_packet.out_AT4 () (_ BitVec 8))
(declare-fun f.rdPtr.out_AT4 () (_ BitVec 4))
(declare-fun _-_state_id1_-__AT4 () (_ BitVec 2))
(declare-fun en.out_AT4 () (_ BitVec 1))
(declare-fun en.init_AT4 () (_ BitVec 1))
(declare-fun mpt.cnt.out_AT4 () (_ BitVec 4))
(declare-fun f.wrPtr.out_AT4 () (_ BitVec 4))
(declare-fun self.pop_AT4 () (_ BitVec 1))
(declare-fun self.empty_AT4 () (_ BitVec 1))
(declare-fun self.push_AT4 () (_ BitVec 1))
(declare-fun self.full_AT4 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT4 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT4 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT4 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT4 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT4 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT4 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT4 () (_ BitVec 8))

(assert (=> (= self.empty_AT4 #b1) (= self.pop_AT4 #b0)))
(assert (=> (= self.full_AT4 #b1) (= self.push_AT4 #b0)))
(assert (= magic_packet_eq.out_AT4 (bvcomp magic_packet_eq.in0_AT4 magic_packet_eq.in1_AT4)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT4 mpt.ssa_cnt_m1.in1_AT4) mpt.ssa_cnt_m1.out_AT4))
(assert (= next_magic_packet.out_AT4 (ite (= next_magic_packet.sel_AT4 #b0) next_magic_packet.in0_AT4 next_magic_packet.in1_AT4)))
(assert (= (bvadd f.rdPtrp1.in0_AT4 f.rdPtrp1.in1_AT4) f.rdPtrp1.out_AT4))
(assert (= (bvadd mpt.cnt_p1.in0_AT4 mpt.cnt_p1.in1_AT4) mpt.cnt_p1.out_AT4))
(assert (= f.rdPtrEn.out_AT4 (ite (= f.rdPtrEn.sel_AT4 #b0) f.rdPtrEn.in0_AT4 f.rdPtrEn.in1_AT4)))
(assert (= (bvult cnt_gt_0.in1_AT4 cnt_gt_0.in0_AT4) (= cnt_gt_0.out_AT4 #b1)))
(assert (= (bvor en_or_sp.in0_AT4 en_or_sp.in1_AT4) en_or_sp.out_AT4))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT4 mpt.cnt_lt_depth.in1_AT4) (= mpt.cnt_lt_depth.out_AT4 #b1)))
(assert (= (bvand f.fullCalc.in0_AT4 f.fullCalc.in1_AT4) f.fullCalc.out_AT4))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT4 mpt.ssa_cnt_and1.in1_AT4) mpt.ssa_cnt_and1.out_AT4))
(assert (= mpt.next_cnt.out_AT4 (ite (= mpt.next_cnt.sel_AT4 #b0) mpt.next_cnt.in0_AT4 mpt.next_cnt.in1_AT4)))
(assert (= f.wrPtrRst.out_AT4 (ite (= f.wrPtrRst.sel_AT4 #b0) f.wrPtrRst.in0_AT4 f.wrPtrRst.in1_AT4)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT4) f.wrPtrSlice.out_AT4))
(assert (= (bvand mp_en.in0_AT4 mp_en.in1_AT4) mp_en.out_AT4))
(assert (= (bvnot f.notfullEq_1.in_AT4) f.notfullEq_1.out_AT4))
(assert (= f.fullEq_1.out_AT4 (bvcomp f.fullEq_1.in0_AT4 f.fullEq_1.in1_AT4)))
(assert (= f.mem.rdata_AT4 (select f.mem.array_AT4 f.mem.raddr_AT4)))
(assert (= (bvand data_out_vld_and2.in0_AT4 data_out_vld_and2.in1_AT4) data_out_vld_and2.out_AT4))
(assert (= (bvnot not_data_out_vld.in_AT4) not_data_out_vld.out_AT4))
(assert (= f.wrPtrEn.out_AT4 (ite (= f.wrPtrEn.sel_AT4 #b0) f.wrPtrEn.in0_AT4 f.wrPtrEn.in1_AT4)))
(assert (= mpt.ssa_cnt.out_AT4 (ite (= mpt.ssa_cnt.sel_AT4 #b0) mpt.ssa_cnt.in0_AT4 mpt.ssa_cnt.in1_AT4)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT4 f.wrPtrp1.in1_AT4) f.wrPtrp1.out_AT4))
(assert (= (bvand data_out_vld_and1.in0_AT4 data_out_vld_and1.in1_AT4) data_out_vld_and1.out_AT4))
(assert (= mpt.decr_mux.out_AT4 (ite (= mpt.decr_mux.sel_AT4 #b0) mpt.decr_mux.in0_AT4 mpt.decr_mux.in1_AT4)))
(assert (= f.emptyEq.out_AT4 (bvcomp f.emptyEq.in0_AT4 f.emptyEq.in1_AT4)))
(assert (bvule _-_state_id1_-__AT4 #b10))
(assert (=> (= _-_state_id1_-__AT4 #b10) (and (and true (= self.rst_AT4 #b0)) (= reset_done_AT4 #b1))))
(assert (=> (= _-_state_id1_-__AT4 #b01) (and (and (and (and (and true (= self.rst_AT4 #b1)) (= self.push_AT4 #b0)) (= self.pop_AT4 #b0)) (= reset_done_AT4 #b0)) (= en.out_AT4 #b0))))
(assert (=> (= _-_state_id1_-__AT4 #b00) (and (and (and (and (and true (= self.rst_AT4 #b1)) (= self.push_AT4 #b0)) (= self.pop_AT4 #b0)) (= reset_done_AT4 #b0)) (= en.out_AT4 #b0))))
(assert (= f.fullEq_2.out_AT4 (bvcomp f.fullEq_2.in0_AT4 f.fullEq_2.in1_AT4)))
(assert (= f.fullEq_1.in1_AT4 ((_ extract 3 3) f.wrPtr.out_AT4)))
(assert (= f.fullEq_1.in0_AT4 ((_ extract 3 3) f.rdPtr.out_AT4)))
(assert (= en.out_AT4 mpt.not_captured.in_AT4))
(assert (= self.start_AT4 start_and_push.in0_AT4))
(assert (= prop_signal_or.out_AT4 self.prop_signal_AT4))
(assert (= f.fullCalc.out_AT4 self.full_AT4))
(assert (= data_out_vld_and2.out_AT4 self.data_out_vld_AT4))
(assert (= mp_en.out_AT4 next_magic_packet.sel_AT4))
(assert (= data_out_vld_and2.in1_AT4 next_cnt_eq0.out_AT4))
(assert (= not_data_out_vld.out_AT4 prop_signal_or.in0_AT4))
(assert (= mpt.next_cnt_and1.in0_AT4 mpt.ssa_cnt_gt_0.out_AT4))
(assert (= mpt.ssa_cnt.sel_AT4 mpt.ssa_cnt_and2.out_AT4))
(assert (= mpt.ssa_cnt_and1.out_AT4 mpt.ssa_cnt_and2.in0_AT4))
(assert (= mpt.not_captured.out_AT4 mpt.ssa_cnt_and2.in1_AT4))
(assert (= mpt.ssa_cnt_gt_0.in1_AT4 #b0000))
(assert (= mpt.next_cnt.in1_AT4 #b0000))
(assert (= mpt.decr_mux.sel_AT4 mpt.next_cnt_and1.out_AT4))
(assert (= mpt.decr_mux.out_AT4 mpt.next_cnt.in0_AT4))
(assert (= mpt.ssa_cnt.out_AT4 mpt.ssa_cnt_m1.in0_AT4))
(assert (= mpt.ssa_cnt.out_AT4 mpt.ssa_cnt_gt_0.in0_AT4))
(assert (= mpt.decr_mux.in1_AT4 mpt.ssa_cnt_m1.out_AT4))
(assert (= mpt.decr_mux.in0_AT4 mpt.ssa_cnt.out_AT4))
(assert (= mpt.ssa_cnt_m1.in1_AT4 #b0001))
(assert (= mpt.cnt_p1.out_AT4 mpt.ssa_cnt.in1_AT4))
(assert (= mpt.cnt_p1.in1_AT4 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT4 mpt.ssa_cnt_and1.in0_AT4))
(assert (= mpt.cnt_lt_depth.in1_AT4 #b1000))
(assert (= mpt.next_cnt.out_AT4 next_cnt_eq0.in0_AT4))
(assert (= mpt.cnt.in_AT4 mpt.next_cnt.out_AT4))
(assert (= mp_en.in1_AT4 not_en.out_AT4))
(assert (= magic_packet_eq.out_AT4 prop_signal_or.in1_AT4))
(assert (= magic_packet.out_AT4 next_magic_packet.in0_AT4))
(assert (= magic_packet.out_AT4 magic_packet_eq.in0_AT4))
(assert (= magic_packet.in_AT4 next_magic_packet.out_AT4))
(assert (= f.wrPtrEn.in1_AT4 f.wrPtrp1.out_AT4))
(assert (= f.wrPtrEn.out_AT4 f.wrPtrRst.in0_AT4))
(assert (= f.wrPtr.in_AT4 f.wrPtrRst.out_AT4))
(assert (= mpt.next_cnt.sel_AT4 self.rst_AT4))
(assert (= f.wrPtrRst.sel_AT4 self.rst_AT4))
(assert (= f.wrPtrRst.in1_AT4 #b0000))
(assert (= f.rdPtrRst.sel_AT4 self.rst_AT4))
(assert (= mpt.next_cnt_and1.in1_AT4 self.pop_AT4))
(assert (= f.rdPtrRst.in1_AT4 #b0000))
(assert (= f.rdPtrEn.out_AT4 f.rdPtrRst.in0_AT4))
(assert (= f.rdPtrEn.in1_AT4 f.rdPtrp1.out_AT4))
(assert (= f.rdPtrEn.sel_AT4 self.pop_AT4))
(assert (= f.rdPtr.in_AT4 f.rdPtrRst.out_AT4))
(assert (= self.push_AT4 start_and_push.in1_AT4))
(assert (= mpt.ssa_cnt_and1.in1_AT4 self.push_AT4))
(assert (= f.wrPtrEn.sel_AT4 self.push_AT4))
(assert (= f.wrPtrp1.in0_AT4 #b0001))
(assert (= f.rdPtrp1.in0_AT4 #b0001))
(assert (= next_magic_packet.in1_AT4 self.data_in_AT4))
(assert (= f.mem.wdata_AT4 self.data_in_AT4))
(assert (= f.mem.wen_AT4 self.push_AT4))
(assert (= f.mem.rdata_AT4 self.data_out_AT4))
(assert (= f.mem.rdata_AT4 magic_packet_eq.in1_AT4))
(assert (= f.mem.waddr_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.fullCalc.in1_AT4 f.fullEq_2.out_AT4))
(assert (= f.mem.raddr_AT4 f.rdPtrSlice.out_AT4))
(assert (= f.fullEq_2.in0_AT4 f.rdPtrSlice.out_AT4))
(assert (= next_cnt_eq0.in1_AT4 #b0000))
(assert (= cnt_gt_0.in1_AT4 #b0000))
(assert (= mpt.cnt.out_AT4 mpt.cnt_p1.in0_AT4))
(assert (= mpt.cnt.out_AT4 mpt.cnt_lt_depth.in0_AT4))
(assert (= mpt.cnt.out_AT4 mpt.ssa_cnt.in0_AT4))
(assert (= cnt_gt_0.in0_AT4 mpt.cnt.out_AT4))
(assert (= cnt_gt_0.out_AT4 data_out_vld_and1.in1_AT4))
(assert (= f.fullEq_2.in1_AT4 f.wrPtrSlice.out_AT4))
(assert (= f.fullEq_1.out_AT4 f.notfullEq_1.in_AT4))
(assert (= f.fullCalc.in0_AT4 f.notfullEq_1.out_AT4))
(assert (= f.wrPtr.out_AT4 f.wrPtrSlice.in_AT4))
(assert (= f.wrPtr.out_AT4 f.wrPtrEn.in0_AT4))
(assert (= f.wrPtr.out_AT4 f.wrPtrp1.in1_AT4))
(assert (= f.emptyEq.out_AT4 self.empty_AT4))
(assert (= f.rdPtr.out_AT4 f.rdPtrp1.in1_AT4))
(assert (= f.rdPtr.out_AT4 f.rdPtrEn.in0_AT4))
(assert (= f.rdPtr.out_AT4 f.rdPtrSlice.in_AT4))
(assert (= f.emptyEq.in1_AT4 f.wrPtr.out_AT4))
(assert (= mp_en.in0_AT4 start_and_push.out_AT4))
(assert (= en_or_sp.in1_AT4 start_and_push.out_AT4))
(assert (= f.emptyEq.in0_AT4 f.rdPtr.out_AT4))
(assert (= mpt.cnt.clk_AT4 self.clk_AT4))
(assert (= magic_packet.clk_AT4 self.clk_AT4))
(assert (= f.wrPtr.clk_AT4 self.clk_AT4))
(assert (= f.rdPtr.clk_AT4 self.clk_AT4))
(assert (= f.mem.clk_AT4 self.clk_AT4))
(assert (= en.in_AT4 en_or_sp.out_AT4))
(assert (= data_out_vld_and2.out_AT4 not_data_out_vld.in_AT4))
(assert (= en.clk_AT4 self.clk_AT4))
(assert (= data_out_vld_and1.out_AT4 data_out_vld_and2.in0_AT4))
(assert (= en.out_AT4 not_en.in_AT4))
(assert (= en.out_AT4 en_or_sp.in0_AT4))
(assert (= data_out_vld_and1.in0_AT4 en.out_AT4))
(assert (= (bvor prop_signal_or.in0_AT4 prop_signal_or.in1_AT4) prop_signal_or.out_AT4))
(assert (= (bvnot not_en.in_AT4) not_en.out_AT4))
(assert (= self.clk_AT4 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT4) f.rdPtrSlice.out_AT4))
(assert (= (bvnot mpt.not_captured.in_AT4) mpt.not_captured.out_AT4))
(assert (= (bvand mpt.next_cnt_and1.in0_AT4 mpt.next_cnt_and1.in1_AT4) mpt.next_cnt_and1.out_AT4))
(assert (= (bvand start_and_push.in0_AT4 start_and_push.in1_AT4) start_and_push.out_AT4))
(assert (= next_cnt_eq0.out_AT4 (bvcomp next_cnt_eq0.in0_AT4 next_cnt_eq0.in1_AT4)))
(assert (= f.rdPtrRst.out_AT4 (ite (= f.rdPtrRst.sel_AT4 #b0) f.rdPtrRst.in0_AT4 f.rdPtrRst.in1_AT4)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT4 mpt.ssa_cnt_gt_0.in0_AT4) (= mpt.ssa_cnt_gt_0.out_AT4 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT4 mpt.ssa_cnt_and2.in1_AT4) mpt.ssa_cnt_and2.out_AT4))
(assert (= f.mem.array_AT4 (store f.mem.array_AT3 f.mem.waddr_AT3 (ite (= f.mem.wen_AT3 #b1) f.mem.wdata_AT3 (select f.mem.array_AT3 f.mem.waddr_AT3)))))
(assert (= magic_packet.init_AT3 magic_packet.init_AT4))
(assert (= magic_packet.out_AT4 magic_packet.in_AT3))
(assert (= f.rdPtr.out_AT4 f.rdPtr.in_AT3))
(assert (=> (= _-_state_id1_-__AT3 #b10) (= _-_state_id1_-__AT4 #b10)))
(assert (=> (= _-_state_id1_-__AT3 #b01) (= _-_state_id1_-__AT4 #b10)))
(assert (=> (= _-_state_id1_-__AT3 #b00) (= _-_state_id1_-__AT4 #b01)))
(assert (= en.out_AT4 en.in_AT3))
(assert (= en.init_AT3 en.init_AT4))
(assert (= mpt.cnt.out_AT4 mpt.cnt.in_AT3))
(assert (= f.wrPtr.out_AT4 f.wrPtr.in_AT3))
(push 1)

(assert (not (=> (= reset_done_AT4 #b1) (= self.prop_signal_AT4 #b1))))
(check-sat)

(pop 1)
(declare-fun self.pop_AT5 () (_ BitVec 1))
(declare-fun self.empty_AT5 () (_ BitVec 1))
(declare-fun self.push_AT5 () (_ BitVec 1))
(declare-fun self.full_AT5 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT5 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT5 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT5 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT5 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT5 () (_ BitVec 8))
(declare-fun next_magic_packet.sel_AT5 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT5 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT5 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT5 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT5 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT5 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT5 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT5 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT5 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT5 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT5 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT5 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT5 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT5 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT5 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT5 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT5 () (_ BitVec 1))
(declare-fun mpt.next_cnt.out_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT5 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT5 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT5 () (_ BitVec 4))
(declare-fun mp_en.out_AT5 () (_ BitVec 1))
(declare-fun mp_en.in1_AT5 () (_ BitVec 1))
(declare-fun mp_en.in0_AT5 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT5 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT5 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT5 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT5 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT5 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT5 () (_ BitVec 3))
(declare-fun f.mem.rdata_AT5 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT5 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT5 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT5 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT5 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT5 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT5 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.out_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT5 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT5 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT5 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT5 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT5 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT5 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT5 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT5 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT5 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT5 () (_ BitVec 1))
(declare-fun reset_done_AT5 () (_ BitVec 1))
(declare-fun self.rst_AT5 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT5 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT5 () (_ BitVec 3))
(declare-fun f.fullEq_2.out_AT5 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT5 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT5 () (_ BitVec 1))
(declare-fun self.start_AT5 () (_ BitVec 1))
(declare-fun self.prop_signal_AT5 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT5 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT5 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT5 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT5 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT5 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT5 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT5 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT5 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in0_AT5 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT5 () (_ BitVec 4))
(declare-fun not_en.out_AT5 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT5 () (_ BitVec 1))
(declare-fun magic_packet.in_AT5 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT5 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT5 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT5 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT5 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT5 () (_ BitVec 1))
(declare-fun self.data_in_AT5 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT5 () (_ BitVec 8))
(declare-fun f.mem.wen_AT5 () (_ BitVec 1))
(declare-fun self.data_out_AT5 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT5 () (_ BitVec 3))
(declare-fun f.rdPtrSlice.out_AT5 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT5 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT5 () (_ BitVec 4))
(declare-fun start_and_push.out_AT5 () (_ BitVec 1))
(declare-fun self.clk_AT5 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT5 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT5 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT5 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT5 () (_ BitVec 1))
(declare-fun f.mem.clk_AT5 () (_ BitVec 1))
(declare-fun en.in_AT5 () (_ BitVec 1))
(declare-fun en.clk_AT5 () (_ BitVec 1))
(declare-fun not_en.in_AT5 () (_ BitVec 1))
(declare-fun f.mem.array_AT5 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun magic_packet.init_AT5 () (_ BitVec 8))
(declare-fun magic_packet.out_AT5 () (_ BitVec 8))
(declare-fun f.rdPtr.out_AT5 () (_ BitVec 4))
(declare-fun _-_state_id1_-__AT5 () (_ BitVec 2))
(declare-fun en.out_AT5 () (_ BitVec 1))
(declare-fun en.init_AT5 () (_ BitVec 1))
(declare-fun mpt.cnt.out_AT5 () (_ BitVec 4))
(declare-fun f.wrPtr.out_AT5 () (_ BitVec 4))

(assert (=> (= self.empty_AT5 #b1) (= self.pop_AT5 #b0)))
(assert (=> (= self.full_AT5 #b1) (= self.push_AT5 #b0)))
(assert (= magic_packet_eq.out_AT5 (bvcomp magic_packet_eq.in0_AT5 magic_packet_eq.in1_AT5)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT5 mpt.ssa_cnt_m1.in1_AT5) mpt.ssa_cnt_m1.out_AT5))
(assert (= next_magic_packet.out_AT5 (ite (= next_magic_packet.sel_AT5 #b0) next_magic_packet.in0_AT5 next_magic_packet.in1_AT5)))
(assert (= (bvadd f.rdPtrp1.in0_AT5 f.rdPtrp1.in1_AT5) f.rdPtrp1.out_AT5))
(assert (= (bvadd mpt.cnt_p1.in0_AT5 mpt.cnt_p1.in1_AT5) mpt.cnt_p1.out_AT5))
(assert (= f.rdPtrEn.out_AT5 (ite (= f.rdPtrEn.sel_AT5 #b0) f.rdPtrEn.in0_AT5 f.rdPtrEn.in1_AT5)))
(assert (= (bvult cnt_gt_0.in1_AT5 cnt_gt_0.in0_AT5) (= cnt_gt_0.out_AT5 #b1)))
(assert (= (bvor en_or_sp.in0_AT5 en_or_sp.in1_AT5) en_or_sp.out_AT5))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT5 mpt.cnt_lt_depth.in1_AT5) (= mpt.cnt_lt_depth.out_AT5 #b1)))
(assert (= (bvand f.fullCalc.in0_AT5 f.fullCalc.in1_AT5) f.fullCalc.out_AT5))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT5 mpt.ssa_cnt_and1.in1_AT5) mpt.ssa_cnt_and1.out_AT5))
(assert (= mpt.next_cnt.out_AT5 (ite (= mpt.next_cnt.sel_AT5 #b0) mpt.next_cnt.in0_AT5 mpt.next_cnt.in1_AT5)))
(assert (= f.wrPtrRst.out_AT5 (ite (= f.wrPtrRst.sel_AT5 #b0) f.wrPtrRst.in0_AT5 f.wrPtrRst.in1_AT5)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT5) f.wrPtrSlice.out_AT5))
(assert (= (bvand mp_en.in0_AT5 mp_en.in1_AT5) mp_en.out_AT5))
(assert (= (bvnot f.notfullEq_1.in_AT5) f.notfullEq_1.out_AT5))
(assert (= f.fullEq_1.out_AT5 (bvcomp f.fullEq_1.in0_AT5 f.fullEq_1.in1_AT5)))
(assert (= f.mem.rdata_AT5 (select f.mem.array_AT5 f.mem.raddr_AT5)))
(assert (= (bvand data_out_vld_and2.in0_AT5 data_out_vld_and2.in1_AT5) data_out_vld_and2.out_AT5))
(assert (= (bvnot not_data_out_vld.in_AT5) not_data_out_vld.out_AT5))
(assert (= f.wrPtrEn.out_AT5 (ite (= f.wrPtrEn.sel_AT5 #b0) f.wrPtrEn.in0_AT5 f.wrPtrEn.in1_AT5)))
(assert (= mpt.ssa_cnt.out_AT5 (ite (= mpt.ssa_cnt.sel_AT5 #b0) mpt.ssa_cnt.in0_AT5 mpt.ssa_cnt.in1_AT5)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT5 f.wrPtrp1.in1_AT5) f.wrPtrp1.out_AT5))
(assert (= (bvand data_out_vld_and1.in0_AT5 data_out_vld_and1.in1_AT5) data_out_vld_and1.out_AT5))
(assert (= mpt.decr_mux.out_AT5 (ite (= mpt.decr_mux.sel_AT5 #b0) mpt.decr_mux.in0_AT5 mpt.decr_mux.in1_AT5)))
(assert (= f.emptyEq.out_AT5 (bvcomp f.emptyEq.in0_AT5 f.emptyEq.in1_AT5)))
(assert (bvule _-_state_id1_-__AT5 #b10))
(assert (=> (= _-_state_id1_-__AT5 #b10) (and (and true (= self.rst_AT5 #b0)) (= reset_done_AT5 #b1))))
(assert (=> (= _-_state_id1_-__AT5 #b01) (and (and (and (and (and true (= self.rst_AT5 #b1)) (= self.push_AT5 #b0)) (= self.pop_AT5 #b0)) (= reset_done_AT5 #b0)) (= en.out_AT5 #b0))))
(assert (=> (= _-_state_id1_-__AT5 #b00) (and (and (and (and (and true (= self.rst_AT5 #b1)) (= self.push_AT5 #b0)) (= self.pop_AT5 #b0)) (= reset_done_AT5 #b0)) (= en.out_AT5 #b0))))
(assert (= f.fullEq_2.out_AT5 (bvcomp f.fullEq_2.in0_AT5 f.fullEq_2.in1_AT5)))
(assert (= f.fullEq_1.in1_AT5 ((_ extract 3 3) f.wrPtr.out_AT5)))
(assert (= f.fullEq_1.in0_AT5 ((_ extract 3 3) f.rdPtr.out_AT5)))
(assert (= en.out_AT5 mpt.not_captured.in_AT5))
(assert (= self.start_AT5 start_and_push.in0_AT5))
(assert (= prop_signal_or.out_AT5 self.prop_signal_AT5))
(assert (= f.fullCalc.out_AT5 self.full_AT5))
(assert (= data_out_vld_and2.out_AT5 self.data_out_vld_AT5))
(assert (= mp_en.out_AT5 next_magic_packet.sel_AT5))
(assert (= data_out_vld_and2.in1_AT5 next_cnt_eq0.out_AT5))
(assert (= not_data_out_vld.out_AT5 prop_signal_or.in0_AT5))
(assert (= mpt.next_cnt_and1.in0_AT5 mpt.ssa_cnt_gt_0.out_AT5))
(assert (= mpt.ssa_cnt.sel_AT5 mpt.ssa_cnt_and2.out_AT5))
(assert (= mpt.ssa_cnt_and1.out_AT5 mpt.ssa_cnt_and2.in0_AT5))
(assert (= mpt.not_captured.out_AT5 mpt.ssa_cnt_and2.in1_AT5))
(assert (= mpt.ssa_cnt_gt_0.in1_AT5 #b0000))
(assert (= mpt.next_cnt.in1_AT5 #b0000))
(assert (= mpt.decr_mux.sel_AT5 mpt.next_cnt_and1.out_AT5))
(assert (= mpt.decr_mux.out_AT5 mpt.next_cnt.in0_AT5))
(assert (= mpt.ssa_cnt.out_AT5 mpt.ssa_cnt_m1.in0_AT5))
(assert (= mpt.ssa_cnt.out_AT5 mpt.ssa_cnt_gt_0.in0_AT5))
(assert (= mpt.decr_mux.in1_AT5 mpt.ssa_cnt_m1.out_AT5))
(assert (= mpt.decr_mux.in0_AT5 mpt.ssa_cnt.out_AT5))
(assert (= mpt.ssa_cnt_m1.in1_AT5 #b0001))
(assert (= mpt.cnt_p1.out_AT5 mpt.ssa_cnt.in1_AT5))
(assert (= mpt.cnt_p1.in1_AT5 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT5 mpt.ssa_cnt_and1.in0_AT5))
(assert (= mpt.cnt_lt_depth.in1_AT5 #b1000))
(assert (= mpt.next_cnt.out_AT5 next_cnt_eq0.in0_AT5))
(assert (= mpt.cnt.in_AT5 mpt.next_cnt.out_AT5))
(assert (= mp_en.in1_AT5 not_en.out_AT5))
(assert (= magic_packet_eq.out_AT5 prop_signal_or.in1_AT5))
(assert (= magic_packet.out_AT5 next_magic_packet.in0_AT5))
(assert (= magic_packet.out_AT5 magic_packet_eq.in0_AT5))
(assert (= magic_packet.in_AT5 next_magic_packet.out_AT5))
(assert (= f.wrPtrEn.in1_AT5 f.wrPtrp1.out_AT5))
(assert (= f.wrPtrEn.out_AT5 f.wrPtrRst.in0_AT5))
(assert (= f.wrPtr.in_AT5 f.wrPtrRst.out_AT5))
(assert (= mpt.next_cnt.sel_AT5 self.rst_AT5))
(assert (= f.wrPtrRst.sel_AT5 self.rst_AT5))
(assert (= f.wrPtrRst.in1_AT5 #b0000))
(assert (= f.rdPtrRst.sel_AT5 self.rst_AT5))
(assert (= mpt.next_cnt_and1.in1_AT5 self.pop_AT5))
(assert (= f.rdPtrRst.in1_AT5 #b0000))
(assert (= f.rdPtrEn.out_AT5 f.rdPtrRst.in0_AT5))
(assert (= f.rdPtrEn.in1_AT5 f.rdPtrp1.out_AT5))
(assert (= f.rdPtrEn.sel_AT5 self.pop_AT5))
(assert (= f.rdPtr.in_AT5 f.rdPtrRst.out_AT5))
(assert (= self.push_AT5 start_and_push.in1_AT5))
(assert (= mpt.ssa_cnt_and1.in1_AT5 self.push_AT5))
(assert (= f.wrPtrEn.sel_AT5 self.push_AT5))
(assert (= f.wrPtrp1.in0_AT5 #b0001))
(assert (= f.rdPtrp1.in0_AT5 #b0001))
(assert (= next_magic_packet.in1_AT5 self.data_in_AT5))
(assert (= f.mem.wdata_AT5 self.data_in_AT5))
(assert (= f.mem.wen_AT5 self.push_AT5))
(assert (= f.mem.rdata_AT5 self.data_out_AT5))
(assert (= f.mem.rdata_AT5 magic_packet_eq.in1_AT5))
(assert (= f.mem.waddr_AT5 f.wrPtrSlice.out_AT5))
(assert (= f.fullCalc.in1_AT5 f.fullEq_2.out_AT5))
(assert (= f.mem.raddr_AT5 f.rdPtrSlice.out_AT5))
(assert (= f.fullEq_2.in0_AT5 f.rdPtrSlice.out_AT5))
(assert (= next_cnt_eq0.in1_AT5 #b0000))
(assert (= cnt_gt_0.in1_AT5 #b0000))
(assert (= mpt.cnt.out_AT5 mpt.cnt_p1.in0_AT5))
(assert (= mpt.cnt.out_AT5 mpt.cnt_lt_depth.in0_AT5))
(assert (= mpt.cnt.out_AT5 mpt.ssa_cnt.in0_AT5))
(assert (= cnt_gt_0.in0_AT5 mpt.cnt.out_AT5))
(assert (= cnt_gt_0.out_AT5 data_out_vld_and1.in1_AT5))
(assert (= f.fullEq_2.in1_AT5 f.wrPtrSlice.out_AT5))
(assert (= f.fullEq_1.out_AT5 f.notfullEq_1.in_AT5))
(assert (= f.fullCalc.in0_AT5 f.notfullEq_1.out_AT5))
(assert (= f.wrPtr.out_AT5 f.wrPtrSlice.in_AT5))
(assert (= f.wrPtr.out_AT5 f.wrPtrEn.in0_AT5))
(assert (= f.wrPtr.out_AT5 f.wrPtrp1.in1_AT5))
(assert (= f.emptyEq.out_AT5 self.empty_AT5))
(assert (= f.rdPtr.out_AT5 f.rdPtrp1.in1_AT5))
(assert (= f.rdPtr.out_AT5 f.rdPtrEn.in0_AT5))
(assert (= f.rdPtr.out_AT5 f.rdPtrSlice.in_AT5))
(assert (= f.emptyEq.in1_AT5 f.wrPtr.out_AT5))
(assert (= mp_en.in0_AT5 start_and_push.out_AT5))
(assert (= en_or_sp.in1_AT5 start_and_push.out_AT5))
(assert (= f.emptyEq.in0_AT5 f.rdPtr.out_AT5))
(assert (= mpt.cnt.clk_AT5 self.clk_AT5))
(assert (= magic_packet.clk_AT5 self.clk_AT5))
(assert (= f.wrPtr.clk_AT5 self.clk_AT5))
(assert (= f.rdPtr.clk_AT5 self.clk_AT5))
(assert (= f.mem.clk_AT5 self.clk_AT5))
(assert (= en.in_AT5 en_or_sp.out_AT5))
(assert (= data_out_vld_and2.out_AT5 not_data_out_vld.in_AT5))
(assert (= en.clk_AT5 self.clk_AT5))
(assert (= data_out_vld_and1.out_AT5 data_out_vld_and2.in0_AT5))
(assert (= en.out_AT5 not_en.in_AT5))
(assert (= en.out_AT5 en_or_sp.in0_AT5))
(assert (= data_out_vld_and1.in0_AT5 en.out_AT5))
(assert (= (bvor prop_signal_or.in0_AT5 prop_signal_or.in1_AT5) prop_signal_or.out_AT5))
(assert (= (bvnot not_en.in_AT5) not_en.out_AT5))
(assert (= self.clk_AT5 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT5) f.rdPtrSlice.out_AT5))
(assert (= (bvnot mpt.not_captured.in_AT5) mpt.not_captured.out_AT5))
(assert (= (bvand mpt.next_cnt_and1.in0_AT5 mpt.next_cnt_and1.in1_AT5) mpt.next_cnt_and1.out_AT5))
(assert (= (bvand start_and_push.in0_AT5 start_and_push.in1_AT5) start_and_push.out_AT5))
(assert (= next_cnt_eq0.out_AT5 (bvcomp next_cnt_eq0.in0_AT5 next_cnt_eq0.in1_AT5)))
(assert (= f.rdPtrRst.out_AT5 (ite (= f.rdPtrRst.sel_AT5 #b0) f.rdPtrRst.in0_AT5 f.rdPtrRst.in1_AT5)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT5 mpt.ssa_cnt_gt_0.in0_AT5) (= mpt.ssa_cnt_gt_0.out_AT5 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT5 mpt.ssa_cnt_and2.in1_AT5) mpt.ssa_cnt_and2.out_AT5))
(assert (= f.mem.array_AT5 (store f.mem.array_AT4 f.mem.waddr_AT4 (ite (= f.mem.wen_AT4 #b1) f.mem.wdata_AT4 (select f.mem.array_AT4 f.mem.waddr_AT4)))))
(assert (= magic_packet.init_AT4 magic_packet.init_AT5))
(assert (= magic_packet.out_AT5 magic_packet.in_AT4))
(assert (= f.rdPtr.out_AT5 f.rdPtr.in_AT4))
(assert (=> (= _-_state_id1_-__AT4 #b10) (= _-_state_id1_-__AT5 #b10)))
(assert (=> (= _-_state_id1_-__AT4 #b01) (= _-_state_id1_-__AT5 #b10)))
(assert (=> (= _-_state_id1_-__AT4 #b00) (= _-_state_id1_-__AT5 #b01)))
(assert (= en.out_AT5 en.in_AT4))
(assert (= en.init_AT4 en.init_AT5))
(assert (= mpt.cnt.out_AT5 mpt.cnt.in_AT4))
(assert (= f.wrPtr.out_AT5 f.wrPtr.in_AT4))
(push 1)

(assert (not (=> (= reset_done_AT5 #b1) (= self.prop_signal_AT5 #b1))))
(check-sat)

(pop 1)
(declare-fun f.mem.array_AT6 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun magic_packet.init_AT6 () (_ BitVec 8))
(declare-fun magic_packet.out_AT6 () (_ BitVec 8))
(declare-fun f.rdPtr.out_AT6 () (_ BitVec 4))
(declare-fun _-_state_id1_-__AT6 () (_ BitVec 2))
(declare-fun en.out_AT6 () (_ BitVec 1))
(declare-fun en.init_AT6 () (_ BitVec 1))
(declare-fun mpt.cnt.out_AT6 () (_ BitVec 4))
(declare-fun f.wrPtr.out_AT6 () (_ BitVec 4))
(declare-fun self.pop_AT6 () (_ BitVec 1))
(declare-fun self.empty_AT6 () (_ BitVec 1))
(declare-fun self.push_AT6 () (_ BitVec 1))
(declare-fun self.full_AT6 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT6 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT6 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT6 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT6 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT6 () (_ BitVec 8))
(declare-fun next_magic_packet.sel_AT6 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT6 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT6 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT6 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT6 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT6 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT6 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT6 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT6 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT6 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT6 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT6 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT6 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT6 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT6 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT6 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT6 () (_ BitVec 1))
(declare-fun mpt.next_cnt.out_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT6 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT6 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT6 () (_ BitVec 4))
(declare-fun mp_en.out_AT6 () (_ BitVec 1))
(declare-fun mp_en.in1_AT6 () (_ BitVec 1))
(declare-fun mp_en.in0_AT6 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT6 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT6 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT6 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT6 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT6 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT6 () (_ BitVec 3))
(declare-fun f.mem.rdata_AT6 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT6 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT6 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT6 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT6 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT6 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT6 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.out_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT6 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT6 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT6 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT6 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT6 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT6 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT6 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT6 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT6 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT6 () (_ BitVec 1))
(declare-fun reset_done_AT6 () (_ BitVec 1))
(declare-fun self.rst_AT6 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT6 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT6 () (_ BitVec 3))
(declare-fun f.fullEq_2.out_AT6 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT6 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT6 () (_ BitVec 1))
(declare-fun self.start_AT6 () (_ BitVec 1))
(declare-fun self.prop_signal_AT6 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT6 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT6 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT6 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT6 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT6 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT6 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT6 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT6 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in0_AT6 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT6 () (_ BitVec 4))
(declare-fun not_en.out_AT6 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT6 () (_ BitVec 1))
(declare-fun magic_packet.in_AT6 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT6 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT6 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT6 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT6 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT6 () (_ BitVec 1))
(declare-fun self.data_in_AT6 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT6 () (_ BitVec 8))
(declare-fun f.mem.wen_AT6 () (_ BitVec 1))
(declare-fun self.data_out_AT6 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT6 () (_ BitVec 3))
(declare-fun f.rdPtrSlice.out_AT6 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT6 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT6 () (_ BitVec 4))
(declare-fun start_and_push.out_AT6 () (_ BitVec 1))
(declare-fun self.clk_AT6 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT6 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT6 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT6 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT6 () (_ BitVec 1))
(declare-fun f.mem.clk_AT6 () (_ BitVec 1))
(declare-fun en.in_AT6 () (_ BitVec 1))
(declare-fun en.clk_AT6 () (_ BitVec 1))
(declare-fun not_en.in_AT6 () (_ BitVec 1))

(assert (=> (= self.empty_AT6 #b1) (= self.pop_AT6 #b0)))
(assert (=> (= self.full_AT6 #b1) (= self.push_AT6 #b0)))
(assert (= magic_packet_eq.out_AT6 (bvcomp magic_packet_eq.in0_AT6 magic_packet_eq.in1_AT6)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT6 mpt.ssa_cnt_m1.in1_AT6) mpt.ssa_cnt_m1.out_AT6))
(assert (= next_magic_packet.out_AT6 (ite (= next_magic_packet.sel_AT6 #b0) next_magic_packet.in0_AT6 next_magic_packet.in1_AT6)))
(assert (= (bvadd f.rdPtrp1.in0_AT6 f.rdPtrp1.in1_AT6) f.rdPtrp1.out_AT6))
(assert (= (bvadd mpt.cnt_p1.in0_AT6 mpt.cnt_p1.in1_AT6) mpt.cnt_p1.out_AT6))
(assert (= f.rdPtrEn.out_AT6 (ite (= f.rdPtrEn.sel_AT6 #b0) f.rdPtrEn.in0_AT6 f.rdPtrEn.in1_AT6)))
(assert (= (bvult cnt_gt_0.in1_AT6 cnt_gt_0.in0_AT6) (= cnt_gt_0.out_AT6 #b1)))
(assert (= (bvor en_or_sp.in0_AT6 en_or_sp.in1_AT6) en_or_sp.out_AT6))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT6 mpt.cnt_lt_depth.in1_AT6) (= mpt.cnt_lt_depth.out_AT6 #b1)))
(assert (= (bvand f.fullCalc.in0_AT6 f.fullCalc.in1_AT6) f.fullCalc.out_AT6))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT6 mpt.ssa_cnt_and1.in1_AT6) mpt.ssa_cnt_and1.out_AT6))
(assert (= mpt.next_cnt.out_AT6 (ite (= mpt.next_cnt.sel_AT6 #b0) mpt.next_cnt.in0_AT6 mpt.next_cnt.in1_AT6)))
(assert (= f.wrPtrRst.out_AT6 (ite (= f.wrPtrRst.sel_AT6 #b0) f.wrPtrRst.in0_AT6 f.wrPtrRst.in1_AT6)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT6) f.wrPtrSlice.out_AT6))
(assert (= (bvand mp_en.in0_AT6 mp_en.in1_AT6) mp_en.out_AT6))
(assert (= (bvnot f.notfullEq_1.in_AT6) f.notfullEq_1.out_AT6))
(assert (= f.fullEq_1.out_AT6 (bvcomp f.fullEq_1.in0_AT6 f.fullEq_1.in1_AT6)))
(assert (= f.mem.rdata_AT6 (select f.mem.array_AT6 f.mem.raddr_AT6)))
(assert (= (bvand data_out_vld_and2.in0_AT6 data_out_vld_and2.in1_AT6) data_out_vld_and2.out_AT6))
(assert (= (bvnot not_data_out_vld.in_AT6) not_data_out_vld.out_AT6))
(assert (= f.wrPtrEn.out_AT6 (ite (= f.wrPtrEn.sel_AT6 #b0) f.wrPtrEn.in0_AT6 f.wrPtrEn.in1_AT6)))
(assert (= mpt.ssa_cnt.out_AT6 (ite (= mpt.ssa_cnt.sel_AT6 #b0) mpt.ssa_cnt.in0_AT6 mpt.ssa_cnt.in1_AT6)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT6 f.wrPtrp1.in1_AT6) f.wrPtrp1.out_AT6))
(assert (= (bvand data_out_vld_and1.in0_AT6 data_out_vld_and1.in1_AT6) data_out_vld_and1.out_AT6))
(assert (= mpt.decr_mux.out_AT6 (ite (= mpt.decr_mux.sel_AT6 #b0) mpt.decr_mux.in0_AT6 mpt.decr_mux.in1_AT6)))
(assert (= f.emptyEq.out_AT6 (bvcomp f.emptyEq.in0_AT6 f.emptyEq.in1_AT6)))
(assert (bvule _-_state_id1_-__AT6 #b10))
(assert (=> (= _-_state_id1_-__AT6 #b10) (and (and true (= self.rst_AT6 #b0)) (= reset_done_AT6 #b1))))
(assert (=> (= _-_state_id1_-__AT6 #b01) (and (and (and (and (and true (= self.rst_AT6 #b1)) (= self.push_AT6 #b0)) (= self.pop_AT6 #b0)) (= reset_done_AT6 #b0)) (= en.out_AT6 #b0))))
(assert (=> (= _-_state_id1_-__AT6 #b00) (and (and (and (and (and true (= self.rst_AT6 #b1)) (= self.push_AT6 #b0)) (= self.pop_AT6 #b0)) (= reset_done_AT6 #b0)) (= en.out_AT6 #b0))))
(assert (= f.fullEq_2.out_AT6 (bvcomp f.fullEq_2.in0_AT6 f.fullEq_2.in1_AT6)))
(assert (= f.fullEq_1.in1_AT6 ((_ extract 3 3) f.wrPtr.out_AT6)))
(assert (= f.fullEq_1.in0_AT6 ((_ extract 3 3) f.rdPtr.out_AT6)))
(assert (= en.out_AT6 mpt.not_captured.in_AT6))
(assert (= self.start_AT6 start_and_push.in0_AT6))
(assert (= prop_signal_or.out_AT6 self.prop_signal_AT6))
(assert (= f.fullCalc.out_AT6 self.full_AT6))
(assert (= data_out_vld_and2.out_AT6 self.data_out_vld_AT6))
(assert (= mp_en.out_AT6 next_magic_packet.sel_AT6))
(assert (= data_out_vld_and2.in1_AT6 next_cnt_eq0.out_AT6))
(assert (= not_data_out_vld.out_AT6 prop_signal_or.in0_AT6))
(assert (= mpt.next_cnt_and1.in0_AT6 mpt.ssa_cnt_gt_0.out_AT6))
(assert (= mpt.ssa_cnt.sel_AT6 mpt.ssa_cnt_and2.out_AT6))
(assert (= mpt.ssa_cnt_and1.out_AT6 mpt.ssa_cnt_and2.in0_AT6))
(assert (= mpt.not_captured.out_AT6 mpt.ssa_cnt_and2.in1_AT6))
(assert (= mpt.ssa_cnt_gt_0.in1_AT6 #b0000))
(assert (= mpt.next_cnt.in1_AT6 #b0000))
(assert (= mpt.decr_mux.sel_AT6 mpt.next_cnt_and1.out_AT6))
(assert (= mpt.decr_mux.out_AT6 mpt.next_cnt.in0_AT6))
(assert (= mpt.ssa_cnt.out_AT6 mpt.ssa_cnt_m1.in0_AT6))
(assert (= mpt.ssa_cnt.out_AT6 mpt.ssa_cnt_gt_0.in0_AT6))
(assert (= mpt.decr_mux.in1_AT6 mpt.ssa_cnt_m1.out_AT6))
(assert (= mpt.decr_mux.in0_AT6 mpt.ssa_cnt.out_AT6))
(assert (= mpt.ssa_cnt_m1.in1_AT6 #b0001))
(assert (= mpt.cnt_p1.out_AT6 mpt.ssa_cnt.in1_AT6))
(assert (= mpt.cnt_p1.in1_AT6 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT6 mpt.ssa_cnt_and1.in0_AT6))
(assert (= mpt.cnt_lt_depth.in1_AT6 #b1000))
(assert (= mpt.next_cnt.out_AT6 next_cnt_eq0.in0_AT6))
(assert (= mpt.cnt.in_AT6 mpt.next_cnt.out_AT6))
(assert (= mp_en.in1_AT6 not_en.out_AT6))
(assert (= magic_packet_eq.out_AT6 prop_signal_or.in1_AT6))
(assert (= magic_packet.out_AT6 next_magic_packet.in0_AT6))
(assert (= magic_packet.out_AT6 magic_packet_eq.in0_AT6))
(assert (= magic_packet.in_AT6 next_magic_packet.out_AT6))
(assert (= f.wrPtrEn.in1_AT6 f.wrPtrp1.out_AT6))
(assert (= f.wrPtrEn.out_AT6 f.wrPtrRst.in0_AT6))
(assert (= f.wrPtr.in_AT6 f.wrPtrRst.out_AT6))
(assert (= mpt.next_cnt.sel_AT6 self.rst_AT6))
(assert (= f.wrPtrRst.sel_AT6 self.rst_AT6))
(assert (= f.wrPtrRst.in1_AT6 #b0000))
(assert (= f.rdPtrRst.sel_AT6 self.rst_AT6))
(assert (= mpt.next_cnt_and1.in1_AT6 self.pop_AT6))
(assert (= f.rdPtrRst.in1_AT6 #b0000))
(assert (= f.rdPtrEn.out_AT6 f.rdPtrRst.in0_AT6))
(assert (= f.rdPtrEn.in1_AT6 f.rdPtrp1.out_AT6))
(assert (= f.rdPtrEn.sel_AT6 self.pop_AT6))
(assert (= f.rdPtr.in_AT6 f.rdPtrRst.out_AT6))
(assert (= self.push_AT6 start_and_push.in1_AT6))
(assert (= mpt.ssa_cnt_and1.in1_AT6 self.push_AT6))
(assert (= f.wrPtrEn.sel_AT6 self.push_AT6))
(assert (= f.wrPtrp1.in0_AT6 #b0001))
(assert (= f.rdPtrp1.in0_AT6 #b0001))
(assert (= next_magic_packet.in1_AT6 self.data_in_AT6))
(assert (= f.mem.wdata_AT6 self.data_in_AT6))
(assert (= f.mem.wen_AT6 self.push_AT6))
(assert (= f.mem.rdata_AT6 self.data_out_AT6))
(assert (= f.mem.rdata_AT6 magic_packet_eq.in1_AT6))
(assert (= f.mem.waddr_AT6 f.wrPtrSlice.out_AT6))
(assert (= f.fullCalc.in1_AT6 f.fullEq_2.out_AT6))
(assert (= f.mem.raddr_AT6 f.rdPtrSlice.out_AT6))
(assert (= f.fullEq_2.in0_AT6 f.rdPtrSlice.out_AT6))
(assert (= next_cnt_eq0.in1_AT6 #b0000))
(assert (= cnt_gt_0.in1_AT6 #b0000))
(assert (= mpt.cnt.out_AT6 mpt.cnt_p1.in0_AT6))
(assert (= mpt.cnt.out_AT6 mpt.cnt_lt_depth.in0_AT6))
(assert (= mpt.cnt.out_AT6 mpt.ssa_cnt.in0_AT6))
(assert (= cnt_gt_0.in0_AT6 mpt.cnt.out_AT6))
(assert (= cnt_gt_0.out_AT6 data_out_vld_and1.in1_AT6))
(assert (= f.fullEq_2.in1_AT6 f.wrPtrSlice.out_AT6))
(assert (= f.fullEq_1.out_AT6 f.notfullEq_1.in_AT6))
(assert (= f.fullCalc.in0_AT6 f.notfullEq_1.out_AT6))
(assert (= f.wrPtr.out_AT6 f.wrPtrSlice.in_AT6))
(assert (= f.wrPtr.out_AT6 f.wrPtrEn.in0_AT6))
(assert (= f.wrPtr.out_AT6 f.wrPtrp1.in1_AT6))
(assert (= f.emptyEq.out_AT6 self.empty_AT6))
(assert (= f.rdPtr.out_AT6 f.rdPtrp1.in1_AT6))
(assert (= f.rdPtr.out_AT6 f.rdPtrEn.in0_AT6))
(assert (= f.rdPtr.out_AT6 f.rdPtrSlice.in_AT6))
(assert (= f.emptyEq.in1_AT6 f.wrPtr.out_AT6))
(assert (= mp_en.in0_AT6 start_and_push.out_AT6))
(assert (= en_or_sp.in1_AT6 start_and_push.out_AT6))
(assert (= f.emptyEq.in0_AT6 f.rdPtr.out_AT6))
(assert (= mpt.cnt.clk_AT6 self.clk_AT6))
(assert (= magic_packet.clk_AT6 self.clk_AT6))
(assert (= f.wrPtr.clk_AT6 self.clk_AT6))
(assert (= f.rdPtr.clk_AT6 self.clk_AT6))
(assert (= f.mem.clk_AT6 self.clk_AT6))
(assert (= en.in_AT6 en_or_sp.out_AT6))
(assert (= data_out_vld_and2.out_AT6 not_data_out_vld.in_AT6))
(assert (= en.clk_AT6 self.clk_AT6))
(assert (= data_out_vld_and1.out_AT6 data_out_vld_and2.in0_AT6))
(assert (= en.out_AT6 not_en.in_AT6))
(assert (= en.out_AT6 en_or_sp.in0_AT6))
(assert (= data_out_vld_and1.in0_AT6 en.out_AT6))
(assert (= (bvor prop_signal_or.in0_AT6 prop_signal_or.in1_AT6) prop_signal_or.out_AT6))
(assert (= (bvnot not_en.in_AT6) not_en.out_AT6))
(assert (= self.clk_AT6 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT6) f.rdPtrSlice.out_AT6))
(assert (= (bvnot mpt.not_captured.in_AT6) mpt.not_captured.out_AT6))
(assert (= (bvand mpt.next_cnt_and1.in0_AT6 mpt.next_cnt_and1.in1_AT6) mpt.next_cnt_and1.out_AT6))
(assert (= (bvand start_and_push.in0_AT6 start_and_push.in1_AT6) start_and_push.out_AT6))
(assert (= next_cnt_eq0.out_AT6 (bvcomp next_cnt_eq0.in0_AT6 next_cnt_eq0.in1_AT6)))
(assert (= f.rdPtrRst.out_AT6 (ite (= f.rdPtrRst.sel_AT6 #b0) f.rdPtrRst.in0_AT6 f.rdPtrRst.in1_AT6)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT6 mpt.ssa_cnt_gt_0.in0_AT6) (= mpt.ssa_cnt_gt_0.out_AT6 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT6 mpt.ssa_cnt_and2.in1_AT6) mpt.ssa_cnt_and2.out_AT6))
(assert (= f.mem.array_AT6 (store f.mem.array_AT5 f.mem.waddr_AT5 (ite (= f.mem.wen_AT5 #b1) f.mem.wdata_AT5 (select f.mem.array_AT5 f.mem.waddr_AT5)))))
(assert (= magic_packet.init_AT5 magic_packet.init_AT6))
(assert (= magic_packet.out_AT6 magic_packet.in_AT5))
(assert (= f.rdPtr.out_AT6 f.rdPtr.in_AT5))
(assert (=> (= _-_state_id1_-__AT5 #b10) (= _-_state_id1_-__AT6 #b10)))
(assert (=> (= _-_state_id1_-__AT5 #b01) (= _-_state_id1_-__AT6 #b10)))
(assert (=> (= _-_state_id1_-__AT5 #b00) (= _-_state_id1_-__AT6 #b01)))
(assert (= en.out_AT6 en.in_AT5))
(assert (= en.init_AT5 en.init_AT6))
(assert (= mpt.cnt.out_AT6 mpt.cnt.in_AT5))
(assert (= f.wrPtr.out_AT6 f.wrPtr.in_AT5))
(push 1)

(assert (not (=> (= reset_done_AT6 #b1) (= self.prop_signal_AT6 #b1))))
(check-sat)

(pop 1)
(declare-fun f.mem.array_AT7 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun magic_packet.init_AT7 () (_ BitVec 8))
(declare-fun magic_packet.out_AT7 () (_ BitVec 8))
(declare-fun f.rdPtr.out_AT7 () (_ BitVec 4))
(declare-fun _-_state_id1_-__AT7 () (_ BitVec 2))
(declare-fun en.out_AT7 () (_ BitVec 1))
(declare-fun en.init_AT7 () (_ BitVec 1))
(declare-fun mpt.cnt.out_AT7 () (_ BitVec 4))
(declare-fun f.wrPtr.out_AT7 () (_ BitVec 4))
(declare-fun self.pop_AT7 () (_ BitVec 1))
(declare-fun self.empty_AT7 () (_ BitVec 1))
(declare-fun self.push_AT7 () (_ BitVec 1))
(declare-fun self.full_AT7 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT7 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT7 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT7 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT7 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT7 () (_ BitVec 8))
(declare-fun next_magic_packet.sel_AT7 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT7 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT7 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT7 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT7 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT7 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT7 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT7 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT7 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT7 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT7 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT7 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT7 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT7 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT7 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT7 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT7 () (_ BitVec 1))
(declare-fun mpt.next_cnt.out_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT7 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT7 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT7 () (_ BitVec 4))
(declare-fun mp_en.out_AT7 () (_ BitVec 1))
(declare-fun mp_en.in1_AT7 () (_ BitVec 1))
(declare-fun mp_en.in0_AT7 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT7 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT7 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT7 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT7 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT7 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT7 () (_ BitVec 3))
(declare-fun f.mem.rdata_AT7 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT7 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT7 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT7 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT7 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT7 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT7 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.out_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT7 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT7 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT7 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT7 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT7 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT7 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT7 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT7 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT7 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT7 () (_ BitVec 1))
(declare-fun reset_done_AT7 () (_ BitVec 1))
(declare-fun self.rst_AT7 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT7 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT7 () (_ BitVec 3))
(declare-fun f.fullEq_2.out_AT7 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT7 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT7 () (_ BitVec 1))
(declare-fun self.start_AT7 () (_ BitVec 1))
(declare-fun self.prop_signal_AT7 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT7 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT7 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT7 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT7 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT7 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT7 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT7 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT7 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in0_AT7 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT7 () (_ BitVec 4))
(declare-fun not_en.out_AT7 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT7 () (_ BitVec 1))
(declare-fun magic_packet.in_AT7 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT7 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT7 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT7 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT7 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT7 () (_ BitVec 1))
(declare-fun self.data_in_AT7 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT7 () (_ BitVec 8))
(declare-fun f.mem.wen_AT7 () (_ BitVec 1))
(declare-fun self.data_out_AT7 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT7 () (_ BitVec 3))
(declare-fun f.rdPtrSlice.out_AT7 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT7 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT7 () (_ BitVec 4))
(declare-fun start_and_push.out_AT7 () (_ BitVec 1))
(declare-fun self.clk_AT7 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT7 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT7 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT7 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT7 () (_ BitVec 1))
(declare-fun f.mem.clk_AT7 () (_ BitVec 1))
(declare-fun en.in_AT7 () (_ BitVec 1))
(declare-fun en.clk_AT7 () (_ BitVec 1))
(declare-fun not_en.in_AT7 () (_ BitVec 1))

(assert (=> (= self.empty_AT7 #b1) (= self.pop_AT7 #b0)))
(assert (=> (= self.full_AT7 #b1) (= self.push_AT7 #b0)))
(assert (= magic_packet_eq.out_AT7 (bvcomp magic_packet_eq.in0_AT7 magic_packet_eq.in1_AT7)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT7 mpt.ssa_cnt_m1.in1_AT7) mpt.ssa_cnt_m1.out_AT7))
(assert (= next_magic_packet.out_AT7 (ite (= next_magic_packet.sel_AT7 #b0) next_magic_packet.in0_AT7 next_magic_packet.in1_AT7)))
(assert (= (bvadd f.rdPtrp1.in0_AT7 f.rdPtrp1.in1_AT7) f.rdPtrp1.out_AT7))
(assert (= (bvadd mpt.cnt_p1.in0_AT7 mpt.cnt_p1.in1_AT7) mpt.cnt_p1.out_AT7))
(assert (= f.rdPtrEn.out_AT7 (ite (= f.rdPtrEn.sel_AT7 #b0) f.rdPtrEn.in0_AT7 f.rdPtrEn.in1_AT7)))
(assert (= (bvult cnt_gt_0.in1_AT7 cnt_gt_0.in0_AT7) (= cnt_gt_0.out_AT7 #b1)))
(assert (= (bvor en_or_sp.in0_AT7 en_or_sp.in1_AT7) en_or_sp.out_AT7))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT7 mpt.cnt_lt_depth.in1_AT7) (= mpt.cnt_lt_depth.out_AT7 #b1)))
(assert (= (bvand f.fullCalc.in0_AT7 f.fullCalc.in1_AT7) f.fullCalc.out_AT7))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT7 mpt.ssa_cnt_and1.in1_AT7) mpt.ssa_cnt_and1.out_AT7))
(assert (= mpt.next_cnt.out_AT7 (ite (= mpt.next_cnt.sel_AT7 #b0) mpt.next_cnt.in0_AT7 mpt.next_cnt.in1_AT7)))
(assert (= f.wrPtrRst.out_AT7 (ite (= f.wrPtrRst.sel_AT7 #b0) f.wrPtrRst.in0_AT7 f.wrPtrRst.in1_AT7)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT7) f.wrPtrSlice.out_AT7))
(assert (= (bvand mp_en.in0_AT7 mp_en.in1_AT7) mp_en.out_AT7))
(assert (= (bvnot f.notfullEq_1.in_AT7) f.notfullEq_1.out_AT7))
(assert (= f.fullEq_1.out_AT7 (bvcomp f.fullEq_1.in0_AT7 f.fullEq_1.in1_AT7)))
(assert (= f.mem.rdata_AT7 (select f.mem.array_AT7 f.mem.raddr_AT7)))
(assert (= (bvand data_out_vld_and2.in0_AT7 data_out_vld_and2.in1_AT7) data_out_vld_and2.out_AT7))
(assert (= (bvnot not_data_out_vld.in_AT7) not_data_out_vld.out_AT7))
(assert (= f.wrPtrEn.out_AT7 (ite (= f.wrPtrEn.sel_AT7 #b0) f.wrPtrEn.in0_AT7 f.wrPtrEn.in1_AT7)))
(assert (= mpt.ssa_cnt.out_AT7 (ite (= mpt.ssa_cnt.sel_AT7 #b0) mpt.ssa_cnt.in0_AT7 mpt.ssa_cnt.in1_AT7)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT7 f.wrPtrp1.in1_AT7) f.wrPtrp1.out_AT7))
(assert (= (bvand data_out_vld_and1.in0_AT7 data_out_vld_and1.in1_AT7) data_out_vld_and1.out_AT7))
(assert (= mpt.decr_mux.out_AT7 (ite (= mpt.decr_mux.sel_AT7 #b0) mpt.decr_mux.in0_AT7 mpt.decr_mux.in1_AT7)))
(assert (= f.emptyEq.out_AT7 (bvcomp f.emptyEq.in0_AT7 f.emptyEq.in1_AT7)))
(assert (bvule _-_state_id1_-__AT7 #b10))
(assert (=> (= _-_state_id1_-__AT7 #b10) (and (and true (= self.rst_AT7 #b0)) (= reset_done_AT7 #b1))))
(assert (=> (= _-_state_id1_-__AT7 #b01) (and (and (and (and (and true (= self.rst_AT7 #b1)) (= self.push_AT7 #b0)) (= self.pop_AT7 #b0)) (= reset_done_AT7 #b0)) (= en.out_AT7 #b0))))
(assert (=> (= _-_state_id1_-__AT7 #b00) (and (and (and (and (and true (= self.rst_AT7 #b1)) (= self.push_AT7 #b0)) (= self.pop_AT7 #b0)) (= reset_done_AT7 #b0)) (= en.out_AT7 #b0))))
(assert (= f.fullEq_2.out_AT7 (bvcomp f.fullEq_2.in0_AT7 f.fullEq_2.in1_AT7)))
(assert (= f.fullEq_1.in1_AT7 ((_ extract 3 3) f.wrPtr.out_AT7)))
(assert (= f.fullEq_1.in0_AT7 ((_ extract 3 3) f.rdPtr.out_AT7)))
(assert (= en.out_AT7 mpt.not_captured.in_AT7))
(assert (= self.start_AT7 start_and_push.in0_AT7))
(assert (= prop_signal_or.out_AT7 self.prop_signal_AT7))
(assert (= f.fullCalc.out_AT7 self.full_AT7))
(assert (= data_out_vld_and2.out_AT7 self.data_out_vld_AT7))
(assert (= mp_en.out_AT7 next_magic_packet.sel_AT7))
(assert (= data_out_vld_and2.in1_AT7 next_cnt_eq0.out_AT7))
(assert (= not_data_out_vld.out_AT7 prop_signal_or.in0_AT7))
(assert (= mpt.next_cnt_and1.in0_AT7 mpt.ssa_cnt_gt_0.out_AT7))
(assert (= mpt.ssa_cnt.sel_AT7 mpt.ssa_cnt_and2.out_AT7))
(assert (= mpt.ssa_cnt_and1.out_AT7 mpt.ssa_cnt_and2.in0_AT7))
(assert (= mpt.not_captured.out_AT7 mpt.ssa_cnt_and2.in1_AT7))
(assert (= mpt.ssa_cnt_gt_0.in1_AT7 #b0000))
(assert (= mpt.next_cnt.in1_AT7 #b0000))
(assert (= mpt.decr_mux.sel_AT7 mpt.next_cnt_and1.out_AT7))
(assert (= mpt.decr_mux.out_AT7 mpt.next_cnt.in0_AT7))
(assert (= mpt.ssa_cnt.out_AT7 mpt.ssa_cnt_m1.in0_AT7))
(assert (= mpt.ssa_cnt.out_AT7 mpt.ssa_cnt_gt_0.in0_AT7))
(assert (= mpt.decr_mux.in1_AT7 mpt.ssa_cnt_m1.out_AT7))
(assert (= mpt.decr_mux.in0_AT7 mpt.ssa_cnt.out_AT7))
(assert (= mpt.ssa_cnt_m1.in1_AT7 #b0001))
(assert (= mpt.cnt_p1.out_AT7 mpt.ssa_cnt.in1_AT7))
(assert (= mpt.cnt_p1.in1_AT7 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT7 mpt.ssa_cnt_and1.in0_AT7))
(assert (= mpt.cnt_lt_depth.in1_AT7 #b1000))
(assert (= mpt.next_cnt.out_AT7 next_cnt_eq0.in0_AT7))
(assert (= mpt.cnt.in_AT7 mpt.next_cnt.out_AT7))
(assert (= mp_en.in1_AT7 not_en.out_AT7))
(assert (= magic_packet_eq.out_AT7 prop_signal_or.in1_AT7))
(assert (= magic_packet.out_AT7 next_magic_packet.in0_AT7))
(assert (= magic_packet.out_AT7 magic_packet_eq.in0_AT7))
(assert (= magic_packet.in_AT7 next_magic_packet.out_AT7))
(assert (= f.wrPtrEn.in1_AT7 f.wrPtrp1.out_AT7))
(assert (= f.wrPtrEn.out_AT7 f.wrPtrRst.in0_AT7))
(assert (= f.wrPtr.in_AT7 f.wrPtrRst.out_AT7))
(assert (= mpt.next_cnt.sel_AT7 self.rst_AT7))
(assert (= f.wrPtrRst.sel_AT7 self.rst_AT7))
(assert (= f.wrPtrRst.in1_AT7 #b0000))
(assert (= f.rdPtrRst.sel_AT7 self.rst_AT7))
(assert (= mpt.next_cnt_and1.in1_AT7 self.pop_AT7))
(assert (= f.rdPtrRst.in1_AT7 #b0000))
(assert (= f.rdPtrEn.out_AT7 f.rdPtrRst.in0_AT7))
(assert (= f.rdPtrEn.in1_AT7 f.rdPtrp1.out_AT7))
(assert (= f.rdPtrEn.sel_AT7 self.pop_AT7))
(assert (= f.rdPtr.in_AT7 f.rdPtrRst.out_AT7))
(assert (= self.push_AT7 start_and_push.in1_AT7))
(assert (= mpt.ssa_cnt_and1.in1_AT7 self.push_AT7))
(assert (= f.wrPtrEn.sel_AT7 self.push_AT7))
(assert (= f.wrPtrp1.in0_AT7 #b0001))
(assert (= f.rdPtrp1.in0_AT7 #b0001))
(assert (= next_magic_packet.in1_AT7 self.data_in_AT7))
(assert (= f.mem.wdata_AT7 self.data_in_AT7))
(assert (= f.mem.wen_AT7 self.push_AT7))
(assert (= f.mem.rdata_AT7 self.data_out_AT7))
(assert (= f.mem.rdata_AT7 magic_packet_eq.in1_AT7))
(assert (= f.mem.waddr_AT7 f.wrPtrSlice.out_AT7))
(assert (= f.fullCalc.in1_AT7 f.fullEq_2.out_AT7))
(assert (= f.mem.raddr_AT7 f.rdPtrSlice.out_AT7))
(assert (= f.fullEq_2.in0_AT7 f.rdPtrSlice.out_AT7))
(assert (= next_cnt_eq0.in1_AT7 #b0000))
(assert (= cnt_gt_0.in1_AT7 #b0000))
(assert (= mpt.cnt.out_AT7 mpt.cnt_p1.in0_AT7))
(assert (= mpt.cnt.out_AT7 mpt.cnt_lt_depth.in0_AT7))
(assert (= mpt.cnt.out_AT7 mpt.ssa_cnt.in0_AT7))
(assert (= cnt_gt_0.in0_AT7 mpt.cnt.out_AT7))
(assert (= cnt_gt_0.out_AT7 data_out_vld_and1.in1_AT7))
(assert (= f.fullEq_2.in1_AT7 f.wrPtrSlice.out_AT7))
(assert (= f.fullEq_1.out_AT7 f.notfullEq_1.in_AT7))
(assert (= f.fullCalc.in0_AT7 f.notfullEq_1.out_AT7))
(assert (= f.wrPtr.out_AT7 f.wrPtrSlice.in_AT7))
(assert (= f.wrPtr.out_AT7 f.wrPtrEn.in0_AT7))
(assert (= f.wrPtr.out_AT7 f.wrPtrp1.in1_AT7))
(assert (= f.emptyEq.out_AT7 self.empty_AT7))
(assert (= f.rdPtr.out_AT7 f.rdPtrp1.in1_AT7))
(assert (= f.rdPtr.out_AT7 f.rdPtrEn.in0_AT7))
(assert (= f.rdPtr.out_AT7 f.rdPtrSlice.in_AT7))
(assert (= f.emptyEq.in1_AT7 f.wrPtr.out_AT7))
(assert (= mp_en.in0_AT7 start_and_push.out_AT7))
(assert (= en_or_sp.in1_AT7 start_and_push.out_AT7))
(assert (= f.emptyEq.in0_AT7 f.rdPtr.out_AT7))
(assert (= mpt.cnt.clk_AT7 self.clk_AT7))
(assert (= magic_packet.clk_AT7 self.clk_AT7))
(assert (= f.wrPtr.clk_AT7 self.clk_AT7))
(assert (= f.rdPtr.clk_AT7 self.clk_AT7))
(assert (= f.mem.clk_AT7 self.clk_AT7))
(assert (= en.in_AT7 en_or_sp.out_AT7))
(assert (= data_out_vld_and2.out_AT7 not_data_out_vld.in_AT7))
(assert (= en.clk_AT7 self.clk_AT7))
(assert (= data_out_vld_and1.out_AT7 data_out_vld_and2.in0_AT7))
(assert (= en.out_AT7 not_en.in_AT7))
(assert (= en.out_AT7 en_or_sp.in0_AT7))
(assert (= data_out_vld_and1.in0_AT7 en.out_AT7))
(assert (= (bvor prop_signal_or.in0_AT7 prop_signal_or.in1_AT7) prop_signal_or.out_AT7))
(assert (= (bvnot not_en.in_AT7) not_en.out_AT7))
(assert (= self.clk_AT7 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT7) f.rdPtrSlice.out_AT7))
(assert (= (bvnot mpt.not_captured.in_AT7) mpt.not_captured.out_AT7))
(assert (= (bvand mpt.next_cnt_and1.in0_AT7 mpt.next_cnt_and1.in1_AT7) mpt.next_cnt_and1.out_AT7))
(assert (= (bvand start_and_push.in0_AT7 start_and_push.in1_AT7) start_and_push.out_AT7))
(assert (= next_cnt_eq0.out_AT7 (bvcomp next_cnt_eq0.in0_AT7 next_cnt_eq0.in1_AT7)))
(assert (= f.rdPtrRst.out_AT7 (ite (= f.rdPtrRst.sel_AT7 #b0) f.rdPtrRst.in0_AT7 f.rdPtrRst.in1_AT7)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT7 mpt.ssa_cnt_gt_0.in0_AT7) (= mpt.ssa_cnt_gt_0.out_AT7 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT7 mpt.ssa_cnt_and2.in1_AT7) mpt.ssa_cnt_and2.out_AT7))
(assert (= f.mem.array_AT7 (store f.mem.array_AT6 f.mem.waddr_AT6 (ite (= f.mem.wen_AT6 #b1) f.mem.wdata_AT6 (select f.mem.array_AT6 f.mem.waddr_AT6)))))
(assert (= magic_packet.init_AT6 magic_packet.init_AT7))
(assert (= magic_packet.out_AT7 magic_packet.in_AT6))
(assert (= f.rdPtr.out_AT7 f.rdPtr.in_AT6))
(assert (=> (= _-_state_id1_-__AT6 #b10) (= _-_state_id1_-__AT7 #b10)))
(assert (=> (= _-_state_id1_-__AT6 #b01) (= _-_state_id1_-__AT7 #b10)))
(assert (=> (= _-_state_id1_-__AT6 #b00) (= _-_state_id1_-__AT7 #b01)))
(assert (= en.out_AT7 en.in_AT6))
(assert (= en.init_AT6 en.init_AT7))
(assert (= mpt.cnt.out_AT7 mpt.cnt.in_AT6))
(assert (= f.wrPtr.out_AT7 f.wrPtr.in_AT6))
(push 1)

(assert (not (=> (= reset_done_AT7 #b1) (= self.prop_signal_AT7 #b1))))
(check-sat)

(pop 1)
(declare-fun f.mem.array_AT8 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun magic_packet.init_AT8 () (_ BitVec 8))
(declare-fun magic_packet.out_AT8 () (_ BitVec 8))
(declare-fun f.rdPtr.out_AT8 () (_ BitVec 4))
(declare-fun _-_state_id1_-__AT8 () (_ BitVec 2))
(declare-fun en.out_AT8 () (_ BitVec 1))
(declare-fun en.init_AT8 () (_ BitVec 1))
(declare-fun mpt.cnt.out_AT8 () (_ BitVec 4))
(declare-fun f.wrPtr.out_AT8 () (_ BitVec 4))
(declare-fun self.pop_AT8 () (_ BitVec 1))
(declare-fun self.empty_AT8 () (_ BitVec 1))
(declare-fun self.push_AT8 () (_ BitVec 1))
(declare-fun self.full_AT8 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT8 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT8 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT8 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT8 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT8 () (_ BitVec 8))
(declare-fun next_magic_packet.sel_AT8 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT8 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT8 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT8 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT8 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT8 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT8 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT8 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT8 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT8 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT8 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT8 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT8 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT8 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT8 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT8 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT8 () (_ BitVec 1))
(declare-fun mpt.next_cnt.out_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT8 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT8 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT8 () (_ BitVec 4))
(declare-fun mp_en.out_AT8 () (_ BitVec 1))
(declare-fun mp_en.in1_AT8 () (_ BitVec 1))
(declare-fun mp_en.in0_AT8 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT8 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT8 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT8 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT8 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT8 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT8 () (_ BitVec 3))
(declare-fun f.mem.rdata_AT8 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT8 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT8 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT8 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT8 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT8 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT8 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.out_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT8 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT8 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT8 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT8 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT8 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT8 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT8 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT8 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT8 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT8 () (_ BitVec 1))
(declare-fun reset_done_AT8 () (_ BitVec 1))
(declare-fun self.rst_AT8 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT8 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT8 () (_ BitVec 3))
(declare-fun f.fullEq_2.out_AT8 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT8 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT8 () (_ BitVec 1))
(declare-fun self.start_AT8 () (_ BitVec 1))
(declare-fun self.prop_signal_AT8 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT8 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT8 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT8 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT8 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT8 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT8 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT8 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT8 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in0_AT8 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT8 () (_ BitVec 4))
(declare-fun not_en.out_AT8 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT8 () (_ BitVec 1))
(declare-fun magic_packet.in_AT8 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT8 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT8 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT8 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT8 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT8 () (_ BitVec 1))
(declare-fun self.data_in_AT8 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT8 () (_ BitVec 8))
(declare-fun f.mem.wen_AT8 () (_ BitVec 1))
(declare-fun self.data_out_AT8 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT8 () (_ BitVec 3))
(declare-fun f.rdPtrSlice.out_AT8 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT8 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT8 () (_ BitVec 4))
(declare-fun start_and_push.out_AT8 () (_ BitVec 1))
(declare-fun self.clk_AT8 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT8 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT8 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT8 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT8 () (_ BitVec 1))
(declare-fun f.mem.clk_AT8 () (_ BitVec 1))
(declare-fun en.in_AT8 () (_ BitVec 1))
(declare-fun en.clk_AT8 () (_ BitVec 1))
(declare-fun not_en.in_AT8 () (_ BitVec 1))

(assert (=> (= self.empty_AT8 #b1) (= self.pop_AT8 #b0)))
(assert (=> (= self.full_AT8 #b1) (= self.push_AT8 #b0)))
(assert (= magic_packet_eq.out_AT8 (bvcomp magic_packet_eq.in0_AT8 magic_packet_eq.in1_AT8)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT8 mpt.ssa_cnt_m1.in1_AT8) mpt.ssa_cnt_m1.out_AT8))
(assert (= next_magic_packet.out_AT8 (ite (= next_magic_packet.sel_AT8 #b0) next_magic_packet.in0_AT8 next_magic_packet.in1_AT8)))
(assert (= (bvadd f.rdPtrp1.in0_AT8 f.rdPtrp1.in1_AT8) f.rdPtrp1.out_AT8))
(assert (= (bvadd mpt.cnt_p1.in0_AT8 mpt.cnt_p1.in1_AT8) mpt.cnt_p1.out_AT8))
(assert (= f.rdPtrEn.out_AT8 (ite (= f.rdPtrEn.sel_AT8 #b0) f.rdPtrEn.in0_AT8 f.rdPtrEn.in1_AT8)))
(assert (= (bvult cnt_gt_0.in1_AT8 cnt_gt_0.in0_AT8) (= cnt_gt_0.out_AT8 #b1)))
(assert (= (bvor en_or_sp.in0_AT8 en_or_sp.in1_AT8) en_or_sp.out_AT8))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT8 mpt.cnt_lt_depth.in1_AT8) (= mpt.cnt_lt_depth.out_AT8 #b1)))
(assert (= (bvand f.fullCalc.in0_AT8 f.fullCalc.in1_AT8) f.fullCalc.out_AT8))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT8 mpt.ssa_cnt_and1.in1_AT8) mpt.ssa_cnt_and1.out_AT8))
(assert (= mpt.next_cnt.out_AT8 (ite (= mpt.next_cnt.sel_AT8 #b0) mpt.next_cnt.in0_AT8 mpt.next_cnt.in1_AT8)))
(assert (= f.wrPtrRst.out_AT8 (ite (= f.wrPtrRst.sel_AT8 #b0) f.wrPtrRst.in0_AT8 f.wrPtrRst.in1_AT8)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT8) f.wrPtrSlice.out_AT8))
(assert (= (bvand mp_en.in0_AT8 mp_en.in1_AT8) mp_en.out_AT8))
(assert (= (bvnot f.notfullEq_1.in_AT8) f.notfullEq_1.out_AT8))
(assert (= f.fullEq_1.out_AT8 (bvcomp f.fullEq_1.in0_AT8 f.fullEq_1.in1_AT8)))
(assert (= f.mem.rdata_AT8 (select f.mem.array_AT8 f.mem.raddr_AT8)))
(assert (= (bvand data_out_vld_and2.in0_AT8 data_out_vld_and2.in1_AT8) data_out_vld_and2.out_AT8))
(assert (= (bvnot not_data_out_vld.in_AT8) not_data_out_vld.out_AT8))
(assert (= f.wrPtrEn.out_AT8 (ite (= f.wrPtrEn.sel_AT8 #b0) f.wrPtrEn.in0_AT8 f.wrPtrEn.in1_AT8)))
(assert (= mpt.ssa_cnt.out_AT8 (ite (= mpt.ssa_cnt.sel_AT8 #b0) mpt.ssa_cnt.in0_AT8 mpt.ssa_cnt.in1_AT8)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT8 f.wrPtrp1.in1_AT8) f.wrPtrp1.out_AT8))
(assert (= (bvand data_out_vld_and1.in0_AT8 data_out_vld_and1.in1_AT8) data_out_vld_and1.out_AT8))
(assert (= mpt.decr_mux.out_AT8 (ite (= mpt.decr_mux.sel_AT8 #b0) mpt.decr_mux.in0_AT8 mpt.decr_mux.in1_AT8)))
(assert (= f.emptyEq.out_AT8 (bvcomp f.emptyEq.in0_AT8 f.emptyEq.in1_AT8)))
(assert (bvule _-_state_id1_-__AT8 #b10))
(assert (=> (= _-_state_id1_-__AT8 #b10) (and (and true (= self.rst_AT8 #b0)) (= reset_done_AT8 #b1))))
(assert (=> (= _-_state_id1_-__AT8 #b01) (and (and (and (and (and true (= self.rst_AT8 #b1)) (= self.push_AT8 #b0)) (= self.pop_AT8 #b0)) (= reset_done_AT8 #b0)) (= en.out_AT8 #b0))))
(assert (=> (= _-_state_id1_-__AT8 #b00) (and (and (and (and (and true (= self.rst_AT8 #b1)) (= self.push_AT8 #b0)) (= self.pop_AT8 #b0)) (= reset_done_AT8 #b0)) (= en.out_AT8 #b0))))
(assert (= f.fullEq_2.out_AT8 (bvcomp f.fullEq_2.in0_AT8 f.fullEq_2.in1_AT8)))
(assert (= f.fullEq_1.in1_AT8 ((_ extract 3 3) f.wrPtr.out_AT8)))
(assert (= f.fullEq_1.in0_AT8 ((_ extract 3 3) f.rdPtr.out_AT8)))
(assert (= en.out_AT8 mpt.not_captured.in_AT8))
(assert (= self.start_AT8 start_and_push.in0_AT8))
(assert (= prop_signal_or.out_AT8 self.prop_signal_AT8))
(assert (= f.fullCalc.out_AT8 self.full_AT8))
(assert (= data_out_vld_and2.out_AT8 self.data_out_vld_AT8))
(assert (= mp_en.out_AT8 next_magic_packet.sel_AT8))
(assert (= data_out_vld_and2.in1_AT8 next_cnt_eq0.out_AT8))
(assert (= not_data_out_vld.out_AT8 prop_signal_or.in0_AT8))
(assert (= mpt.next_cnt_and1.in0_AT8 mpt.ssa_cnt_gt_0.out_AT8))
(assert (= mpt.ssa_cnt.sel_AT8 mpt.ssa_cnt_and2.out_AT8))
(assert (= mpt.ssa_cnt_and1.out_AT8 mpt.ssa_cnt_and2.in0_AT8))
(assert (= mpt.not_captured.out_AT8 mpt.ssa_cnt_and2.in1_AT8))
(assert (= mpt.ssa_cnt_gt_0.in1_AT8 #b0000))
(assert (= mpt.next_cnt.in1_AT8 #b0000))
(assert (= mpt.decr_mux.sel_AT8 mpt.next_cnt_and1.out_AT8))
(assert (= mpt.decr_mux.out_AT8 mpt.next_cnt.in0_AT8))
(assert (= mpt.ssa_cnt.out_AT8 mpt.ssa_cnt_m1.in0_AT8))
(assert (= mpt.ssa_cnt.out_AT8 mpt.ssa_cnt_gt_0.in0_AT8))
(assert (= mpt.decr_mux.in1_AT8 mpt.ssa_cnt_m1.out_AT8))
(assert (= mpt.decr_mux.in0_AT8 mpt.ssa_cnt.out_AT8))
(assert (= mpt.ssa_cnt_m1.in1_AT8 #b0001))
(assert (= mpt.cnt_p1.out_AT8 mpt.ssa_cnt.in1_AT8))
(assert (= mpt.cnt_p1.in1_AT8 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT8 mpt.ssa_cnt_and1.in0_AT8))
(assert (= mpt.cnt_lt_depth.in1_AT8 #b1000))
(assert (= mpt.next_cnt.out_AT8 next_cnt_eq0.in0_AT8))
(assert (= mpt.cnt.in_AT8 mpt.next_cnt.out_AT8))
(assert (= mp_en.in1_AT8 not_en.out_AT8))
(assert (= magic_packet_eq.out_AT8 prop_signal_or.in1_AT8))
(assert (= magic_packet.out_AT8 next_magic_packet.in0_AT8))
(assert (= magic_packet.out_AT8 magic_packet_eq.in0_AT8))
(assert (= magic_packet.in_AT8 next_magic_packet.out_AT8))
(assert (= f.wrPtrEn.in1_AT8 f.wrPtrp1.out_AT8))
(assert (= f.wrPtrEn.out_AT8 f.wrPtrRst.in0_AT8))
(assert (= f.wrPtr.in_AT8 f.wrPtrRst.out_AT8))
(assert (= mpt.next_cnt.sel_AT8 self.rst_AT8))
(assert (= f.wrPtrRst.sel_AT8 self.rst_AT8))
(assert (= f.wrPtrRst.in1_AT8 #b0000))
(assert (= f.rdPtrRst.sel_AT8 self.rst_AT8))
(assert (= mpt.next_cnt_and1.in1_AT8 self.pop_AT8))
(assert (= f.rdPtrRst.in1_AT8 #b0000))
(assert (= f.rdPtrEn.out_AT8 f.rdPtrRst.in0_AT8))
(assert (= f.rdPtrEn.in1_AT8 f.rdPtrp1.out_AT8))
(assert (= f.rdPtrEn.sel_AT8 self.pop_AT8))
(assert (= f.rdPtr.in_AT8 f.rdPtrRst.out_AT8))
(assert (= self.push_AT8 start_and_push.in1_AT8))
(assert (= mpt.ssa_cnt_and1.in1_AT8 self.push_AT8))
(assert (= f.wrPtrEn.sel_AT8 self.push_AT8))
(assert (= f.wrPtrp1.in0_AT8 #b0001))
(assert (= f.rdPtrp1.in0_AT8 #b0001))
(assert (= next_magic_packet.in1_AT8 self.data_in_AT8))
(assert (= f.mem.wdata_AT8 self.data_in_AT8))
(assert (= f.mem.wen_AT8 self.push_AT8))
(assert (= f.mem.rdata_AT8 self.data_out_AT8))
(assert (= f.mem.rdata_AT8 magic_packet_eq.in1_AT8))
(assert (= f.mem.waddr_AT8 f.wrPtrSlice.out_AT8))
(assert (= f.fullCalc.in1_AT8 f.fullEq_2.out_AT8))
(assert (= f.mem.raddr_AT8 f.rdPtrSlice.out_AT8))
(assert (= f.fullEq_2.in0_AT8 f.rdPtrSlice.out_AT8))
(assert (= next_cnt_eq0.in1_AT8 #b0000))
(assert (= cnt_gt_0.in1_AT8 #b0000))
(assert (= mpt.cnt.out_AT8 mpt.cnt_p1.in0_AT8))
(assert (= mpt.cnt.out_AT8 mpt.cnt_lt_depth.in0_AT8))
(assert (= mpt.cnt.out_AT8 mpt.ssa_cnt.in0_AT8))
(assert (= cnt_gt_0.in0_AT8 mpt.cnt.out_AT8))
(assert (= cnt_gt_0.out_AT8 data_out_vld_and1.in1_AT8))
(assert (= f.fullEq_2.in1_AT8 f.wrPtrSlice.out_AT8))
(assert (= f.fullEq_1.out_AT8 f.notfullEq_1.in_AT8))
(assert (= f.fullCalc.in0_AT8 f.notfullEq_1.out_AT8))
(assert (= f.wrPtr.out_AT8 f.wrPtrSlice.in_AT8))
(assert (= f.wrPtr.out_AT8 f.wrPtrEn.in0_AT8))
(assert (= f.wrPtr.out_AT8 f.wrPtrp1.in1_AT8))
(assert (= f.emptyEq.out_AT8 self.empty_AT8))
(assert (= f.rdPtr.out_AT8 f.rdPtrp1.in1_AT8))
(assert (= f.rdPtr.out_AT8 f.rdPtrEn.in0_AT8))
(assert (= f.rdPtr.out_AT8 f.rdPtrSlice.in_AT8))
(assert (= f.emptyEq.in1_AT8 f.wrPtr.out_AT8))
(assert (= mp_en.in0_AT8 start_and_push.out_AT8))
(assert (= en_or_sp.in1_AT8 start_and_push.out_AT8))
(assert (= f.emptyEq.in0_AT8 f.rdPtr.out_AT8))
(assert (= mpt.cnt.clk_AT8 self.clk_AT8))
(assert (= magic_packet.clk_AT8 self.clk_AT8))
(assert (= f.wrPtr.clk_AT8 self.clk_AT8))
(assert (= f.rdPtr.clk_AT8 self.clk_AT8))
(assert (= f.mem.clk_AT8 self.clk_AT8))
(assert (= en.in_AT8 en_or_sp.out_AT8))
(assert (= data_out_vld_and2.out_AT8 not_data_out_vld.in_AT8))
(assert (= en.clk_AT8 self.clk_AT8))
(assert (= data_out_vld_and1.out_AT8 data_out_vld_and2.in0_AT8))
(assert (= en.out_AT8 not_en.in_AT8))
(assert (= en.out_AT8 en_or_sp.in0_AT8))
(assert (= data_out_vld_and1.in0_AT8 en.out_AT8))
(assert (= (bvor prop_signal_or.in0_AT8 prop_signal_or.in1_AT8) prop_signal_or.out_AT8))
(assert (= (bvnot not_en.in_AT8) not_en.out_AT8))
(assert (= self.clk_AT8 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT8) f.rdPtrSlice.out_AT8))
(assert (= (bvnot mpt.not_captured.in_AT8) mpt.not_captured.out_AT8))
(assert (= (bvand mpt.next_cnt_and1.in0_AT8 mpt.next_cnt_and1.in1_AT8) mpt.next_cnt_and1.out_AT8))
(assert (= (bvand start_and_push.in0_AT8 start_and_push.in1_AT8) start_and_push.out_AT8))
(assert (= next_cnt_eq0.out_AT8 (bvcomp next_cnt_eq0.in0_AT8 next_cnt_eq0.in1_AT8)))
(assert (= f.rdPtrRst.out_AT8 (ite (= f.rdPtrRst.sel_AT8 #b0) f.rdPtrRst.in0_AT8 f.rdPtrRst.in1_AT8)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT8 mpt.ssa_cnt_gt_0.in0_AT8) (= mpt.ssa_cnt_gt_0.out_AT8 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT8 mpt.ssa_cnt_and2.in1_AT8) mpt.ssa_cnt_and2.out_AT8))
(assert (= f.mem.array_AT8 (store f.mem.array_AT7 f.mem.waddr_AT7 (ite (= f.mem.wen_AT7 #b1) f.mem.wdata_AT7 (select f.mem.array_AT7 f.mem.waddr_AT7)))))
(assert (= magic_packet.init_AT7 magic_packet.init_AT8))
(assert (= magic_packet.out_AT8 magic_packet.in_AT7))
(assert (= f.rdPtr.out_AT8 f.rdPtr.in_AT7))
(assert (=> (= _-_state_id1_-__AT7 #b10) (= _-_state_id1_-__AT8 #b10)))
(assert (=> (= _-_state_id1_-__AT7 #b01) (= _-_state_id1_-__AT8 #b10)))
(assert (=> (= _-_state_id1_-__AT7 #b00) (= _-_state_id1_-__AT8 #b01)))
(assert (= en.out_AT8 en.in_AT7))
(assert (= en.init_AT7 en.init_AT8))
(assert (= mpt.cnt.out_AT8 mpt.cnt.in_AT7))
(assert (= f.wrPtr.out_AT8 f.wrPtr.in_AT7))
(push 1)

(assert (not (=> (= reset_done_AT8 #b1) (= self.prop_signal_AT8 #b1))))
(check-sat)

(pop 1)
(declare-fun f.rdPtrSlice.out_AT9 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT9 () (_ BitVec 4))
(declare-fun start_and_push.out_AT9 () (_ BitVec 1))
(declare-fun self.clk_AT9 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT9 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT9 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT9 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT9 () (_ BitVec 1))
(declare-fun f.mem.clk_AT9 () (_ BitVec 1))
(declare-fun en.in_AT9 () (_ BitVec 1))
(declare-fun en.clk_AT9 () (_ BitVec 1))
(declare-fun not_en.in_AT9 () (_ BitVec 1))
(declare-fun f.mem.array_AT9 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun magic_packet.init_AT9 () (_ BitVec 8))
(declare-fun magic_packet.out_AT9 () (_ BitVec 8))
(declare-fun f.rdPtr.out_AT9 () (_ BitVec 4))
(declare-fun _-_state_id1_-__AT9 () (_ BitVec 2))
(declare-fun en.out_AT9 () (_ BitVec 1))
(declare-fun en.init_AT9 () (_ BitVec 1))
(declare-fun mpt.cnt.out_AT9 () (_ BitVec 4))
(declare-fun f.wrPtr.out_AT9 () (_ BitVec 4))
(declare-fun self.pop_AT9 () (_ BitVec 1))
(declare-fun self.empty_AT9 () (_ BitVec 1))
(declare-fun self.push_AT9 () (_ BitVec 1))
(declare-fun self.full_AT9 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT9 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT9 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT9 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT9 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT9 () (_ BitVec 8))
(declare-fun next_magic_packet.sel_AT9 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT9 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT9 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT9 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT9 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT9 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT9 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT9 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT9 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT9 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT9 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT9 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT9 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT9 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT9 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT9 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT9 () (_ BitVec 1))
(declare-fun mpt.next_cnt.out_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT9 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT9 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT9 () (_ BitVec 4))
(declare-fun mp_en.out_AT9 () (_ BitVec 1))
(declare-fun mp_en.in1_AT9 () (_ BitVec 1))
(declare-fun mp_en.in0_AT9 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT9 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT9 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT9 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT9 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT9 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT9 () (_ BitVec 3))
(declare-fun f.mem.rdata_AT9 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT9 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT9 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT9 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT9 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT9 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT9 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.out_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT9 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT9 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT9 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT9 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT9 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT9 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT9 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT9 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT9 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT9 () (_ BitVec 1))
(declare-fun reset_done_AT9 () (_ BitVec 1))
(declare-fun self.rst_AT9 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT9 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT9 () (_ BitVec 3))
(declare-fun f.fullEq_2.out_AT9 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT9 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT9 () (_ BitVec 1))
(declare-fun self.start_AT9 () (_ BitVec 1))
(declare-fun self.prop_signal_AT9 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT9 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT9 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT9 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT9 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT9 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT9 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT9 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT9 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in0_AT9 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT9 () (_ BitVec 4))
(declare-fun not_en.out_AT9 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT9 () (_ BitVec 1))
(declare-fun magic_packet.in_AT9 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT9 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT9 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT9 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT9 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT9 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT9 () (_ BitVec 1))
(declare-fun self.data_in_AT9 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT9 () (_ BitVec 8))
(declare-fun f.mem.wen_AT9 () (_ BitVec 1))
(declare-fun self.data_out_AT9 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT9 () (_ BitVec 3))

(assert (=> (= self.empty_AT9 #b1) (= self.pop_AT9 #b0)))
(assert (=> (= self.full_AT9 #b1) (= self.push_AT9 #b0)))
(assert (= magic_packet_eq.out_AT9 (bvcomp magic_packet_eq.in0_AT9 magic_packet_eq.in1_AT9)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT9 mpt.ssa_cnt_m1.in1_AT9) mpt.ssa_cnt_m1.out_AT9))
(assert (= next_magic_packet.out_AT9 (ite (= next_magic_packet.sel_AT9 #b0) next_magic_packet.in0_AT9 next_magic_packet.in1_AT9)))
(assert (= (bvadd f.rdPtrp1.in0_AT9 f.rdPtrp1.in1_AT9) f.rdPtrp1.out_AT9))
(assert (= (bvadd mpt.cnt_p1.in0_AT9 mpt.cnt_p1.in1_AT9) mpt.cnt_p1.out_AT9))
(assert (= f.rdPtrEn.out_AT9 (ite (= f.rdPtrEn.sel_AT9 #b0) f.rdPtrEn.in0_AT9 f.rdPtrEn.in1_AT9)))
(assert (= (bvult cnt_gt_0.in1_AT9 cnt_gt_0.in0_AT9) (= cnt_gt_0.out_AT9 #b1)))
(assert (= (bvor en_or_sp.in0_AT9 en_or_sp.in1_AT9) en_or_sp.out_AT9))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT9 mpt.cnt_lt_depth.in1_AT9) (= mpt.cnt_lt_depth.out_AT9 #b1)))
(assert (= (bvand f.fullCalc.in0_AT9 f.fullCalc.in1_AT9) f.fullCalc.out_AT9))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT9 mpt.ssa_cnt_and1.in1_AT9) mpt.ssa_cnt_and1.out_AT9))
(assert (= mpt.next_cnt.out_AT9 (ite (= mpt.next_cnt.sel_AT9 #b0) mpt.next_cnt.in0_AT9 mpt.next_cnt.in1_AT9)))
(assert (= f.wrPtrRst.out_AT9 (ite (= f.wrPtrRst.sel_AT9 #b0) f.wrPtrRst.in0_AT9 f.wrPtrRst.in1_AT9)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT9) f.wrPtrSlice.out_AT9))
(assert (= (bvand mp_en.in0_AT9 mp_en.in1_AT9) mp_en.out_AT9))
(assert (= (bvnot f.notfullEq_1.in_AT9) f.notfullEq_1.out_AT9))
(assert (= f.fullEq_1.out_AT9 (bvcomp f.fullEq_1.in0_AT9 f.fullEq_1.in1_AT9)))
(assert (= f.mem.rdata_AT9 (select f.mem.array_AT9 f.mem.raddr_AT9)))
(assert (= (bvand data_out_vld_and2.in0_AT9 data_out_vld_and2.in1_AT9) data_out_vld_and2.out_AT9))
(assert (= (bvnot not_data_out_vld.in_AT9) not_data_out_vld.out_AT9))
(assert (= f.wrPtrEn.out_AT9 (ite (= f.wrPtrEn.sel_AT9 #b0) f.wrPtrEn.in0_AT9 f.wrPtrEn.in1_AT9)))
(assert (= mpt.ssa_cnt.out_AT9 (ite (= mpt.ssa_cnt.sel_AT9 #b0) mpt.ssa_cnt.in0_AT9 mpt.ssa_cnt.in1_AT9)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT9 f.wrPtrp1.in1_AT9) f.wrPtrp1.out_AT9))
(assert (= (bvand data_out_vld_and1.in0_AT9 data_out_vld_and1.in1_AT9) data_out_vld_and1.out_AT9))
(assert (= mpt.decr_mux.out_AT9 (ite (= mpt.decr_mux.sel_AT9 #b0) mpt.decr_mux.in0_AT9 mpt.decr_mux.in1_AT9)))
(assert (= f.emptyEq.out_AT9 (bvcomp f.emptyEq.in0_AT9 f.emptyEq.in1_AT9)))
(assert (bvule _-_state_id1_-__AT9 #b10))
(assert (=> (= _-_state_id1_-__AT9 #b10) (and (and true (= self.rst_AT9 #b0)) (= reset_done_AT9 #b1))))
(assert (=> (= _-_state_id1_-__AT9 #b01) (and (and (and (and (and true (= self.rst_AT9 #b1)) (= self.push_AT9 #b0)) (= self.pop_AT9 #b0)) (= reset_done_AT9 #b0)) (= en.out_AT9 #b0))))
(assert (=> (= _-_state_id1_-__AT9 #b00) (and (and (and (and (and true (= self.rst_AT9 #b1)) (= self.push_AT9 #b0)) (= self.pop_AT9 #b0)) (= reset_done_AT9 #b0)) (= en.out_AT9 #b0))))
(assert (= f.fullEq_2.out_AT9 (bvcomp f.fullEq_2.in0_AT9 f.fullEq_2.in1_AT9)))
(assert (= f.fullEq_1.in1_AT9 ((_ extract 3 3) f.wrPtr.out_AT9)))
(assert (= f.fullEq_1.in0_AT9 ((_ extract 3 3) f.rdPtr.out_AT9)))
(assert (= en.out_AT9 mpt.not_captured.in_AT9))
(assert (= self.start_AT9 start_and_push.in0_AT9))
(assert (= prop_signal_or.out_AT9 self.prop_signal_AT9))
(assert (= f.fullCalc.out_AT9 self.full_AT9))
(assert (= data_out_vld_and2.out_AT9 self.data_out_vld_AT9))
(assert (= mp_en.out_AT9 next_magic_packet.sel_AT9))
(assert (= data_out_vld_and2.in1_AT9 next_cnt_eq0.out_AT9))
(assert (= not_data_out_vld.out_AT9 prop_signal_or.in0_AT9))
(assert (= mpt.next_cnt_and1.in0_AT9 mpt.ssa_cnt_gt_0.out_AT9))
(assert (= mpt.ssa_cnt.sel_AT9 mpt.ssa_cnt_and2.out_AT9))
(assert (= mpt.ssa_cnt_and1.out_AT9 mpt.ssa_cnt_and2.in0_AT9))
(assert (= mpt.not_captured.out_AT9 mpt.ssa_cnt_and2.in1_AT9))
(assert (= mpt.ssa_cnt_gt_0.in1_AT9 #b0000))
(assert (= mpt.next_cnt.in1_AT9 #b0000))
(assert (= mpt.decr_mux.sel_AT9 mpt.next_cnt_and1.out_AT9))
(assert (= mpt.decr_mux.out_AT9 mpt.next_cnt.in0_AT9))
(assert (= mpt.ssa_cnt.out_AT9 mpt.ssa_cnt_m1.in0_AT9))
(assert (= mpt.ssa_cnt.out_AT9 mpt.ssa_cnt_gt_0.in0_AT9))
(assert (= mpt.decr_mux.in1_AT9 mpt.ssa_cnt_m1.out_AT9))
(assert (= mpt.decr_mux.in0_AT9 mpt.ssa_cnt.out_AT9))
(assert (= mpt.ssa_cnt_m1.in1_AT9 #b0001))
(assert (= mpt.cnt_p1.out_AT9 mpt.ssa_cnt.in1_AT9))
(assert (= mpt.cnt_p1.in1_AT9 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT9 mpt.ssa_cnt_and1.in0_AT9))
(assert (= mpt.cnt_lt_depth.in1_AT9 #b1000))
(assert (= mpt.next_cnt.out_AT9 next_cnt_eq0.in0_AT9))
(assert (= mpt.cnt.in_AT9 mpt.next_cnt.out_AT9))
(assert (= mp_en.in1_AT9 not_en.out_AT9))
(assert (= magic_packet_eq.out_AT9 prop_signal_or.in1_AT9))
(assert (= magic_packet.out_AT9 next_magic_packet.in0_AT9))
(assert (= magic_packet.out_AT9 magic_packet_eq.in0_AT9))
(assert (= magic_packet.in_AT9 next_magic_packet.out_AT9))
(assert (= f.wrPtrEn.in1_AT9 f.wrPtrp1.out_AT9))
(assert (= f.wrPtrEn.out_AT9 f.wrPtrRst.in0_AT9))
(assert (= f.wrPtr.in_AT9 f.wrPtrRst.out_AT9))
(assert (= mpt.next_cnt.sel_AT9 self.rst_AT9))
(assert (= f.wrPtrRst.sel_AT9 self.rst_AT9))
(assert (= f.wrPtrRst.in1_AT9 #b0000))
(assert (= f.rdPtrRst.sel_AT9 self.rst_AT9))
(assert (= mpt.next_cnt_and1.in1_AT9 self.pop_AT9))
(assert (= f.rdPtrRst.in1_AT9 #b0000))
(assert (= f.rdPtrEn.out_AT9 f.rdPtrRst.in0_AT9))
(assert (= f.rdPtrEn.in1_AT9 f.rdPtrp1.out_AT9))
(assert (= f.rdPtrEn.sel_AT9 self.pop_AT9))
(assert (= f.rdPtr.in_AT9 f.rdPtrRst.out_AT9))
(assert (= self.push_AT9 start_and_push.in1_AT9))
(assert (= mpt.ssa_cnt_and1.in1_AT9 self.push_AT9))
(assert (= f.wrPtrEn.sel_AT9 self.push_AT9))
(assert (= f.wrPtrp1.in0_AT9 #b0001))
(assert (= f.rdPtrp1.in0_AT9 #b0001))
(assert (= next_magic_packet.in1_AT9 self.data_in_AT9))
(assert (= f.mem.wdata_AT9 self.data_in_AT9))
(assert (= f.mem.wen_AT9 self.push_AT9))
(assert (= f.mem.rdata_AT9 self.data_out_AT9))
(assert (= f.mem.rdata_AT9 magic_packet_eq.in1_AT9))
(assert (= f.mem.waddr_AT9 f.wrPtrSlice.out_AT9))
(assert (= f.fullCalc.in1_AT9 f.fullEq_2.out_AT9))
(assert (= f.mem.raddr_AT9 f.rdPtrSlice.out_AT9))
(assert (= f.fullEq_2.in0_AT9 f.rdPtrSlice.out_AT9))
(assert (= next_cnt_eq0.in1_AT9 #b0000))
(assert (= cnt_gt_0.in1_AT9 #b0000))
(assert (= mpt.cnt.out_AT9 mpt.cnt_p1.in0_AT9))
(assert (= mpt.cnt.out_AT9 mpt.cnt_lt_depth.in0_AT9))
(assert (= mpt.cnt.out_AT9 mpt.ssa_cnt.in0_AT9))
(assert (= cnt_gt_0.in0_AT9 mpt.cnt.out_AT9))
(assert (= cnt_gt_0.out_AT9 data_out_vld_and1.in1_AT9))
(assert (= f.fullEq_2.in1_AT9 f.wrPtrSlice.out_AT9))
(assert (= f.fullEq_1.out_AT9 f.notfullEq_1.in_AT9))
(assert (= f.fullCalc.in0_AT9 f.notfullEq_1.out_AT9))
(assert (= f.wrPtr.out_AT9 f.wrPtrSlice.in_AT9))
(assert (= f.wrPtr.out_AT9 f.wrPtrEn.in0_AT9))
(assert (= f.wrPtr.out_AT9 f.wrPtrp1.in1_AT9))
(assert (= f.emptyEq.out_AT9 self.empty_AT9))
(assert (= f.rdPtr.out_AT9 f.rdPtrp1.in1_AT9))
(assert (= f.rdPtr.out_AT9 f.rdPtrEn.in0_AT9))
(assert (= f.rdPtr.out_AT9 f.rdPtrSlice.in_AT9))
(assert (= f.emptyEq.in1_AT9 f.wrPtr.out_AT9))
(assert (= mp_en.in0_AT9 start_and_push.out_AT9))
(assert (= en_or_sp.in1_AT9 start_and_push.out_AT9))
(assert (= f.emptyEq.in0_AT9 f.rdPtr.out_AT9))
(assert (= mpt.cnt.clk_AT9 self.clk_AT9))
(assert (= magic_packet.clk_AT9 self.clk_AT9))
(assert (= f.wrPtr.clk_AT9 self.clk_AT9))
(assert (= f.rdPtr.clk_AT9 self.clk_AT9))
(assert (= f.mem.clk_AT9 self.clk_AT9))
(assert (= en.in_AT9 en_or_sp.out_AT9))
(assert (= data_out_vld_and2.out_AT9 not_data_out_vld.in_AT9))
(assert (= en.clk_AT9 self.clk_AT9))
(assert (= data_out_vld_and1.out_AT9 data_out_vld_and2.in0_AT9))
(assert (= en.out_AT9 not_en.in_AT9))
(assert (= en.out_AT9 en_or_sp.in0_AT9))
(assert (= data_out_vld_and1.in0_AT9 en.out_AT9))
(assert (= (bvor prop_signal_or.in0_AT9 prop_signal_or.in1_AT9) prop_signal_or.out_AT9))
(assert (= (bvnot not_en.in_AT9) not_en.out_AT9))
(assert (= self.clk_AT9 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT9) f.rdPtrSlice.out_AT9))
(assert (= (bvnot mpt.not_captured.in_AT9) mpt.not_captured.out_AT9))
(assert (= (bvand mpt.next_cnt_and1.in0_AT9 mpt.next_cnt_and1.in1_AT9) mpt.next_cnt_and1.out_AT9))
(assert (= (bvand start_and_push.in0_AT9 start_and_push.in1_AT9) start_and_push.out_AT9))
(assert (= next_cnt_eq0.out_AT9 (bvcomp next_cnt_eq0.in0_AT9 next_cnt_eq0.in1_AT9)))
(assert (= f.rdPtrRst.out_AT9 (ite (= f.rdPtrRst.sel_AT9 #b0) f.rdPtrRst.in0_AT9 f.rdPtrRst.in1_AT9)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT9 mpt.ssa_cnt_gt_0.in0_AT9) (= mpt.ssa_cnt_gt_0.out_AT9 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT9 mpt.ssa_cnt_and2.in1_AT9) mpt.ssa_cnt_and2.out_AT9))
(assert (= f.mem.array_AT9 (store f.mem.array_AT8 f.mem.waddr_AT8 (ite (= f.mem.wen_AT8 #b1) f.mem.wdata_AT8 (select f.mem.array_AT8 f.mem.waddr_AT8)))))
(assert (= magic_packet.init_AT8 magic_packet.init_AT9))
(assert (= magic_packet.out_AT9 magic_packet.in_AT8))
(assert (= f.rdPtr.out_AT9 f.rdPtr.in_AT8))
(assert (=> (= _-_state_id1_-__AT8 #b10) (= _-_state_id1_-__AT9 #b10)))
(assert (=> (= _-_state_id1_-__AT8 #b01) (= _-_state_id1_-__AT9 #b10)))
(assert (=> (= _-_state_id1_-__AT8 #b00) (= _-_state_id1_-__AT9 #b01)))
(assert (= en.out_AT9 en.in_AT8))
(assert (= en.init_AT8 en.init_AT9))
(assert (= mpt.cnt.out_AT9 mpt.cnt.in_AT8))
(assert (= f.wrPtr.out_AT9 f.wrPtr.in_AT8))
(push 1)

(assert (not (=> (= reset_done_AT9 #b1) (= self.prop_signal_AT9 #b1))))
(check-sat)

(pop 1)
(declare-fun next_cnt_eq0.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT10 () (_ BitVec 4))
(declare-fun not_en.out_AT10 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT10 () (_ BitVec 1))
(declare-fun magic_packet.in_AT10 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT10 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT10 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT10 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT10 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT10 () (_ BitVec 1))
(declare-fun self.data_in_AT10 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT10 () (_ BitVec 8))
(declare-fun f.mem.wen_AT10 () (_ BitVec 1))
(declare-fun self.data_out_AT10 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT10 () (_ BitVec 3))
(declare-fun f.rdPtrSlice.out_AT10 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT10 () (_ BitVec 4))
(declare-fun start_and_push.out_AT10 () (_ BitVec 1))
(declare-fun self.clk_AT10 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT10 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT10 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT10 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT10 () (_ BitVec 1))
(declare-fun f.mem.clk_AT10 () (_ BitVec 1))
(declare-fun en.in_AT10 () (_ BitVec 1))
(declare-fun en.clk_AT10 () (_ BitVec 1))
(declare-fun not_en.in_AT10 () (_ BitVec 1))
(declare-fun f.mem.array_AT10 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun magic_packet.init_AT10 () (_ BitVec 8))
(declare-fun magic_packet.out_AT10 () (_ BitVec 8))
(declare-fun f.rdPtr.out_AT10 () (_ BitVec 4))
(declare-fun _-_state_id1_-__AT10 () (_ BitVec 2))
(declare-fun en.out_AT10 () (_ BitVec 1))
(declare-fun en.init_AT10 () (_ BitVec 1))
(declare-fun mpt.cnt.out_AT10 () (_ BitVec 4))
(declare-fun f.wrPtr.out_AT10 () (_ BitVec 4))
(declare-fun self.pop_AT10 () (_ BitVec 1))
(declare-fun self.empty_AT10 () (_ BitVec 1))
(declare-fun self.push_AT10 () (_ BitVec 1))
(declare-fun self.full_AT10 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT10 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT10 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT10 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT10 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT10 () (_ BitVec 8))
(declare-fun next_magic_packet.sel_AT10 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT10 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT10 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT10 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT10 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT10 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT10 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT10 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT10 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT10 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT10 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT10 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT10 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT10 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT10 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT10 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT10 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT10 () (_ BitVec 1))
(declare-fun mpt.next_cnt.out_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT10 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT10 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT10 () (_ BitVec 4))
(declare-fun mp_en.out_AT10 () (_ BitVec 1))
(declare-fun mp_en.in1_AT10 () (_ BitVec 1))
(declare-fun mp_en.in0_AT10 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT10 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT10 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT10 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT10 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT10 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT10 () (_ BitVec 3))
(declare-fun f.mem.rdata_AT10 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT10 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT10 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT10 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT10 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT10 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT10 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.out_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT10 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT10 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT10 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT10 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT10 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT10 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT10 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT10 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT10 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT10 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT10 () (_ BitVec 1))
(declare-fun reset_done_AT10 () (_ BitVec 1))
(declare-fun self.rst_AT10 () (_ BitVec 1))
(declare-fun f.fullEq_2.in1_AT10 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT10 () (_ BitVec 3))
(declare-fun f.fullEq_2.out_AT10 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT10 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT10 () (_ BitVec 1))
(declare-fun self.start_AT10 () (_ BitVec 1))
(declare-fun self.prop_signal_AT10 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT10 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT10 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT10 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT10 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT10 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT10 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT10 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT10 () (_ BitVec 4))

(assert (=> (= self.empty_AT10 #b1) (= self.pop_AT10 #b0)))
(assert (=> (= self.full_AT10 #b1) (= self.push_AT10 #b0)))
(assert (= magic_packet_eq.out_AT10 (bvcomp magic_packet_eq.in0_AT10 magic_packet_eq.in1_AT10)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT10 mpt.ssa_cnt_m1.in1_AT10) mpt.ssa_cnt_m1.out_AT10))
(assert (= next_magic_packet.out_AT10 (ite (= next_magic_packet.sel_AT10 #b0) next_magic_packet.in0_AT10 next_magic_packet.in1_AT10)))
(assert (= (bvadd f.rdPtrp1.in0_AT10 f.rdPtrp1.in1_AT10) f.rdPtrp1.out_AT10))
(assert (= (bvadd mpt.cnt_p1.in0_AT10 mpt.cnt_p1.in1_AT10) mpt.cnt_p1.out_AT10))
(assert (= f.rdPtrEn.out_AT10 (ite (= f.rdPtrEn.sel_AT10 #b0) f.rdPtrEn.in0_AT10 f.rdPtrEn.in1_AT10)))
(assert (= (bvult cnt_gt_0.in1_AT10 cnt_gt_0.in0_AT10) (= cnt_gt_0.out_AT10 #b1)))
(assert (= (bvor en_or_sp.in0_AT10 en_or_sp.in1_AT10) en_or_sp.out_AT10))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT10 mpt.cnt_lt_depth.in1_AT10) (= mpt.cnt_lt_depth.out_AT10 #b1)))
(assert (= (bvand f.fullCalc.in0_AT10 f.fullCalc.in1_AT10) f.fullCalc.out_AT10))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT10 mpt.ssa_cnt_and1.in1_AT10) mpt.ssa_cnt_and1.out_AT10))
(assert (= mpt.next_cnt.out_AT10 (ite (= mpt.next_cnt.sel_AT10 #b0) mpt.next_cnt.in0_AT10 mpt.next_cnt.in1_AT10)))
(assert (= f.wrPtrRst.out_AT10 (ite (= f.wrPtrRst.sel_AT10 #b0) f.wrPtrRst.in0_AT10 f.wrPtrRst.in1_AT10)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT10) f.wrPtrSlice.out_AT10))
(assert (= (bvand mp_en.in0_AT10 mp_en.in1_AT10) mp_en.out_AT10))
(assert (= (bvnot f.notfullEq_1.in_AT10) f.notfullEq_1.out_AT10))
(assert (= f.fullEq_1.out_AT10 (bvcomp f.fullEq_1.in0_AT10 f.fullEq_1.in1_AT10)))
(assert (= f.mem.rdata_AT10 (select f.mem.array_AT10 f.mem.raddr_AT10)))
(assert (= (bvand data_out_vld_and2.in0_AT10 data_out_vld_and2.in1_AT10) data_out_vld_and2.out_AT10))
(assert (= (bvnot not_data_out_vld.in_AT10) not_data_out_vld.out_AT10))
(assert (= f.wrPtrEn.out_AT10 (ite (= f.wrPtrEn.sel_AT10 #b0) f.wrPtrEn.in0_AT10 f.wrPtrEn.in1_AT10)))
(assert (= mpt.ssa_cnt.out_AT10 (ite (= mpt.ssa_cnt.sel_AT10 #b0) mpt.ssa_cnt.in0_AT10 mpt.ssa_cnt.in1_AT10)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT10 f.wrPtrp1.in1_AT10) f.wrPtrp1.out_AT10))
(assert (= (bvand data_out_vld_and1.in0_AT10 data_out_vld_and1.in1_AT10) data_out_vld_and1.out_AT10))
(assert (= mpt.decr_mux.out_AT10 (ite (= mpt.decr_mux.sel_AT10 #b0) mpt.decr_mux.in0_AT10 mpt.decr_mux.in1_AT10)))
(assert (= f.emptyEq.out_AT10 (bvcomp f.emptyEq.in0_AT10 f.emptyEq.in1_AT10)))
(assert (bvule _-_state_id1_-__AT10 #b10))
(assert (=> (= _-_state_id1_-__AT10 #b10) (and (and true (= self.rst_AT10 #b0)) (= reset_done_AT10 #b1))))
(assert (=> (= _-_state_id1_-__AT10 #b01) (and (and (and (and (and true (= self.rst_AT10 #b1)) (= self.push_AT10 #b0)) (= self.pop_AT10 #b0)) (= reset_done_AT10 #b0)) (= en.out_AT10 #b0))))
(assert (=> (= _-_state_id1_-__AT10 #b00) (and (and (and (and (and true (= self.rst_AT10 #b1)) (= self.push_AT10 #b0)) (= self.pop_AT10 #b0)) (= reset_done_AT10 #b0)) (= en.out_AT10 #b0))))
(assert (= f.fullEq_2.out_AT10 (bvcomp f.fullEq_2.in0_AT10 f.fullEq_2.in1_AT10)))
(assert (= f.fullEq_1.in1_AT10 ((_ extract 3 3) f.wrPtr.out_AT10)))
(assert (= f.fullEq_1.in0_AT10 ((_ extract 3 3) f.rdPtr.out_AT10)))
(assert (= en.out_AT10 mpt.not_captured.in_AT10))
(assert (= self.start_AT10 start_and_push.in0_AT10))
(assert (= prop_signal_or.out_AT10 self.prop_signal_AT10))
(assert (= f.fullCalc.out_AT10 self.full_AT10))
(assert (= data_out_vld_and2.out_AT10 self.data_out_vld_AT10))
(assert (= mp_en.out_AT10 next_magic_packet.sel_AT10))
(assert (= data_out_vld_and2.in1_AT10 next_cnt_eq0.out_AT10))
(assert (= not_data_out_vld.out_AT10 prop_signal_or.in0_AT10))
(assert (= mpt.next_cnt_and1.in0_AT10 mpt.ssa_cnt_gt_0.out_AT10))
(assert (= mpt.ssa_cnt.sel_AT10 mpt.ssa_cnt_and2.out_AT10))
(assert (= mpt.ssa_cnt_and1.out_AT10 mpt.ssa_cnt_and2.in0_AT10))
(assert (= mpt.not_captured.out_AT10 mpt.ssa_cnt_and2.in1_AT10))
(assert (= mpt.ssa_cnt_gt_0.in1_AT10 #b0000))
(assert (= mpt.next_cnt.in1_AT10 #b0000))
(assert (= mpt.decr_mux.sel_AT10 mpt.next_cnt_and1.out_AT10))
(assert (= mpt.decr_mux.out_AT10 mpt.next_cnt.in0_AT10))
(assert (= mpt.ssa_cnt.out_AT10 mpt.ssa_cnt_m1.in0_AT10))
(assert (= mpt.ssa_cnt.out_AT10 mpt.ssa_cnt_gt_0.in0_AT10))
(assert (= mpt.decr_mux.in1_AT10 mpt.ssa_cnt_m1.out_AT10))
(assert (= mpt.decr_mux.in0_AT10 mpt.ssa_cnt.out_AT10))
(assert (= mpt.ssa_cnt_m1.in1_AT10 #b0001))
(assert (= mpt.cnt_p1.out_AT10 mpt.ssa_cnt.in1_AT10))
(assert (= mpt.cnt_p1.in1_AT10 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT10 mpt.ssa_cnt_and1.in0_AT10))
(assert (= mpt.cnt_lt_depth.in1_AT10 #b1000))
(assert (= mpt.next_cnt.out_AT10 next_cnt_eq0.in0_AT10))
(assert (= mpt.cnt.in_AT10 mpt.next_cnt.out_AT10))
(assert (= mp_en.in1_AT10 not_en.out_AT10))
(assert (= magic_packet_eq.out_AT10 prop_signal_or.in1_AT10))
(assert (= magic_packet.out_AT10 next_magic_packet.in0_AT10))
(assert (= magic_packet.out_AT10 magic_packet_eq.in0_AT10))
(assert (= magic_packet.in_AT10 next_magic_packet.out_AT10))
(assert (= f.wrPtrEn.in1_AT10 f.wrPtrp1.out_AT10))
(assert (= f.wrPtrEn.out_AT10 f.wrPtrRst.in0_AT10))
(assert (= f.wrPtr.in_AT10 f.wrPtrRst.out_AT10))
(assert (= mpt.next_cnt.sel_AT10 self.rst_AT10))
(assert (= f.wrPtrRst.sel_AT10 self.rst_AT10))
(assert (= f.wrPtrRst.in1_AT10 #b0000))
(assert (= f.rdPtrRst.sel_AT10 self.rst_AT10))
(assert (= mpt.next_cnt_and1.in1_AT10 self.pop_AT10))
(assert (= f.rdPtrRst.in1_AT10 #b0000))
(assert (= f.rdPtrEn.out_AT10 f.rdPtrRst.in0_AT10))
(assert (= f.rdPtrEn.in1_AT10 f.rdPtrp1.out_AT10))
(assert (= f.rdPtrEn.sel_AT10 self.pop_AT10))
(assert (= f.rdPtr.in_AT10 f.rdPtrRst.out_AT10))
(assert (= self.push_AT10 start_and_push.in1_AT10))
(assert (= mpt.ssa_cnt_and1.in1_AT10 self.push_AT10))
(assert (= f.wrPtrEn.sel_AT10 self.push_AT10))
(assert (= f.wrPtrp1.in0_AT10 #b0001))
(assert (= f.rdPtrp1.in0_AT10 #b0001))
(assert (= next_magic_packet.in1_AT10 self.data_in_AT10))
(assert (= f.mem.wdata_AT10 self.data_in_AT10))
(assert (= f.mem.wen_AT10 self.push_AT10))
(assert (= f.mem.rdata_AT10 self.data_out_AT10))
(assert (= f.mem.rdata_AT10 magic_packet_eq.in1_AT10))
(assert (= f.mem.waddr_AT10 f.wrPtrSlice.out_AT10))
(assert (= f.fullCalc.in1_AT10 f.fullEq_2.out_AT10))
(assert (= f.mem.raddr_AT10 f.rdPtrSlice.out_AT10))
(assert (= f.fullEq_2.in0_AT10 f.rdPtrSlice.out_AT10))
(assert (= next_cnt_eq0.in1_AT10 #b0000))
(assert (= cnt_gt_0.in1_AT10 #b0000))
(assert (= mpt.cnt.out_AT10 mpt.cnt_p1.in0_AT10))
(assert (= mpt.cnt.out_AT10 mpt.cnt_lt_depth.in0_AT10))
(assert (= mpt.cnt.out_AT10 mpt.ssa_cnt.in0_AT10))
(assert (= cnt_gt_0.in0_AT10 mpt.cnt.out_AT10))
(assert (= cnt_gt_0.out_AT10 data_out_vld_and1.in1_AT10))
(assert (= f.fullEq_2.in1_AT10 f.wrPtrSlice.out_AT10))
(assert (= f.fullEq_1.out_AT10 f.notfullEq_1.in_AT10))
(assert (= f.fullCalc.in0_AT10 f.notfullEq_1.out_AT10))
(assert (= f.wrPtr.out_AT10 f.wrPtrSlice.in_AT10))
(assert (= f.wrPtr.out_AT10 f.wrPtrEn.in0_AT10))
(assert (= f.wrPtr.out_AT10 f.wrPtrp1.in1_AT10))
(assert (= f.emptyEq.out_AT10 self.empty_AT10))
(assert (= f.rdPtr.out_AT10 f.rdPtrp1.in1_AT10))
(assert (= f.rdPtr.out_AT10 f.rdPtrEn.in0_AT10))
(assert (= f.rdPtr.out_AT10 f.rdPtrSlice.in_AT10))
(assert (= f.emptyEq.in1_AT10 f.wrPtr.out_AT10))
(assert (= mp_en.in0_AT10 start_and_push.out_AT10))
(assert (= en_or_sp.in1_AT10 start_and_push.out_AT10))
(assert (= f.emptyEq.in0_AT10 f.rdPtr.out_AT10))
(assert (= mpt.cnt.clk_AT10 self.clk_AT10))
(assert (= magic_packet.clk_AT10 self.clk_AT10))
(assert (= f.wrPtr.clk_AT10 self.clk_AT10))
(assert (= f.rdPtr.clk_AT10 self.clk_AT10))
(assert (= f.mem.clk_AT10 self.clk_AT10))
(assert (= en.in_AT10 en_or_sp.out_AT10))
(assert (= data_out_vld_and2.out_AT10 not_data_out_vld.in_AT10))
(assert (= en.clk_AT10 self.clk_AT10))
(assert (= data_out_vld_and1.out_AT10 data_out_vld_and2.in0_AT10))
(assert (= en.out_AT10 not_en.in_AT10))
(assert (= en.out_AT10 en_or_sp.in0_AT10))
(assert (= data_out_vld_and1.in0_AT10 en.out_AT10))
(assert (= (bvor prop_signal_or.in0_AT10 prop_signal_or.in1_AT10) prop_signal_or.out_AT10))
(assert (= (bvnot not_en.in_AT10) not_en.out_AT10))
(assert (= self.clk_AT10 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT10) f.rdPtrSlice.out_AT10))
(assert (= (bvnot mpt.not_captured.in_AT10) mpt.not_captured.out_AT10))
(assert (= (bvand mpt.next_cnt_and1.in0_AT10 mpt.next_cnt_and1.in1_AT10) mpt.next_cnt_and1.out_AT10))
(assert (= (bvand start_and_push.in0_AT10 start_and_push.in1_AT10) start_and_push.out_AT10))
(assert (= next_cnt_eq0.out_AT10 (bvcomp next_cnt_eq0.in0_AT10 next_cnt_eq0.in1_AT10)))
(assert (= f.rdPtrRst.out_AT10 (ite (= f.rdPtrRst.sel_AT10 #b0) f.rdPtrRst.in0_AT10 f.rdPtrRst.in1_AT10)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT10 mpt.ssa_cnt_gt_0.in0_AT10) (= mpt.ssa_cnt_gt_0.out_AT10 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT10 mpt.ssa_cnt_and2.in1_AT10) mpt.ssa_cnt_and2.out_AT10))
(assert (= f.mem.array_AT10 (store f.mem.array_AT9 f.mem.waddr_AT9 (ite (= f.mem.wen_AT9 #b1) f.mem.wdata_AT9 (select f.mem.array_AT9 f.mem.waddr_AT9)))))
(assert (= magic_packet.init_AT9 magic_packet.init_AT10))
(assert (= magic_packet.out_AT10 magic_packet.in_AT9))
(assert (= f.rdPtr.out_AT10 f.rdPtr.in_AT9))
(assert (=> (= _-_state_id1_-__AT9 #b10) (= _-_state_id1_-__AT10 #b10)))
(assert (=> (= _-_state_id1_-__AT9 #b01) (= _-_state_id1_-__AT10 #b10)))
(assert (=> (= _-_state_id1_-__AT9 #b00) (= _-_state_id1_-__AT10 #b01)))
(assert (= en.out_AT10 en.in_AT9))
(assert (= en.init_AT9 en.init_AT10))
(assert (= mpt.cnt.out_AT10 mpt.cnt.in_AT9))
(assert (= f.wrPtr.out_AT10 f.wrPtr.in_AT9))
(push 1)

(assert (not (=> (= reset_done_AT10 #b1) (= self.prop_signal_AT10 #b1))))
(check-sat)

(pop 1)
(declare-fun f.fullEq_2.in1_AT11 () (_ BitVec 3))
(declare-fun f.fullEq_2.in0_AT11 () (_ BitVec 3))
(declare-fun f.fullEq_2.out_AT11 () (_ BitVec 1))
(declare-fun mpt.not_captured.in_AT11 () (_ BitVec 1))
(declare-fun start_and_push.in0_AT11 () (_ BitVec 1))
(declare-fun self.start_AT11 () (_ BitVec 1))
(declare-fun self.prop_signal_AT11 () (_ BitVec 1))
(declare-fun prop_signal_or.out_AT11 () (_ BitVec 1))
(declare-fun self.data_out_vld_AT11 () (_ BitVec 1))
(declare-fun next_cnt_eq0.out_AT11 () (_ BitVec 1))
(declare-fun prop_signal_or.in0_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.out_AT11 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in0_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.out_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in0_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and2.in1_AT11 () (_ BitVec 1))
(declare-fun mpt.not_captured.out_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.next_cnt_and1.out_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_gt_0.in0_AT11 () (_ BitVec 4))
(declare-fun next_cnt_eq0.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.cnt.in_AT11 () (_ BitVec 4))
(declare-fun not_en.out_AT11 () (_ BitVec 1))
(declare-fun prop_signal_or.in1_AT11 () (_ BitVec 1))
(declare-fun magic_packet.in_AT11 () (_ BitVec 8))
(declare-fun f.wrPtr.in_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrRst.sel_AT11 () (_ BitVec 1))
(declare-fun mpt.next_cnt_and1.in1_AT11 () (_ BitVec 1))
(declare-fun f.rdPtrRst.in1_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrRst.in0_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrRst.out_AT11 () (_ BitVec 4))
(declare-fun f.rdPtr.in_AT11 () (_ BitVec 4))
(declare-fun start_and_push.in1_AT11 () (_ BitVec 1))
(declare-fun self.data_in_AT11 () (_ BitVec 8))
(declare-fun f.mem.wdata_AT11 () (_ BitVec 8))
(declare-fun f.mem.wen_AT11 () (_ BitVec 1))
(declare-fun self.data_out_AT11 () (_ BitVec 8))
(declare-fun f.mem.waddr_AT11 () (_ BitVec 3))
(declare-fun f.rdPtrSlice.out_AT11 () (_ BitVec 3))
(declare-fun next_cnt_eq0.in1_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrSlice.in_AT11 () (_ BitVec 4))
(declare-fun start_and_push.out_AT11 () (_ BitVec 1))
(declare-fun self.clk_AT11 () (_ BitVec 1))
(declare-fun mpt.cnt.clk_AT11 () (_ BitVec 1))
(declare-fun magic_packet.clk_AT11 () (_ BitVec 1))
(declare-fun f.wrPtr.clk_AT11 () (_ BitVec 1))
(declare-fun f.rdPtr.clk_AT11 () (_ BitVec 1))
(declare-fun f.mem.clk_AT11 () (_ BitVec 1))
(declare-fun en.in_AT11 () (_ BitVec 1))
(declare-fun en.clk_AT11 () (_ BitVec 1))
(declare-fun not_en.in_AT11 () (_ BitVec 1))
(declare-fun f.mem.array_AT11 () (Array (_ BitVec 3) (_ BitVec 8)))
(declare-fun magic_packet.init_AT11 () (_ BitVec 8))
(declare-fun magic_packet.out_AT11 () (_ BitVec 8))
(declare-fun f.rdPtr.out_AT11 () (_ BitVec 4))
(declare-fun _-_state_id1_-__AT11 () (_ BitVec 2))
(declare-fun en.out_AT11 () (_ BitVec 1))
(declare-fun en.init_AT11 () (_ BitVec 1))
(declare-fun mpt.cnt.out_AT11 () (_ BitVec 4))
(declare-fun f.wrPtr.out_AT11 () (_ BitVec 4))
(declare-fun self.pop_AT11 () (_ BitVec 1))
(declare-fun self.empty_AT11 () (_ BitVec 1))
(declare-fun self.push_AT11 () (_ BitVec 1))
(declare-fun self.full_AT11 () (_ BitVec 1))
(declare-fun magic_packet_eq.in1_AT11 () (_ BitVec 8))
(declare-fun magic_packet_eq.in0_AT11 () (_ BitVec 8))
(declare-fun magic_packet_eq.out_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_m1.out_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt_m1.in0_AT11 () (_ BitVec 4))
(declare-fun next_magic_packet.in1_AT11 () (_ BitVec 8))
(declare-fun next_magic_packet.in0_AT11 () (_ BitVec 8))
(declare-fun next_magic_packet.sel_AT11 () (_ BitVec 1))
(declare-fun next_magic_packet.out_AT11 () (_ BitVec 8))
(declare-fun f.rdPtrp1.out_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in1_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrp1.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.out_AT11 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.cnt_p1.in0_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in1_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrEn.in0_AT11 () (_ BitVec 4))
(declare-fun f.rdPtrEn.sel_AT11 () (_ BitVec 1))
(declare-fun f.rdPtrEn.out_AT11 () (_ BitVec 4))
(declare-fun cnt_gt_0.out_AT11 () (_ BitVec 1))
(declare-fun cnt_gt_0.in0_AT11 () (_ BitVec 4))
(declare-fun cnt_gt_0.in1_AT11 () (_ BitVec 4))
(declare-fun en_or_sp.out_AT11 () (_ BitVec 1))
(declare-fun en_or_sp.in1_AT11 () (_ BitVec 1))
(declare-fun en_or_sp.in0_AT11 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.out_AT11 () (_ BitVec 1))
(declare-fun mpt.cnt_lt_depth.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.cnt_lt_depth.in0_AT11 () (_ BitVec 4))
(declare-fun f.fullCalc.out_AT11 () (_ BitVec 1))
(declare-fun f.fullCalc.in1_AT11 () (_ BitVec 1))
(declare-fun f.fullCalc.in0_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.out_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in1_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt_and1.in0_AT11 () (_ BitVec 1))
(declare-fun mpt.next_cnt.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.next_cnt.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.next_cnt.sel_AT11 () (_ BitVec 1))
(declare-fun mpt.next_cnt.out_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in1_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrRst.in0_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrRst.sel_AT11 () (_ BitVec 1))
(declare-fun f.wrPtrRst.out_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrSlice.out_AT11 () (_ BitVec 3))
(declare-fun f.wrPtrSlice.in_AT11 () (_ BitVec 4))
(declare-fun mp_en.out_AT11 () (_ BitVec 1))
(declare-fun mp_en.in1_AT11 () (_ BitVec 1))
(declare-fun mp_en.in0_AT11 () (_ BitVec 1))
(declare-fun f.notfullEq_1.out_AT11 () (_ BitVec 1))
(declare-fun f.notfullEq_1.in_AT11 () (_ BitVec 1))
(declare-fun f.fullEq_1.in1_AT11 () (_ BitVec 1))
(declare-fun f.fullEq_1.in0_AT11 () (_ BitVec 1))
(declare-fun f.fullEq_1.out_AT11 () (_ BitVec 1))
(declare-fun f.mem.raddr_AT11 () (_ BitVec 3))
(declare-fun f.mem.rdata_AT11 () (_ BitVec 8))
(declare-fun data_out_vld_and2.out_AT11 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in1_AT11 () (_ BitVec 1))
(declare-fun data_out_vld_and2.in0_AT11 () (_ BitVec 1))
(declare-fun not_data_out_vld.out_AT11 () (_ BitVec 1))
(declare-fun not_data_out_vld.in_AT11 () (_ BitVec 1))
(declare-fun f.wrPtrEn.in1_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrEn.in0_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrEn.sel_AT11 () (_ BitVec 1))
(declare-fun f.wrPtrEn.out_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.ssa_cnt.sel_AT11 () (_ BitVec 1))
(declare-fun mpt.ssa_cnt.out_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrp1.out_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in1_AT11 () (_ BitVec 4))
(declare-fun f.wrPtrp1.in0_AT11 () (_ BitVec 4))
(declare-fun data_out_vld_and1.out_AT11 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in1_AT11 () (_ BitVec 1))
(declare-fun data_out_vld_and1.in0_AT11 () (_ BitVec 1))
(declare-fun mpt.decr_mux.in1_AT11 () (_ BitVec 4))
(declare-fun mpt.decr_mux.in0_AT11 () (_ BitVec 4))
(declare-fun mpt.decr_mux.sel_AT11 () (_ BitVec 1))
(declare-fun mpt.decr_mux.out_AT11 () (_ BitVec 4))
(declare-fun f.emptyEq.in1_AT11 () (_ BitVec 4))
(declare-fun f.emptyEq.in0_AT11 () (_ BitVec 4))
(declare-fun f.emptyEq.out_AT11 () (_ BitVec 1))
(declare-fun reset_done_AT11 () (_ BitVec 1))
(declare-fun self.rst_AT11 () (_ BitVec 1))

(assert (=> (= self.empty_AT11 #b1) (= self.pop_AT11 #b0)))
(assert (=> (= self.full_AT11 #b1) (= self.push_AT11 #b0)))
(assert (= magic_packet_eq.out_AT11 (bvcomp magic_packet_eq.in0_AT11 magic_packet_eq.in1_AT11)))
(assert (= (bvsub mpt.ssa_cnt_m1.in0_AT11 mpt.ssa_cnt_m1.in1_AT11) mpt.ssa_cnt_m1.out_AT11))
(assert (= next_magic_packet.out_AT11 (ite (= next_magic_packet.sel_AT11 #b0) next_magic_packet.in0_AT11 next_magic_packet.in1_AT11)))
(assert (= (bvadd f.rdPtrp1.in0_AT11 f.rdPtrp1.in1_AT11) f.rdPtrp1.out_AT11))
(assert (= (bvadd mpt.cnt_p1.in0_AT11 mpt.cnt_p1.in1_AT11) mpt.cnt_p1.out_AT11))
(assert (= f.rdPtrEn.out_AT11 (ite (= f.rdPtrEn.sel_AT11 #b0) f.rdPtrEn.in0_AT11 f.rdPtrEn.in1_AT11)))
(assert (= (bvult cnt_gt_0.in1_AT11 cnt_gt_0.in0_AT11) (= cnt_gt_0.out_AT11 #b1)))
(assert (= (bvor en_or_sp.in0_AT11 en_or_sp.in1_AT11) en_or_sp.out_AT11))
(assert (= (bvult mpt.cnt_lt_depth.in0_AT11 mpt.cnt_lt_depth.in1_AT11) (= mpt.cnt_lt_depth.out_AT11 #b1)))
(assert (= (bvand f.fullCalc.in0_AT11 f.fullCalc.in1_AT11) f.fullCalc.out_AT11))
(assert (= (bvand mpt.ssa_cnt_and1.in0_AT11 mpt.ssa_cnt_and1.in1_AT11) mpt.ssa_cnt_and1.out_AT11))
(assert (= mpt.next_cnt.out_AT11 (ite (= mpt.next_cnt.sel_AT11 #b0) mpt.next_cnt.in0_AT11 mpt.next_cnt.in1_AT11)))
(assert (= f.wrPtrRst.out_AT11 (ite (= f.wrPtrRst.sel_AT11 #b0) f.wrPtrRst.in0_AT11 f.wrPtrRst.in1_AT11)))
(assert (= ((_ extract 2 0) f.wrPtrSlice.in_AT11) f.wrPtrSlice.out_AT11))
(assert (= (bvand mp_en.in0_AT11 mp_en.in1_AT11) mp_en.out_AT11))
(assert (= (bvnot f.notfullEq_1.in_AT11) f.notfullEq_1.out_AT11))
(assert (= f.fullEq_1.out_AT11 (bvcomp f.fullEq_1.in0_AT11 f.fullEq_1.in1_AT11)))
(assert (= f.mem.rdata_AT11 (select f.mem.array_AT11 f.mem.raddr_AT11)))
(assert (= (bvand data_out_vld_and2.in0_AT11 data_out_vld_and2.in1_AT11) data_out_vld_and2.out_AT11))
(assert (= (bvnot not_data_out_vld.in_AT11) not_data_out_vld.out_AT11))
(assert (= f.wrPtrEn.out_AT11 (ite (= f.wrPtrEn.sel_AT11 #b0) f.wrPtrEn.in0_AT11 f.wrPtrEn.in1_AT11)))
(assert (= mpt.ssa_cnt.out_AT11 (ite (= mpt.ssa_cnt.sel_AT11 #b0) mpt.ssa_cnt.in0_AT11 mpt.ssa_cnt.in1_AT11)))
(assert true)
(assert (= (bvadd f.wrPtrp1.in0_AT11 f.wrPtrp1.in1_AT11) f.wrPtrp1.out_AT11))
(assert (= (bvand data_out_vld_and1.in0_AT11 data_out_vld_and1.in1_AT11) data_out_vld_and1.out_AT11))
(assert (= mpt.decr_mux.out_AT11 (ite (= mpt.decr_mux.sel_AT11 #b0) mpt.decr_mux.in0_AT11 mpt.decr_mux.in1_AT11)))
(assert (= f.emptyEq.out_AT11 (bvcomp f.emptyEq.in0_AT11 f.emptyEq.in1_AT11)))
(assert (bvule _-_state_id1_-__AT11 #b10))
(assert (=> (= _-_state_id1_-__AT11 #b10) (and (and true (= self.rst_AT11 #b0)) (= reset_done_AT11 #b1))))
(assert (=> (= _-_state_id1_-__AT11 #b01) (and (and (and (and (and true (= self.rst_AT11 #b1)) (= self.push_AT11 #b0)) (= self.pop_AT11 #b0)) (= reset_done_AT11 #b0)) (= en.out_AT11 #b0))))
(assert (=> (= _-_state_id1_-__AT11 #b00) (and (and (and (and (and true (= self.rst_AT11 #b1)) (= self.push_AT11 #b0)) (= self.pop_AT11 #b0)) (= reset_done_AT11 #b0)) (= en.out_AT11 #b0))))
(assert (= f.fullEq_2.out_AT11 (bvcomp f.fullEq_2.in0_AT11 f.fullEq_2.in1_AT11)))
(assert (= f.fullEq_1.in1_AT11 ((_ extract 3 3) f.wrPtr.out_AT11)))
(assert (= f.fullEq_1.in0_AT11 ((_ extract 3 3) f.rdPtr.out_AT11)))
(assert (= en.out_AT11 mpt.not_captured.in_AT11))
(assert (= self.start_AT11 start_and_push.in0_AT11))
(assert (= prop_signal_or.out_AT11 self.prop_signal_AT11))
(assert (= f.fullCalc.out_AT11 self.full_AT11))
(assert (= data_out_vld_and2.out_AT11 self.data_out_vld_AT11))
(assert (= mp_en.out_AT11 next_magic_packet.sel_AT11))
(assert (= data_out_vld_and2.in1_AT11 next_cnt_eq0.out_AT11))
(assert (= not_data_out_vld.out_AT11 prop_signal_or.in0_AT11))
(assert (= mpt.next_cnt_and1.in0_AT11 mpt.ssa_cnt_gt_0.out_AT11))
(assert (= mpt.ssa_cnt.sel_AT11 mpt.ssa_cnt_and2.out_AT11))
(assert (= mpt.ssa_cnt_and1.out_AT11 mpt.ssa_cnt_and2.in0_AT11))
(assert (= mpt.not_captured.out_AT11 mpt.ssa_cnt_and2.in1_AT11))
(assert (= mpt.ssa_cnt_gt_0.in1_AT11 #b0000))
(assert (= mpt.next_cnt.in1_AT11 #b0000))
(assert (= mpt.decr_mux.sel_AT11 mpt.next_cnt_and1.out_AT11))
(assert (= mpt.decr_mux.out_AT11 mpt.next_cnt.in0_AT11))
(assert (= mpt.ssa_cnt.out_AT11 mpt.ssa_cnt_m1.in0_AT11))
(assert (= mpt.ssa_cnt.out_AT11 mpt.ssa_cnt_gt_0.in0_AT11))
(assert (= mpt.decr_mux.in1_AT11 mpt.ssa_cnt_m1.out_AT11))
(assert (= mpt.decr_mux.in0_AT11 mpt.ssa_cnt.out_AT11))
(assert (= mpt.ssa_cnt_m1.in1_AT11 #b0001))
(assert (= mpt.cnt_p1.out_AT11 mpt.ssa_cnt.in1_AT11))
(assert (= mpt.cnt_p1.in1_AT11 #b0001))
(assert (= mpt.cnt_lt_depth.out_AT11 mpt.ssa_cnt_and1.in0_AT11))
(assert (= mpt.cnt_lt_depth.in1_AT11 #b1000))
(assert (= mpt.next_cnt.out_AT11 next_cnt_eq0.in0_AT11))
(assert (= mpt.cnt.in_AT11 mpt.next_cnt.out_AT11))
(assert (= mp_en.in1_AT11 not_en.out_AT11))
(assert (= magic_packet_eq.out_AT11 prop_signal_or.in1_AT11))
(assert (= magic_packet.out_AT11 next_magic_packet.in0_AT11))
(assert (= magic_packet.out_AT11 magic_packet_eq.in0_AT11))
(assert (= magic_packet.in_AT11 next_magic_packet.out_AT11))
(assert (= f.wrPtrEn.in1_AT11 f.wrPtrp1.out_AT11))
(assert (= f.wrPtrEn.out_AT11 f.wrPtrRst.in0_AT11))
(assert (= f.wrPtr.in_AT11 f.wrPtrRst.out_AT11))
(assert (= mpt.next_cnt.sel_AT11 self.rst_AT11))
(assert (= f.wrPtrRst.sel_AT11 self.rst_AT11))
(assert (= f.wrPtrRst.in1_AT11 #b0000))
(assert (= f.rdPtrRst.sel_AT11 self.rst_AT11))
(assert (= mpt.next_cnt_and1.in1_AT11 self.pop_AT11))
(assert (= f.rdPtrRst.in1_AT11 #b0000))
(assert (= f.rdPtrEn.out_AT11 f.rdPtrRst.in0_AT11))
(assert (= f.rdPtrEn.in1_AT11 f.rdPtrp1.out_AT11))
(assert (= f.rdPtrEn.sel_AT11 self.pop_AT11))
(assert (= f.rdPtr.in_AT11 f.rdPtrRst.out_AT11))
(assert (= self.push_AT11 start_and_push.in1_AT11))
(assert (= mpt.ssa_cnt_and1.in1_AT11 self.push_AT11))
(assert (= f.wrPtrEn.sel_AT11 self.push_AT11))
(assert (= f.wrPtrp1.in0_AT11 #b0001))
(assert (= f.rdPtrp1.in0_AT11 #b0001))
(assert (= next_magic_packet.in1_AT11 self.data_in_AT11))
(assert (= f.mem.wdata_AT11 self.data_in_AT11))
(assert (= f.mem.wen_AT11 self.push_AT11))
(assert (= f.mem.rdata_AT11 self.data_out_AT11))
(assert (= f.mem.rdata_AT11 magic_packet_eq.in1_AT11))
(assert (= f.mem.waddr_AT11 f.wrPtrSlice.out_AT11))
(assert (= f.fullCalc.in1_AT11 f.fullEq_2.out_AT11))
(assert (= f.mem.raddr_AT11 f.rdPtrSlice.out_AT11))
(assert (= f.fullEq_2.in0_AT11 f.rdPtrSlice.out_AT11))
(assert (= next_cnt_eq0.in1_AT11 #b0000))
(assert (= cnt_gt_0.in1_AT11 #b0000))
(assert (= mpt.cnt.out_AT11 mpt.cnt_p1.in0_AT11))
(assert (= mpt.cnt.out_AT11 mpt.cnt_lt_depth.in0_AT11))
(assert (= mpt.cnt.out_AT11 mpt.ssa_cnt.in0_AT11))
(assert (= cnt_gt_0.in0_AT11 mpt.cnt.out_AT11))
(assert (= cnt_gt_0.out_AT11 data_out_vld_and1.in1_AT11))
(assert (= f.fullEq_2.in1_AT11 f.wrPtrSlice.out_AT11))
(assert (= f.fullEq_1.out_AT11 f.notfullEq_1.in_AT11))
(assert (= f.fullCalc.in0_AT11 f.notfullEq_1.out_AT11))
(assert (= f.wrPtr.out_AT11 f.wrPtrSlice.in_AT11))
(assert (= f.wrPtr.out_AT11 f.wrPtrEn.in0_AT11))
(assert (= f.wrPtr.out_AT11 f.wrPtrp1.in1_AT11))
(assert (= f.emptyEq.out_AT11 self.empty_AT11))
(assert (= f.rdPtr.out_AT11 f.rdPtrp1.in1_AT11))
(assert (= f.rdPtr.out_AT11 f.rdPtrEn.in0_AT11))
(assert (= f.rdPtr.out_AT11 f.rdPtrSlice.in_AT11))
(assert (= f.emptyEq.in1_AT11 f.wrPtr.out_AT11))
(assert (= mp_en.in0_AT11 start_and_push.out_AT11))
(assert (= en_or_sp.in1_AT11 start_and_push.out_AT11))
(assert (= f.emptyEq.in0_AT11 f.rdPtr.out_AT11))
(assert (= mpt.cnt.clk_AT11 self.clk_AT11))
(assert (= magic_packet.clk_AT11 self.clk_AT11))
(assert (= f.wrPtr.clk_AT11 self.clk_AT11))
(assert (= f.rdPtr.clk_AT11 self.clk_AT11))
(assert (= f.mem.clk_AT11 self.clk_AT11))
(assert (= en.in_AT11 en_or_sp.out_AT11))
(assert (= data_out_vld_and2.out_AT11 not_data_out_vld.in_AT11))
(assert (= en.clk_AT11 self.clk_AT11))
(assert (= data_out_vld_and1.out_AT11 data_out_vld_and2.in0_AT11))
(assert (= en.out_AT11 not_en.in_AT11))
(assert (= en.out_AT11 en_or_sp.in0_AT11))
(assert (= data_out_vld_and1.in0_AT11 en.out_AT11))
(assert (= (bvor prop_signal_or.in0_AT11 prop_signal_or.in1_AT11) prop_signal_or.out_AT11))
(assert (= (bvnot not_en.in_AT11) not_en.out_AT11))
(assert (= self.clk_AT11 #b0))
(assert (= ((_ extract 2 0) f.rdPtrSlice.in_AT11) f.rdPtrSlice.out_AT11))
(assert (= (bvnot mpt.not_captured.in_AT11) mpt.not_captured.out_AT11))
(assert (= (bvand mpt.next_cnt_and1.in0_AT11 mpt.next_cnt_and1.in1_AT11) mpt.next_cnt_and1.out_AT11))
(assert (= (bvand start_and_push.in0_AT11 start_and_push.in1_AT11) start_and_push.out_AT11))
(assert (= next_cnt_eq0.out_AT11 (bvcomp next_cnt_eq0.in0_AT11 next_cnt_eq0.in1_AT11)))
(assert (= f.rdPtrRst.out_AT11 (ite (= f.rdPtrRst.sel_AT11 #b0) f.rdPtrRst.in0_AT11 f.rdPtrRst.in1_AT11)))
(assert (= (bvult mpt.ssa_cnt_gt_0.in1_AT11 mpt.ssa_cnt_gt_0.in0_AT11) (= mpt.ssa_cnt_gt_0.out_AT11 #b1)))
(assert (= (bvand mpt.ssa_cnt_and2.in0_AT11 mpt.ssa_cnt_and2.in1_AT11) mpt.ssa_cnt_and2.out_AT11))
(assert (= f.mem.array_AT11 (store f.mem.array_AT10 f.mem.waddr_AT10 (ite (= f.mem.wen_AT10 #b1) f.mem.wdata_AT10 (select f.mem.array_AT10 f.mem.waddr_AT10)))))
(assert (= magic_packet.init_AT10 magic_packet.init_AT11))
(assert (= magic_packet.out_AT11 magic_packet.in_AT10))
(assert (= f.rdPtr.out_AT11 f.rdPtr.in_AT10))
(assert (=> (= _-_state_id1_-__AT10 #b10) (= _-_state_id1_-__AT11 #b10)))
(assert (=> (= _-_state_id1_-__AT10 #b01) (= _-_state_id1_-__AT11 #b10)))
(assert (=> (= _-_state_id1_-__AT10 #b00) (= _-_state_id1_-__AT11 #b01)))
(assert (= en.out_AT11 en.in_AT10))
(assert (= en.init_AT10 en.init_AT11))
(assert (= mpt.cnt.out_AT11 mpt.cnt.in_AT10))
(assert (= f.wrPtr.out_AT11 f.wrPtr.in_AT10))
