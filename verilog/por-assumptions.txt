((!'empty'[0:0] | !'reqs'[0:0]) = 1_1)
((!'empty'[1:1] | !'reqs'[1:1]) = 1_1)
((!'full'[0:0] | !'push'[0:0]) = 1_1)
((!'full'[1:1] | !'push'[1:1]) = 1_1)
# Force sequential
(('push'[0:0] & 'push'[1:1]) = 0_1)
((!('push'[0:0] | 'push'[1:1]) | ('reqs' bvcomp 0_2)) = 1_1)
# No stutter
(('push'[0:0] | 'push'[1:1] | 'reqs'[0:0] | 'reqs'[1:1]) = 1_1)
# POR
# there's a dependency relation between push0 and reqs0 which doesnt allow reordering in general
(full[0:0] | full[1:1] | !push[1:1] | !next(push[0:0])) = 1_1
(full[0:0] | empty[1:1] | !reqs[1:1] | !next(push[0:0])) = 1_1
(empty[0:0] | full[1:1] | !push[1:1] | !next(reqs[0:0])) = 1_1
(empty[0:0] | empty[1:1] | !reqs[1:1] | !next(reqs[0:0])) = 1_1
# as long as it's still not empty, and the packet has been injected, once you start requesting, don't do anything else
# e.g. !empty -> (op_i -> !next(reqs0))
# using all bv because otherwise cvc4 gets all messed up with booleans
(!sb.ff_en.Q | empty[0:0] | full[0:0] | !push[0:0] | !next(reqs[0:0])) = 1_1
(!sb.ff_en.Q | empty[0:0] | full[1:1] | !push[1:1] | !next(reqs[0:0])) = 1_1
(!sb.ff_en.Q | empty[0:0] | empty[1:1] | !reqs[1:1] | !next(reqs[0:0])) = 1_1
# end -- saturation experiment
