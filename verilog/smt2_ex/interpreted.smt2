;; Yosys translation legend
;; Adapted from the "help write_smt2" printout from Yosys

;; LEGEND
;; Syntax                     : type                                  || "purpose"
;; =============================================================================
;; |<mod>_s|                  : sort                                  || for state of <mod>
;; |<mod>_h|                  : func |<mod>_s| --> Bool               || asserted to establish design hierarchy
;; |<mod>_h <instancename>|   : UF   |<mod>_s| --> |<submod>_s|       || returns sort of submodule
;; |<mod>_n <wirename>|       : func |<mod>_s| --> (BV | Bool)        || access a signal by name
;; |<mod>_is|                 : UF   |<mod>_s| --> Bool               || asserted 'true' in initial state and 'false' otherwise
;; |<mod>_i|                  : func |<mod>_s| --> Bool               || asserted 'true' for initial state and unconstrained otherwise
;; |<mod>_t|                  : func |<mod>_s| x |<mod>_s| --> Bool   || evaluates to true for valid state transition
;; |<mod>_a|                  : func |<mod>_s| --> Bool               || evaluates to true if all assertions hold in the state
;; |<mod>_u|                  : func |<mod>_s| --> Bool               || evaluates to true if all assumptions hold in the state
;; |<mod>_a <id>|             : func |<mod>_s| --> Bool               || evaluates to true if assertion cell <id> holds in the state
;; |<mod>_u <id>|             : func |<mod>_s| --> Bool               || evaluates to true if all assumption cell <id> holds in the state
;; |<mod>_c <id>|             : func |<mod>_s| --> Bool               || evaluates to true if cover cell <id> holds in the state

;; Top Module: Scoreboard


; SMT-LIBv2 description generated by Yosys 0.7+298 (git sha1 393b18e, clang 3.8.0-2ubuntu4 -fPIC -Os)
; yosys-smt2-nomem

;; MC: Flip Flop module declarations
; yosys-smt2-module $paramod/FF/WIDTH=2
(declare-sort |$paramod/FF/WIDTH=2_s| 0)
(declare-fun |$paramod/FF/WIDTH=2_is| (|$paramod/FF/WIDTH=2_s|) Bool)
; yosys-smt2-input D 2
; yosys-smt2-wire D 2
(declare-fun |$paramod/FF/WIDTH=2#0| (|$paramod/FF/WIDTH=2_s|) (_ BitVec 2)) ; \D
(define-fun |$paramod/FF/WIDTH=2_n D| ((state |$paramod/FF/WIDTH=2_s|)) (_ BitVec 2) (|$paramod/FF/WIDTH=2#0| state))
; yosys-smt2-output Q 2
; yosys-smt2-register Q 2
; yosys-smt2-wire Q 2
(declare-fun |$paramod/FF/WIDTH=2#1| (|$paramod/FF/WIDTH=2_s|) (_ BitVec 2)) ; \Q
(define-fun |$paramod/FF/WIDTH=2_n Q| ((state |$paramod/FF/WIDTH=2_s|)) (_ BitVec 2) (|$paramod/FF/WIDTH=2#1| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |$paramod/FF/WIDTH=2#2| (|$paramod/FF/WIDTH=2_s|) Bool) ; \clk
(define-fun |$paramod/FF/WIDTH=2_n clk| ((state |$paramod/FF/WIDTH=2_s|)) Bool (|$paramod/FF/WIDTH=2#2| state))
; yosys-smt2-input en 1
; yosys-smt2-wire en 1
(declare-fun |$paramod/FF/WIDTH=2#3| (|$paramod/FF/WIDTH=2_s|) Bool) ; \en
(define-fun |$paramod/FF/WIDTH=2_n en| ((state |$paramod/FF/WIDTH=2_s|)) Bool (|$paramod/FF/WIDTH=2#3| state))

;; MC: if enabled, pass through
(define-fun |$paramod/FF/WIDTH=2#4| ((state |$paramod/FF/WIDTH=2_s|)) (_ BitVec 2) (ite (|$paramod/FF/WIDTH=2#3| state) (|$paramod/FF/WIDTH=2#0| state) (|$paramod/FF/WIDTH=2#1| state))) ; $0\Q[1:0]
(define-fun |$paramod/FF/WIDTH=2_a| ((state |$paramod/FF/WIDTH=2_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=2_u| ((state |$paramod/FF/WIDTH=2_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=2_i| ((state |$paramod/FF/WIDTH=2_s|)) Bool 
  (= (|$paramod/FF/WIDTH=2#1| state) #b00) ; Q
)
(define-fun |$paramod/FF/WIDTH=2_h| ((state |$paramod/FF/WIDTH=2_s|)) Bool true)

;; MC: Transition Relation for Flip Flop
;; MC: Q gets calculated next value, which is |$paramod/FF/WIDTH=2#4|
(define-fun |$paramod/FF/WIDTH=2_t| ((state |$paramod/FF/WIDTH=2_s|) (next_state |$paramod/FF/WIDTH=2_s|)) Bool 
  (= (|$paramod/FF/WIDTH=2#4| state) (|$paramod/FF/WIDTH=2#1| next_state)) ; $procdff$312 \Q
)
; end of module $paramod/FF/WIDTH=2

;; MC: Another flip flop of width 8
; yosys-smt2-module $paramod/FF/WIDTH=8
(declare-sort |$paramod/FF/WIDTH=8_s| 0)
(declare-fun |$paramod/FF/WIDTH=8_is| (|$paramod/FF/WIDTH=8_s|) Bool)
; yosys-smt2-input D 8
; yosys-smt2-wire D 8
(declare-fun |$paramod/FF/WIDTH=8#0| (|$paramod/FF/WIDTH=8_s|) (_ BitVec 8)) ; \D
(define-fun |$paramod/FF/WIDTH=8_n D| ((state |$paramod/FF/WIDTH=8_s|)) (_ BitVec 8) (|$paramod/FF/WIDTH=8#0| state))
; yosys-smt2-output Q 8
; yosys-smt2-register Q 8
; yosys-smt2-wire Q 8
(declare-fun |$paramod/FF/WIDTH=8#1| (|$paramod/FF/WIDTH=8_s|) (_ BitVec 8)) ; \Q
(define-fun |$paramod/FF/WIDTH=8_n Q| ((state |$paramod/FF/WIDTH=8_s|)) (_ BitVec 8) (|$paramod/FF/WIDTH=8#1| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |$paramod/FF/WIDTH=8#2| (|$paramod/FF/WIDTH=8_s|) Bool) ; \clk
(define-fun |$paramod/FF/WIDTH=8_n clk| ((state |$paramod/FF/WIDTH=8_s|)) Bool (|$paramod/FF/WIDTH=8#2| state))
; yosys-smt2-input en 1
; yosys-smt2-wire en 1
(declare-fun |$paramod/FF/WIDTH=8#3| (|$paramod/FF/WIDTH=8_s|) Bool) ; \en
(define-fun |$paramod/FF/WIDTH=8_n en| ((state |$paramod/FF/WIDTH=8_s|)) Bool (|$paramod/FF/WIDTH=8#3| state))
(define-fun |$paramod/FF/WIDTH=8#4| ((state |$paramod/FF/WIDTH=8_s|)) (_ BitVec 8) (ite (|$paramod/FF/WIDTH=8#3| state) (|$paramod/FF/WIDTH=8#0| state) (|$paramod/FF/WIDTH=8#1| state))) ; $0\Q[7:0]
(define-fun |$paramod/FF/WIDTH=8_a| ((state |$paramod/FF/WIDTH=8_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=8_u| ((state |$paramod/FF/WIDTH=8_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=8_i| ((state |$paramod/FF/WIDTH=8_s|)) Bool 
  (= (|$paramod/FF/WIDTH=8#1| state) #b00000000) ; Q
)
(define-fun |$paramod/FF/WIDTH=8_h| ((state |$paramod/FF/WIDTH=8_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=8_t| ((state |$paramod/FF/WIDTH=8_s|) (next_state |$paramod/FF/WIDTH=8_s|)) Bool 
  (= (|$paramod/FF/WIDTH=8#4| state) (|$paramod/FF/WIDTH=8#1| next_state)) ; $procdff$314 \Q
)
; end of module $paramod/FF/WIDTH=8

;; MC: Another Flip Flop module -- note there's one for each parameter combination that's instantiated
;; MC: Before being unrolled, this is NOT repeated for each instantiation. An instantiation is just
;; MC:    an uninterpreted function pointing to this definition
; yosys-smt2-module $paramod/FF/WIDTH=3
(declare-sort |$paramod/FF/WIDTH=3_s| 0)
(declare-fun |$paramod/FF/WIDTH=3_is| (|$paramod/FF/WIDTH=3_s|) Bool)
; yosys-smt2-input D 3
; yosys-smt2-wire D 3
(declare-fun |$paramod/FF/WIDTH=3#0| (|$paramod/FF/WIDTH=3_s|) (_ BitVec 3)) ; \D
(define-fun |$paramod/FF/WIDTH=3_n D| ((state |$paramod/FF/WIDTH=3_s|)) (_ BitVec 3) (|$paramod/FF/WIDTH=3#0| state))
; yosys-smt2-output Q 3
; yosys-smt2-register Q 3
; yosys-smt2-wire Q 3
(declare-fun |$paramod/FF/WIDTH=3#1| (|$paramod/FF/WIDTH=3_s|) (_ BitVec 3)) ; \Q
(define-fun |$paramod/FF/WIDTH=3_n Q| ((state |$paramod/FF/WIDTH=3_s|)) (_ BitVec 3) (|$paramod/FF/WIDTH=3#1| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |$paramod/FF/WIDTH=3#2| (|$paramod/FF/WIDTH=3_s|) Bool) ; \clk
(define-fun |$paramod/FF/WIDTH=3_n clk| ((state |$paramod/FF/WIDTH=3_s|)) Bool (|$paramod/FF/WIDTH=3#2| state))
; yosys-smt2-input en 1
; yosys-smt2-wire en 1
(declare-fun |$paramod/FF/WIDTH=3#3| (|$paramod/FF/WIDTH=3_s|) Bool) ; \en
(define-fun |$paramod/FF/WIDTH=3_n en| ((state |$paramod/FF/WIDTH=3_s|)) Bool (|$paramod/FF/WIDTH=3#3| state))
(define-fun |$paramod/FF/WIDTH=3#4| ((state |$paramod/FF/WIDTH=3_s|)) (_ BitVec 3) (ite (|$paramod/FF/WIDTH=3#3| state) (|$paramod/FF/WIDTH=3#0| state) (|$paramod/FF/WIDTH=3#1| state))) ; $0\Q[2:0]
(define-fun |$paramod/FF/WIDTH=3_a| ((state |$paramod/FF/WIDTH=3_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=3_u| ((state |$paramod/FF/WIDTH=3_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=3_i| ((state |$paramod/FF/WIDTH=3_s|)) Bool 
  (= (|$paramod/FF/WIDTH=3#1| state) #b000) ; Q
)
(define-fun |$paramod/FF/WIDTH=3_h| ((state |$paramod/FF/WIDTH=3_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=3_t| ((state |$paramod/FF/WIDTH=3_s|) (next_state |$paramod/FF/WIDTH=3_s|)) Bool 
  (= (|$paramod/FF/WIDTH=3#4| state) (|$paramod/FF/WIDTH=3#1| next_state)) ; $procdff$313 \Q
)
; end of module $paramod/FF/WIDTH=3

; yosys-smt2-module $paramod/FF/WIDTH=1
(declare-sort |$paramod/FF/WIDTH=1_s| 0)
(declare-fun |$paramod/FF/WIDTH=1_is| (|$paramod/FF/WIDTH=1_s|) Bool)
; yosys-smt2-input D 1
; yosys-smt2-wire D 1
(declare-fun |$paramod/FF/WIDTH=1#0| (|$paramod/FF/WIDTH=1_s|) Bool) ; \D
(define-fun |$paramod/FF/WIDTH=1_n D| ((state |$paramod/FF/WIDTH=1_s|)) Bool (|$paramod/FF/WIDTH=1#0| state))
; yosys-smt2-output Q 1
; yosys-smt2-register Q 1
; yosys-smt2-wire Q 1
(declare-fun |$paramod/FF/WIDTH=1#1| (|$paramod/FF/WIDTH=1_s|) (_ BitVec 1)) ; \Q
(define-fun |$paramod/FF/WIDTH=1_n Q| ((state |$paramod/FF/WIDTH=1_s|)) Bool (= ((_ extract 0 0) (|$paramod/FF/WIDTH=1#1| state)) #b1))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |$paramod/FF/WIDTH=1#2| (|$paramod/FF/WIDTH=1_s|) Bool) ; \clk
(define-fun |$paramod/FF/WIDTH=1_n clk| ((state |$paramod/FF/WIDTH=1_s|)) Bool (|$paramod/FF/WIDTH=1#2| state))
; yosys-smt2-input en 1
; yosys-smt2-wire en 1
(declare-fun |$paramod/FF/WIDTH=1#3| (|$paramod/FF/WIDTH=1_s|) Bool) ; \en
(define-fun |$paramod/FF/WIDTH=1_n en| ((state |$paramod/FF/WIDTH=1_s|)) Bool (|$paramod/FF/WIDTH=1#3| state))
(define-fun |$paramod/FF/WIDTH=1#4| ((state |$paramod/FF/WIDTH=1_s|)) (_ BitVec 1) (ite (|$paramod/FF/WIDTH=1#3| state) (ite (|$paramod/FF/WIDTH=1#0| state) #b1 #b0) (|$paramod/FF/WIDTH=1#1| state))) ; $0\Q[0:0]
(define-fun |$paramod/FF/WIDTH=1_a| ((state |$paramod/FF/WIDTH=1_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=1_u| ((state |$paramod/FF/WIDTH=1_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=1_i| ((state |$paramod/FF/WIDTH=1_s|)) Bool 
  (= (= ((_ extract 0 0) (|$paramod/FF/WIDTH=1#1| state)) #b1) false) ; Q
)
(define-fun |$paramod/FF/WIDTH=1_h| ((state |$paramod/FF/WIDTH=1_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=1_t| ((state |$paramod/FF/WIDTH=1_s|) (next_state |$paramod/FF/WIDTH=1_s|)) Bool 
  (= (|$paramod/FF/WIDTH=1#4| state) (|$paramod/FF/WIDTH=1#1| next_state)) ; $procdff$315 \Q
)
; end of module $paramod/FF/WIDTH=1

; yosys-smt2-module $paramod/FIFO/WIDTH=8/DEPTH=8

;; MC: declare the module's sort
(declare-sort |$paramod/FIFO/WIDTH=8/DEPTH=8_s| 0)
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_is| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#0| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) Bool) ; \clk
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n clk| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (|$paramod/FIFO/WIDTH=8/DEPTH=8#0| state))
; yosys-smt2-wire clkEn 1
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#1| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 1)) ; \push
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#2| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 1)) ; \pop

;; MC: computing clkEn value i.e. push | pop | rst
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#3| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 1) (bvor (|$paramod/FIFO/WIDTH=8/DEPTH=8#1| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#2| state))) ; $or$fifo.sv:22$159_Y
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#4| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 1)) ; \rst
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#5| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 1) (bvor (|$paramod/FIFO/WIDTH=8/DEPTH=8#3| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#4| state))) ; \clkEn
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n clkEn| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#5| state)) #b1))
; yosys-smt2-input data_in 8
; yosys-smt2-wire data_in 8
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#6| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 8)) ; \data_in
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n data_in| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 8) (|$paramod/FIFO/WIDTH=8/DEPTH=8#6| state))
; yosys-smt2-output data_out 8
; yosys-smt2-wire data_out 8

;; MC: generating all the entries -- this translation is using just bitvectors, no arrays
; yosys-smt2-cell $paramod/FF/WIDTH=8 entry_gen[7].ff_entry_inst
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#7| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 8)) ; \entries[7]
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[7].ff_entry_inst| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) |$paramod/FF/WIDTH=8_s|)
; yosys-smt2-cell $paramod/FF/WIDTH=8 entry_gen[6].ff_entry_inst
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#8| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 8)) ; \entries[6]
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[6].ff_entry_inst| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) |$paramod/FF/WIDTH=8_s|)
; yosys-smt2-cell $paramod/FF/WIDTH=8 entry_gen[5].ff_entry_inst
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#9| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 8)) ; \entries[5]
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[5].ff_entry_inst| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) |$paramod/FF/WIDTH=8_s|)
; yosys-smt2-cell $paramod/FF/WIDTH=8 entry_gen[4].ff_entry_inst
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#10| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 8)) ; \entries[4]
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[4].ff_entry_inst| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) |$paramod/FF/WIDTH=8_s|)
; yosys-smt2-cell $paramod/FF/WIDTH=8 entry_gen[3].ff_entry_inst
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#11| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 8)) ; \entries[3]
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[3].ff_entry_inst| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) |$paramod/FF/WIDTH=8_s|)
; yosys-smt2-cell $paramod/FF/WIDTH=8 entry_gen[2].ff_entry_inst
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#12| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 8)) ; \entries[2]
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[2].ff_entry_inst| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) |$paramod/FF/WIDTH=8_s|)
; yosys-smt2-cell $paramod/FF/WIDTH=8 entry_gen[1].ff_entry_inst
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#13| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 8)) ; \entries[1]
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[1].ff_entry_inst| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) |$paramod/FF/WIDTH=8_s|)
; yosys-smt2-cell $paramod/FF/WIDTH=8 entry_gen[0].ff_entry_inst
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#14| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 8)) ; \entries[0]
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[0].ff_entry_inst| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) |$paramod/FF/WIDTH=8_s|)
; yosys-smt2-cell $paramod/FF/WIDTH=3 ff_rdPtr
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#15| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 3)) ; \rdPtr
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_rdPtr| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) |$paramod/FF/WIDTH=3_s|)

;; MC: pointer comparisons -- these are used as enables for each of the entries
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#16| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state) #b111)) ; $procmux$304_CMP
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#17| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state) #b110)) ; $procmux$305_CMP
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#18| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state) #b101)) ; $procmux$306_CMP
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#19| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state) #b100)) ; $procmux$307_CMP
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#20| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state) #b011)) ; $procmux$308_CMP
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#21| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state) #b010)) ; $procmux$309_CMP
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#22| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state) #b001)) ; $procmux$310_CMP
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#23| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (not (or  (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state)) #b1) (= ((_ extract 1 1) (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state)) #b1) (= ((_ extract 2 2) (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state)) #b1)))) ; $procmux$311_CMP

;; MC: data_out is a bug mux
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#24| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 8) (ite (|$paramod/FIFO/WIDTH=8/DEPTH=8#23| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#14| state) (ite (|$paramod/FIFO/WIDTH=8/DEPTH=8#22| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#13| state) (ite (|$paramod/FIFO/WIDTH=8/DEPTH=8#21| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#12| state) (ite (|$paramod/FIFO/WIDTH=8/DEPTH=8#20| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#11| state) (ite (|$paramod/FIFO/WIDTH=8/DEPTH=8#19| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#10| state) (ite (|$paramod/FIFO/WIDTH=8/DEPTH=8#18| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#9| state) (ite (|$paramod/FIFO/WIDTH=8/DEPTH=8#17| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#8| state) (ite (|$paramod/FIFO/WIDTH=8/DEPTH=8#16| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#7| state) #b00000000))))))))) ; \data_out
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n data_out| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 8) (|$paramod/FIFO/WIDTH=8/DEPTH=8#24| state))
; yosys-smt2-output empty 1
; yosys-smt2-wire empty 1
; yosys-smt2-cell $paramod/FF/WIDTH=3 ff_wrPtr
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#25| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (_ BitVec 3)) ; \wrPtr
(declare-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_wrPtr| (|$paramod/FIFO/WIDTH=8/DEPTH=8_s|) |$paramod/FF/WIDTH=3_s|)
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#26| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state))) ; \empty
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n empty| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (|$paramod/FIFO/WIDTH=8/DEPTH=8#26| state))
; yosys-smt2-wire entries[0] 8
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n entries[0]| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 8) (|$paramod/FIFO/WIDTH=8/DEPTH=8#14| state))
; yosys-smt2-wire entries[1] 8
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n entries[1]| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 8) (|$paramod/FIFO/WIDTH=8/DEPTH=8#13| state))
; yosys-smt2-wire entries[2] 8
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n entries[2]| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 8) (|$paramod/FIFO/WIDTH=8/DEPTH=8#12| state))
; yosys-smt2-wire entries[3] 8
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n entries[3]| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 8) (|$paramod/FIFO/WIDTH=8/DEPTH=8#11| state))
; yosys-smt2-wire entries[4] 8
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n entries[4]| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 8) (|$paramod/FIFO/WIDTH=8/DEPTH=8#10| state))
; yosys-smt2-wire entries[5] 8
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n entries[5]| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 8) (|$paramod/FIFO/WIDTH=8/DEPTH=8#9| state))
; yosys-smt2-wire entries[6] 8
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n entries[6]| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 8) (|$paramod/FIFO/WIDTH=8/DEPTH=8#8| state))
; yosys-smt2-wire entries[7] 8
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n entries[7]| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 8) (|$paramod/FIFO/WIDTH=8/DEPTH=8#7| state))
; yosys-smt2-output full 1
; yosys-smt2-wire full 1
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#27| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= ((_ extract 1 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state)) ((_ extract 1 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state)))) ; $eq$fifo.sv:56$170_Y
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#28| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (distinct ((_ extract 2 2) (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state)) ((_ extract 2 2) (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state)))) ; $ne$fifo.sv:56$171_Y
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#29| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 1) (bvand (ite (|$paramod/FIFO/WIDTH=8/DEPTH=8#27| state) #b1 #b0) (ite (|$paramod/FIFO/WIDTH=8/DEPTH=8#28| state) #b1 #b0))) ; \full
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n full| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#29| state)) #b1))
; yosys-smt2-input pop 1
; yosys-smt2-wire pop 1
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n pop| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#2| state)) #b1))
; yosys-smt2-input push 1
; yosys-smt2-wire push 1
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n push| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#1| state)) #b1))
; yosys-smt2-wire rdPtr 3
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n rdPtr| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 3) (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state))
; yosys-smt2-wire rdPtrNxt 3
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#30| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 3) (bvadd (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state) #b001)) ; $add$fifo.sv:46$165_Y

;; MC: part of the rdPtrNxt calculation
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#31| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 3) (ite (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#2| state)) #b1) (|$paramod/FIFO/WIDTH=8/DEPTH=8#30| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state))) ; $ternary$fifo.sv:47$167_Y [2:0]

;; MC: finishes rdPtrNxt calculation -- if reset, set to zero. Otherwise use the ternary operation from above
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#32| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 3) (ite (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#4| state)) #b1) #b000 (|$paramod/FIFO/WIDTH=8/DEPTH=8#31| state))) ; \rdPtrNxt

(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n rdPtrNxt| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 3) (|$paramod/FIFO/WIDTH=8/DEPTH=8#32| state))
; yosys-smt2-input rst 1
; yosys-smt2-wire rst 1
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n rst| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#4| state)) #b1))
; yosys-smt2-wire wrPtr 3
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n wrPtr| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 3) (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state))
; yosys-smt2-wire wrPtrNxt 3
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#33| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 3) (bvadd (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state) #b001)) ; $add$fifo.sv:31$161_Y
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#34| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 3) (ite (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#1| state)) #b1) (|$paramod/FIFO/WIDTH=8/DEPTH=8#33| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state))) ; $auto$wreduce.cc:347:run$325 [2:0]
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#35| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 3) (ite (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#4| state)) #b1) #b000 (|$paramod/FIFO/WIDTH=8/DEPTH=8#34| state))) ; \wrPtrNxt
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_n wrPtrNxt| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) (_ BitVec 3) (|$paramod/FIFO/WIDTH=8/DEPTH=8#35| state))

;; MC: pointer comparisons again, had wrPtr == i in a generate loop
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#36| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state) #b100)) ; $eq$fifo.sv:66$177_Y
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#37| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state) #b011)) ; $eq$fifo.sv:66$176_Y
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#38| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (not (or  (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state)) #b1) (= ((_ extract 1 1) (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state)) #b1) (= ((_ extract 2 2) (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state)) #b1)))) ; $eq$fifo.sv:66$173_Y
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#39| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state) #b111)) ; $eq$fifo.sv:66$180_Y
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#40| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state) #b001)) ; $eq$fifo.sv:66$174_Y
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#41| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state) #b010)) ; $eq$fifo.sv:66$175_Y
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#42| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state) #b101)) ; $eq$fifo.sv:66$178_Y
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8#43| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state) #b110)) ; $eq$fifo.sv:66$179_Y

;; MC: These assertions are all just true because there were no embedded assertions
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_a| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (and
  (|$paramod/FF/WIDTH=8_a| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[4].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_a| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[3].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_a| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[0].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_a| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[7].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_a| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[1].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=3_a| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_rdPtr| state))
  (|$paramod/FF/WIDTH=3_a| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_wrPtr| state))
  (|$paramod/FF/WIDTH=8_a| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[2].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_a| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[5].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_a| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[6].ff_entry_inst| state))
))

;; MC: Similarly there are no embedded assumptions in the fifo
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_u| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (and
  (|$paramod/FF/WIDTH=8_u| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[4].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_u| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[3].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_u| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[0].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_u| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[7].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_u| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[1].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=3_u| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_rdPtr| state))
  (|$paramod/FF/WIDTH=3_u| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_wrPtr| state))
  (|$paramod/FF/WIDTH=8_u| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[2].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_u| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[5].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_u| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[6].ff_entry_inst| state))
))

;; MC: The initial state is primarily zeros
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_i| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (and
  (|$paramod/FF/WIDTH=8_i| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[4].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_i| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[3].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_i| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[0].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_i| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[7].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_i| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[1].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=3_i| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_rdPtr| state))
  (|$paramod/FF/WIDTH=3_i| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_wrPtr| state))
  (|$paramod/FF/WIDTH=8_i| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[2].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_i| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[5].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_i| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[6].ff_entry_inst| state))
))

;; MC: hierarchy function, wires up submodules
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_h| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (and
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#6| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[4].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#10| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[4].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#0| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[4].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.clk
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#36| state) (|$paramod/FF/WIDTH=8_n en| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[4].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.en
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#6| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[3].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#11| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[3].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#0| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[3].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.clk
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#37| state) (|$paramod/FF/WIDTH=8_n en| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[3].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.en
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#6| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[0].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#14| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[0].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#0| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[0].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.clk
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#38| state) (|$paramod/FF/WIDTH=8_n en| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[0].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.en
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#6| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[7].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#7| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[7].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#0| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[7].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.clk
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#39| state) (|$paramod/FF/WIDTH=8_n en| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[7].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.en
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#6| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[1].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#13| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[1].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#0| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[1].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.clk
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#40| state) (|$paramod/FF/WIDTH=8_n en| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[1].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.en
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#32| state) (|$paramod/FF/WIDTH=3_n D| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_rdPtr| state))) ; $paramod/FF/WIDTH=3.D
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#15| state) (|$paramod/FF/WIDTH=3_n Q| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_rdPtr| state))) ; $paramod/FF/WIDTH=3.Q
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#0| state) (|$paramod/FF/WIDTH=3_n clk| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_rdPtr| state))) ; $paramod/FF/WIDTH=3.clk
  (= (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#5| state)) #b1) (|$paramod/FF/WIDTH=3_n en| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_rdPtr| state))) ; $paramod/FF/WIDTH=3.en
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#35| state) (|$paramod/FF/WIDTH=3_n D| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_wrPtr| state))) ; $paramod/FF/WIDTH=3.D
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#25| state) (|$paramod/FF/WIDTH=3_n Q| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_wrPtr| state))) ; $paramod/FF/WIDTH=3.Q
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#0| state) (|$paramod/FF/WIDTH=3_n clk| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_wrPtr| state))) ; $paramod/FF/WIDTH=3.clk
  (= (= ((_ extract 0 0) (|$paramod/FIFO/WIDTH=8/DEPTH=8#5| state)) #b1) (|$paramod/FF/WIDTH=3_n en| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_wrPtr| state))) ; $paramod/FF/WIDTH=3.en
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#6| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[2].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#12| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[2].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#0| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[2].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.clk
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#41| state) (|$paramod/FF/WIDTH=8_n en| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[2].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.en
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#6| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[5].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#9| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[5].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#0| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[5].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.clk
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#42| state) (|$paramod/FF/WIDTH=8_n en| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[5].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.en
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#6| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[6].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#8| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[6].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#0| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[6].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.clk
  (= (|$paramod/FIFO/WIDTH=8/DEPTH=8#43| state) (|$paramod/FF/WIDTH=8_n en| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[6].ff_entry_inst| state))) ; $paramod/FF/WIDTH=8.en
  (|$paramod/FF/WIDTH=8_h| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[4].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_h| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[3].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_h| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[0].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_h| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[7].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_h| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[1].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=3_h| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_rdPtr| state))
  (|$paramod/FF/WIDTH=3_h| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_wrPtr| state))
  (|$paramod/FF/WIDTH=8_h| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[2].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_h| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[5].ff_entry_inst| state))
  (|$paramod/FF/WIDTH=8_h| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[6].ff_entry_inst| state))
))

;; MC: FIFO transition relation -- it's the conjunction of all if its submodules' transition relations 
(define-fun |$paramod/FIFO/WIDTH=8/DEPTH=8_t| ((state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|) (next_state |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)) Bool (and
  (|$paramod/FF/WIDTH=8_t| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[4].ff_entry_inst| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[4].ff_entry_inst| next_state))
  (|$paramod/FF/WIDTH=8_t| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[3].ff_entry_inst| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[3].ff_entry_inst| next_state))
  (|$paramod/FF/WIDTH=8_t| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[0].ff_entry_inst| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[0].ff_entry_inst| next_state))
  (|$paramod/FF/WIDTH=8_t| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[7].ff_entry_inst| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[7].ff_entry_inst| next_state))
  (|$paramod/FF/WIDTH=8_t| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[1].ff_entry_inst| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[1].ff_entry_inst| next_state))
  (|$paramod/FF/WIDTH=3_t| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_rdPtr| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_rdPtr| next_state))
  (|$paramod/FF/WIDTH=3_t| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_wrPtr| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_h ff_wrPtr| next_state))
  (|$paramod/FF/WIDTH=8_t| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[2].ff_entry_inst| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[2].ff_entry_inst| next_state))
  (|$paramod/FF/WIDTH=8_t| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[5].ff_entry_inst| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[5].ff_entry_inst| next_state))
  (|$paramod/FF/WIDTH=8_t| (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[6].ff_entry_inst| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_h entry_gen[6].ff_entry_inst| next_state))
))
; end of module $paramod/FIFO/WIDTH=8/DEPTH=8

; yosys-smt2-module $paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8
(declare-sort |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s| 0)
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_is| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) Bool)
; yosys-smt2-input blk 1
; yosys-smt2-wire blk 1
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#0| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) Bool) ; \blk
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n blk| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#0| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#1| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) Bool) ; \clk
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n clk| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#1| state))

;; MC: creating deficit counters
; yosys-smt2-wire def_cnt[0] 8
; yosys-smt2-cell $paramod/FF/WIDTH=8 deficit_counters[0].ff_defcnt
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#2| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 8)) ; \def_cnt[0]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[0].ff_defcnt| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) |$paramod/FF/WIDTH=8_s|)
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n def_cnt[0]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#2| state))
; yosys-smt2-wire def_cnt[1] 8
; yosys-smt2-cell $paramod/FF/WIDTH=8 deficit_counters[1].ff_defcnt
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#3| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 8)) ; \def_cnt[1]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[1].ff_defcnt| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) |$paramod/FF/WIDTH=8_s|)
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n def_cnt[1]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#3| state))
; yosys-smt2-wire def_cnt[2] 8
; yosys-smt2-cell $paramod/FF/WIDTH=8 deficit_counters[2].ff_defcnt
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#4| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 8)) ; \def_cnt[2]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[2].ff_defcnt| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) |$paramod/FF/WIDTH=8_s|)
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n def_cnt[2]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#4| state))
; yosys-smt2-wire def_cnt[3] 8
; yosys-smt2-cell $paramod/FF/WIDTH=8 deficit_counters[3].ff_defcnt
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#5| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 8)) ; \def_cnt[3]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[3].ff_defcnt| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) |$paramod/FF/WIDTH=8_s|)
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n def_cnt[3]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#5| state))
; yosys-smt2-wire deficit_counters[0].dc_plus_quant 8
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#6| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 4)) ; \input_quantums [3:0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#7| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (bvadd (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#2| state) (concat #b0000 (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#6| state)))) ; $add$DWRR.sv:84$207_Y

;; MC: Round Robin Counter
; yosys-smt2-cell $paramod/FF/WIDTH=2 ff_rrcnt
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#8| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 2)) ; \rr_cnt
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h ff_rrcnt| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) |$paramod/FF/WIDTH=2_s|)
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#9| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (not (or  (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#8| state)) #b1) (= ((_ extract 1 1) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#8| state)) #b1)))) ; \selected [0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#10| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvnot (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#9| state) #b1 #b0))) ; $not$DWRR.sv:84$205_Y

;; MC: partial next round robin counter value, increment by one -- this value is muxed 
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#11| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 2) (bvadd (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#8| state) #b01)) ; $add$DWRR.sv:41$185_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#12| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#8| state) #b11)) ; \selected [3]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#13| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 1)) ; \reqs [3]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#14| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvnot (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#13| state))) ; $not$DWRR.sv:71$202_Y

;; MC: done_vec calculation, compares def_cnt to Packet Size
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#15| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (bvult (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#5| state) #b00001000)) ; $lt$DWRR.sv:91$237_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#16| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#14| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#15| state) #b1 #b0))) ; $or$DWRR.sv:91$238_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#17| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#12| state) #b1 #b0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#16| state))) ; \done_vec [3]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#18| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#8| state) #b10)) ; \selected [2]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#19| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 1)) ; \reqs [2]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#20| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvnot (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#19| state))) ; $not$DWRR.sv:71$200_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#21| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (bvult (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#4| state) #b00001000)) ; $lt$DWRR.sv:91$228_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#22| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#20| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#21| state) #b1 #b0))) ; $or$DWRR.sv:91$229_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#23| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#18| state) #b1 #b0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#22| state))) ; \done_vec [2]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#24| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#8| state) #b01)) ; \selected [1]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#25| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 1)) ; \reqs [1]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#26| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvnot (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#25| state))) ; $not$DWRR.sv:71$198_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#27| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (bvult (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#3| state) #b00001000)) ; $lt$DWRR.sv:91$219_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#28| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#26| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#27| state) #b1 #b0))) ; $or$DWRR.sv:91$220_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#29| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#24| state) #b1 #b0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#28| state))) ; \done_vec [1]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#30| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 1)) ; \reqs [0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#31| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvnot (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#30| state))) ; $not$DWRR.sv:71$196_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#32| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (bvult (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#2| state) #b00001000)) ; $lt$DWRR.sv:91$210_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#33| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#31| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#32| state) #b1 #b0))) ; $or$DWRR.sv:91$211_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#34| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#9| state) #b1 #b0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#33| state))) ; \done_vec [0]

;; MC: Reduction OR on done_vec to calculate done
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#35| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (or  (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#17| state)) #b1) (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#23| state)) #b1) (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#29| state)) #b1) (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#34| state)) #b1))) ; \done

;; MC: Finishes next round robin calculation -- if done increments by one
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#36| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 2) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#35| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#11| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#8| state))) ; \next_rr_cnt

;; MC: calculating various other signals, in the same manner as next_rr_cnt
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#37| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (not (or  (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#36| state)) #b1) (= ((_ extract 1 1) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#36| state)) #b1)))) ; \next_selected [0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#38| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#10| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#37| state) #b1 #b0))) ; $and$DWRR.sv:84$206_Y

;; MC: dc_plus_quant calculation for one deficit_counter. This is a partial calculation of the next deficit counter value. This signal is actually in the Verilog, it was not just split by Yosys.
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#39| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#38| state)) #b1) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#7| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#2| state))) ; \deficit_counters[0].dc_plus_quant
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n deficit_counters[0].dc_plus_quant| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#39| state))
; yosys-smt2-wire deficit_counters[1].dc_plus_quant 8
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#40| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 4)) ; \input_quantums [11:8]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#41| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (bvadd (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#3| state) (concat #b0000 (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#40| state)))) ; $add$DWRR.sv:84$216_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#42| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvnot (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#24| state) #b1 #b0))) ; $not$DWRR.sv:84$214_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#43| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#36| state) #b01)) ; \next_selected [1]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#44| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#42| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#43| state) #b1 #b0))) ; $and$DWRR.sv:84$215_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#45| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#44| state)) #b1) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#41| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#3| state))) ; \deficit_counters[1].dc_plus_quant
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n deficit_counters[1].dc_plus_quant| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#45| state))
; yosys-smt2-wire deficit_counters[2].dc_plus_quant 8
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#46| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 4)) ; \input_quantums [19:16]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#47| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (bvadd (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#4| state) (concat #b0000 (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#46| state)))) ; $add$DWRR.sv:84$225_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#48| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvnot (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#18| state) #b1 #b0))) ; $not$DWRR.sv:84$223_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#49| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#36| state) #b10)) ; \next_selected [2]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#50| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#48| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#49| state) #b1 #b0))) ; $and$DWRR.sv:84$224_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#51| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#50| state)) #b1) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#47| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#4| state))) ; \deficit_counters[2].dc_plus_quant
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n deficit_counters[2].dc_plus_quant| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#51| state))
; yosys-smt2-wire deficit_counters[3].dc_plus_quant 8
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#52| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 4)) ; \input_quantums [27:24]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#53| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (bvadd (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#5| state) (concat #b0000 (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#52| state)))) ; $add$DWRR.sv:84$234_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#54| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvnot (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#12| state) #b1 #b0))) ; $not$DWRR.sv:84$232_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#55| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#36| state) #b11)) ; \next_selected [3]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#56| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#54| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#55| state) #b1 #b0))) ; $and$DWRR.sv:84$233_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#57| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#56| state)) #b1) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#53| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#5| state))) ; \deficit_counters[3].dc_plus_quant
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n deficit_counters[3].dc_plus_quant| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#57| state))
; yosys-smt2-wire done 1
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n done| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#35| state))
; yosys-smt2-wire done_vec 4
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n done_vec| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 4) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#17| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#23| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#29| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#34| state)))))
; yosys-smt2-output gnt 4
; yosys-smt2-wire gnt 4
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#58| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (bvuge (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#2| state) #b00001000)) ; $ge$DWRR.sv:100$240_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#59| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#30| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#58| state) #b1 #b0))) ; $and$DWRR.sv:100$241_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#60| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#59| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#9| state) #b1 #b0))) ; \gnt [0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#61| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (bvuge (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#3| state) #b00001000)) ; $ge$DWRR.sv:100$243_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#62| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#25| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#61| state) #b1 #b0))) ; $and$DWRR.sv:100$244_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#63| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#62| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#24| state) #b1 #b0))) ; \gnt [1]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#64| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (bvuge (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#4| state) #b00001000)) ; $ge$DWRR.sv:100$246_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#65| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#19| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#64| state) #b1 #b0))) ; $and$DWRR.sv:100$247_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#66| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#65| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#18| state) #b1 #b0))) ; \gnt [2]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#67| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (bvuge (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#5| state) #b00001000)) ; $ge$DWRR.sv:100$249_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#68| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#13| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#67| state) #b1 #b0))) ; $and$DWRR.sv:100$250_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#69| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#68| state) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#12| state) #b1 #b0))) ; \gnt [3]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n gnt| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 4) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#69| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#66| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#63| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#60| state)))))
; yosys-smt2-input input_quantums 32
; yosys-smt2-wire input_quantums 32
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#70| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 4)) ; \input_quantums [7:4]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#71| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 4)) ; \input_quantums [15:12]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#72| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 4)) ; \input_quantums [23:20]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#73| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 4)) ; \input_quantums [31:28]

;; MC: The flat input quantums
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n input_quantums| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 32) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#73| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#52| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#72| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#46| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#71| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#40| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#70| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#6| state)))))))))

;; MC: calculating the next deficit counter values
; yosys-smt2-wire next_def_cnt[0] 8

;; MC: subtracting the packet size, this is a partial evaluation of next_def_cnt, this split was created by Yosys which breaks every operation into a new variable
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#74| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (bvsub (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#39| state) #b00001000)) ; $auto$wreduce.cc:347:run$317 [7:0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#75| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#60| state)) #b1) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#74| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#39| state))) ; $ternary$DWRR.sv:89$256_Y [7:0]
(declare-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#76| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (_ BitVec 1)) ; \rst
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#77| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#9| state) #b1 #b0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#31| state))) ; \selected_and_empty [0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#78| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#76| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#77| state))) ; $or$DWRR.sv:87$253_Y

;; MC: Finished computation for one of the next deficit counter values. If rst or selected_and_empty, go toe zero. If granted, subtract packet size (which is another variable), else dc_plus_quant (which is yet another variable)
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#79| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#78| state)) #b1) #b00000000 (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#75| state))) ; \next_def_cnt[0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n next_def_cnt[0]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#79| state))
; yosys-smt2-wire next_def_cnt[1] 8
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#80| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (bvsub (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#45| state) #b00001000)) ; $auto$wreduce.cc:347:run$318 [7:0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#81| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#63| state)) #b1) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#80| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#45| state))) ; $ternary$DWRR.sv:89$261_Y [7:0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#82| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#24| state) #b1 #b0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#26| state))) ; \selected_and_empty [1]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#83| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#76| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#82| state))) ; $or$DWRR.sv:87$258_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#84| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#83| state)) #b1) #b00000000 (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#81| state))) ; \next_def_cnt[1]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n next_def_cnt[1]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#84| state))
; yosys-smt2-wire next_def_cnt[2] 8
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#85| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (bvsub (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#51| state) #b00001000)) ; $auto$wreduce.cc:347:run$319 [7:0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#86| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#66| state)) #b1) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#85| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#51| state))) ; $auto$wreduce.cc:347:run$321 [7:0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#87| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#18| state) #b1 #b0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#20| state))) ; \selected_and_empty [2]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#88| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#76| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#87| state))) ; $or$DWRR.sv:87$263_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#89| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#88| state)) #b1) #b00000000 (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#86| state))) ; \next_def_cnt[2]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n next_def_cnt[2]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#89| state))
; yosys-smt2-wire next_def_cnt[3] 8
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#90| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (bvsub (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#57| state) #b00001000)) ; $auto$wreduce.cc:347:run$320 [7:0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#91| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#69| state)) #b1) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#90| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#57| state))) ; $auto$wreduce.cc:347:run$322 [7:0]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#92| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvand (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#12| state) #b1 #b0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#14| state))) ; \selected_and_empty [3]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#93| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#76| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#92| state))) ; $or$DWRR.sv:87$268_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#94| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (ite (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#93| state)) #b1) #b00000000 (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#91| state))) ; \next_def_cnt[3]
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n next_def_cnt[3]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 8) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#94| state))
; yosys-smt2-wire next_rr_cnt 2
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n next_rr_cnt| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 2) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#36| state))
; yosys-smt2-wire next_selected 4
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n next_selected| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 4) (concat (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#55| state) #b1 #b0) (concat (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#49| state) #b1 #b0) (concat (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#43| state) #b1 #b0) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#37| state) #b1 #b0)))))
; yosys-smt2-wire quantums[0] 4
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n quantums[0]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 4) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#6| state))
; yosys-smt2-wire quantums[1] 4
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n quantums[1]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 4) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#40| state))
; yosys-smt2-wire quantums[2] 4
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n quantums[2]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 4) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#46| state))
; yosys-smt2-wire quantums[3] 4
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n quantums[3]| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 4) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#52| state))
; yosys-smt2-input reqs 4
; yosys-smt2-wire reqs 4
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n reqs| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 4) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#13| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#19| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#25| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#30| state)))))
; yosys-smt2-wire rr_cnt 2
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n rr_cnt| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 2) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#8| state))
; yosys-smt2-input rst 1
; yosys-smt2-wire rst 1
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n rst| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#76| state)) #b1))
; yosys-smt2-wire selected 4
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n selected| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 4) (concat (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#12| state) #b1 #b0) (concat (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#18| state) #b1 #b0) (concat (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#24| state) #b1 #b0) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#9| state) #b1 #b0)))))
; yosys-smt2-wire selected_and_empty 4
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n selected_and_empty| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 4) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#92| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#87| state) (concat (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#82| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#77| state)))))
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#95| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#37| state) #b1 #b0) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#9| state) #b1 #b0))) ; $or$DWRR.sv:79$204_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#96| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#43| state) #b1 #b0) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#24| state) #b1 #b0))) ; $or$DWRR.sv:79$213_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#97| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#49| state) #b1 #b0) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#18| state) #b1 #b0))) ; $or$DWRR.sv:79$222_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#98| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) (_ BitVec 1) (bvor (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#55| state) #b1 #b0) (ite (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#12| state) #b1 #b0))) ; $or$DWRR.sv:79$231_Y
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_a| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (and
  (|$paramod/FF/WIDTH=2_a| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h ff_rrcnt| state))
  (|$paramod/FF/WIDTH=8_a| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[0].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_a| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[1].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_a| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[2].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_a| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[3].ff_defcnt| state))
))
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_u| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (and
  (|$paramod/FF/WIDTH=2_u| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h ff_rrcnt| state))
  (|$paramod/FF/WIDTH=8_u| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[0].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_u| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[1].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_u| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[2].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_u| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[3].ff_defcnt| state))
))
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_i| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (and
  (|$paramod/FF/WIDTH=2_i| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h ff_rrcnt| state))
  (|$paramod/FF/WIDTH=8_i| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[0].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_i| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[1].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_i| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[2].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_i| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[3].ff_defcnt| state))
))

;; MC: Hierarchy function, wires up all submodules
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (and
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#36| state) (|$paramod/FF/WIDTH=2_n D| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h ff_rrcnt| state))) ; $paramod/FF/WIDTH=2.D
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#8| state) (|$paramod/FF/WIDTH=2_n Q| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h ff_rrcnt| state))) ; $paramod/FF/WIDTH=2.Q
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#1| state) (|$paramod/FF/WIDTH=2_n clk| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h ff_rrcnt| state))) ; $paramod/FF/WIDTH=2.clk
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#35| state) (|$paramod/FF/WIDTH=2_n en| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h ff_rrcnt| state))) ; $paramod/FF/WIDTH=2.en
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#79| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[0].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#2| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[0].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#1| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[0].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.clk
  (= (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#95| state)) #b1) (|$paramod/FF/WIDTH=8_n en| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[0].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.en
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#84| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[1].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#3| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[1].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#1| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[1].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.clk
  (= (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#96| state)) #b1) (|$paramod/FF/WIDTH=8_n en| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[1].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.en
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#89| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[2].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#4| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[2].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#1| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[2].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.clk
  (= (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#97| state)) #b1) (|$paramod/FF/WIDTH=8_n en| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[2].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.en
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#94| state) (|$paramod/FF/WIDTH=8_n D| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[3].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.D
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#5| state) (|$paramod/FF/WIDTH=8_n Q| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[3].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#1| state) (|$paramod/FF/WIDTH=8_n clk| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[3].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.clk
  (= (= ((_ extract 0 0) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8#98| state)) #b1) (|$paramod/FF/WIDTH=8_n en| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[3].ff_defcnt| state))) ; $paramod/FF/WIDTH=8.en
  (|$paramod/FF/WIDTH=2_h| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h ff_rrcnt| state))
  (|$paramod/FF/WIDTH=8_h| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[0].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_h| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[1].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_h| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[2].ff_defcnt| state))
  (|$paramod/FF/WIDTH=8_h| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[3].ff_defcnt| state))
))

;; MC: DWRR's transition relation. This is a conjunction of the submodule's transition relations. The wiring is handled by the *_h function
(define-fun |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_t| ((state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|) (next_state |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)) Bool (and
  (|$paramod/FF/WIDTH=2_t| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h ff_rrcnt| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h ff_rrcnt| next_state))
  (|$paramod/FF/WIDTH=8_t| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[0].ff_defcnt| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[0].ff_defcnt| next_state))
  (|$paramod/FF/WIDTH=8_t| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[1].ff_defcnt| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[1].ff_defcnt| next_state))
  (|$paramod/FF/WIDTH=8_t| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[2].ff_defcnt| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[2].ff_defcnt| next_state))
  (|$paramod/FF/WIDTH=8_t| (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[3].ff_defcnt| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h deficit_counters[3].ff_defcnt| next_state))
))
; end of module $paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8


;; MC: MagicPacketTracker module declaration
; yosys-smt2-module $paramod/MagicPacketTracker/DEPTH=8
(declare-sort |$paramod/MagicPacketTracker/DEPTH=8_s| 0)
(declare-fun |$paramod/MagicPacketTracker/DEPTH=8_is| (|$paramod/MagicPacketTracker/DEPTH=8_s|) Bool)
; yosys-smt2-input captured 1
; yosys-smt2-wire captured 1
(declare-fun |$paramod/MagicPacketTracker/DEPTH=8#0| (|$paramod/MagicPacketTracker/DEPTH=8_s|) Bool) ; \captured
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_n captured| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool (|$paramod/MagicPacketTracker/DEPTH=8#0| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |$paramod/MagicPacketTracker/DEPTH=8#1| (|$paramod/MagicPacketTracker/DEPTH=8_s|) Bool) ; \clk
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_n clk| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool (|$paramod/MagicPacketTracker/DEPTH=8#1| state))
; yosys-smt2-output cnt 3
; yosys-smt2-wire cnt 3
; yosys-smt2-cell $paramod/FF/WIDTH=3 ff_cnt
(declare-fun |$paramod/MagicPacketTracker/DEPTH=8#2| (|$paramod/MagicPacketTracker/DEPTH=8_s|) (_ BitVec 3)) ; \cnt
(declare-fun |$paramod/MagicPacketTracker/DEPTH=8_h ff_cnt| (|$paramod/MagicPacketTracker/DEPTH=8_s|) |$paramod/FF/WIDTH=3_s|)
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_n cnt| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 3) (|$paramod/MagicPacketTracker/DEPTH=8#2| state))
; yosys-smt2-output next_cnt 3
; yosys-smt2-wire next_cnt 3

;; MC: partial calculation of next_cnt, incremented cnt by one -- will be muxed
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#3| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 3) (bvadd (|$paramod/MagicPacketTracker/DEPTH=8#2| state) #b001)) ; $add$data_integrity_scoreboard.sv:37$280_Y
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#4| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool (bvult (concat #b0 (|$paramod/MagicPacketTracker/DEPTH=8#2| state)) #b1000)) ; $lt$data_integrity_scoreboard.sv:37$276_Y
(declare-fun |$paramod/MagicPacketTracker/DEPTH=8#5| (|$paramod/MagicPacketTracker/DEPTH=8_s|) (_ BitVec 1)) ; \push

;; MC: Partial evaluation of ssa_cnt, which is a signal in the verilog which helps calculate next_cnt
;; MC: subsequent functions are different parts of calculation
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#6| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 1) (bvand (ite (|$paramod/MagicPacketTracker/DEPTH=8#4| state) #b1 #b0) (|$paramod/MagicPacketTracker/DEPTH=8#5| state))) ; $and$data_integrity_scoreboard.sv:37$277_Y
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#7| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 1) (bvnot (ite (|$paramod/MagicPacketTracker/DEPTH=8#0| state) #b1 #b0))) ; $not$data_integrity_scoreboard.sv:37$278_Y
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#8| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 1) (bvand (|$paramod/MagicPacketTracker/DEPTH=8#6| state) (|$paramod/MagicPacketTracker/DEPTH=8#7| state))) ; $and$data_integrity_scoreboard.sv:37$279_Y

;; MC: Finish calculating ssa_cnt
;; MC: Verilog:   assign ssa_cnt = ((cnt < DEPTH) & push & ~captured) ? cnt + 1 : cnt;
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#9| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 3) (ite (= ((_ extract 0 0) (|$paramod/MagicPacketTracker/DEPTH=8#8| state)) #b1) (|$paramod/MagicPacketTracker/DEPTH=8#3| state) (|$paramod/MagicPacketTracker/DEPTH=8#2| state))) ; \ssa_cnt
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#10| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 3) (bvsub (|$paramod/MagicPacketTracker/DEPTH=8#9| state) #b001)) ; $auto$wreduce.cc:347:run$327 [2:0]
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#11| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool (bvugt (|$paramod/MagicPacketTracker/DEPTH=8#9| state) #b000)) ; $gt$data_integrity_scoreboard.sv:46$283_Y
(declare-fun |$paramod/MagicPacketTracker/DEPTH=8#12| (|$paramod/MagicPacketTracker/DEPTH=8_s|) (_ BitVec 1)) ; \pop
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#13| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 1) (bvand (ite (|$paramod/MagicPacketTracker/DEPTH=8#11| state) #b1 #b0) (|$paramod/MagicPacketTracker/DEPTH=8#12| state))) ; $and$data_integrity_scoreboard.sv:46$284_Y
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#14| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 3) (ite (= ((_ extract 0 0) (|$paramod/MagicPacketTracker/DEPTH=8#13| state)) #b1) (|$paramod/MagicPacketTracker/DEPTH=8#10| state) (|$paramod/MagicPacketTracker/DEPTH=8#9| state))) ; $auto$wreduce.cc:347:run$328 [2:0]
(declare-fun |$paramod/MagicPacketTracker/DEPTH=8#15| (|$paramod/MagicPacketTracker/DEPTH=8_s|) (_ BitVec 1)) ; \rst

;; MC: compute next_cnt using other variables, each of which corresponds to a piece of the calculation
;; MC: Verilog:   assign next_cnt = rst ? 0 :
;;                          ((ssa_cnt > 0) & pop) ? ssa_cnt - 1 :
;;                                                  ssa_cnt;
;;
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#16| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 3) (ite (= ((_ extract 0 0) (|$paramod/MagicPacketTracker/DEPTH=8#15| state)) #b1) #b000 (|$paramod/MagicPacketTracker/DEPTH=8#14| state))) ; \next_cnt
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_n next_cnt| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 3) (|$paramod/MagicPacketTracker/DEPTH=8#16| state))
; yosys-smt2-input pop 1
; yosys-smt2-wire pop 1
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_n pop| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool (= ((_ extract 0 0) (|$paramod/MagicPacketTracker/DEPTH=8#12| state)) #b1))
; yosys-smt2-input push 1
; yosys-smt2-wire push 1
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_n push| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool (= ((_ extract 0 0) (|$paramod/MagicPacketTracker/DEPTH=8#5| state)) #b1))
; yosys-smt2-input rst 1
; yosys-smt2-wire rst 1
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_n rst| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool (= ((_ extract 0 0) (|$paramod/MagicPacketTracker/DEPTH=8#15| state)) #b1))
; yosys-smt2-wire ssa_cnt 3
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_n ssa_cnt| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 3) (|$paramod/MagicPacketTracker/DEPTH=8#9| state))
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#17| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 1) (bvor (|$paramod/MagicPacketTracker/DEPTH=8#5| state) (|$paramod/MagicPacketTracker/DEPTH=8#12| state))) ; $or$data_integrity_scoreboard.sv:30$273_Y
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#18| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 1) (bvor (|$paramod/MagicPacketTracker/DEPTH=8#17| state) (|$paramod/MagicPacketTracker/DEPTH=8#15| state))) ; $or$data_integrity_scoreboard.sv:30$274_Y
(define-fun |$paramod/MagicPacketTracker/DEPTH=8#19| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) (_ BitVec 1) (bvor (|$paramod/MagicPacketTracker/DEPTH=8#18| state) (ite (|$paramod/MagicPacketTracker/DEPTH=8#0| state) #b1 #b0))) ; $or$data_integrity_scoreboard.sv:30$275_Y
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_a| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool 
  (|$paramod/FF/WIDTH=3_a| (|$paramod/MagicPacketTracker/DEPTH=8_h ff_cnt| state))
)
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_u| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool 
  (|$paramod/FF/WIDTH=3_u| (|$paramod/MagicPacketTracker/DEPTH=8_h ff_cnt| state))
)
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_i| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool 
  (|$paramod/FF/WIDTH=3_i| (|$paramod/MagicPacketTracker/DEPTH=8_h ff_cnt| state))
)
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_h| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool (and
  (= (|$paramod/MagicPacketTracker/DEPTH=8#16| state) (|$paramod/FF/WIDTH=3_n D| (|$paramod/MagicPacketTracker/DEPTH=8_h ff_cnt| state))) ; $paramod/FF/WIDTH=3.D
  (= (|$paramod/MagicPacketTracker/DEPTH=8#2| state) (|$paramod/FF/WIDTH=3_n Q| (|$paramod/MagicPacketTracker/DEPTH=8_h ff_cnt| state))) ; $paramod/FF/WIDTH=3.Q
  (= (|$paramod/MagicPacketTracker/DEPTH=8#1| state) (|$paramod/FF/WIDTH=3_n clk| (|$paramod/MagicPacketTracker/DEPTH=8_h ff_cnt| state))) ; $paramod/FF/WIDTH=3.clk
  (= (= ((_ extract 0 0) (|$paramod/MagicPacketTracker/DEPTH=8#19| state)) #b1) (|$paramod/FF/WIDTH=3_n en| (|$paramod/MagicPacketTracker/DEPTH=8_h ff_cnt| state))) ; $paramod/FF/WIDTH=3.en
  (|$paramod/FF/WIDTH=3_h| (|$paramod/MagicPacketTracker/DEPTH=8_h ff_cnt| state))
))

;; MC: Transition relation for MagicPacketTracker
;; MC: This is the conjunction of all submodules' transition relations
(define-fun |$paramod/MagicPacketTracker/DEPTH=8_t| ((state |$paramod/MagicPacketTracker/DEPTH=8_s|) (next_state |$paramod/MagicPacketTracker/DEPTH=8_s|)) Bool 
  (|$paramod/FF/WIDTH=3_t| (|$paramod/MagicPacketTracker/DEPTH=8_h ff_cnt| state) (|$paramod/MagicPacketTracker/DEPTH=8_h ff_cnt| next_state))
)
; end of module $paramod/MagicPacketTracker/DEPTH=8


;; MC: Scoreboard declaration -- this is the TOP module
; yosys-smt2-module Scoreboard
;; MC: Because this is the top module, functions of this sort represent the entire system state
(declare-sort |Scoreboard_s| 0)
(declare-fun |Scoreboard_is| (|Scoreboard_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |Scoreboard#0| (|Scoreboard_s|) Bool) ; \clk
(define-fun |Scoreboard_n clk| ((state |Scoreboard_s|)) Bool (|Scoreboard#0| state))
; yosys-smt2-wire cnt 3

;; MC: instantiate a MagicPacketTracker
; yosys-smt2-cell $paramod/MagicPacketTracker/DEPTH=8 mpt
(declare-fun |Scoreboard#1| (|Scoreboard_s|) (_ BitVec 3)) ; \cnt
(declare-fun |Scoreboard#2| (|Scoreboard_s|) (_ BitVec 3)) ; \next_cnt
(declare-fun |Scoreboard_h mpt| (|Scoreboard_s|) |$paramod/MagicPacketTracker/DEPTH=8_s|)
(define-fun |Scoreboard_n cnt| ((state |Scoreboard_s|)) (_ BitVec 3) (|Scoreboard#1| state))
; yosys-smt2-wire data_in[0] 8
(declare-fun |Scoreboard#3| (|Scoreboard_s|) (_ BitVec 8)) ; \flat_data_in [7:0]
(define-fun |Scoreboard_n data_in[0]| ((state |Scoreboard_s|)) (_ BitVec 8) (|Scoreboard#3| state))
; yosys-smt2-wire data_in[1] 8
(declare-fun |Scoreboard#4| (|Scoreboard_s|) (_ BitVec 8)) ; \flat_data_in [15:8]
(define-fun |Scoreboard_n data_in[1]| ((state |Scoreboard_s|)) (_ BitVec 8) (|Scoreboard#4| state))
; yosys-smt2-wire data_in[2] 8
(declare-fun |Scoreboard#5| (|Scoreboard_s|) (_ BitVec 8)) ; \flat_data_in [23:16]
(define-fun |Scoreboard_n data_in[2]| ((state |Scoreboard_s|)) (_ BitVec 8) (|Scoreboard#5| state))
; yosys-smt2-wire data_in[3] 8
(declare-fun |Scoreboard#6| (|Scoreboard_s|) (_ BitVec 8)) ; \flat_data_in [31:24]
(define-fun |Scoreboard_n data_in[3]| ((state |Scoreboard_s|)) (_ BitVec 8) (|Scoreboard#6| state))
; yosys-smt2-wire data_out[0] 8

;; MC: generating multiple fifos
; yosys-smt2-cell $paramod/FIFO/WIDTH=8/DEPTH=8 gen_fifos[0].f
(declare-fun |Scoreboard#7| (|Scoreboard_s|) (_ BitVec 8)) ; \data_out[0]
(declare-fun |Scoreboard#8| (|Scoreboard_s|) Bool) ; \prop_empty
(declare-fun |Scoreboard#9| (|Scoreboard_s|) Bool) ; \prop_full

;; MC: This is a FIFO instantiation -- a function from top sort to the fifo sort
(declare-fun |Scoreboard_h gen_fifos[0].f| (|Scoreboard_s|) |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)
(define-fun |Scoreboard_n data_out[0]| ((state |Scoreboard_s|)) (_ BitVec 8) (|Scoreboard#7| state))
; yosys-smt2-wire data_out[1] 8
; yosys-smt2-cell $paramod/FIFO/WIDTH=8/DEPTH=8 gen_fifos[1].f
(declare-fun |Scoreboard#10| (|Scoreboard_s|) (_ BitVec 8)) ; \data_out[1]
(declare-fun |Scoreboard#11| (|Scoreboard_s|) Bool) ; \empty [1]
(declare-fun |Scoreboard#12| (|Scoreboard_s|) Bool) ; \full [1]
(declare-fun |Scoreboard_h gen_fifos[1].f| (|Scoreboard_s|) |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)
(define-fun |Scoreboard_n data_out[1]| ((state |Scoreboard_s|)) (_ BitVec 8) (|Scoreboard#10| state))
; yosys-smt2-wire data_out[2] 8
; yosys-smt2-cell $paramod/FIFO/WIDTH=8/DEPTH=8 gen_fifos[2].f
(declare-fun |Scoreboard#13| (|Scoreboard_s|) (_ BitVec 8)) ; \data_out[2]
(declare-fun |Scoreboard#14| (|Scoreboard_s|) Bool) ; \empty [2]
(declare-fun |Scoreboard#15| (|Scoreboard_s|) Bool) ; \full [2]
(declare-fun |Scoreboard_h gen_fifos[2].f| (|Scoreboard_s|) |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)
(define-fun |Scoreboard_n data_out[2]| ((state |Scoreboard_s|)) (_ BitVec 8) (|Scoreboard#13| state))
; yosys-smt2-wire data_out[3] 8
; yosys-smt2-cell $paramod/FIFO/WIDTH=8/DEPTH=8 gen_fifos[3].f
(declare-fun |Scoreboard#16| (|Scoreboard_s|) (_ BitVec 8)) ; \data_out[3]
(declare-fun |Scoreboard#17| (|Scoreboard_s|) Bool) ; \empty [3]
(declare-fun |Scoreboard#18| (|Scoreboard_s|) Bool) ; \full [3]
(declare-fun |Scoreboard_h gen_fifos[3].f| (|Scoreboard_s|) |$paramod/FIFO/WIDTH=8/DEPTH=8_s|)
(define-fun |Scoreboard_n data_out[3]| ((state |Scoreboard_s|)) (_ BitVec 8) (|Scoreboard#16| state))
; yosys-smt2-output data_out_vld 1
; yosys-smt2-wire data_out_vld 1
; yosys-smt2-cell $paramod/FF/WIDTH=1 ff_en
(declare-fun |Scoreboard#19| (|Scoreboard_s|) Bool) ; \en
(declare-fun |Scoreboard_h ff_en| (|Scoreboard_s|) |$paramod/FF/WIDTH=1_s|)
(define-fun |Scoreboard#20| ((state |Scoreboard_s|)) Bool (bvugt (|Scoreboard#1| state) #b000)) ; $gt$data_integrity_scoreboard.sv:172$140_Y
(define-fun |Scoreboard#21| ((state |Scoreboard_s|)) (_ BitVec 1) (bvand (ite (|Scoreboard#19| state) #b1 #b0) (ite (|Scoreboard#20| state) #b1 #b0))) ; $and$data_integrity_scoreboard.sv:172$141_Y
(define-fun |Scoreboard#22| ((state |Scoreboard_s|)) Bool (not (or  (= ((_ extract 0 0) (|Scoreboard#2| state)) #b1) (= ((_ extract 1 1) (|Scoreboard#2| state)) #b1) (= ((_ extract 2 2) (|Scoreboard#2| state)) #b1)))) ; $eq$data_integrity_scoreboard.sv:172$142_Y
(define-fun |Scoreboard#23| ((state |Scoreboard_s|)) (_ BitVec 1) (bvand (|Scoreboard#21| state) (ite (|Scoreboard#22| state) #b1 #b0))) ; \data_out_vld
(define-fun |Scoreboard_n data_out_vld| ((state |Scoreboard_s|)) Bool (= ((_ extract 0 0) (|Scoreboard#23| state)) #b1))
; yosys-smt2-wire empty 4
(define-fun |Scoreboard_n empty| ((state |Scoreboard_s|)) (_ BitVec 4) (concat (ite (|Scoreboard#17| state) #b1 #b0) (concat (ite (|Scoreboard#14| state) #b1 #b0) (concat (ite (|Scoreboard#11| state) #b1 #b0) (ite (|Scoreboard#8| state) #b1 #b0)))))
; yosys-smt2-wire en 1
(define-fun |Scoreboard_n en| ((state |Scoreboard_s|)) Bool (|Scoreboard#19| state))
; yosys-smt2-input flat_data_in 32
; yosys-smt2-wire flat_data_in 32
(define-fun |Scoreboard_n flat_data_in| ((state |Scoreboard_s|)) (_ BitVec 32) (concat (|Scoreboard#6| state) (concat (|Scoreboard#5| state) (concat (|Scoreboard#4| state) (|Scoreboard#3| state)))))
; yosys-smt2-wire full 4
(define-fun |Scoreboard_n full| ((state |Scoreboard_s|)) (_ BitVec 4) (concat (ite (|Scoreboard#18| state) #b1 #b0) (concat (ite (|Scoreboard#15| state) #b1 #b0) (concat (ite (|Scoreboard#12| state) #b1 #b0) (ite (|Scoreboard#9| state) #b1 #b0)))))
; yosys-smt2-wire gnt 4

;; MC: Instantiate the arbiter
; yosys-smt2-cell $paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8 arb
(declare-fun |Scoreboard#24| (|Scoreboard_s|) (_ BitVec 4)) ; \gnt
(declare-fun |Scoreboard_h arb| (|Scoreboard_s|) |$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_s|)
(define-fun |Scoreboard_n gnt| ((state |Scoreboard_s|)) (_ BitVec 4) (|Scoreboard#24| state))
; yosys-smt2-input input_quantums 32
; yosys-smt2-wire input_quantums 32
(declare-fun |Scoreboard#25| (|Scoreboard_s|) (_ BitVec 32)) ; \input_quantums
(define-fun |Scoreboard_n input_quantums| ((state |Scoreboard_s|)) (_ BitVec 32) (|Scoreboard#25| state))
; yosys-smt2-wire magic_packet 8
; yosys-smt2-cell $paramod/FF/WIDTH=8 ff_magic_packet
(declare-fun |Scoreboard#26| (|Scoreboard_s|) (_ BitVec 8)) ; \magic_packet
(declare-fun |Scoreboard_h ff_magic_packet| (|Scoreboard_s|) |$paramod/FF/WIDTH=8_s|)
(define-fun |Scoreboard_n magic_packet| ((state |Scoreboard_s|)) (_ BitVec 8) (|Scoreboard#26| state))
; yosys-smt2-wire next_cnt 3
(define-fun |Scoreboard_n next_cnt| ((state |Scoreboard_s|)) (_ BitVec 3) (|Scoreboard#2| state))
; yosys-smt2-wire next_en 1
(declare-fun |Scoreboard#27| (|Scoreboard_s|) (_ BitVec 1)) ; \start
(declare-fun |Scoreboard#28| (|Scoreboard_s|) (_ BitVec 1)) ; \push [0]
(define-fun |Scoreboard#29| ((state |Scoreboard_s|)) (_ BitVec 1) (bvand (|Scoreboard#27| state) (|Scoreboard#28| state))) ; $and$data_integrity_scoreboard.sv:104$134_Y
(define-fun |Scoreboard#30| ((state |Scoreboard_s|)) (_ BitVec 1) (bvor (ite (|Scoreboard#19| state) #b1 #b0) (|Scoreboard#29| state))) ; \next_en
(define-fun |Scoreboard_n next_en| ((state |Scoreboard_s|)) Bool (= ((_ extract 0 0) (|Scoreboard#30| state)) #b1))
; yosys-smt2-wire pop 4
(define-fun |Scoreboard_n pop| ((state |Scoreboard_s|)) (_ BitVec 4) (|Scoreboard#24| state))
; yosys-smt2-wire prop_empty 1
(define-fun |Scoreboard_n prop_empty| ((state |Scoreboard_s|)) Bool (|Scoreboard#8| state))
; yosys-smt2-wire prop_full 1
(define-fun |Scoreboard_n prop_full| ((state |Scoreboard_s|)) Bool (|Scoreboard#9| state))
; yosys-smt2-wire prop_pop 1
(define-fun |Scoreboard_n prop_pop| ((state |Scoreboard_s|)) Bool (= ((_ extract 0 0) (|Scoreboard#24| state)) #b1))
; yosys-smt2-wire prop_push 1
(define-fun |Scoreboard_n prop_push| ((state |Scoreboard_s|)) Bool (= ((_ extract 0 0) (|Scoreboard#28| state)) #b1))
; yosys-smt2-output prop_signal 1
; yosys-smt2-wire prop_signal 1
(define-fun |Scoreboard#31| ((state |Scoreboard_s|)) (_ BitVec 1) (bvnot (|Scoreboard#23| state))) ; $not$data_integrity_scoreboard.sv:188$144_Y
(define-fun |Scoreboard#32| ((state |Scoreboard_s|)) Bool (= (|Scoreboard#26| state) (|Scoreboard#7| state))) ; $eq$data_integrity_scoreboard.sv:188$145_Y
(define-fun |Scoreboard#33| ((state |Scoreboard_s|)) (_ BitVec 1) (bvor (|Scoreboard#31| state) (ite (|Scoreboard#32| state) #b1 #b0))) ; \prop_signal
(define-fun |Scoreboard_n prop_signal| ((state |Scoreboard_s|)) Bool (= ((_ extract 0 0) (|Scoreboard#33| state)) #b1))
; yosys-smt2-input push 4
; yosys-smt2-wire push 4
(declare-fun |Scoreboard#34| (|Scoreboard_s|) (_ BitVec 3)) ; \push [3:1]
(define-fun |Scoreboard_n push| ((state |Scoreboard_s|)) (_ BitVec 4) (concat (|Scoreboard#34| state) (|Scoreboard#28| state)))
; yosys-smt2-wire reqs 4
(define-fun |Scoreboard#35| ((state |Scoreboard_s|)) (_ BitVec 1) (bvnot (ite (|Scoreboard#8| state) #b1 #b0))) ; \reqs [0]
(define-fun |Scoreboard#36| ((state |Scoreboard_s|)) (_ BitVec 1) (bvnot (ite (|Scoreboard#11| state) #b1 #b0))) ; \reqs [1]
(define-fun |Scoreboard#37| ((state |Scoreboard_s|)) (_ BitVec 1) (bvnot (ite (|Scoreboard#14| state) #b1 #b0))) ; \reqs [2]
(define-fun |Scoreboard#38| ((state |Scoreboard_s|)) (_ BitVec 1) (bvnot (ite (|Scoreboard#17| state) #b1 #b0))) ; \reqs [3]
(define-fun |Scoreboard_n reqs| ((state |Scoreboard_s|)) (_ BitVec 4) (concat (|Scoreboard#38| state) (concat (|Scoreboard#37| state) (concat (|Scoreboard#36| state) (|Scoreboard#35| state)))))
; yosys-smt2-input rst 1
; yosys-smt2-wire rst 1
(declare-fun |Scoreboard#39| (|Scoreboard_s|) Bool) ; \rst
(define-fun |Scoreboard_n rst| ((state |Scoreboard_s|)) Bool (|Scoreboard#39| state))
; yosys-smt2-input start 1
; yosys-smt2-wire start 1
(define-fun |Scoreboard_n start| ((state |Scoreboard_s|)) Bool (= ((_ extract 0 0) (|Scoreboard#27| state)) #b1))
(define-fun |Scoreboard#40| ((state |Scoreboard_s|)) (_ BitVec 1) (bvnot (ite (|Scoreboard#19| state) #b1 #b0))) ; $not$data_integrity_scoreboard.sv:107$136_Y
(define-fun |Scoreboard#41| ((state |Scoreboard_s|)) (_ BitVec 1) (bvand (|Scoreboard#29| state) (|Scoreboard#40| state))) ; $and$data_integrity_scoreboard.sv:126$139_Y

;; MC: again, there are no embedded assertions or assumptions so these are all trivially true
(define-fun |Scoreboard_a| ((state |Scoreboard_s|)) Bool (and
  (|$paramod/MagicPacketTracker/DEPTH=8_a| (|Scoreboard_h mpt| state))
  (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_a| (|Scoreboard_h arb| state))
  (|$paramod/FF/WIDTH=8_a| (|Scoreboard_h ff_magic_packet| state))
  (|$paramod/FF/WIDTH=1_a| (|Scoreboard_h ff_en| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_a| (|Scoreboard_h gen_fifos[1].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_a| (|Scoreboard_h gen_fifos[0].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_a| (|Scoreboard_h gen_fifos[2].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_a| (|Scoreboard_h gen_fifos[3].f| state))
))
(define-fun |Scoreboard_u| ((state |Scoreboard_s|)) Bool (and
  (|$paramod/MagicPacketTracker/DEPTH=8_u| (|Scoreboard_h mpt| state))
  (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_u| (|Scoreboard_h arb| state))
  (|$paramod/FF/WIDTH=8_u| (|Scoreboard_h ff_magic_packet| state))
  (|$paramod/FF/WIDTH=1_u| (|Scoreboard_h ff_en| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_u| (|Scoreboard_h gen_fifos[1].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_u| (|Scoreboard_h gen_fifos[0].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_u| (|Scoreboard_h gen_fifos[2].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_u| (|Scoreboard_h gen_fifos[3].f| state))
))

;; MC: The initial state is based on initial state of submodules
(define-fun |Scoreboard_i| ((state |Scoreboard_s|)) Bool (and
  (|$paramod/MagicPacketTracker/DEPTH=8_i| (|Scoreboard_h mpt| state))
  (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_i| (|Scoreboard_h arb| state))
  (|$paramod/FF/WIDTH=8_i| (|Scoreboard_h ff_magic_packet| state))
  (|$paramod/FF/WIDTH=1_i| (|Scoreboard_h ff_en| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_i| (|Scoreboard_h gen_fifos[1].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_i| (|Scoreboard_h gen_fifos[0].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_i| (|Scoreboard_h gen_fifos[2].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_i| (|Scoreboard_h gen_fifos[3].f| state))
))

;; MC: the hierarchy function wires all submodules
(define-fun |Scoreboard_h| ((state |Scoreboard_s|)) Bool (and
  (= (|Scoreboard#19| state) (|$paramod/MagicPacketTracker/DEPTH=8_n captured| (|Scoreboard_h mpt| state))) ; $paramod/MagicPacketTracker/DEPTH=8.captured
  (= (|Scoreboard#0| state) (|$paramod/MagicPacketTracker/DEPTH=8_n clk| (|Scoreboard_h mpt| state))) ; $paramod/MagicPacketTracker/DEPTH=8.clk
  (= (|Scoreboard#1| state) (|$paramod/MagicPacketTracker/DEPTH=8_n cnt| (|Scoreboard_h mpt| state))) ; $paramod/MagicPacketTracker/DEPTH=8.cnt
  (= (|Scoreboard#2| state) (|$paramod/MagicPacketTracker/DEPTH=8_n next_cnt| (|Scoreboard_h mpt| state))) ; $paramod/MagicPacketTracker/DEPTH=8.next_cnt
  (= (= ((_ extract 0 0) (|Scoreboard#24| state)) #b1) (|$paramod/MagicPacketTracker/DEPTH=8_n pop| (|Scoreboard_h mpt| state))) ; $paramod/MagicPacketTracker/DEPTH=8.pop
  (= (= ((_ extract 0 0) (|Scoreboard#28| state)) #b1) (|$paramod/MagicPacketTracker/DEPTH=8_n push| (|Scoreboard_h mpt| state))) ; $paramod/MagicPacketTracker/DEPTH=8.push
  (= (|Scoreboard#39| state) (|$paramod/MagicPacketTracker/DEPTH=8_n rst| (|Scoreboard_h mpt| state))) ; $paramod/MagicPacketTracker/DEPTH=8.rst
  (= false (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n blk| (|Scoreboard_h arb| state))) ; $paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8.blk
  (= (|Scoreboard#0| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n clk| (|Scoreboard_h arb| state))) ; $paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8.clk
  (= (|Scoreboard#24| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n gnt| (|Scoreboard_h arb| state))) ; $paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8.gnt
  (= (|Scoreboard#25| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n input_quantums| (|Scoreboard_h arb| state))) ; $paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8.input_quantums
  (= (concat (|Scoreboard#38| state) (concat (|Scoreboard#37| state) (concat (|Scoreboard#36| state) (|Scoreboard#35| state)))) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n reqs| (|Scoreboard_h arb| state))) ; $paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8.reqs
  (= (|Scoreboard#39| state) (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_n rst| (|Scoreboard_h arb| state))) ; $paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8.rst
  (= (|Scoreboard#3| state) (|$paramod/FF/WIDTH=8_n D| (|Scoreboard_h ff_magic_packet| state))) ; $paramod/FF/WIDTH=8.D
  (= (|Scoreboard#26| state) (|$paramod/FF/WIDTH=8_n Q| (|Scoreboard_h ff_magic_packet| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|Scoreboard#0| state) (|$paramod/FF/WIDTH=8_n clk| (|Scoreboard_h ff_magic_packet| state))) ; $paramod/FF/WIDTH=8.clk
  (= (= ((_ extract 0 0) (|Scoreboard#41| state)) #b1) (|$paramod/FF/WIDTH=8_n en| (|Scoreboard_h ff_magic_packet| state))) ; $paramod/FF/WIDTH=8.en
  (= (= ((_ extract 0 0) (|Scoreboard#30| state)) #b1) (|$paramod/FF/WIDTH=1_n D| (|Scoreboard_h ff_en| state))) ; $paramod/FF/WIDTH=1.D
  (= (|Scoreboard#19| state) (|$paramod/FF/WIDTH=1_n Q| (|Scoreboard_h ff_en| state))) ; $paramod/FF/WIDTH=1.Q
  (= (|Scoreboard#0| state) (|$paramod/FF/WIDTH=1_n clk| (|Scoreboard_h ff_en| state))) ; $paramod/FF/WIDTH=1.clk
  (= (= ((_ extract 0 0) (|Scoreboard#40| state)) #b1) (|$paramod/FF/WIDTH=1_n en| (|Scoreboard_h ff_en| state))) ; $paramod/FF/WIDTH=1.en
  (= (|Scoreboard#0| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n clk| (|Scoreboard_h gen_fifos[1].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.clk
  (= (|Scoreboard#4| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n data_in| (|Scoreboard_h gen_fifos[1].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.data_in
  (= (|Scoreboard#10| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n data_out| (|Scoreboard_h gen_fifos[1].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.data_out
  (= (|Scoreboard#11| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n empty| (|Scoreboard_h gen_fifos[1].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.empty
  (= (|Scoreboard#12| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n full| (|Scoreboard_h gen_fifos[1].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.full
  (= (= ((_ extract 1 1) (|Scoreboard#24| state)) #b1) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n pop| (|Scoreboard_h gen_fifos[1].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.pop
  (= (= ((_ extract 0 0) (|Scoreboard#34| state)) #b1) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n push| (|Scoreboard_h gen_fifos[1].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.push
  (= (|Scoreboard#39| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n rst| (|Scoreboard_h gen_fifos[1].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.rst
  (= (|Scoreboard#0| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n clk| (|Scoreboard_h gen_fifos[0].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.clk
  (= (|Scoreboard#3| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n data_in| (|Scoreboard_h gen_fifos[0].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.data_in
  (= (|Scoreboard#7| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n data_out| (|Scoreboard_h gen_fifos[0].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.data_out
  (= (|Scoreboard#8| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n empty| (|Scoreboard_h gen_fifos[0].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.empty
  (= (|Scoreboard#9| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n full| (|Scoreboard_h gen_fifos[0].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.full
  (= (= ((_ extract 0 0) (|Scoreboard#24| state)) #b1) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n pop| (|Scoreboard_h gen_fifos[0].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.pop
  (= (= ((_ extract 0 0) (|Scoreboard#28| state)) #b1) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n push| (|Scoreboard_h gen_fifos[0].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.push
  (= (|Scoreboard#39| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n rst| (|Scoreboard_h gen_fifos[0].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.rst
  (= (|Scoreboard#0| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n clk| (|Scoreboard_h gen_fifos[2].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.clk
  (= (|Scoreboard#5| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n data_in| (|Scoreboard_h gen_fifos[2].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.data_in
  (= (|Scoreboard#13| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n data_out| (|Scoreboard_h gen_fifos[2].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.data_out
  (= (|Scoreboard#14| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n empty| (|Scoreboard_h gen_fifos[2].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.empty
  (= (|Scoreboard#15| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n full| (|Scoreboard_h gen_fifos[2].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.full
  (= (= ((_ extract 2 2) (|Scoreboard#24| state)) #b1) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n pop| (|Scoreboard_h gen_fifos[2].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.pop
  (= (= ((_ extract 1 1) (|Scoreboard#34| state)) #b1) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n push| (|Scoreboard_h gen_fifos[2].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.push
  (= (|Scoreboard#39| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n rst| (|Scoreboard_h gen_fifos[2].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.rst
  (= (|Scoreboard#0| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n clk| (|Scoreboard_h gen_fifos[3].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.clk
  (= (|Scoreboard#6| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n data_in| (|Scoreboard_h gen_fifos[3].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.data_in
  (= (|Scoreboard#16| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n data_out| (|Scoreboard_h gen_fifos[3].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.data_out
  (= (|Scoreboard#17| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n empty| (|Scoreboard_h gen_fifos[3].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.empty
  (= (|Scoreboard#18| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n full| (|Scoreboard_h gen_fifos[3].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.full
  (= (= ((_ extract 3 3) (|Scoreboard#24| state)) #b1) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n pop| (|Scoreboard_h gen_fifos[3].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.pop
  (= (= ((_ extract 2 2) (|Scoreboard#34| state)) #b1) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n push| (|Scoreboard_h gen_fifos[3].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.push
  (= (|Scoreboard#39| state) (|$paramod/FIFO/WIDTH=8/DEPTH=8_n rst| (|Scoreboard_h gen_fifos[3].f| state))) ; $paramod/FIFO/WIDTH=8/DEPTH=8.rst
  (|$paramod/MagicPacketTracker/DEPTH=8_h| (|Scoreboard_h mpt| state))
  (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_h| (|Scoreboard_h arb| state))
  (|$paramod/FF/WIDTH=8_h| (|Scoreboard_h ff_magic_packet| state))
  (|$paramod/FF/WIDTH=1_h| (|Scoreboard_h ff_en| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_h| (|Scoreboard_h gen_fifos[1].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_h| (|Scoreboard_h gen_fifos[0].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_h| (|Scoreboard_h gen_fifos[2].f| state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_h| (|Scoreboard_h gen_fifos[3].f| state))
))

;; MC: The transition relation is the conjunction of all submodule TR
(define-fun |Scoreboard_t| ((state |Scoreboard_s|) (next_state |Scoreboard_s|)) Bool (and
  (|$paramod/MagicPacketTracker/DEPTH=8_t| (|Scoreboard_h mpt| state) (|Scoreboard_h mpt| next_state))
  (|$paramod/DWRR/NUM_REQS=4/QWID=8/PSIZE=8_t| (|Scoreboard_h arb| state) (|Scoreboard_h arb| next_state))
  (|$paramod/FF/WIDTH=8_t| (|Scoreboard_h ff_magic_packet| state) (|Scoreboard_h ff_magic_packet| next_state))
  (|$paramod/FF/WIDTH=1_t| (|Scoreboard_h ff_en| state) (|Scoreboard_h ff_en| next_state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_t| (|Scoreboard_h gen_fifos[1].f| state) (|Scoreboard_h gen_fifos[1].f| next_state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_t| (|Scoreboard_h gen_fifos[0].f| state) (|Scoreboard_h gen_fifos[0].f| next_state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_t| (|Scoreboard_h gen_fifos[2].f| state) (|Scoreboard_h gen_fifos[2].f| next_state))
  (|$paramod/FIFO/WIDTH=8/DEPTH=8_t| (|Scoreboard_h gen_fifos[3].f| state) (|Scoreboard_h gen_fifos[3].f| next_state))
))
; end of module Scoreboard

; yosys-smt2-topmod Scoreboard
; end of yosys output
