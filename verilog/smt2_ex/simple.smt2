; SMT-LIBv2 description generated by Yosys 0.7+298 (git sha1 393b18e, clang 3.8.0-2ubuntu4 -fPIC -Os)
; yosys-smt2-module $paramod/FF/WIDTH=8
(declare-sort |$paramod/FF/WIDTH=8_s| 0)
(declare-fun |$paramod/FF/WIDTH=8_is| (|$paramod/FF/WIDTH=8_s|) Bool)
; yosys-smt2-input D 8
; yosys-smt2-wire D 8
(declare-fun |$paramod/FF/WIDTH=8#0| (|$paramod/FF/WIDTH=8_s|) (_ BitVec 8)) ; \D
(define-fun |$paramod/FF/WIDTH=8_n D| ((state |$paramod/FF/WIDTH=8_s|)) (_ BitVec 8) (|$paramod/FF/WIDTH=8#0| state))
; yosys-smt2-output Q 8
; yosys-smt2-register Q 8
; yosys-smt2-wire Q 8
(declare-fun |$paramod/FF/WIDTH=8#1| (|$paramod/FF/WIDTH=8_s|) (_ BitVec 8)) ; \Q
(define-fun |$paramod/FF/WIDTH=8_n Q| ((state |$paramod/FF/WIDTH=8_s|)) (_ BitVec 8) (|$paramod/FF/WIDTH=8#1| state))
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |$paramod/FF/WIDTH=8#2| (|$paramod/FF/WIDTH=8_s|) Bool) ; \clk
(define-fun |$paramod/FF/WIDTH=8_n clk| ((state |$paramod/FF/WIDTH=8_s|)) Bool (|$paramod/FF/WIDTH=8#2| state))
; yosys-smt2-input en 1
; yosys-smt2-wire en 1
(declare-fun |$paramod/FF/WIDTH=8#3| (|$paramod/FF/WIDTH=8_s|) Bool) ; \en
(define-fun |$paramod/FF/WIDTH=8_n en| ((state |$paramod/FF/WIDTH=8_s|)) Bool (|$paramod/FF/WIDTH=8#3| state))
(define-fun |$paramod/FF/WIDTH=8#4| ((state |$paramod/FF/WIDTH=8_s|)) (_ BitVec 8) (ite (|$paramod/FF/WIDTH=8#3| state) (|$paramod/FF/WIDTH=8#0| state) (|$paramod/FF/WIDTH=8#1| state))) ; $0\Q[7:0]
(define-fun |$paramod/FF/WIDTH=8_a| ((state |$paramod/FF/WIDTH=8_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=8_u| ((state |$paramod/FF/WIDTH=8_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=8_i| ((state |$paramod/FF/WIDTH=8_s|)) Bool 
  (= (|$paramod/FF/WIDTH=8#1| state) #b00000000) ; Q
)
(define-fun |$paramod/FF/WIDTH=8_h| ((state |$paramod/FF/WIDTH=8_s|)) Bool true)
(define-fun |$paramod/FF/WIDTH=8_t| ((state |$paramod/FF/WIDTH=8_s|) (next_state |$paramod/FF/WIDTH=8_s|)) Bool 
  (= (|$paramod/FF/WIDTH=8#4| state) (|$paramod/FF/WIDTH=8#1| next_state)) ; $procdff$42 \Q
) ; end of module $paramod/FF/WIDTH=8
; yosys-smt2-module z_sum
(declare-sort |z_sum_s| 0)
(declare-fun |z_sum_is| (|z_sum_s|) Bool)
; yosys-smt2-input clk 1
; yosys-smt2-wire clk 1
(declare-fun |z_sum#0| (|z_sum_s|) Bool) ; \clk
(define-fun |z_sum_n clk| ((state |z_sum_s|)) Bool (|z_sum#0| state))
; yosys-smt2-input en 1
; yosys-smt2-wire en 1
(declare-fun |z_sum#1| (|z_sum_s|) Bool) ; \en
(define-fun |z_sum_n en| ((state |z_sum_s|)) Bool (|z_sum#1| state))
; yosys-smt2-input in0 8
; yosys-smt2-wire in0 8
(declare-fun |z_sum#2| (|z_sum_s|) (_ BitVec 8)) ; \in0
(define-fun |z_sum_n in0| ((state |z_sum_s|)) (_ BitVec 8) (|z_sum#2| state))
; yosys-smt2-output out 8
; yosys-smt2-wire out 8
; yosys-smt2-cell $paramod/FF/WIDTH=8 f1
(declare-fun |z_sum#3| (|z_sum_s|) (_ BitVec 8)) ; \z_in0
(declare-fun |z_sum_h f1| (|z_sum_s|) |$paramod/FF/WIDTH=8_s|)
; yosys-smt2-cell $paramod/FF/WIDTH=8 f2
(declare-fun |z_sum#4| (|z_sum_s|) (_ BitVec 8)) ; \z_in0_2
(declare-fun |z_sum_h f2| (|z_sum_s|) |$paramod/FF/WIDTH=8_s|)
(define-fun |z_sum#5| ((state |z_sum_s|)) (_ BitVec 8) (bvadd (|z_sum#3| state) (|z_sum#4| state))) ; \out
(define-fun |z_sum_n out| ((state |z_sum_s|)) (_ BitVec 8) (|z_sum#5| state))
; yosys-smt2-input rst 1
; yosys-smt2-wire rst 1
(declare-fun |z_sum#6| (|z_sum_s|) Bool) ; \rst
(define-fun |z_sum_n rst| ((state |z_sum_s|)) Bool (|z_sum#6| state))
; yosys-smt2-wire rst_in0 8
(define-fun |z_sum#7| ((state |z_sum_s|)) (_ BitVec 8) (ite (|z_sum#6| state) #b00000000 (|z_sum#2| state))) ; \rst_in0
(define-fun |z_sum_n rst_in0| ((state |z_sum_s|)) (_ BitVec 8) (|z_sum#7| state))
; yosys-smt2-wire z_in0 8
(define-fun |z_sum_n z_in0| ((state |z_sum_s|)) (_ BitVec 8) (|z_sum#3| state))
; yosys-smt2-wire z_in0_2 8
(define-fun |z_sum_n z_in0_2| ((state |z_sum_s|)) (_ BitVec 8) (|z_sum#4| state))
(define-fun |z_sum#8| ((state |z_sum_s|)) (_ BitVec 1) (bvnot ((_ extract 0 0) (|z_sum#5| state)))) ; $0$formal$simple.sv:44$7_CHECK[0:0]$14
(define-fun |z_sum#9| ((state |z_sum_s|)) Bool (|z_sum_is| state)) ; $0$formal$simple.sv:38$4_EN[0:0]$24
(define-fun |z_sum#10| ((state |z_sum_s|)) (_ BitVec 1) (ite (|z_sum#9| state) #b0 #b1)) ; $0$formal$simple.sv:43$6_EN[0:0]$13
; yosys-smt2-assert 0 simple.sv:44
(define-fun |z_sum_a 0| ((state |z_sum_s|)) Bool (or (= ((_ extract 0 0) (|z_sum#8| state)) #b1) (not (= ((_ extract 0 0) (|z_sum#10| state)) #b1)))) ; $assert$simple.sv:44$21
; yosys-smt2-assume 0 simple.sv:38
(define-fun |z_sum_u 0| ((state |z_sum_s|)) Bool (or (|z_sum#6| state) (not (|z_sum#9| state)))) ; $assume$simple.sv:38$19
(define-fun |z_sum#11| ((state |z_sum_s|)) Bool (not (or  (|z_sum#6| state) false))) ; $0$formal$simple.sv:43$6_CHECK[0:0]$12
; yosys-smt2-assume 1 simple.sv:43
(define-fun |z_sum_u 1| ((state |z_sum_s|)) Bool (or (|z_sum#11| state) (not (= ((_ extract 0 0) (|z_sum#10| state)) #b1)))) ; $assume$simple.sv:43$20
(define-fun |z_sum_a| ((state |z_sum_s|)) Bool (and
  (|z_sum_a 0| state)
  (|$paramod/FF/WIDTH=8_a| (|z_sum_h f1| state))
  (|$paramod/FF/WIDTH=8_a| (|z_sum_h f2| state))
))
(define-fun |z_sum_u| ((state |z_sum_s|)) Bool (and
  (|z_sum_u 0| state)
  (|z_sum_u 1| state)
  (|$paramod/FF/WIDTH=8_u| (|z_sum_h f1| state))
  (|$paramod/FF/WIDTH=8_u| (|z_sum_h f2| state))
))
(define-fun |z_sum_i| ((state |z_sum_s|)) Bool (and
  (|$paramod/FF/WIDTH=8_i| (|z_sum_h f1| state))
  (|$paramod/FF/WIDTH=8_i| (|z_sum_h f2| state))
))
(define-fun |z_sum_h| ((state |z_sum_s|)) Bool (and
  (= (|z_sum#7| state) (|$paramod/FF/WIDTH=8_n D| (|z_sum_h f1| state))) ; $paramod/FF/WIDTH=8.D
  (= (|z_sum#3| state) (|$paramod/FF/WIDTH=8_n Q| (|z_sum_h f1| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|z_sum#0| state) (|$paramod/FF/WIDTH=8_n clk| (|z_sum_h f1| state))) ; $paramod/FF/WIDTH=8.clk
  (= (|z_sum#1| state) (|$paramod/FF/WIDTH=8_n en| (|z_sum_h f1| state))) ; $paramod/FF/WIDTH=8.en
  (= (|z_sum#7| state) (|$paramod/FF/WIDTH=8_n D| (|z_sum_h f2| state))) ; $paramod/FF/WIDTH=8.D
  (= (|z_sum#4| state) (|$paramod/FF/WIDTH=8_n Q| (|z_sum_h f2| state))) ; $paramod/FF/WIDTH=8.Q
  (= (|z_sum#0| state) (|$paramod/FF/WIDTH=8_n clk| (|z_sum_h f2| state))) ; $paramod/FF/WIDTH=8.clk
  (= (|z_sum#1| state) (|$paramod/FF/WIDTH=8_n en| (|z_sum_h f2| state))) ; $paramod/FF/WIDTH=8.en
  (|$paramod/FF/WIDTH=8_h| (|z_sum_h f1| state))
  (|$paramod/FF/WIDTH=8_h| (|z_sum_h f2| state))
))
(define-fun |z_sum_t| ((state |z_sum_s|) (next_state |z_sum_s|)) Bool (and
  (|$paramod/FF/WIDTH=8_t| (|z_sum_h f1| state) (|z_sum_h f1| next_state))
  (|$paramod/FF/WIDTH=8_t| (|z_sum_h f2| state) (|z_sum_h f2| next_state))
)) ; end of module z_sum
; yosys-smt2-topmod z_sum
; end of yosys output
