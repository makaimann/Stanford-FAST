((cpempty = 0_1) -> ((cpf_to_ll[rdPtr] = shared_fifo.ll.head[0_1]) & (from_ll[shared_fifo.ll.head[0_1]][0:1] = rdPtr) & (from_ll[shared_fifo.ll.head[0_1]][2:3] = fifo))) & ((cpempty = 0_1) -> ((cpf_to_ll[wrPtr - 1_2] = 'shared_fifo.ll.tail[0]') & (from_ll['shared_fifo.ll.tail[0]'][0:1] = (wrPtr - 1_2)) & (from_ll['shared_fifo.ll.tail[0]'][2:3] = fifo))) & ((full = 0_1) -> ((ptr_to_free_list[free_list_rdPtr] = shared_fifo.ll.free_list_head) & (from_ll[shared_fifo.ll.free_list_head][0:1] = free_list_rdPtr) & (from_ll[shared_fifo.ll.free_list_head][2:3] = free_list))) & ((full = 0_1) -> ((ptr_to_free_list[free_list_wrPtr - 1_2] = shared_fifo.ll.free_list_tail) & (from_ll[shared_fifo.ll.free_list_tail][0:1] = (free_list_wrPtr - 1_2)) & (from_ll[shared_fifo.ll.free_list_tail][2:3] = free_list))) & (((shared_fifo.ll.count[0_1] >= 1_3) -> ((from_ll[cpf_to_ll[rdPtr]][0:1] = rdPtr) & (from_ll[cpf_to_ll[rdPtr]][2:3] = fifo))) & ((shared_fifo.ll.count[0_1] >= 2_3) -> ((from_ll[cpf_to_ll[rdPtr+1_2]][0:1] = rdPtr+1_2) & (from_ll[cpf_to_ll[rdPtr+1_2]][2:3] = fifo))) & ((shared_fifo.ll.count[0_1] >= 3_3) -> ((from_ll[cpf_to_ll[rdPtr+2_2]][0:1] = rdPtr+2_2) & (from_ll[cpf_to_ll[rdPtr+2_2]][2:3] = fifo))) & ((shared_fifo.ll.count[0_1] >= 4_3) -> ((from_ll[cpf_to_ll[rdPtr+3_2]][0:1] = rdPtr+3_2) & (from_ll[cpf_to_ll[rdPtr+3_2]][2:3] = fifo)))) & (((free_list_count >= 1_3) -> ((from_ll[ptr_to_free_list[free_list_rdPtr]][0:1] = free_list_rdPtr) & (from_ll[ptr_to_free_list[free_list_rdPtr]][2:3] = free_list))) & ((free_list_count >= 2_3) -> ((from_ll[ptr_to_free_list[free_list_rdPtr+1_2]][0:1] = free_list_rdPtr+1_2) & (from_ll[ptr_to_free_list[free_list_rdPtr+1_2]][2:3] = free_list))) & ((free_list_count >= 3_3) -> ((from_ll[ptr_to_free_list[free_list_rdPtr+2_2]][0:1] = free_list_rdPtr+2_2) & (from_ll[ptr_to_free_list[free_list_rdPtr+2_2]][2:3] = free_list))) & ((free_list_count >= 4_3) -> ((from_ll[ptr_to_free_list[free_list_rdPtr+3_2]][0:1] = free_list_rdPtr+3_2) & (from_ll[ptr_to_free_list[free_list_rdPtr+3_2]][2:3] = free_list)))) & (((shared_fifo.ll.count[0_1] >= 2_3) -> (from_ll[shared_fifo.ll.next_ptr[cpf_to_ll[rdPtr]]][0:1] = rdPtr+1_2)) & ((shared_fifo.ll.count[0_1] >= 3_3) -> (from_ll[shared_fifo.ll.next_ptr[cpf_to_ll[rdPtr+1_2]]][0:1] = rdPtr+2_2)) & ((shared_fifo.ll.count[0_1] >= 4_3) -> (from_ll[shared_fifo.ll.next_ptr[cpf_to_ll[rdPtr+2_2]]][0:1] = rdPtr+3_2))) & (((free_list_count >= 2_3) -> (from_ll[shared_fifo.ll.next_ptr[ptr_to_free_list[free_list_rdPtr]]][0:1] = free_list_rdPtr+1_2)) & ((free_list_count >= 3_3) -> (from_ll[shared_fifo.ll.next_ptr[ptr_to_free_list[free_list_rdPtr+1_2]]][0:1] = free_list_rdPtr+2_2)) & ((free_list_count >= 4_3) -> (from_ll[shared_fifo.ll.next_ptr[ptr_to_free_list[free_list_rdPtr+2_2]]][0:1] = free_list_rdPtr+3_2)))

# # rdPtr maps to head
# (cpempty = 0_1) -> ((cpf_to_ll[rdPtr] = shared_fifo.ll.head[0_1]) & (from_ll[shared_fifo.ll.head[0_1]][0:1] = rdPtr) & (from_ll[shared_fifo.ll.head[0_1]][2:3] = fifo))

# # wrPtr maps to tail
# (cpempty = 0_1) -> ((cpf_to_ll[wrPtr - 1_2] = 'shared_fifo.ll.tail[0]') & (from_ll['shared_fifo.ll.tail[0]'][0:1] = (wrPtr - 1_2)) & (from_ll['shared_fifo.ll.tail[0]'][2:3] = fifo))

# free list maps to head
# (full = 0_1) -> ((ptr_to_free_list[free_list_rdPtr] = shared_fifo.ll.free_list_head) & (from_ll[shared_fifo.ll.free_list_head][0:1] = free_list_rdPtr) & (from_ll[shared_fifo.ll.free_list_head][2:3] = free_list))

# free list maps to tail
# (full = 0_1) -> ((ptr_to_free_list[free_list_wrPtr - 1_2] = shared_fifo.ll.free_list_tail) & (from_ll[shared_fifo.ll.free_list_tail][0:1] = (free_list_wrPtr - 1_2)) & (from_ll[shared_fifo.ll.free_list_tail][2:3] = free_list))

# # identity maps for FIFO 0
# ((shared_fifo.ll.count[0_1] >= 1_3) -> ((from_ll[cpf_to_ll[rdPtr]][0:1] = rdPtr) & (from_ll[cpf_to_ll[rdPtr]][2:3] = fifo)))
# ((shared_fifo.ll.count[0_1] >= 2_3) -> ((from_ll[cpf_to_ll[rdPtr+1_2]][0:1] = rdPtr+1_2) & (from_ll[cpf_to_ll[rdPtr+1_2]][2:3] = fifo)))
# ((shared_fifo.ll.count[0_1] >= 3_3) -> ((from_ll[cpf_to_ll[rdPtr+2_2]][0:1] = rdPtr+2_2) & (from_ll[cpf_to_ll[rdPtr+2_2]][2:3] = fifo)))
# ((shared_fifo.ll.count[0_1] >= 4_3) -> ((from_ll[cpf_to_ll[rdPtr+3_2]][0:1] = rdPtr+3_2) & (from_ll[cpf_to_ll[rdPtr+3_2]][2:3] = fifo)))

# # identity maps for free list
# ((free_list_count >= 1_3) -> ((from_ll[ptr_to_free_list[free_list_rdPtr]][0:1] = free_list_rdPtr) & (from_ll[ptr_to_free_list[free_list_rdPtr]][2:3] = free_list)))
# ((free_list_count >= 2_3) -> ((from_ll[ptr_to_free_list[free_list_rdPtr+1_2]][0:1] = free_list_rdPtr+1_2) & (from_ll[ptr_to_free_list[free_list_rdPtr+1_2]][2:3] = free_list)))
# ((free_list_count >= 3_3) -> ((from_ll[ptr_to_free_list[free_list_rdPtr+2_2]][0:1] = free_list_rdPtr+2_2) & (from_ll[ptr_to_free_list[free_list_rdPtr+2_2]][2:3] = free_list)))
# ((free_list_count >= 4_3) -> ((from_ll[ptr_to_free_list[free_list_rdPtr+3_2]][0:1] = free_list_rdPtr+3_2) & (from_ll[ptr_to_free_list[free_list_rdPtr+3_2]][2:3] = free_list)))

# # shared_fifo.ll.next_ptr maps for FIFO 0
# ((shared_fifo.ll.count[0_1] >= 2_3) -> (from_ll[shared_fifo.ll.next_ptr[cpf_to_ll[rdPtr]]][0:1] = rdPtr+1_2))
# ((shared_fifo.ll.count[0_1] >= 3_3) -> (from_ll[shared_fifo.ll.next_ptr[cpf_to_ll[rdPtr+1_2]]][0:1] = rdPtr+2_2))
# ((shared_fifo.ll.count[0_1] >= 4_3) -> (from_ll[shared_fifo.ll.next_ptr[cpf_to_ll[rdPtr+2_2]]][0:1] = rdPtr+3_2))

# # shared_fifo.ll.next_ptr maps for free list
# ((free_list_count >= 2_3) -> (from_ll[shared_fifo.ll.next_ptr[ptr_to_free_list[free_list_rdPtr]]][0:1] = free_list_rdPtr+1_2))
# ((free_list_count >= 3_3) -> (from_ll[shared_fifo.ll.next_ptr[ptr_to_free_list[free_list_rdPtr+1_2]]][0:1] = free_list_rdPtr+2_2))
# ((free_list_count >= 4_3) -> (from_ll[shared_fifo.ll.next_ptr[ptr_to_free_list[free_list_rdPtr+2_2]]][0:1] = free_list_rdPtr+3_2))

# New distinctness idea is just based on tagging each element as belonging to the fifo we're tracking, the free list, or 'phantom' (i.e. another, untracked, fifo)
# # will probably need distinctness of free list from existing allocated lists
# # it's possible we could do this by stacking them in one array (but it would be expensive to maintain the invariants that the two are packed together in the array without overlapping or gaps)

# # distinctness using UF
# # identity maps for FIFO 0
# (shared_fifo.ll.count[0_1] >= 1_3) -> (f(cpf_to_ll[rdPtr]) = 0_3)
# (shared_fifo.ll.count[0_1] >= 2_3) -> (f(cpf_to_ll[rdPtr+1_2]) = 3_3)
# (shared_fifo.ll.count[0_1] >= 3_3) -> (f(cpf_to_ll[rdPtr+2_2]) = 3_3)
# (shared_fifo.ll.count[0_1] >= 4_3) -> (f(cpf_to_ll[rdPtr+3_2]) = 3_3)

# # identity maps for free list
# (free_list_count >= 1_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]]) = 4_3)
# (free_list_count >= 2_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]+1_2]) = 5_3)
# (free_list_count >= 3_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]+2_2]) = 6_3)
# (free_list_count >= 4_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]+3_2]) = 7_3)
