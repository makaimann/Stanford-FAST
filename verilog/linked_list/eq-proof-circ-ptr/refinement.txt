((cpempty = 0_1) -> (cpf_to_ll[rdPtr] = shared_fifo.ll.head[0_1]) & (ll_to_cpf[shared_fifo.ll.head[0_1]] = rdPtr) & (cpempty = 0_1) -> (cpf_to_ll[wrPtr] = 'shared_fifo.ll.tail[0]') & (ll_to_cpf['shared_fifo.ll.tail[0]'] = wrPtr) & (shared_fifo.ll.count[0_1] >= 1_3) -> (ll_to_cpf[cpf_to_ll[rdPtr]] = rdPtr) & (shared_fifo.ll.count[0_1] >= 2_3) -> (ll_to_cpf[cpf_to_ll[rdPtr+1_2]] = rdPtr+1_2) & (shared_fifo.ll.count[0_1] >= 3_3) -> (ll_to_cpf[cpf_to_ll[rdPtr+2_2]] = rdPtr+2_2) & (shared_fifo.ll.count[0_1] >= 4_3) -> (ll_to_cpf[cpf_to_ll[rdPtr+3_2]] = rdPtr+3_2) & (free_list_count >= 1_3) -> (free_list_to_ptr[ptr_to_free_list[free_list_rdPtr[0:1]]] = free_list_rdPtr[0:1]) & (free_list_count >= 2_3) -> (free_list_to_ptr[ptr_to_free_list[free_list_rdPtr[0:1]+1_2]] = free_list_rdPtr[0:1]+1_2) & (free_list_count >= 3_3) -> (free_list_to_ptr[ptr_to_free_list[free_list_rdPtr[0:1]+2_2]] = free_list_rdPtr[0:1]+2_2) & (free_list_count >= 4_3) -> (free_list_to_ptr[ptr_to_free_list[free_list_rdPtr[0:1]+3_2]] = free_list_rdPtr[0:1]+3_2) & (shared_fifo.ll.count[0_1] >= 2_3) -> (ll_to_cpf[next_ptr[cpf_to_ll[rdPtr]]] = rdPtr+1_2) & (shared_fifo.ll.count[0_1] >= 3_3) -> (ll_to_cpf[next_ptr[cpf_to_ll[rdPtr+1_2]]] = rdPtr+2_2) & (shared_fifo.ll.count[0_1] >= 4_3) -> (ll_to_cpf[next_ptr[cpf_to_ll[rdPtr+2_2]]] = rdPtr+3_2) & (free_list_count >= 2_3) -> free_list_to_ptr[next_ptr[ptr_to_free_list[free_list_rdPtr[0:1]]]] = free_list_rdPtr[0:1]+1_2 & (free_list_count >= 3_3) -> free_list_to_ptr[next_ptr[ptr_to_free_list[free_list_rdPtr[0:1]+1_2]]] = free_list_rdPtr[0:1]+2_2 & (free_list_count >= 4_3) -> free_list_to_ptr[next_ptr[ptr_to_free_list[free_list_rdPtr[0:1]+2_2]]] = free_list_rdPtr[0:1]+3_2 & (shared_fifo.ll.count[0_1] >= 1_3) -> (f(cpf_to_ll[rdPtr]) = 0_3) & (shared_fifo.ll.count[0_1] >= 2_3) -> (f(cpf_to_ll[rdPtr+1_2]) = 3_3) & (shared_fifo.ll.count[0_1] >= 3_3) -> (f(cpf_to_ll[rdPtr+2_2]) = 3_3) & (shared_fifo.ll.count[0_1] >= 4_3) -> (f(cpf_to_ll[rdPtr+3_2]) = 3_3) & (free_list_count >= 1_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]]) = 4_3) & (free_list_count >= 2_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]+1_2]) = 5_3) & (free_list_count >= 3_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]+2_2]) = 6_3) & (free_list_count >= 4_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]+3_2]) = 7_3))

# # rdPtr maps to head
# (cpempty = 0_1) -> (cpf_to_ll[rdPtr] = shared_fifo.ll.head[0_1]) & (ll_to_cpf[shared_fifo.ll.head[0_1]] = rdPtr)

# # wrPtr maps to tail
# (cpempty = 0_1) -> (cpf_to_ll[wrPtr] = 'shared_fifo.ll.tail[0]') & (ll_to_cpf['shared_fifo.ll.tail[0]'] = wrPtr)

# # identity maps for FIFO 0
# (shared_fifo.ll.count[0_1] >= 1_3) -> (ll_to_cpf[cpf_to_ll[rdPtr]] = rdPtr)
# (shared_fifo.ll.count[0_1] >= 2_3) -> (ll_to_cpf[cpf_to_ll[rdPtr+1_2]] = rdPtr+1_2)
# (shared_fifo.ll.count[0_1] >= 3_3) -> (ll_to_cpf[cpf_to_ll[rdPtr+2_2]] = rdPtr+2_2)
# (shared_fifo.ll.count[0_1] >= 4_3) -> (ll_to_cpf[cpf_to_ll[rdPtr+3_2]] = rdPtr+3_2)

# # identity maps for free list
# (free_list_count >= 1_3) -> (free_list_to_ptr[ptr_to_free_list[free_list_rdPtr[0:1]]] = free_list_rdPtr[0:1])
# (free_list_count >= 2_3) -> (free_list_to_ptr[ptr_to_free_list[free_list_rdPtr[0:1]+1_2]] = free_list_rdPtr[0:1]+1_2)
# (free_list_count >= 3_3) -> (free_list_to_ptr[ptr_to_free_list[free_list_rdPtr[0:1]+2_2]] = free_list_rdPtr[0:1]+2_2)
# (free_list_count >= 4_3) -> (free_list_to_ptr[ptr_to_free_list[free_list_rdPtr[0:1]+3_2]] = free_list_rdPtr[0:1]+3_2)

# # next_ptr maps for FIFO 0
# (shared_fifo.ll.count[0_1] >= 2_3) -> (ll_to_cpf[next_ptr[cpf_to_ll[rdPtr]]] = rdPtr+1_2)
# (shared_fifo.ll.count[0_1] >= 3_3) -> (ll_to_cpf[next_ptr[cpf_to_ll[rdPtr+1_2]]] = rdPtr+2_2)
# (shared_fifo.ll.count[0_1] >= 4_3) -> (ll_to_cpf[next_ptr[cpf_to_ll[rdPtr+2_2]]] = rdPtr+3_2)

# # next_ptr maps for free list
# (free_list_count >= 2_3) -> free_list_to_ptr[next_ptr[ptr_to_free_list[free_list_rdPtr[0:1]]]] = free_list_rdPtr[0:1]+1_2
# (free_list_count >= 3_3) -> free_list_to_ptr[next_ptr[ptr_to_free_list[free_list_rdPtr[0:1]+1_2]]] = free_list_rdPtr[0:1]+2_2
# (free_list_count >= 4_3) -> free_list_to_ptr[next_ptr[ptr_to_free_list[free_list_rdPtr[0:1]+2_2]]] = free_list_rdPtr[0:1]+3_2

# # will probably need distinctness of free list from existing allocated lists
# # it's possible we could do this by stacking them in one array (but it would be expensive to maintain the invariants that the two are packed together in the array without overlapping or gaps)

# # distinctness using UF
# # identity maps for FIFO 0
# (shared_fifo.ll.count[0_1] >= 1_3) -> (f(cpf_to_ll[rdPtr]) = 0_3)
# (shared_fifo.ll.count[0_1] >= 2_3) -> (f(cpf_to_ll[rdPtr+1_2]) = 3_3)
# (shared_fifo.ll.count[0_1] >= 3_3) -> (f(cpf_to_ll[rdPtr+2_2]) = 3_3)
# (shared_fifo.ll.count[0_1] >= 4_3) -> (f(cpf_to_ll[rdPtr+3_2]) = 3_3)

# # identity maps for free list
# (free_list_count >= 1_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]]) = 4_3)
# (free_list_count >= 2_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]+1_2]) = 5_3)
# (free_list_count >= 3_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]+2_2]) = 6_3)
# (free_list_count >= 4_3) -> (f(ptr_to_free_list[free_list_rdPtr[0:1]+3_2]) = 7_3)
