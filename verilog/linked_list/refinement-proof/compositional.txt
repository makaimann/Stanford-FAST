# For now, this uses the compositional branch of CoSA -- not merged yet
[GENERAL]
model_files: verif.vlist[top],reset.ets,global-assumptions.ssts
abstract_clock: True
vcd: True
assume_if_true: True

[DEFAULT]
bmc_length: 1
solver_name: btor

[COMPOSITIONAL]
description: "Check the following properties compositionally"
properties: (empty[0:0] = 0_1) -> ghost[shared_fifo.ll.head[0_1]] = 0_4;
            (empty[1:1] = 0_1) -> ghost[shared_fifo.ll.head[1_1]] = 4_4 ;
            (full = 0_1) -> ghost[shared_fifo.ll.free_list_head] = 8_4 ;
            (empty[0:0] = 0_1) -> (ghost[shared_fifo.ll.tail[0_1]][2:3] = 0_2);
            (empty[1:1] = 0_1) -> (ghost[shared_fifo.ll.tail[1_1]][2:3] = 1_2);
            (full = 0_1) -> (ghost[shared_fifo.ll.free_list_tail][2:3] = 2_2);
            (empty[0:0] = 0_1) -> (ghost[shared_fifo.ll.tail[0_1]][0:1] = (shared_fifo.ll.count[0_1][0:1] - 1_2));
            (empty[1:1] = 0_1) -> (ghost[shared_fifo.ll.tail[1_1]][0:1] = (shared_fifo.ll.count[1_1][0:1] - 1_2));
            (full = 0_1) -> (ghost[shared_fifo.ll.free_list_tail][0:1] = (free_list_count[0:1] - 1_2));
            (((((A.value != shared_fifo.ll.free_list_tail) | (full = 1_1)) &
               ((A.value != shared_fifo.ll.tail[0_1]) | (empty[0:0] = 1_1)) &
               ((A.value != shared_fifo.ll.tail[1_1]) | (empty[1:1] = 1_1))) ->
               ((ghost[shared_fifo.ll.next_ptr[A.value]][0:1] = (ghost[A.value][0:1] + 1_2)) &
               (ghost[shared_fifo.ll.next_ptr[A.value]][2:3] = ghost[A.value][2:3]) &
               (ghost[A.value][0:1] != 3_2))) &
              ((ghost[A.value][0:1] = 0_2) -> (((A.value = shared_fifo.ll.head[0_1]) & (empty[0:0] = 0_1)) |
                                               ((A.value = shared_fifo.ll.head[1_1]) & (empty[1:1] = 0_1)) |
                                               ((A.value = shared_fifo.ll.free_list_head) & (full = 0_1)))))
generators: A=Random(shared_fifo.ll.free_list_head)
precondition: reset_done
verification: compositional
prove: True
